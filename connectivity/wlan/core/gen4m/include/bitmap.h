/* SPDX-License-Identifier: BSD-2-Clause */
/*
 * Copyright (c) 2021 MediaTek Inc.
 */

/*
 ** Id: //Department/DaVinci/BRANCHES/
 *      MT6620_WIFI_DRIVER_V2_3/include/bitmap.h#1
 */

/*! \file   bitmap.h
 *    \brief  Definition for singly bitmap operations.
 *
 *    In this file we define the bitmap operation MACROs.
 */

#ifndef _BITMAP_H
#define _BITMAP_H

/*******************************************************************************
 *                         C O M P I L E R   F L A G S
 *******************************************************************************
 */

/*******************************************************************************
 *                    E X T E R N A L   R E F E R E N C E S
 *******************************************************************************
 */
#include "gl_typedef.h"

/*******************************************************************************
 *                              C O N S T A N T S
 *******************************************************************************
 */

/*******************************************************************************
 *                             D A T A   T Y P E S
 *******************************************************************************
 */

/*******************************************************************************
 *                            P U B L I C   D A T A
 *******************************************************************************
 */

/*******************************************************************************
 *                           P R I V A T E   D A T A
 *******************************************************************************
 */

/*******************************************************************************
 *                                 M A C R O S
 *******************************************************************************
 */

#define BITS_TO_UINT32(b) ((b + 31) / 32)

/**
 * declare an array named '_name' of just enough uint32_t to
 * contain all bit positions from 0 to 'bits' - 1.
 */
#define DECLARE_BITS(_name, bits) \
	uint32_t _name[BITS_TO_UINT32(bits)]

/**
 * check if bit _n is set in the bitmap
 */
#define IS_SET_BITMAP(_bm, _n) ((_bm)[_n / 32] & (BIT(_n % 32)))

/**
 * set bit _n in the bitmap
 */
#define SET_BITMAP(_bm, _n) ((_bm)[_n / 32] |= (BIT(_n % 32)))

/**
 * set bits [_m, _n] in the bitmap
 */
#define SET_BITMAP_RANGE(_bm, _m, _n) \
	do { \
		uint8_t i; \
		if (_m <= _n) { \
			for (i = _m; i <= _n; i++) \
				SET_BITMAP(_bm, i); \
		} \
	} while (0)

/**
 * clear bit _n in the bitmap
 */
#define CLR_BITMAP(_bm, _n) ((_bm)[_n / 32] &= ~(BIT(_n % 32)))

/**
 * reset the bitmap
 */
#define RESET_BITMAP(_bm) (kalMemSet(_bm, sizeof(_bm)))
/*******************************************************************************
 *                            E X T E R N A L  D A T A
 *******************************************************************************
 */

/*******************************************************************************
 *                  F U N C T I O N   D E C L A R A T I O N S
 *******************************************************************************
 */

/*******************************************************************************
 *                              F U N C T I O N S
 *******************************************************************************
 */

#endif /* _BITMAP_H */
