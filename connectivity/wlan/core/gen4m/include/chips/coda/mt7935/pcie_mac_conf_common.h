/* SPDX-License-Identifier: BSD-2-Clause */
//[File]            : pcie_mac_conf_common.h
//[Revision time]   : Thu Nov  9 10:05:52 2023
//[Description]     : This file is auto generated by CODA
//[Copyright]       : Copyright (C) 2023 Mediatek Incorportion. All rights reserved.

#ifndef __PCIE_MAC_CONF_COMMON_REGS_H__
#define __PCIE_MAC_CONF_COMMON_REGS_H__

#include "hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif


//****************************************************************************
//
//                     PCIE_MAC_CONF_COMMON CR Definitions                     
//
//****************************************************************************

#define PCIE_MAC_CONF_COMMON_BASE                              0x74041000u

#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x040u) // 1028
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x044u) // 102C
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x048u) // 1030
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x04Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x050u) // 1032
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x054u) // 1036
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x058u) // 103A
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x05Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x060u) // 103C
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x064u) // 1040
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x068u) // 1044
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x06Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x070u) // 1046
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x074u) // 104A
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x078u) // 104E
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x07Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x080u) // 1050
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x084u) // 1054
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x088u) // 1058
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x08Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x090u) // 105A
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x094u) // 105E
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x098u) // 1062
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x09Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x0A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x0A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR        (PCIE_MAC_CONF_COMMON_BASE + 0x0ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR    (PCIE_MAC_CONF_COMMON_BASE + 0x0B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x0B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_0_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x0B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0C0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0C4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0C8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0CCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x0D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x0D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x0D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0DCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x0E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x0E8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x0ECu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x0F0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x0F4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0F8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x0FCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_ADDR   (PCIE_MAC_CONF_COMMON_BASE + 0x100u) // 1064
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_ADDR   (PCIE_MAC_CONF_COMMON_BASE + 0x104u) // 1068
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x108u) // 106C
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x10Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x110u) // 106E
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x114u) // 1072
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x118u) // 1076
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x11Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x120u) // 1078
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x124u) // 107C
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x128u) // 1080
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x12Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x130u) // 1082
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x134u) // 1086
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x138u) // 108A
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x13Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x140u) // 108C
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x144u) // 1090
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP3_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x148u) // 1094
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP4_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x14Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP5_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x150u) // 1096
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP6_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x154u) // 109A
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP7_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x158u) // 109E
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP8_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x15Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP9_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x160u) // 10A0
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP10_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x164u) // 10A4
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP11_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x168u) // 10A8
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP12_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x16Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP13_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x170u) // 10AA
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP14_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x174u) // 10AE
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP15_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x178u) // 10B2
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP16_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x17Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x180u) // 10B4
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x184u) // 10B8
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x188u) // 10BC
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x18Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x190u) // 10BE
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x194u) // 10C2
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x198u) // 10C6
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x19Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x1A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x1A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x1A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x1ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x1B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x1B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x1B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x1BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1C0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1C4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1C8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1CCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x1D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x1D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x1D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x1E8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x200u) // 10C8
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR        (PCIE_MAC_CONF_COMMON_BASE + 0x204u) // 10CC
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x208u) // 10D0
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x20Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x210u) // 10D2
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x214u) // 10D6
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x218u) // 10DA
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x21Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x220u) // 10DC
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x224u) // 10E0
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x228u) // 10E4
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x22Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x230u) // 10E6
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x234u) // 10EA
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x238u) // 10EE
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x23Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x240u) // 10F0
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x244u) // 10F4
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x250u) // 10FA
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x254u) // 10FE
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x258u) // 1102
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x25Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x2D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x2D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x2D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x2DCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x2E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_0_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x2E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x2F0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x2F4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x2F8u) // 1000
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x300u) // 112C
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x304u) // 1130
#define PCIE_MAC_CONF_COMMON_LANE_ERR_STATUS_G3_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x308u) // 1134
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x30Cu) // 1000
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x310u) // 1136
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x314u) // 113A
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x318u) // 113E
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x31Cu) // 1000
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x320u) // 1140
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x324u) // 1144
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x328u) // 1148
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x340u) // 1154
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP2_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x344u) // 1158
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP3_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x348u) // 115C
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x34Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PL_16G_DP_STS_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x350u) // 115E
#define PCIE_MAC_CONF_COMMON_PL_16G_FR_DP_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x354u) // 1162
#define PCIE_MAC_CONF_COMMON_PL_16G_SR_DP_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x358u) // 1166
#define PCIE_MAC_CONF_COMMON_PL_16G_RSVD_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x35Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x360u) // 1168
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x364u) // 116C
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x368u) // 1170
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x36Cu) // 1000
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_ADDR                    (PCIE_MAC_CONF_COMMON_BASE + 0x378u) // 117A
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_ADDR                    (PCIE_MAC_CONF_COMMON_BASE + 0x37Cu) // 1000
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x380u) // 117C
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x384u) // 1180
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x388u) // 1184
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x38Cu) // 1000
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x390u) // 1186
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x394u) // 118A
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x398u) // 118E
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR                   (PCIE_MAC_CONF_COMMON_BASE + 0x39Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x400u) // 1190
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x480u) // 11E0
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_0_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x484u) // 11E4
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x488u) // 11E8
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_0_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x48Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x490u) // 11EA
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x494u) // 11EE
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x498u) // 11F2
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x49Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x4A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x4A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x4A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_0_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x4ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_0_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x4B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_0_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x4B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_0_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x4B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_0_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x4BCu) // 1000
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x600u) // 1258
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x604u) // 125C
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x608u) // 1260
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x60Cu) // 1000
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x610u) // 1262
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x614u) // 1266
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x618u) // 126A
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x61Cu) // 1000
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x620u) // 126C
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x624u) // 1270
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x628u) // 1274
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x62Cu) // 1000
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x630u) // 1276
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x634u) // 127A
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x638u) // 127E
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x63Cu) // 1000
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x640u) // 1280
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x644u) // 1284
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x648u) // 1288
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x64Cu) // 1000
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x650u) // 128A
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x654u) // 128E
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x658u) // 1292
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x65Cu) // 1000
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x660u) // 1294
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR                  (PCIE_MAC_CONF_COMMON_BASE + 0x664u) // 1298
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x668u) // 129C
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x66Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008040u) // 2F68
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008044u) // 2F6C
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008048u) // 2F70
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x0000804Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008050u) // 2F72
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008054u) // 2F76
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008058u) // 2F7A
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x0000805Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008060u) // 2F7C
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008064u) // 2F80
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008068u) // 2F84
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0000806Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008070u) // 2F86
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008074u) // 2F8A
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008078u) // 2F8E
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0000807Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008080u) // 2F90
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00008084u) // 2F94
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x00008088u) // 2F98
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x0000808Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x00008090u) // 2F9A
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008094u) // 2F9E
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008098u) // 2FA2
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0000809Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000080A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000080A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR        (PCIE_MAC_CONF_COMMON_BASE + 0x000080ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR    (PCIE_MAC_CONF_COMMON_BASE + 0x000080B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000080B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_1_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000080B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080C0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080C4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080C8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080CCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000080D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000080D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000080D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080DCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x000080E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000080E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000080E8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000080ECu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000080F0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x000080F4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000080F8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000080FCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_ADDR   (PCIE_MAC_CONF_COMMON_BASE + 0x00008100u) // 2FA4
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_ADDR   (PCIE_MAC_CONF_COMMON_BASE + 0x00008104u) // 2FA8
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008120u) // 2FB8
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008124u) // 2FBC
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008128u) // 2FC0
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x0000812Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008130u) // 2FC2
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008134u) // 2FC6
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00008138u) // 2FCA
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x0000813Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008180u) // 2FF4
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008184u) // 2FF8
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008188u) // 2FFC
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0000818Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008190u) // 2FFE
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008194u) // 3002
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008198u) // 3006
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0000819Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000081A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000081A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000081A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000081ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000081B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000081B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000081B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000081BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081C0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081C4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081C8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081CCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000081E8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x00008200u) // 3008
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR        (PCIE_MAC_CONF_COMMON_BASE + 0x00008204u) // 300C
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00008208u) // 3010
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x0000820Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x00008210u) // 3012
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00008214u) // 3016
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008218u) // 301A
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0000821Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00008220u) // 301C
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00008224u) // 3020
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00008228u) // 3024
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0000822Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00008230u) // 3026
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008234u) // 302A
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00008238u) // 302E
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0000823Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00008240u) // 3030
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00008244u) // 3034
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000082D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000082D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000082D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000082DCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000082E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_1_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000082E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000082F0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x000082F4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x000082F8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x00008480u) // 3120
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_1_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x00008484u) // 3124
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00008488u) // 3128
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_1_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0000848Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008490u) // 312A
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008494u) // 312E
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00008498u) // 3132
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x0000849Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000084A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000084A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000084A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_1_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000084ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_1_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x000084B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_1_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x000084B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_1_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000084B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_1_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000084BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010040u) // 3738
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010044u) // 373C
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010048u) // 3740
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x0001004Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010050u) // 3742
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010054u) // 3746
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010058u) // 374A
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x0001005Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010060u) // 374C
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010064u) // 3750
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010068u) // 3754
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0001006Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010070u) // 3756
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010074u) // 375A
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010078u) // 375E
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0001007Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010080u) // 3760
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00010084u) // 3764
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x00010088u) // 3768
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x0001008Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x00010090u) // 376A
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010094u) // 376E
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010098u) // 3772
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0001009Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000100A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000100A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR        (PCIE_MAC_CONF_COMMON_BASE + 0x000100ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR    (PCIE_MAC_CONF_COMMON_BASE + 0x000100B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000100B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_2_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000100B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100C0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100C4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100C8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100CCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000100D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000100D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000100D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100DCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x000100E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000100E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000100E8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000100ECu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000100F0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x000100F4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000100F8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x000100FCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_ADDR   (PCIE_MAC_CONF_COMMON_BASE + 0x00010100u) // 3774
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_ADDR   (PCIE_MAC_CONF_COMMON_BASE + 0x00010104u) // 3778
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010120u) // 3788
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010124u) // 378C
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010128u) // 3790
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x0001012Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010130u) // 3792
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010134u) // 3796
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x00010138u) // 379A
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x0001013Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010180u) // 37C4
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010184u) // 37C8
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010188u) // 37CC
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0001018Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010190u) // 37CE
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010194u) // 37D2
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010198u) // 37D6
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0001019Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000101A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000101A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000101A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000101ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000101B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000101B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000101B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x000101BCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101C0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101C4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101C8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101CCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_ADDR              (PCIE_MAC_CONF_COMMON_BASE + 0x000101E8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x00010200u) // 37D8
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR        (PCIE_MAC_CONF_COMMON_BASE + 0x00010204u) // 37DC
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00010208u) // 37E0
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR      (PCIE_MAC_CONF_COMMON_BASE + 0x0001020Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x00010210u) // 37E2
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00010214u) // 37E6
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010218u) // 37EA
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x0001021Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00010220u) // 37EC
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00010224u) // 37F0
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x00010228u) // 37F4
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x0001022Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x00010230u) // 37F6
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010234u) // 37FA
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00010238u) // 37FE
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0001023Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00010240u) // 3800
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00010244u) // 3804
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000102D0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000102D4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000102D8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000102DCu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000102E0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_2_ADDR            (PCIE_MAC_CONF_COMMON_BASE + 0x000102E4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_ADDR           (PCIE_MAC_CONF_COMMON_BASE + 0x000102F0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x000102F4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x000102F8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x00010480u) // 38F0
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_2_ADDR       (PCIE_MAC_CONF_COMMON_BASE + 0x00010484u) // 38F4
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x00010488u) // 38F8
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_2_ADDR          (PCIE_MAC_CONF_COMMON_BASE + 0x0001048Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010490u) // 38FA
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010494u) // 38FE
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x00010498u) // 3902
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ADDR             (PCIE_MAC_CONF_COMMON_BASE + 0x0001049Cu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000104A0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000104A4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000104A8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_2_ADDR         (PCIE_MAC_CONF_COMMON_BASE + 0x000104ACu) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_2_ADDR               (PCIE_MAC_CONF_COMMON_BASE + 0x000104B0u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_2_ADDR                (PCIE_MAC_CONF_COMMON_BASE + 0x000104B4u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_2_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000104B8u) // 1000
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_2_ADDR     (PCIE_MAC_CONF_COMMON_BASE + 0x000104BCu) // 1000




/* =====================================================================================

  ---PCIE_CONF_AS_0_0 (0x74041000 + 040hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_1_0 (0x74041000 + 044hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_2_0 (0x74041000 + 048hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_3_0 (0x74041000 + 04Chu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_4_0 (0x74041000 + 050hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_5_0 (0x74041000 + 054hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_6_0 (0x74041000 + 058hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_7_0 (0x74041000 + 05Chu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_8_0 (0x74041000 + 060hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_9_0 (0x74041000 + 064hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_10_0 (0x74041000 + 068hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_0_RSVD_ADDR       PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_0_RSVD_MASK       0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_0_RSVD_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_11_0 (0x74041000 + 06Chu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_0_RSVD_ADDR       PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_0_RSVD_MASK       0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_0_RSVD_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_12_0 (0x74041000 + 070hu)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_0_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_0_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_0_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_13_0 (0x74041000 + 074hu)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_0_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_0_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_0_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_14_0 (0x74041000 + 078hu)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_0_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_0_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_0_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_15_0 (0x74041000 + 07Chu)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_0_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_0_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_0_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_CAP_0 (0x74041000 + 080hu)---

    Pex_Cap_id[7..0]             - (RO) Capability ID
                                     This field must return a Capability ID of 10h indicating that this is a PCI Express Capability structure.
    Pex_Next_Ptr[15..8]          - (RO) Next Capability Pointer
                                     This field contains the offset to the next PCI Capability structure.
    Pex_Cap_Version[19..16]      - (RO) Capability Version
                                     Indicates PCI-SIG defined PCI Express Capability structure version number.
    Pex_Dev_Type[23..20]         - (RO) Device Type
                                     Indicates the specific type of this PCI Express Function.
                                     Note that different Functions in a multi-Function device can generally be of different types.
                                     Defined encodings are:
                                     - 0000b: PCI Express Endpoint
                                     - 0001b: Legacy PCI Express Endpoint
                                     - 0100b: Root Port of PCI Express Root Complex*
                                     - 0101b: Upstream Port of PCI Express Switch*
                                     - 0110b: Downstream Port of PCI Express Switch*
                                     - 0111b: PCI Express to PCI/PCI-X Bridge*
                                     - 1000b: PCI/PCI-X to PCI Express Bridge*
                                     - 1001b: Root Complex Integrated Endpoint
                                     - 1010b: Root Complex Event Collector
                                     *This value is only valid for Functions that implement a Type 01h PCI Configuration Space header.
                                     All other encodings are Reserved.
    Pex_Slot_Imp[24]             - (RO) Slot Implemented
                                     When Set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled).
                                     This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.
    Pex_Msi_Num[29..25]          - (RO) Interrupt Message Number
                                     This field indicates which MSI vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.
                                     For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated.
                                     Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    RSVD[31..30]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_RSVD_MASK         0xC0000000u                // RSVD[31..30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_RSVD_SHFT         30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Msi_Num_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Msi_Num_MASK  0x3E000000u                // Pex_Msi_Num[29..25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Msi_Num_SHFT  25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Slot_Imp_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Slot_Imp_MASK 0x01000000u                // Pex_Slot_Imp[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Slot_Imp_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Dev_Type_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Dev_Type_MASK 0x00F00000u                // Pex_Dev_Type[23..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Dev_Type_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Cap_Version_MASK 0x000F0000u                // Pex_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Next_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Next_Ptr_MASK 0x0000FF00u                // Pex_Next_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Next_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Cap_id_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Cap_id_MASK   0x000000FFu                // Pex_Cap_id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_0_Pex_Cap_id_SHFT   0u

/* =====================================================================================

  ---PCIE_CONF_DEV_CAP_0 (0x74041000 + 084hu)---

    Dcr_Max_Payload_Sup[2..0]    - (RO) Max Payload Size Supported
                                     This field indicates the maximum payload size that the Function can support for TLPs.
                                     Defined encodings are:
                                     - 000b: 128 bytes max payload size
                                     - 001b: 256 bytes max payload size
                                     - 010b: 512 bytes max payload size
                                     - 011b: 1024 bytes max payload size
                                     - 100b: 2048 bytes max payload size
                                     - 101b: 4096 bytes max payload size
                                     - otherwise: Reserved
                                     The Functions of a multi-Function device are permitted to report different values for this field.
    Dcr_Ph_Fun_Sup[4..3]         - (RO) Phantom Functions Supported
                                     This field indicates the support for use of unclaimed Function Numbers to extend the number of outstanding transactions allowed by logically combining unclaimed Function Numbers (called Phantom Functions) with the Tag identifier.
                                     With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI multi-Function devices.
                                     This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
                                     
                                     Defined encodings are:
                                     - 00b: No Function Number bits are used for Phantom Functions. Multi-Function devices are permitted to implement up to 8 independent Functions.
                                     - 01b: The most significant bit of the Function number in Requester ID is used for Phantom Functions; a multi-Function device is permitted to implement Functions 0-3. Functions 0, 1, 2, and 3 are permitted to use Function Numbers 4, 5, 6, and 7 respectively as Phantom Functions.
                                     - 10b: The two most significant bits of Function Number in Requester ID are used for Phantom Functions; a multi-Function device is permitted to implement Functions 0-1. Function 0 is permitted to use Function Numbers 2, 4, and 6 for Phantom Functions. Function 1 is permitted to use Function Numbers 3, 5, and 7 as Phantom Functions.
                                     - 11b: All 3 bits of Function Number in Requester ID used for Phantom Functions. The device must have a single Function 0 that is permitted to use all other Function Numbers as Phantom Functions.
                                     
                                     Note that Phantom Function support for the Function must be enabled by the Phantom Functions Enable field in the Device Control register before the Function is permitted to use the
                                     Function Number field in the Requester ID for Phantom Functions.
    Dcr_Ext_Tag_Sup[5]           - (RO) Extended Tag Filed Supported
                                     This bit indicates the maximum supported size of the Tag field as a Requester.
                                     Defined encodings are:
                                     - 0b: 5-bit Tag field supported
                                     - 1b: 8-bit Tag field supported
                                     
                                     Note that 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Control register of the Requester Function before 8-bit Tags can be generated by the Requester.
    Dcr_L0s_Acceptable_Lat[8..6] - (RO) Endpoint L0s Acceptable Latency
                                     This field indicates the acceptable total latency that an Endpoint can withstand due to the transition from L0s state to the L0 state. It is essentially an indirect measure of the Endpoints internal buffering.
                                     Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L0s entry can be used with no loss of performance.
                                     
                                     Defined encodings are:
                                     - 000b: Maximum of 64 ns
                                     - 001b: Maximum of 128 ns
                                     - 010b: Maximum of 256 ns
                                     - 011b: Maximum of 512 ns
                                     - 100b: Maximum of 1 us
                                     - 101b: Maximum of 2 us
                                     - 110b: Maximum of 4 us
                                     - 111b: No limit
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 000b.
    Dcr_L1_Acceptable_Lat[11..9] - (RO) Endpoint L1 Acceptable Latency
                                     This field indicates the acceptable latency that an Endpoint can withstand due to the transition from L1 state to the L0 state. It is essentially an indirect measure of the Endpoints internal buffering.
                                     Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L1 entry can be used with no loss of performance.
                                     
                                     Defined encodings are:
                                     - 000b: Maximum of 1 us
                                     - 001b: Maximum of 2 us
                                     - 010b: Maximum of 4 us
                                     - 011b: Maximum of 8 us
                                     - 100b: Maximum of 16 us
                                     - 101b: Maximum of 32 us
                                     - 110b: Maximum of 64 us
                                     - 111b: No limit
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 000b.
    Undefined[14..12]            - (RO) Undefined
    Dcr_Rbe_Rpt[15]              - (RO) Role Based Error Reporting
                                     When Set, this bit indicates that the Function implements the functionality originally defined in the Error Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1.
                                     
                                     This bit must be Set by all Functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.
    RSVD1[17..16]                - (RO) Reserved
    Dcr_Slot_Pwr[25..18]         - (RO) Captured Slot Power Limit Value
                                     In combination with the Captured Slot Power Limit Scale value, specifies the upper limit on power available to the adapter. 
                                     Power limit (in Watts) is calculated by multiplying the value in this field by the value in the Captured Slot Power Limit Scale field except when the Captured Slot Power Limit Scale field equals 00b (1.0x) and the Captured Slot Power Limit Value exceeds EFh, then alternative encodings are used.
                                     
                                     This value is set by the Set_Slot_Power_Limit Message or hardwired to 00h.
                                     The default value is 00h.
    Dcr_Slot_Pwr_Scale[27..26]   - (RO) Captured Slot Power Limit Scale
                                     Specifies the scale used for the Slot Power Limit Value.
                                     Range of Values:
                                     - 00b: 1.0x
                                     - 01b: 0.1x
                                     - 10b: 0.01x
                                     - 11b: 0.001x
                                     This value is set by the Set_Slot_Power_Limit Message or hardwired to 00b.
                                     The default value is 00b.
    Dcr_Flr[28]                  - (RO) Function Level Reset Capability
                                     A value of 1b indicates the Function supports the optional Function Level Reset mechanism.
                                     This bit applies to Endpoints only. For all other Function types this bit must be hardwired to 0b.
    RSVD2[31..29]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_RSVD2_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_RSVD2_MASK    0xE0000000u                // RSVD2[31..29]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_RSVD2_SHFT    29u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Flr_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Flr_MASK  0x10000000u                // Dcr_Flr[28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Flr_SHFT  28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Slot_Pwr_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Slot_Pwr_Scale_MASK 0x0C000000u                // Dcr_Slot_Pwr_Scale[27..26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Slot_Pwr_Scale_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Slot_Pwr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Slot_Pwr_MASK 0x03FC0000u                // Dcr_Slot_Pwr[25..18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Slot_Pwr_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_RSVD1_MASK    0x00030000u                // RSVD1[17..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_RSVD1_SHFT    16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Rbe_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Rbe_Rpt_MASK 0x00008000u                // Dcr_Rbe_Rpt[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Rbe_Rpt_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Undefined_MASK 0x00007000u                // Undefined[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Undefined_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_L1_Acceptable_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_L1_Acceptable_Lat_MASK 0x00000E00u                // Dcr_L1_Acceptable_Lat[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_L1_Acceptable_Lat_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_L0s_Acceptable_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_L0s_Acceptable_Lat_MASK 0x000001C0u                // Dcr_L0s_Acceptable_Lat[8..6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_L0s_Acceptable_Lat_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Ext_Tag_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Ext_Tag_Sup_MASK 0x00000020u                // Dcr_Ext_Tag_Sup[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Ext_Tag_Sup_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Ph_Fun_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Ph_Fun_Sup_MASK 0x00000018u                // Dcr_Ph_Fun_Sup[4..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Ph_Fun_Sup_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Max_Payload_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Max_Payload_Sup_MASK 0x00000007u                // Dcr_Max_Payload_Sup[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_0_Dcr_Max_Payload_Sup_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV_CTL_STS_0 (0x74041000 + 088hu)---

    Dcr_Cor_Rpt[0]               - (RW) Correctable Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_COR Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Nfat_Rpt[1]              - (RW) Non-Fatal Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_NONFATAL Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Fat_Rpt[2]               - (RW) Fatal Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_FATAL Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Ur_Rpt[3]                - (RW) Unsupported Request Reporting Enable
                                     This bit, in conjunction with other bits, controls the signaling of Unsupported
                                     Request Errors by sending error Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_RO[4]                    - (RW) Enable Relaxed Ordering
                                     If this bit is Set, the Function is permitted to set the Relaxed Ordering bit in the Attributes field of transactions it initiates that do not require strong write ordering.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the Relaxed Ordering attribute in transactions it initiates as a Requester.
                                     
                                     Default value of this bit is 1b.
    Dcr_Max_Payload[7..5]        - (RW) Max Payload Size
                                     This field sets maximum TLP payload size for the Function. As a Receiver, the Function must handle TLPs as large as the set value. As a Transmitter, the Function must not generate TLPs exceeding the set value. Permissible values that can be programmed are indicated by the
                                     Max_Payload_Size Supported field in the Device Capabilities register.
                                     
                                     Defined encodings for this field are:
                                     - 000b: 128 bytes max payload size
                                     - 001b: 256 bytes max payload size
                                     - 010b: 512 bytes max payload size
                                     - 011b: 1024 bytes max payload size
                                     - 100b: 2048 bytes max payload size
                                     - 101b: 4096 bytes max payload size
                                     - 110b: Reserved
                                     - 111b: Reserved
                                     Functions that support only the 128-byte max payload size are permitted to hardwire this field to 000b.
                                     System software is not required to program the same value for this field for all the Functions of a multi-Function device.
                                     
                                     Default value of this field is 000b.
    Dcr_Ext_Tag[8]               - (RW) Extended Tag Field Enable
                                     When Set, this bit enables a Function to use an 8-bit Tag field as a Requester.
                                     If the bit is Clear, the Function is restricted to a 5-bit Tag field.
    Dcr_Ph_Fun[9]                - (RO) Phantom Functions Enable
                                     When Set, this bit enables a Function to use unclaimed Functions as Phantom Functions to extend the number of outstanding transaction identifiers.
                                     If the bit is Clear, the Function is not allowed to use Phantom Functions.
                                     
                                     Default value of this bit is 0b
    Dcr_Aux_PM[10]               - (RW) Aux Power PM Enable
                                     When Set this bit, enables a Function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements.
                                     Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Control/Status register (PMCSR).
                                     For multi-Function devices, a component is allowed to draw Aux power if at least one of the Functions has this bit set.
                                     
                                     Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such Functions, this bit is not modified by Conventional Reset.
    Dcr_No_Snoop[11]             - (RW) Enable No Snoop
                                     If this bit is Set, the Function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency.
                                     Note that setting this bit to 1b should not cause a Function to Set the No Snoop attribute on all
                                     transactions that it initiates.
                                     Even when this bit is Set, a Function is only permitted to Set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.
                                     
                                     Default value of this bit is 1b.
    Dcr_Max_Read_Request[14..12] - (RW) Max Read Request Size
                                     This field sets the maximum Read Request size for the Function as a Requester. The Function must not generate Read Requests with a size exceeding the set value.
                                     
                                     Defined encodings for this field are:
                                     - 000b: 128 bytes maximum Read Request size
                                     - 001b: 256 bytes maximum Read Request size
                                     - 010b: 512 bytes maximum Read Request size
                                     - 011b: 1024 bytes maximum Read Request size
                                     - 100b: 2048 bytes maximum Read Request size
                                     - 101b: 4096 bytes maximum Read Request size
                                     - 110b: Reserved
                                     - 111b: Reserved
                                     
                                     Functions that do not generate Read Requests larger than 128 bytes and Functions that do not generate Read Requests on their own behalf are permitted to implement this field as Read Only (RO) with a value of 000b.
    Ep_Flr[15]                   - (RW) Bridge Configuration Retry Enable
                                     PCI Express to PCI/PCI-X Bridges:
                                     Bridge Configuration Retry Enable - When Set, this bit enables PCI Express to PCI/PCI-X bridges to return Configuration Request Retry Status (CRS) in response to Configuration Requests that target devices below the bridge. Refer to the PCI Express to PCI/PCI-X Bridge Specification, Revision 1.0 for further details.
                                     Endpoints with Function Level Reset Capability set to 1b:
                                     Initiate Function Level Reset - A write of 1b initiates Function Level Reset to the Function.
                                     All others:
                                     Reserved - Must hardwire the bit to 0b.
    Dsr_Cor_Det[16]              - (W1C) Correctable Error Detected
                                     This bit indicates status of correctable errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Correctable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Nfat_Det[17]             - (W1C) Non Fatal Error Detected
                                     This bit indicates status of Nonfatal errors detected. Errors are logged in this register
                                     regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each
                                     Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Fat_Det[18]              - (W1C) Fatal-Error Detected
                                     This bit indicates status of Fatal errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Ur_Det[19]               - (W1C) Unsupported Request Detected
                                     This bit indicates that the Function received an Unsupported Request. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dsr_Aux_Det[20]              - (RO) AUX Power Detected
                                     Functions that require Aux power report this bit as Set if Aux power is detected by the Function.
    Dsr_Trn_Pending[21]          - (RO) Transactions Pending
                                     When Set, this bit indicates that the Function has issued Non-Posted Requests that have not been completed.
                                     A Function reports this bit cleared only when all outstanding Non-Posted Requests have completed or have been terminated by the Completion Timeout mechanism.
                                     This bit must also be cleared upon the completion of an FLR.
    RSVD1[31..22]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_RSVD1_MASK 0xFFC00000u                // RSVD1[31..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_RSVD1_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Trn_Pending_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Trn_Pending_MASK 0x00200000u                // Dsr_Trn_Pending[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Trn_Pending_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Aux_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Aux_Det_MASK 0x00100000u                // Dsr_Aux_Det[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Aux_Det_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Ur_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Ur_Det_MASK 0x00080000u                // Dsr_Ur_Det[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Ur_Det_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Fat_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Fat_Det_MASK 0x00040000u                // Dsr_Fat_Det[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Fat_Det_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Nfat_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Nfat_Det_MASK 0x00020000u                // Dsr_Nfat_Det[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Nfat_Det_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Cor_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Cor_Det_MASK 0x00010000u                // Dsr_Cor_Det[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dsr_Cor_Det_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Ep_Flr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Ep_Flr_MASK 0x00008000u                // Ep_Flr[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Ep_Flr_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Max_Read_Request_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Max_Read_Request_MASK 0x00007000u                // Dcr_Max_Read_Request[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Max_Read_Request_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_No_Snoop_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_No_Snoop_MASK 0x00000800u                // Dcr_No_Snoop[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_No_Snoop_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Aux_PM_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Aux_PM_MASK 0x00000400u                // Dcr_Aux_PM[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Aux_PM_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ph_Fun_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ph_Fun_MASK 0x00000200u                // Dcr_Ph_Fun[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ph_Fun_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ext_Tag_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ext_Tag_MASK 0x00000100u                // Dcr_Ext_Tag[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ext_Tag_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Max_Payload_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Max_Payload_MASK 0x000000E0u                // Dcr_Max_Payload[7..5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Max_Payload_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_RO_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_RO_MASK 0x00000010u                // Dcr_RO[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_RO_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ur_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ur_Rpt_MASK 0x00000008u                // Dcr_Ur_Rpt[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Ur_Rpt_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Fat_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Fat_Rpt_MASK 0x00000004u                // Dcr_Fat_Rpt[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Fat_Rpt_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Nfat_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Nfat_Rpt_MASK 0x00000002u                // Dcr_Nfat_Rpt[1]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Nfat_Rpt_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Cor_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Cor_Rpt_MASK 0x00000001u                // Dcr_Cor_Rpt[0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_0_Dcr_Cor_Rpt_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK_CAP_0 (0x74041000 + 08Chu)---

    Lcr_Max_Speed[3..0]          - (RO) Max Link Speed
                                     This field indicates the maximum Link speed of the associated Port.
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: 2.5GT
                                     - 0010b: 5GT
                                     - 0011b: 8GT
                                     - 0100b: 16GT
                                     - 0101b: Reserved
                                     - 0110b: Reserved
                                     - 0111b: Reserved
                                     All other encodings are reserved.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions
    Lcr_Max_Width[9..4]          - (RO) Maximum Link Width
                                     This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes routed to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
                                     
                                     Defined encodings are:
                                     - 00 0000b: Reserved
                                     - 00 0001b: x1
                                     - 00 0010b: x2
                                     - 00 0100b: x4
                                     - 00 1000b: x8
                                     - 00 1100b: x12
                                     - 01 0000b: x16
                                     - 10 0000b: x32
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_Aspm_Sup[11..10]         - (RO) ASPM Support
                                     This field indicates the level of ASPM supported on the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00b: No ASPM Support
                                     - 01b: L0s Supported
                                     - 10b: L1 Supported
                                     - 11b: L0s and L1 Supported
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_L0s_Exit_Lat[14..12]     - (RO) L0s Exit Latency
                                     This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from L0s to L0.
                                     
                                     Defined encodings are:
                                     - 000b: Less than 64 ns
                                     - 001b: 64 ns to less than 128 ns
                                     - 010b: 128 ns to less than 256 ns
                                     - 011b: 256 ns to less than 512 ns
                                     - 100b: 512 ns to less than 1 us
                                     - 101b: 1 us to less than 2 us
                                     - 110b: 2 us-4 us
                                     - 111b: More than 4 us
                                     Note that exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_L1_Exit_Lat[17..15]      - (RO) L1 Exit Latency
                                     This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from ASPM L1 to L0.
                                     If ASPM L1 is not supported, the value is undefined.
                                     
                                     Defined encodings are:
                                     - 000b: Less than 1us
                                     - 001b: 1 us to less than 2 us
                                     - 010b: 2 us to less than 4 us
                                     - 011b: 4 us to less than 8 us
                                     - 100b: 8 us to less than 16 us
                                     - 101b: 16 us to less than 32 us
                                     - 110b: 32 us-64 us
                                     - 111b: More than 64 us
                                     Note that exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_Clock_PM_Cap[18]         - (RO) Clock Power Management
                                     For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) via the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2L3 Ready Link states.
                                     A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.
                                     This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.
                                     For a multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all Functions of the multi-Function device indicate a 1b in this bit.
                                     For ARI Devices, all Functions must indicate the same value in this bit.
    Lcr_Sup_Down_Rpt_Cap[19]     - (RO) Surprise Down Error Reporting Capable
                                     For a Downstream Port, this bit must be Set if the component supports the optional capability of detecting and reporting a Surprise Down error condition.
                                     
                                     For Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.
    Lcr_Dll_Rpt_Cap[20]          - (RO) Data Link Layer Link Active Reporting Capable
                                     For a Downstream Port, this bit must be hardwired to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Control and Management State Machine.
                                     For Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.
    Lcr_Lbw_Cap[21]              - (RO) Link Bandwidth Notification Capability
                                     A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms.
                                     This capability is required for all Root Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.
                                     This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
    Lcr_Aspm_Com[22]             - (RO) ASPM Optionally Compliance
                                     This bit must be set to 1b in all Functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.
                                     Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.
    RESERVED23[23]               - (RO) Reserved bits
    Lcr_Port_Num[31..24]         - (RO) Port Number
                                     This field indicates the PCI Express Port number for the given PCI Express Link.
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Port_Num_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Port_Num_MASK 0xFF000000u                // Lcr_Port_Num[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Port_Num_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Aspm_Com_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Aspm_Com_MASK 0x00400000u                // Lcr_Aspm_Com[22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Aspm_Com_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Lbw_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Lbw_Cap_MASK 0x00200000u                // Lcr_Lbw_Cap[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Lbw_Cap_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Dll_Rpt_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Dll_Rpt_Cap_MASK 0x00100000u                // Lcr_Dll_Rpt_Cap[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Dll_Rpt_Cap_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Sup_Down_Rpt_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Sup_Down_Rpt_Cap_MASK 0x00080000u                // Lcr_Sup_Down_Rpt_Cap[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Sup_Down_Rpt_Cap_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Clock_PM_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Clock_PM_Cap_MASK 0x00040000u                // Lcr_Clock_PM_Cap[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Clock_PM_Cap_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_L1_Exit_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_L1_Exit_Lat_MASK 0x00038000u                // Lcr_L1_Exit_Lat[17..15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_L1_Exit_Lat_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_L0s_Exit_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_L0s_Exit_Lat_MASK 0x00007000u                // Lcr_L0s_Exit_Lat[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_L0s_Exit_Lat_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Aspm_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Aspm_Sup_MASK 0x00000C00u                // Lcr_Aspm_Sup[11..10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Aspm_Sup_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Max_Width_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Max_Width_MASK 0x000003F0u                // Lcr_Max_Width[9..4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Max_Width_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Max_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Max_Speed_MASK 0x0000000Fu                // Lcr_Max_Speed[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_0_Lcr_Max_Speed_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK_CTL_STS_0 (0x74041000 + 090hu)---

    Lcr_Aspm_Ctl[1..0]           - (RW) ASPM Control
                                     This field controls the level of ASPM enabled on the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00b: Disabled
                                     - 01b: L0s Entry Enabled
                                     - 10b: L1 Entry Enabled
                                     - 11b: L0s and L1 Entry Enabled
                                     
                                     Note: L0s Entry Enabled enables the Transmitter to enter L0s.
                                     If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled from entering L0s (00b or 10b).
                                     ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link.
                                     When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the
                                     Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.
                                     
                                     For multi-Function devices (including ARI Devices), it is recommended that software program the same value for this field in all Functions. For non-ARI multi-Function devices, only capabilities enabled in all Functions are enabled for the component as a whole.
                                     
                                     Default value of this field is 00b unless otherwise required by a particular form factor.
    RSVD1[2]                     - (RO) Reserved
    Lcr_Rcb[3]                   - (RW) RCB
                                     Optionally Set by configuration software to indicate the RCB value of the Root Port Upstream from the Endpoint or Bridge.
                                     
                                     Defined encodings are:
                                     - 0b: 64 byte
                                     - 1b: 128 byte
                                     Configuration software must only Set this bit if the Root Port Upstream from the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
                                     
                                     Default value of this bit is 0b.
                                     Functions that do not implement this feature must hardwire the bit to 0b
    link_dis[4]                  - (RO) Link Disable
                                     This bit disables the Link by directing the LTSSM to the Disabled state when Set;
                                     this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream
                                     Ports of Switches.
                                     Writes to this bit are immediately reflected in the value read from the bit, regardless of actual Link state.
                                     After clearing this bit, software must honor timing requirements defined in PCIe Spec. with respect to the first Configuration Read following a Conventional Reset.
                                     Default value of this bit is 0b.
    retrain_link[5]              - (RO) Link Retrain
                                     A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. Reads of this bit always return 0b.
                                     It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in progress.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     This bit always returns 0b when read.
    Lcr_Com_clock[6]             - (RW) Common Clock Configuration
                                     When Set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.
                                     
                                     A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchronous reference clock.
                                     
                                     For non-ARI multi-Function devices, software must program the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.
                                     
                                     Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.
                                     
                                     After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.
                                     
                                     Default value of this bit is 0b.
    Lcr_Ext_Sync[7]              - (RW) Extended Synch
                                     When Set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state and when in the Recovery state.
                                     This mode provides external devices (e.g., logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.
                                     
                                     For multi-Function devices if any Function has this bit Set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.
                                     
                                     Default value for this bit is 0b.
    Lcr_Clock_PM[8]              - (RW) Enable Clock Power Management
                                     Applicable only for Upstream Ports and with form factors that support a Clock
                                     Request (CLKREQ#) mechanism, this bit operates as follows:
                                     - 0b: Clock power management is disabled and device must hold CLKREQ# signal low.
                                     - 1b: When this bit is Set, the device is permitted to use CLKREQ# signal to power manage Link clock according to protocol defined in appropriate form factor specification.
                                     
                                     For a non-ARI multi-Function device, power-management configuration software must only Set this bit if all Functions of the multi-Function device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.
                                     
                                     Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register) must hardwire this bit to 0b.
                                     
                                     Default value of this bit is 0b, unless specified otherwise by the form factor specification.
    hw_auto_width_dis[9]         - (RW) Hardware Autonomous Width Disable
                                     When Set, this bit disables hardware from changing the Link width for reasons other than attempting to correct unreliable Link operation by reducing Link width.
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RW, and only Function 0 controls the component Link behavior. In all other Functions of that device, this bit is of type RsvdP.
    lnk_bdw_mng_en[10]           - (RO) Link Bandwidth Management Interrupt Enable
                                     When Set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been Set.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    lnk_auto_bdw_en[11]          - (RO) Link Autonomous Bandwidth Interrupt Enable
                                     When Set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been Set.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    RSVD2[13..12]                - (RO) Reserved
    drs_signaling_ctrl[15..14]   - (RO) DRS Signaling Control - Indicates the mechanism used to report reception of a DRS message. Must be
                                     implemented for Downstream Ports with the DRS Supported bit Set in the Link Capabilities 2 Register.
                                     Encodings are:
                                     00b: DRS not Reported: If DRS Supported is Set, receiving a DRS Message will set DRS Message
                                     Received in the Link Status 2 Register but will otherwise have no effect
                                     01b: DRS Interrupt Enabled: If the DRS Message Received bit in the Link Status 2 Register transitions
                                     from 0 to 1, and either MSI or MSI-X is enabled, an MSI or MSI-X interrupt is generated
                                     using the vector in Interrupt Message Number (Section 7.5.3.2 )
                                     10b: DRS to FRS Signaling Enabled: If the DRS Message Received bit in the Link Status 2 Register
                                     transitions from 0 to 1, the Port must send an FRS Message Upstream with the FRS
                                     Reason field set to DRS Message Received.
                                     Behavior is undefined if this field is set to 10b and the FRS Supported bit in the Device Capabilities 2
                                     Register is Clear.
                                     Behavior is undefined if this field is set to 11b.
                                     Downstream Ports with the DRS Supported bit Clear in the Link Capabilities 2 Register must hardwire
                                     this field to 00b.
                                     This field is Reserved for Upstream
    Lsr_Link_Speed[19..16]       - (RO) Current Link Speed
                                     This field indicates the negotiated Link speed of the given PCI Express Link.
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the current Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: 2.5GT
                                     - 0010b: 5GT
                                     - 0011b: 8GT
                                     - 0100b: 16GT
                                     - 0101b: Reserved
                                     - 0110b: Reserved
                                     - 0111b: Reserved
                                     
                                     All other encodings are Reserved.
                                     The value in this field is undefined when the Link is not up.
    Lsr_Link_Width[25..20]       - (RO) Negotiated Link Width
                                     This field indicates the negotiated width of the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00 0001b: x1
                                     - 00 0010b: x2
                                     - 00 0100b: x4
                                     - 00 1000b: x8
                                     - 00 1100b: x12
                                     - 01 0000b: x16
                                     - 10 0000b: x32
                                     All other encodings are Reserved. The value in this field is undefined when the Link is not up.
    Undefined[26]                - (RO) Undefined
    Link_Training[27]            - (RO) Link Training
                                     This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.
                                     This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
    Lsr_Slot_Clock[28]           - (RO) Slot Clock Configuration
                                     This bit indicates that the component uses the same physical reference clock that the platform provides on the connector.
                                     If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.
                                     
                                     For a multi-Function device, each Function must report the same value for this bit.
    Lsr_Dll_Act[29]              - (RO) Data Link Layer Lin Active
                                     This bit indicates the status of the Data Link Control and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.
                                     
                                     This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, this bit must be hardwired to 0b.
    lnk_bdw_mng_sts[30]          - (W1C) Link Bandwidth Management Status
                                     This bit is Set by hardware to indicate that either of the following has occurred without the Port transitioning through DL_Down status:
                                     A Link retraining has completed following a write of 1b to the Retrain Link bit.
                                     Note: This bit is Set following any write of 1b to the Retrain Link bit, including when the Link is in the process of retraining for some other reason.
                                     Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either through an LTSSM timeout or a higher level process.
                                     This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
    lnk_auto_bdw_sts[31]         - (W1C) Link Autonomous Bandwidth Status
                                     This bit is Set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning through DL_Down status, for reasons other than to attempt to correct unreliable Link operation.
                                     This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_auto_bdw_sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_auto_bdw_sts_MASK 0x80000000u                // lnk_auto_bdw_sts[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_auto_bdw_sts_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_bdw_mng_sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_bdw_mng_sts_MASK 0x40000000u                // lnk_bdw_mng_sts[30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_bdw_mng_sts_SHFT 30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Dll_Act_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Dll_Act_MASK 0x20000000u                // Lsr_Dll_Act[29]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Dll_Act_SHFT 29u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Slot_Clock_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Slot_Clock_MASK 0x10000000u                // Lsr_Slot_Clock[28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Slot_Clock_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Link_Training_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Link_Training_MASK 0x08000000u                // Link_Training[27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Link_Training_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Undefined_MASK 0x04000000u                // Undefined[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Undefined_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Link_Width_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Link_Width_MASK 0x03F00000u                // Lsr_Link_Width[25..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Link_Width_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Link_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Link_Speed_MASK 0x000F0000u                // Lsr_Link_Speed[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lsr_Link_Speed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_drs_signaling_ctrl_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_drs_signaling_ctrl_MASK 0x0000C000u                // drs_signaling_ctrl[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_drs_signaling_ctrl_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_RSVD2_MASK 0x00003000u                // RSVD2[13..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_RSVD2_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_auto_bdw_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_auto_bdw_en_MASK 0x00000800u                // lnk_auto_bdw_en[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_auto_bdw_en_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_bdw_mng_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_bdw_mng_en_MASK 0x00000400u                // lnk_bdw_mng_en[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_lnk_bdw_mng_en_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_hw_auto_width_dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_hw_auto_width_dis_MASK 0x00000200u                // hw_auto_width_dis[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_hw_auto_width_dis_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Clock_PM_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Clock_PM_MASK 0x00000100u                // Lcr_Clock_PM[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Clock_PM_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Ext_Sync_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Ext_Sync_MASK 0x00000080u                // Lcr_Ext_Sync[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Ext_Sync_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Com_clock_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Com_clock_MASK 0x00000040u                // Lcr_Com_clock[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Com_clock_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_retrain_link_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_retrain_link_MASK 0x00000020u                // retrain_link[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_retrain_link_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_link_dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_link_dis_MASK 0x00000010u                // link_dis[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_link_dis_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Rcb_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Rcb_MASK 0x00000008u                // Lcr_Rcb[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Rcb_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_RSVD1_MASK 0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_RSVD1_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Aspm_Ctl_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Aspm_Ctl_MASK 0x00000003u                // Lcr_Aspm_Ctl[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_0_Lcr_Aspm_Ctl_SHFT 0u

/* =====================================================================================

  ---PCIE_SLOT_CAP_0 (0x74041000 + 094hu)---

    PCIE_SLOT_CAP[31..0]         - (RO) Slot Capabilities Register
                                     The Slot Capabilities register identifies PCI Express slot specific capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_0_PCIE_SLOT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_0_PCIE_SLOT_CAP_MASK 0xFFFFFFFFu                // PCIE_SLOT_CAP[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_0_PCIE_SLOT_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_SLOT_CTR_0 (0x74041000 + 098hu)---

    Attention_Button_Pressed_En[0] - (RO) Attention Button Pressed Enable
                                     When Set to 1b, this bit enables software notification on an attention button pressed event
    Power_Fault_Detected_En[1]   - (RO) Power Fault Detected Enable
                                     When Set, this bit enables software notification on a power fault event
    MRL_Sensor_Changed_En[2]     - (RO) MRL Sensor Changed Enable
                                     When Set, this bit enables software notification on a MRL sensor changed event
    Presence_Detect_Changed_En[3] - (RO) Presence Detect Changed Enable
                                     When Set, this bit enables software notification on a presence detect changed event
    Command_Completed_Interrupt_En[4] - (RO) Command Completed Interrupt Enable
                                     If Command Completed notification is supported (if the No Command Completed Support bit in the Slot Capabilities register is 0b), when Set, this bit enables software notification when a hot-plug command is completed by the Hot-Plug Controller
    HotPlug_Interrupt_En[5]      - (RO) Hot-Plug Interrupt Enable
                                     When Set, this bit enables generation of an interrupt on enabled hot-plug events
    Attention_Indicator_Ctr[7..6] - (RO) Attention Indicator Control
                                     If an Attention Indicator is implemented, writes to this field set the Attention Indicator to the written state.
    Power_Indicator_Ctr[9..8]    - (RO) Power Indicator Control
                                     If a Power Indicator is implemented, writes to this field set the Power Indicator to the written state. Reads of this field must reflect the value from the latest write, even if the corresponding hot-plug command is not complete, unless software issues a write without waiting, if required to, for the previous command to complete in which case the read value is undefined.
                                     Defined encodings are:
                                     00b Reserved
                                     01b On
                                     10b Blink
                                     11b Off
                                     Note: The default value of this field must be one of the non-Reserved values. If the Power Indicator Present bit in the Slot Capabilities register is 0b, this bit is permitted to be read-only with a value of 00b.
    Power_Controller_Control[10] - (RO) Power Controller Control
                                     The defined encodings are 0b Power On 1b Power Off
    Electromechanical_Interlock_Control[11] - (RO) Electromechanical Interlock Control
                                     If an Electromechanical Interlock is implemented, a write of 1b to this bit causes the state of the interlock to toggle. A write of 0b to this bit has no effect. A read of this bit always returns a 0b.
    DLL_State_Changed_En[12]     - (RO) Data Link Layer State Changed Enable
                                     If the Data Link Layer Link Active Reporting capability is 1b, this bit enables software notification when Data Link Layer Link Active bit is changed
    RSVD1[15..13]                - (RO) Reserved
    Attention_Button_Pressed[16] - (RO) Attention Button Pressed
                                     If an Attention Button is implemented, this bit is Set when the attention button is pressed. If an Attention Button is not supported, this bit must not be Set.
    Power_Fault_Detected[17]     - (RO) Power Fault Detected
                                     When Set, this bit enables software notification on a power fault event
    MRL_Sensor_Changed[18]       - (RO) MRL Sensor Changed
                                     When Set, this bit enables software notification on a MRL sensor changed event
    Presence_Detect_Changed[19]  - (RO) Presence Detect Changed
                                     When Set, this bit enables software notification on a presence detect changed event
    Command_Completed_Interrupt[20] - (RO) Command Completed
                                     If Command Completed notification is supported (if the No Command Completed Support bit in the Slot Capabilities register is 0b), when Set, this bit enables software notification when a hot-plug command is completed by the Hot-Plug Controller
    MRL_Sensor_State[21]         - (RO) MRL Sensor Changed
                                     If an MRL sensor is implemented, this bit is Set when a MRL Sensor state change is detected. If an MRL sensor is not implemented, this bit must not be Set.
    Presence_Detect_State[22]    - (RO) Presence Detect Changed
                                     This bit is set when the value reported in the Presence Detect State bit is changed.
    Electromechanical_Interlock_Status[23] - (RO) Electromechanical Interlock Status
                                     If an Electromechanical Interlock is implemented, this bit indicates the status of the Electromechanical Interlock.
                                     Defined encodings are:
                                     0b Electromechanical Interlock Disengaged
                                     1b Electromechanical Interlock Engaged
    DLL_State_Changed[24]        - (W1C) Data Link Layer State Changed
                                     This bit is Set when the value reported in the Data Link Layer Link Active bit of the Link Status register is changed.
                                     In response to a Data Link Layer State Changed event, software must read the Data Link Layer Link Active bit of the Link Status register to determine if the Link is active before initiating configuration cycles to the hot plugged device.
    RSVD2[31..25]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_RSVD2_MASK        0xFE000000u                // RSVD2[31..25]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_RSVD2_SHFT        25u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_DLL_State_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_DLL_State_Changed_MASK 0x01000000u                // DLL_State_Changed[24]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_DLL_State_Changed_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Electromechanical_Interlock_Status_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Electromechanical_Interlock_Status_MASK 0x00800000u                // Electromechanical_Interlock_Status[23]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Electromechanical_Interlock_Status_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_State_MASK 0x00400000u                // Presence_Detect_State[22]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_State_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_State_MASK 0x00200000u                // MRL_Sensor_State[21]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_State_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Command_Completed_Interrupt_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Command_Completed_Interrupt_MASK 0x00100000u                // Command_Completed_Interrupt[20]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Command_Completed_Interrupt_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_Changed_MASK 0x00080000u                // Presence_Detect_Changed[19]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_Changed_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_Changed_MASK 0x00040000u                // MRL_Sensor_Changed[18]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_Changed_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Fault_Detected_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Fault_Detected_MASK 0x00020000u                // Power_Fault_Detected[17]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Fault_Detected_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Button_Pressed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Button_Pressed_MASK 0x00010000u                // Attention_Button_Pressed[16]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Button_Pressed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_RSVD1_MASK        0x0000E000u                // RSVD1[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_RSVD1_SHFT        13u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_DLL_State_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_DLL_State_Changed_En_MASK 0x00001000u                // DLL_State_Changed_En[12]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_DLL_State_Changed_En_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Electromechanical_Interlock_Control_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Electromechanical_Interlock_Control_MASK 0x00000800u                // Electromechanical_Interlock_Control[11]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Electromechanical_Interlock_Control_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Controller_Control_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Controller_Control_MASK 0x00000400u                // Power_Controller_Control[10]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Controller_Control_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Indicator_Ctr_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Indicator_Ctr_MASK 0x00000300u                // Power_Indicator_Ctr[9..8]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Indicator_Ctr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Indicator_Ctr_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Indicator_Ctr_MASK 0x000000C0u                // Attention_Indicator_Ctr[7..6]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Indicator_Ctr_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_HotPlug_Interrupt_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_HotPlug_Interrupt_En_MASK 0x00000020u                // HotPlug_Interrupt_En[5]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_HotPlug_Interrupt_En_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Command_Completed_Interrupt_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Command_Completed_Interrupt_En_MASK 0x00000010u                // Command_Completed_Interrupt_En[4]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Command_Completed_Interrupt_En_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_Changed_En_MASK 0x00000008u                // Presence_Detect_Changed_En[3]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Presence_Detect_Changed_En_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_Changed_En_MASK 0x00000004u                // MRL_Sensor_Changed_En[2]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_MRL_Sensor_Changed_En_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Fault_Detected_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Fault_Detected_En_MASK 0x00000002u                // Power_Fault_Detected_En[1]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Power_Fault_Detected_En_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Button_Pressed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Button_Pressed_En_MASK 0x00000001u                // Attention_Button_Pressed_En[0]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_0_Attention_Button_Pressed_En_SHFT 0u

/* =====================================================================================

  ---PCIE_ROOT_CONTROL_0 (0x74041000 + 09Chu)---

    serr_cor_en[0]               - (RO) System Error on Correctable Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a correctable error (ERR_COR) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    serr_non_en[1]               - (RO) System Error on Non-Fatal Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a Non-fatal error (ERR_NONFATAL) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    serr_fat_en[2]               - (RO) System Error on Fatal Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a Fatal error (ERR_FATAL) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    pme_int_en[3]                - (RO) PME Interrupt Enable
                                     When Set, this bit enables PME interrupt generation upon receipt of a PME Message as reflected in the PME Status bit.
                                     A PME interrupt is also generated if the PME Status bit is Set when this bit is changed from Clear to Set
    crs_en[4]                    - (RO) CRS Software Visibility Enable
                                     When Set, this bit enables the Root Port to return Configuration Request Retry Status (CRS) Completion Status to software
                                     Root Ports that do not implement this capability must hardwire this bit to 0b.
    RSVD1[15..5]                 - (RO) Reserved
    root_crs[16]                 - (RO) CRS Software Visibility
                                     When Set, this bit indicates that the Root Port is capable of returning CRS (Configuration Request Retry Status) Completion Status to software
    RSVD2[31..17]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_RSVD2_ADDR    PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_RSVD2_MASK    0xFFFE0000u                // RSVD2[31..17]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_RSVD2_SHFT    17u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_root_crs_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_root_crs_MASK 0x00010000u                // root_crs[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_root_crs_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_RSVD1_MASK    0x0000FFE0u                // RSVD1[15..5]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_RSVD1_SHFT    5u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_crs_en_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_crs_en_MASK   0x00000010u                // crs_en[4]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_crs_en_SHFT   4u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_pme_int_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_pme_int_en_MASK 0x00000008u                // pme_int_en[3]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_pme_int_en_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_fat_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_fat_en_MASK 0x00000004u                // serr_fat_en[2]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_fat_en_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_non_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_non_en_MASK 0x00000002u                // serr_non_en[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_non_en_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_cor_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_cor_en_MASK 0x00000001u                // serr_cor_en[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_0_serr_cor_en_SHFT 0u

/* =====================================================================================

  ---PCIE_ROOT_STATUS_0 (0x74041000 + 0A0hu)---

    pme_req_id[15..0]            - (RO) PME Request ID
                                     This field indicates the PCI Requester ID of the last PME Requester. This field is only valid when the PME Status bit is Set.
    pme_status[16]               - (W1C) PME Status
                                     This bit indicates that PME was asserted by the PME Requester indicated in the PME Requester ID field. Subsequent PMEs are kept pending until the status register is cleared by software by writing a 1b.
    pme_pending[17]              - (RO) PME Pending
                                     This bit indicates that another PME is pending when the PME Status bit is Set. When the PME Status bit is cleared by software; the PME is delivered by hardware by setting the PME Status bit again and updating the PME Requester ID field appropriately. The PME Pending bit is cleared by hardware if no more PMEs are pending.
    RSVD1[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_RSVD1_MASK     0xFFFC0000u                // RSVD1[31..18]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_RSVD1_SHFT     18u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_pending_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_pending_MASK 0x00020000u                // pme_pending[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_pending_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_status_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_status_MASK 0x00010000u                // pme_status[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_status_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_req_id_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_req_id_MASK 0x0000FFFFu                // pme_req_id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_0_pme_req_id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV2_CAP_0 (0x74041000 + 0A4hu)---

    Dcr2_Cpl_To_Range_Sup[3..0]  - (RO) Completion Timeout Ranges Supported
                                     This field indicates device Function support for the optional Completion Timeout programmability mechanism. This mechanism allows system software to modify the Completion Timeout value.
                                     
                                     Four time value ranges are defined:
                                     - Range A: 50 us to 10 ms
                                     - Range B: 10 ms to 250 ms
                                     - Range C: 250 ms to 4 s
                                     - Range D: 4 s to 64 s
                                     Bits are set according to the table below to show timeout value ranges supported.
                                     
                                     - 0000b: Completion Timeout programming not supported - the Function must implement a
                                     timeout value in the range 50 us to 50 ms.
                                     - 0001b: Range A
                                     - 0010b: Range B
                                     - 0011b: Ranges A and B
                                     - 0110b: Ranges B and C
                                     - 0111b: Ranges A, B, and C
                                     - 1110b: Ranges B, C, and D
                                     - 1111b: Ranges A, B, C, and D
                                     All other values are Reserved.
                                     
                                     It is strongly recommended that the Completion Timeout mechanism not expire in less than 10 ms.
    Dcr2_Cpl_To_Dis_Sup[4]       - (RO) Completion Timeout Disable Supported
                                     A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
    ARI_Forwarding_Support[5]    - (RO) ARI Forwarding Supported
                                     A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
                                     This mechanism is optional for Root Ports.
                                     For all other Functions this field is Reserved and must be hardwired to 0b.
    AtomicOp_Routing_Support[6]  - (RO) AtomicOp Routing Supported
                                     Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability.
    AtomicOp_32b_Completer_Support[7] - (RO) 32-bit AtomicOp Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    AtomicOp_64b_Completer_Support[8] - (RO) 64-bit AtomicOp Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    CAS_128b_Completer_Support[9] - (RO) 128-bit CAS Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability.
    No_RO_enabled_PR_PR_Passing[10] - (RO) No RO-enabled PR-PR Passing
                                     If this bit is Set, the routing element never carries out the passing permitted.
                                     This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
                                     For all other functions, this bit must be 0b.
    Dcr2_LTR_Sup[11]             - (RO) LTR Mechanism Supported
                                     A value of 1b indicates support for the optional LTR (Latency Tolerance Reporting) mechanism
    TPH_COMPLETER_SUP[13..12]    - (RO) TPH Completer Supported
                                     Value indicates Completer support for TPH or Extended TPH. Applicable only to Root Ports and Endpoints. For all other Functions, this field is Reserved.
                                     Defined Encodings are:
                                     00b TPH and Extended TPH Completer not supported.
                                     01b TPH Completer supported; Extended TPH Completer not supported.
                                     10b Reserved.
                                     11b Both TPH and Extended TPH Completer supported.
    LN_SYS_CLS[15..14]           - (RO) LN System CLS
                                     Applicable only to Root Ports and RCRBs; must be 00b for all other Function types. This field indicates if the Root Port or RCRB supports LN protocol as an LN Completer, and if so, what cacheline size is in effect.
                                     Encodings are:
                                     00b LN Completer either not supported or not in effect
                                     01b LN Completer with 64-byte cachelines in effect
                                     10b LN Completer with 128-byte cachelines in effect
                                     11b Reserved
    SUP_10B_TAG_CPL[16]          - (RO) 10-Bit Tag Completer Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. See Section 2.2.6.2.
    SUP_10B_TAG_REQ[17]          - (RO) 10-Bit Tag Requester Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.
                                     This bit must not be Set if the 10-Bit Tag Completer Supported bit is Clear.
                                     If the Function is an RCiEP, this bit must be Clear if the RC does not support 10-Bit Tag Completer capability for Requests coming from this RCiEP.
                                     Note that 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Control 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. See Section 2.2.6.2.
    Dcr2_OBFF_Sup[19..18]        - (RO) OBFF (Optimized Buffer Flush Fill) Supported
                                     -00b: OBFF Not Supported
                                     -01b: OBFF supported using Message signaling only
                                     -10b: OBFF supported using WAKE# signaling only
                                     -11b: OBFF supported using WAKE# and Message signaling
    EXT_FMT_FIELD_SUP[20]        - (RO) Extended Fmt Field Supported
                                     If Set, the Function supports the 3-bit definition of the Fmt field. If Clear, the Function supports a 2-bit definition of the Fmt field. See Section 2.2.
                                     Must be Set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.
                                     It is strongly recommended that Functions support the 3-bit definition of the Fmt field.
    END_END_TLP_PREFIX_SUP[21]   - (RO) End-End TLP Prefix Supported
                                     Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
                                     0b No Support
                                     1b Support is provided to receive TLPs containing End-End TLP Prefixes.
                                     All Ports of a Switch must have the same value for this bit.
    MAX_END_END_TLP_PREFIX[23..22] - (RO) Max End-End TLP Prefixes
                                     Indicates the maximum number of End-End TLP Prefixes supported by this Function. See Section 2.2.10.2 for important details. Values are:
                                     01b 1 End-End TLP Prefix
                                     10b 2 End-End TLP Prefixes
                                     11b 3 End-End TLP Prefixes
                                     00b 4 End-End TLP Prefixes
                                     If End-End TLP Prefix Supported is Clear, this field is RsvdP.
                                     Different Root Ports that have the End-End TLP Prefix Supported bit Set are permitted to report different values for this field.
                                     For Switches where End-End TLP Prefix Supported is Set, this field must be 00b indicating support for up to four End-End TLP Prefixes.
    RSVD2[30..24]                - (RO) Reserved
    FRS_SUP[31]                  - (RO) FRS Supported
                                     When Set, indicates support for the optional Function Readiness Status (FRS) capability.
                                     Must be Set for all Functions that support generation or receipt capabilities of FRS Messages.
                                     Must not be Set by Switch Functions that do not generate FRS Messages on their own behalf.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_FRS_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_FRS_SUP_MASK 0x80000000u                // FRS_SUP[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_FRS_SUP_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_RSVD2_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_RSVD2_MASK   0x7F000000u                // RSVD2[30..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_RSVD2_SHFT   24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_MAX_END_END_TLP_PREFIX_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_MAX_END_END_TLP_PREFIX_MASK 0x00C00000u                // MAX_END_END_TLP_PREFIX[23..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_MAX_END_END_TLP_PREFIX_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_END_END_TLP_PREFIX_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_END_END_TLP_PREFIX_SUP_MASK 0x00200000u                // END_END_TLP_PREFIX_SUP[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_END_END_TLP_PREFIX_SUP_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_EXT_FMT_FIELD_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_EXT_FMT_FIELD_SUP_MASK 0x00100000u                // EXT_FMT_FIELD_SUP[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_EXT_FMT_FIELD_SUP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_OBFF_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_OBFF_Sup_MASK 0x000C0000u                // Dcr2_OBFF_Sup[19..18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_OBFF_Sup_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_SUP_10B_TAG_REQ_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_SUP_10B_TAG_REQ_MASK 0x00020000u                // SUP_10B_TAG_REQ[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_SUP_10B_TAG_REQ_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_SUP_10B_TAG_CPL_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_SUP_10B_TAG_CPL_MASK 0x00010000u                // SUP_10B_TAG_CPL[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_SUP_10B_TAG_CPL_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_LN_SYS_CLS_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_LN_SYS_CLS_MASK 0x0000C000u                // LN_SYS_CLS[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_LN_SYS_CLS_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_TPH_COMPLETER_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_TPH_COMPLETER_SUP_MASK 0x00003000u                // TPH_COMPLETER_SUP[13..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_TPH_COMPLETER_SUP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_LTR_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_LTR_Sup_MASK 0x00000800u                // Dcr2_LTR_Sup[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_LTR_Sup_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_No_RO_enabled_PR_PR_Passing_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_No_RO_enabled_PR_PR_Passing_MASK 0x00000400u                // No_RO_enabled_PR_PR_Passing[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_No_RO_enabled_PR_PR_Passing_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_CAS_128b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_CAS_128b_Completer_Support_MASK 0x00000200u                // CAS_128b_Completer_Support[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_CAS_128b_Completer_Support_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_64b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_64b_Completer_Support_MASK 0x00000100u                // AtomicOp_64b_Completer_Support[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_64b_Completer_Support_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_32b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_32b_Completer_Support_MASK 0x00000080u                // AtomicOp_32b_Completer_Support[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_32b_Completer_Support_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_Routing_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_Routing_Support_MASK 0x00000040u                // AtomicOp_Routing_Support[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_AtomicOp_Routing_Support_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ARI_Forwarding_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ARI_Forwarding_Support_MASK 0x00000020u                // ARI_Forwarding_Support[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ARI_Forwarding_Support_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_Cpl_To_Dis_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_Cpl_To_Dis_Sup_MASK 0x00000010u                // Dcr2_Cpl_To_Dis_Sup[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_Cpl_To_Dis_Sup_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_Cpl_To_Range_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_Cpl_To_Range_Sup_MASK 0x0000000Fu                // Dcr2_Cpl_To_Range_Sup[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_0_Dcr2_Cpl_To_Range_Sup_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV2_CTL_STS_0 (0x74041000 + 0A8hu)---

    Dcr2_Cpl_To[3..0]            - (RW) Completion Timeout Value
                                     In device Functions that support Completion Timeout programmability, this field allows system software to modify the Completion Timeout value.
                                     A Function that does not support this optional capability must hardwire this field to 0000b and is required to implement a timeout value in the range 50 us to 50 ms.
                                     Functions that support Completion Timeout programmability must support the values given below corresponding to the programmability ranges indicated in the Completion Timeout Ranges Supported field.
                                     
                                     Defined encodings:
                                     - 0000b: Default range: 50 us to 50 ms
                                     - 0001b: 50 us to 100 us
                                     - 0010b: 1 ms to 10 ms
                                     - 0101b: 16 ms to 55 ms
                                     - 0110b: 65 ms to 210 ms
                                     - 1001b: 260 ms to 900 ms
                                     - 1010b: 1 s to 3.5 s
                                     - 1101b: 4 s to 13 s
                                     - 1110b: 17 s to 64 s
                                     Values not defined above are Reserved.
                                     
                                     Software is permitted to change the value in this field at any time. For Requests already pending when the Completion Timeout Value is changed, hardware is permitted to use either the new or the old value for the outstanding Requests, and is permitted to base the start time for each Request either on when this value was changed or on when each request was issued.
                                     
                                     The default value for this field is 0000b.
    Dcr2_Cpl_to_Dis[4]           - (RW) Completion Timeout Disable
                                     When Set, this bit disables the Completion Timeout mechanism.
                                     
                                     This bit is required for all Functions that support the Completion Timeout Disable Capability. Functions that do not support this optional capability are permitted to hardwire this bit to 0b
                                     Software is permitted to Set or Clear this bit at any time. When Set, the Completion Timeout detection mechanism is disabled.
                                     If there are outstanding Requests when the bit is cleared, it is permitted but not required for hardware to apply the completion timeout mechanism to the outstanding Requests. If this is done, it is permitted to base the start time for each Request on either the time this bit was cleared or the time each Request was issued.
                                     
                                     The default value for this bit is 0b.
    ARI_Forwarding_En[5]         - (RO) ARI Forwarding Enable
                                     When set, the Downstream Port disables its traditional Device Number field being 0 enforcement when turning a Type 1 Configuration Request into a Type 0 Configuration Request, permitting access to Extended Functions
                                     in an ARI Device immediately below the Port.
                                     Must be hardwired to 0b if the ARI Forwarding Supported bit is 0b.
    AtomicOp_Requester_En[6]     - (RW) AtomicOp Requester Enable
                                     Applicable only to Endpoints and Root Ports; must be hardwired to 0b for other Function types. The Function is allowed to initiate AtomicOp Requests
                                     only if this bit and the Bus Master Enable bit in the Command register are both Set.
                                     This bit is required to be RW if the Endpoint or Root Port is capable of initiating AtomicOp Requests, but otherwise is permitted to be hardwired to 0b.
                                     This bit does not serve as a capability bit. This bit is permitted to be RW even if no AtomicOp Requester capabilities are supported by the Endpoint or Root Port.
    AtomicOp_Egress_Blocking[7]  - (RO) AtomicOp Egress Blocking
                                     Applicable and mandatory for Switch Upstream Ports, Switch Downstream Ports, and Root Ports that implement AtomicOp routing capability; otherwise must be hardwired to 0b.
                                     When this bit is Set, AtomicOp Requests that target going out this Egress Port must be blocked.
    IDO_Request_En[8]            - (RW) IDO Request Enable
                                     If this bit is Set, the Function is permitted to set the ID-Based Ordering (IDO) bit (Attr[2]) of
                                     Requests it initiates.
                                     Endpoints, including RC Integrated Endpoints, and Root Ports are permitted to implement this capability.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the IDO attribute in Requests.
    IDO_Completion_En[9]         - (RW) IDO Completion Enable
                                     If this bit is Set, the Function is permitted to set the ID-Based Ordering (IDO) bit (Attr[2]) of
                                     Completions it returns.
                                     Endpoints, including RC Integrated Endpoints, and Root Ports are permitted to implement this capability.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the IDO attribute in Completions.
    Dcr2_LTR_Enable[10]          - (RW) LTR(Latency Tolerance Reporting) Mechanism Enable
                                     When Set to 1b, this bit enables upstream ports to send LTR messages and Downstream Ports to process LTR Messages.
                                     For a Multi-Function device associated with an Upstream Port of a device that implements LTR, the bit in Function 0 is RW, and only Function 0 controls link behavior of the component. In all other Functions of that device, this bit is Reserved.
                                     This bit is RO if LTR is not supported
    RESERVED11[11]               - (RO) Reserved bits
    dcr2_10btag_req_en[12]       - (RO) 10-Bit Tag Requester Enable.
                                     This bit, in combination with the Extended Tag Field Enable bit in the Device Control register, determines how many Tag field bits a Requester is permitted to use. When the 10-Bit Tag Requester Enable bit is Set, the Requester is permitted to use 10-Bit Tags. See Section 2.2.6.2 for complete details.
                                     If software changes the value of this bit while the Function has outstanding Non-Posted Requests, the result is undefined.
                                     Functions that do not implement 10-Bit Tag Requester capability are permitted to hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    Dcr2_OBFF_Enable[14..13]     - (RO) OBFF (Optimized Buffer Flush Fill) Enable
                                     These two bits are RO if OBFF is not supported
    RSVD1[31..15]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_RSVD1_MASK 0xFFFF8000u                // RSVD1[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_RSVD1_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_OBFF_Enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_OBFF_Enable_MASK 0x00006000u                // Dcr2_OBFF_Enable[14..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_OBFF_Enable_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_dcr2_10btag_req_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_dcr2_10btag_req_en_MASK 0x00001000u                // dcr2_10btag_req_en[12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_dcr2_10btag_req_en_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_LTR_Enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_LTR_Enable_MASK 0x00000400u                // Dcr2_LTR_Enable[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_LTR_Enable_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_IDO_Completion_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_IDO_Completion_En_MASK 0x00000200u                // IDO_Completion_En[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_IDO_Completion_En_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_IDO_Request_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_IDO_Request_En_MASK 0x00000100u                // IDO_Request_En[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_IDO_Request_En_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_AtomicOp_Egress_Blocking_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_AtomicOp_Egress_Blocking_MASK 0x00000080u                // AtomicOp_Egress_Blocking[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_AtomicOp_Egress_Blocking_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_AtomicOp_Requester_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_AtomicOp_Requester_En_MASK 0x00000040u                // AtomicOp_Requester_En[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_AtomicOp_Requester_En_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ARI_Forwarding_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ARI_Forwarding_En_MASK 0x00000020u                // ARI_Forwarding_En[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ARI_Forwarding_En_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_Cpl_to_Dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_Cpl_to_Dis_MASK 0x00000010u                // Dcr2_Cpl_to_Dis[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_Cpl_to_Dis_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_Cpl_To_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_Cpl_To_MASK 0x0000000Fu                // Dcr2_Cpl_To[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_0_Dcr2_Cpl_To_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK2_CAP_0 (0x74041000 + 0AChu)---

    RSVD1[0]                     - (RO) Reserved
    Lcr2_Speed_Sup[7..1]         - (RO) Supported Link Speed Vector
                                     This field indicates the supported Link speed(s) of the associated Port. For each bit, a value of 1b indicates that the corresponding Link speed is supported; otherwise, the Link speed is not supported.
                                     
                                     Bit definitions within this field are:
                                     - Bit [0]: 2.5 GT/s
                                     - Bit [1]: 5.0 GT/s
                                     - Bit [2]: 8.0 GT/s
                                     - Bit [3]: 16.0 GT/s
                                     - Bits [6:4]: RsvdP
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr2_Cross_Sup[8]            - (RO) Crosslink Supported
                                     When set to 1b, this bit indicates that the associated Port supports crosslinks.
                                     
                                     When set to 0b on a Port that only supports Link speeds of 2.5 GTs or 5.0 GTs, this bit provides no information regarding the Ports level of crosslink support.
                                     It is recommended that this bit be Set in any Port that supports crosslinks even though doing so is only required for Ports that also support operating at 8.0 GTs or higher Link speeds.
                                     
                                     Note: Software should use this bit when referencing fields whose definition depends on whether or not the Port supports crosslinks.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr2_SRIS_Lower_SKP_OS_Gen_Speed[12..9] - (RO) Lower SKP OS Generation Supported Speeds Vector
                                     If this field is non-zero, it indicates that the
                                     Port, when operating at the indicated speed(s) supports SRIS and also supports software control of
                                     the SKP Ordered Set transmission scheduling rate.
                                     Bit definitions within this field are:
                                     Bit 0 : 2.5 GT/s
                                     Bit 1 : 5.0 GT/s
                                     Bit 2 : 8.0 GT/s
                                     Bit 3 : 16.0 GT/s
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit is not Set in the Supported
                                     Link Speeds Vector.
    RSVD2[15..13]                - (RO)  xxx 
    Lcr2_SRIS_Lower_SKP_OS_Rec_Speed[19..16] - (RO) Lower SKP OS Reception Supported Speeds Vector
                                     If this field is non-zero, it indicates that the
                                     Port, when operating at the indicated speed(s) supports SRIS and also supports receiving SKP OS at
                                     the rate defined for SRNS while running in SRIS.
                                     Bit definitions within this field are:
                                     Bit 0 : 2.5 GT/s
                                     Bit 1 : 5.0 GT/s
                                     Bit 2 : 8.0 GT/s
                                     Bit 3 : 16.0 GT/s
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit is not Set in the Supported
                                     Link Speeds Vector.
    RSVD3[22..20]                - (RO)  xxx 
    Lcr2_Retimer_det_Sup[23]     - (RO) Retimer Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated Port
                                     supports detection and reporting of Retimer presence.
                                     This bit must be set to 1b in a Port when the Supported Link Speeds Vector of the Link Capabilities 2
                                     Register indicates support for a Link speed of 16.0 GT/s or higher.
                                     It is permitted to be set to 1b regardless of the supported Link speeds.
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
    Lcr2_2Retimer_det_Sup[24]    - (RO) Two Retimers Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated
                                     Port supports detection and reporting of two Retimers presence.
                                     This bit must be set to 1b in a Port when the Supported Link Speeds Vector of the Link Capabilities 2
                                     Register indicates support for a Link speed of 16.0 GT/s or higher.
                                     It is permitted to be set to 1b regardless of the supported Link speeds if the Retimer Presence Detect
                                     Supported bit is also set to 1b.
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
    RSVD4[30..25]                - (RO) Reserved
    DRS_Sup[31]                  - (RO) DRS Supported - When Set, indicates support for the optional Device Readiness Status (DRS) capability.
                                     Must be Set in Downstream Ports that support DRS.
                                     Must be Set in Downstream Ports that support FRS.
                                     For Upstream Ports that support DRS, it is strongly recommended that this bit be Set in Function 0.
                                     For all other Functions associated with an Upstream Port, this bit must be Clear.142
                                     Must be Clear in Functions that are not associated with a Port.
                                     RsvdP in all other Functions.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_DRS_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_DRS_Sup_MASK 0x80000000u                // DRS_Sup[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_DRS_Sup_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD4_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD4_MASK  0x7E000000u                // RSVD4[30..25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD4_SHFT  25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_2Retimer_det_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_2Retimer_det_Sup_MASK 0x01000000u                // Lcr2_2Retimer_det_Sup[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_2Retimer_det_Sup_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Retimer_det_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Retimer_det_Sup_MASK 0x00800000u                // Lcr2_Retimer_det_Sup[23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Retimer_det_Sup_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD3_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD3_MASK  0x00700000u                // RSVD3[22..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD3_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_MASK 0x000F0000u                // Lcr2_SRIS_Lower_SKP_OS_Rec_Speed[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD2_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD2_MASK  0x0000E000u                // RSVD2[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD2_SHFT  13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_MASK 0x00001E00u                // Lcr2_SRIS_Lower_SKP_OS_Gen_Speed[12..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Cross_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Cross_Sup_MASK 0x00000100u                // Lcr2_Cross_Sup[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Cross_Sup_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Speed_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Speed_Sup_MASK 0x000000FEu                // Lcr2_Speed_Sup[7..1]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_Lcr2_Speed_Sup_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD1_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD1_MASK  0x00000001u                // RSVD1[0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_0_RSVD1_SHFT  0u

/* =====================================================================================

  ---PCIE_CONF_LINK2_CTL_STS_0 (0x74041000 + 0B0hu)---

    Lcr2_Link_Speed[3..0]        - (RW) Target Link Speed
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: Supported Link Speeds Vector field bit 0
                                     - 0010b: Supported Link Speeds Vector field bit 1
                                     - 0011b: Supported Link Speeds Vector field bit 2
                                     - 0100b: Supported Link Speeds Vector field bit 3
                                     - 0101b: Supported Link Speeds Vector field bit 4
                                     - 0110b: Supported Link Speeds Vector field bit 5
                                     - 0111b: Supported Link Speeds Vector field bit 6
                                     All other encodings are Reserved.
                                     
                                     If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.
                                     If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.
                                     The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform or form factor requires a different default value.
                                     
                                     For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.
                                     For a Multi-Function device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this field is of type RsvdP.
                                     
                                     Components that support only the 2.5 GTs speed are permitted to hardwire this field to 0000b.
    Lcr2_Compliance[4]           - (RW) Enter Compliance
                                     Software is permitted to force a Link to enter Compliance mode at the speed indicated in the Target Link Speed field by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.
                                     
                                     Default value of this bit following Fundamental Reset is 0b.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of
                                     that device, this bit is of type RsvdP.
    Lcr2_Hw_Auto_Dis[5]          - (RW) Hardware Autonomous Speed Disable
                                     When Set, this bit disables hardware from changing the Link speed for device specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.
                                     
                                     Default value of this bit is 0b.
    Lcr2_Sel_Deemp[6]            - (RO) Reserved
    Lcr2_Tx_Margin[9..7]         - (RW) Transmit Margin
                                     This field controls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration sub-state.
                                     
                                     Encodings:
                                     - 000b: Normal operating range
                                     - 001b: 800~1200 mV for full swing and 400~700 mV for half-swing
                                     - 010b ~ (n-1) Values must be monotonic with a non-zero slope. The value of n must be greater than 3 and less than 7. At least two of these must be below the normal operating range of n: 200~400 mV for full-swing and 100~200 mV for half-swing
                                     - n ~ 111b: reserved
                                     For a Multi-Function device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this field is of type RsvdP.
                                     
                                     Default value of this field is 000b.
                                     
                                     This register is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this register only during debug or compliance testing. In all other cases, the system must ensure that this register is set to the default value.
    Lcr2_Mod_Compliance[10]      - (RW) Enter Modified Compliance
                                     When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance sub-state.
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     Default value of this bit is 0b.
                                     
                                     This register is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this register only during debug or compliance testing. 
                                     In all other cases, the system must ensure that this register is set to the default value.
    Lcr2_Comp_Sos[11]            - (RW) Compliance SOS
                                     When set to 1b, the LTSSM is required to send SKP Ordered Sets periodically in between the (modified) compliance patterns.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     The default value of this bit is 0b.
    Lcr2_Comp_Preset[15..12]     - (RW) Compliance Preset De-emphasis
                                     This bit sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
                                     
                                     Encodings:
                                     - 1b: -3.5 dB
                                     - 0b: -6 dB
                                     When the Link is operating at 2.5 GTs, the setting of this bit has no effect. Components that support only 2.5 GTs speed are permitted to hardwire this bit to 0b.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     The default value of this bit is 0b.
                                     
                                     This bit is intended for debug, compliance testing purposes. System firmware and software is allowed to modify this bit only during debug or compliance testing.
    Lsr2_Deemph[16]              - (RO) Current De-emphasis Level
                                     When the Link is operating at 5 GT/s speed, this bit reflects the level of de-emphasis.
                                     Encodings:
                                     - 1b -3.5 dB
                                     - 0b -6 dB
                                     The value in this bit is undefined when the Link is operating at 2.5 GT/s speed.
    Link2_Equ_Complete_8GT[17]   - (RO) Equalization 8.0 GT/s Complete
                                     When set to 1b, this bit indicates that the Transmitter Equalization procedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase1_Success_8GT[18] - (RO) Equalization 8.0 GT/s Phase 1 Successful
                                     When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase2_Success_8GT[19] - (RO) Equalization 8.0 GT/s Phase 2 Successful
                                     When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase3_Success_8GT[20] - (RO) Equalization 8.0 GT/s Phase 3 Successful
                                     When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Req_8GT[21]        - (RO) Link Equalization Request
                                     This bit is Set by hardware to request the 8.0 GT/s Link equalization process to be performed on the Link.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    retimer_det[22]              - (RO) Retimer Presence Detected
                                     When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation.
                                     The default value of this bit is 0b.
                                     This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.
                                     Ports that have the Retimer Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.
                                     For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.
    RSVD1[27..23]                - (RO) Reserved
    ds_component_presence[30..28] - (RO) Downstream Component Presence - This field indicates the presence and DRS status for the Downstream
                                     Component, if any, connected to the Link; defined values are:
                                     000b: Link Down - Presence Not Determined
                                     001b: Link Down - Component Not Present indicates the Downstream Port (DP) has determined
                                     that a Downstream Component is not present
                                     010b: Link Down - Component Present indicates the DP has determined that a Downstream
                                     Component is present, but the Data Link Layer is not active
                                     011b: Reserved
                                     100b: Link Up - Component Present indicates the DP has determined that a Downstream
                                     Component is present, but no DRS Message has been received since the Data Link Layer
                                     became active
                                     101b: Link Up - Component Present and DRS Received indicates the DP has received a DRS
                                     Message since the Data Link Layer became active
                                     110b: Reserved
                                     111b: Reserved
                                     Downstream Component Presence state must be determined by the logical “OR” of the Physical Layer
                                     in-band presence detect mechanism and, if present, any out-of-band presence detect mechanism
                                     implemented for the Link. If no out-of-band presence detect mechanism is implemented, then Downstream
                                     Component Presence state must be determined solely by the Physical Layer in-band presence
                                     detect mechanism.
                                     If the In-Band PD Disable bit in the Slot Control Register is Set, the Physical Layer in-band presence
                                     detect mechanism must always indicate that no component is present.
                                     Component Presence, Link Up, and DRS Received states indicated by this field must reflect their
                                     maskable states, which are controlled by the SFI PD State Mask, SFI DLL State Mask, or SFI DRS Mask
                                     bits in the SFI Control Register. See Section 7.9.23.3 .
                                     This field must be implemented in any Downstream Port where the DRS Supported bit is Set in the
                                     Link Capabilities 2 Register.
                                     This field is RsvdZ for all other Functions.
                                     Default value of this field is 000b.
    drs_msg_rcvd[31]             - (RO) DRS Message Received - This bit must be Set whenever the Port receives a DRS Message.
                                     This bit must be Cleared in DL_Down.
                                     This bit must be implemented in any Downstream Port where the DRS Supported bit is Set in the Link
                                     Capabilities 2 Register.
                                     This bit is RsvdZ for all other Functions.
                                     Default value of this bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_drs_msg_rcvd_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_drs_msg_rcvd_MASK 0x80000000u                // drs_msg_rcvd[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_drs_msg_rcvd_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ds_component_presence_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ds_component_presence_MASK 0x70000000u                // ds_component_presence[30..28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ds_component_presence_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_RSVD1_MASK 0x0F800000u                // RSVD1[27..23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_RSVD1_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_retimer_det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_retimer_det_MASK 0x00400000u                // retimer_det[22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_retimer_det_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Req_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Req_8GT_MASK 0x00200000u                // Link2_Equ_Req_8GT[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Req_8GT_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase3_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase3_Success_8GT_MASK 0x00100000u                // Link2_Equ_Phase3_Success_8GT[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase3_Success_8GT_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase2_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase2_Success_8GT_MASK 0x00080000u                // Link2_Equ_Phase2_Success_8GT[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase2_Success_8GT_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase1_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase1_Success_8GT_MASK 0x00040000u                // Link2_Equ_Phase1_Success_8GT[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Phase1_Success_8GT_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Complete_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Complete_8GT_MASK 0x00020000u                // Link2_Equ_Complete_8GT[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Link2_Equ_Complete_8GT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lsr2_Deemph_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lsr2_Deemph_MASK 0x00010000u                // Lsr2_Deemph[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lsr2_Deemph_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Comp_Preset_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Comp_Preset_MASK 0x0000F000u                // Lcr2_Comp_Preset[15..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Comp_Preset_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Comp_Sos_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Comp_Sos_MASK 0x00000800u                // Lcr2_Comp_Sos[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Comp_Sos_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Mod_Compliance_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Mod_Compliance_MASK 0x00000400u                // Lcr2_Mod_Compliance[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Mod_Compliance_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Tx_Margin_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Tx_Margin_MASK 0x00000380u                // Lcr2_Tx_Margin[9..7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Tx_Margin_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Sel_Deemp_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Sel_Deemp_MASK 0x00000040u                // Lcr2_Sel_Deemp[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Sel_Deemp_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Hw_Auto_Dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Hw_Auto_Dis_MASK 0x00000020u                // Lcr2_Hw_Auto_Dis[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Hw_Auto_Dis_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Compliance_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Compliance_MASK 0x00000010u                // Lcr2_Compliance[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Compliance_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Link_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Link_Speed_MASK 0x0000000Fu                // Lcr2_Link_Speed[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_0_Lcr2_Link_Speed_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_SLOT_CAP_0 (0x74041000 + 0B4hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_0_RSVD_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_0_RSVD_MASK    0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_0_RSVD_SHFT    0u

/* =====================================================================================

  ---PCIE_CONF_SLOT_CTL_STS_0 (0x74041000 + 0B8hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_0_RSVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_0_RSVD_MASK 0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_0_RSVD_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_0_0 (0x74041000 + 0BChu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_0_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_0_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_0_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_1_0 (0x74041000 + 0C0hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_0_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_0_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_0_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_2_0 (0x74041000 + 0C4hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_0_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_0_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_0_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_3_0 (0x74041000 + 0C8hu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_0_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_0_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_0_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_4_0 (0x74041000 + 0CChu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_0_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_0_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_0_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_0_0 (0x74041000 + 0D0hu)---

    capability_id[7..0]          - (RO) Capability ID
                                     Indicates the MSI-X Capability structure. This field must return a Capability ID of 11h indicating that this is an MSI-X Capability structure.
    next_capability_pointer[15..8] - (RO) Next Capability Pointer
                                     This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.
    msix_table_size[26..16]      - (RO) MSI-X Table Size
                                     System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.
    RSVD2[29..27]                - (RO) Reserved
    msix_function_mask[30]       - (RW) MSI-X Mask
                                     If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
                                     If Clear, each vector's Mask bit determines whether the vector is masked or not.
                                     Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.
                                     Default value of this bit is 0b.
    msix_enable[31]              - (RW) MSI-X Enable
                                     If Set and the MSI Enable bit in the MSI Message Control register is Clear, the Function is permitted to use MSI-X to request service and is prohibited from using INTx interrupts (if implemented). System configuration software Sets this bit to enable MSI-X. A device driver is prohibited from writing this bit to mask a Function's service request.
                                     If Clear, the Function is prohibited from using MSI-X to request service.
                                     Default value of this bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_enable_MASK 0x80000000u                // msix_enable[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_enable_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_function_mask_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_function_mask_MASK 0x40000000u                // msix_function_mask[30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_function_mask_SHFT 30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_RSVD2_MASK 0x38000000u                // RSVD2[29..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_RSVD2_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_table_size_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_table_size_MASK 0x07FF0000u                // msix_table_size[26..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_msix_table_size_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_next_capability_pointer_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_next_capability_pointer_MASK 0x0000FF00u                // next_capability_pointer[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_next_capability_pointer_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_capability_id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_capability_id_MASK 0x000000FFu                // capability_id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_0_capability_id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_1_0 (0x74041000 + 0D4hu)---

    MsiX_Tab_Bir[2..0]           - (RO) Table BIR
                                     Indicates which one of a Function's Base Address registers, located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X Table into Memory Space.
                                     For a 64-bit Base Address register, the Table BIR indicates the lower DWORD. For Functions with Type 1 Configuration Space headers, BIR values 2 through 5 are also Reserved.
    MsiX_Tab_Off[31..3]          - (RO) Table Offset
                                     Used as an offset from the address contained by one of the Function's Base Address registers to point to the base of the MSI-X Table. The lower 3 Table BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_MsiX_Tab_Off_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_MsiX_Tab_Off_MASK 0xFFFFFFF8u                // MsiX_Tab_Off[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_MsiX_Tab_Off_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_MsiX_Tab_Bir_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_MsiX_Tab_Bir_MASK 0x00000007u                // MsiX_Tab_Bir[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_0_MsiX_Tab_Bir_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_2_0 (0x74041000 + 0D8hu)---

    MsiX_Pba_Bir[2..0]           - (RO) PBA BIR
                                     Indicates which one of a Function's Base Address registers, located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
                                     The PBA BIR value definitions are identical to those for the MSI-X Table BIR.
    MsiX_Pba_Off[31..3]          - (RO) PBA Offset
                                     Used as an offset from the address contained by one of the Function's Base Address registers to point to the base of the MSI-X PBA. The lower 3 PBA BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_MsiX_Pba_Off_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_MsiX_Pba_Off_MASK 0xFFFFFFF8u                // MsiX_Pba_Off[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_MsiX_Pba_Off_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_MsiX_Pba_Bir_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_MsiX_Pba_Bir_MASK 0x00000007u                // MsiX_Pba_Bir[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_0_MsiX_Pba_Bir_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_5_0 (0x74041000 + 0DChu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_0_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_0_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_0_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_MSI_CAP_0 (0x74041000 + 0E0hu)---

    Msi_Cap_Id[7..0]             - (RO) Capability ID
                                     The value of 05h in this field identifies the function as message signaled interrupt capable.
    Msi_Nx_Ptr[15..8]            - (RO) Next Pointer
                                     Pointer to the next item in the capabilities list.
    Msi_En[16]                   - (RW) MSI Enable
                                     If 1, the function is permitted to use MSI to request service and is prohibited from using its INTx# pin (if implemented). System configuration software sets this bit to enable MSI. A device driver is prohibited from writing this bit to mask a functions service request.
                                     If 0, the function is prohibited from using MSI to request service.
                                     
                                     This state after reset is 0 (MSI is disabled).
    Msi_Multi_Cap[19..17]        - (RO) Multiple Message Capable
                                     System software reads this field to determine the number of requested messages. The number of requested messages must be aligned to a power of two (if a function requires three messages, it requests four by initializing this field to 010b).
                                     
                                     The encoding is defined as:
                                     - 000b: 1 message requested
                                     - 001b: 2 messages requested
                                     - 010b: 4 message requested
                                     - 011b: 8 messages requested
                                     - 100b: 16 message requested
                                     - 101b: 32 messages requested
                                     - 110b: reserved
                                     - 111b: reserved
                                     
                                     (Please refer to PCIE_MAC_IREG 0x00A8[6:4])
    Msi_Multi_En[22..20]         - (RW) Multiple Message Enable
                                     System software writes to this field to indicate the number of allocated messages (equal to or less than the number of requested messages).
                                     The number of allocated messages is aligned to a power of two. If a function requests four messages (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, two, or one message by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a device will be allocated at least 1 message.
                                     
                                     The encoding is defined as:
                                     - 000b: 1 message allocated
                                     - 001b: 2 messages  allocated
                                     - 010b: 4 message  allocated
                                     - 011b: 8 messages  allocated
                                     - 100b: 16 message  allocated
                                     - 101b: 32 messages  allocated
                                     - 110b: reserved
                                     - 111b: reserved
                                     
                                     The state after reset is 000b.
    Msi_64b_En[23]               - (RO) 64-bit Address Capable
                                     0: The function is not capable of generating a 64-bit message address.
                                     1: The function is capable of generating a 64-bit message address.
    Per_Vector_Masking_Capable[24] - (RO) Per Vector Masking Capable
                                     0: The function does not support MSI per-vector masking.
                                     1: The function supports MSI per-vector masking.
                                     (Please refer to PCIE_MAC_IREG 0x00A8[7])
    Msi_Ext_Cap[25]              - (RO) Extended Message Data Capable
                                     0: The function does not support providing Extended Message Data.
                                     1: The function is capable of providing Extended Message Data.
                                     (Please refer to PCIE_MAC_IREG 0x00A8[27])
    Msi_Ext_En[26]               - (RO) Extended Message Data Enable
                                     0: The function is not enabled to provide Extended Message Data.
                                     1: The function is enabled to provide Extended Message Data.
                                     This bit must be read/write if the Extended Message Data Capable bit is 1; otherwise it must be hardwired to 0.
    RSVD1[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_RSVD1_MASK    0xF8000000u                // RSVD1[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_RSVD1_SHFT    27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Ext_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Ext_En_MASK 0x04000000u                // Msi_Ext_En[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Ext_En_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Ext_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Ext_Cap_MASK 0x02000000u                // Msi_Ext_Cap[25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Ext_Cap_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Per_Vector_Masking_Capable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Per_Vector_Masking_Capable_MASK 0x01000000u                // Per_Vector_Masking_Capable[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Per_Vector_Masking_Capable_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_64b_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_64b_En_MASK 0x00800000u                // Msi_64b_En[23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_64b_En_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Multi_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Multi_En_MASK 0x00700000u                // Msi_Multi_En[22..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Multi_En_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Multi_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Multi_Cap_MASK 0x000E0000u                // Msi_Multi_Cap[19..17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Multi_Cap_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_En_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_En_MASK   0x00010000u                // Msi_En[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_En_SHFT   16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Nx_Ptr_MASK 0x0000FF00u                // Msi_Nx_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Nx_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Cap_Id_MASK 0x000000FFu                // Msi_Cap_Id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_0_Msi_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_ADDR_L_0 (0x74041000 + 0E4hu)---

    RSVD1[1..0]                  - (RO) Reserved
    Msi_Addr_L[31..2]            - (RW) Message Address bit[31:2] for MSI.
                                     System-specified message address.
                                     If the Message Enable bit (bit 0 of the Message Control register) is set, the contents of this register specify the DWORD aligned address (AD[31::02]) for the MSI memory write transaction. AD[1::0] are driven to zero during the address phase.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_Msi_Addr_L_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_Msi_Addr_L_MASK 0xFFFFFFFCu                // Msi_Addr_L[31..2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_Msi_Addr_L_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_RSVD1_MASK 0x00000003u                // RSVD1[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_0_RSVD1_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_ADDR_H_0 (0x74041000 + 0E8hu)---

    Msi_Addr_H[31..0]            - (RW) Message Address bit[63:32] for MSI.
                                     System-specified message upper address.
                                     This register is optional and is implemented only if the device supports a 64-bit message address (bit 7 in Message Control register set). If the Message Enable bit (bit 0 of the Message Control register) is set, the contents of this register (if non-zero) specify the upper 32-bits of a 64-bit message address (AD[63::32]).
                                     If the contents of this register are zero, the device uses the 32 bit address specified by the message address register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_0_Msi_Addr_H_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_0_Msi_Addr_H_MASK 0xFFFFFFFFu                // Msi_Addr_H[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_0_Msi_Addr_H_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_DATA_0 (0x74041000 + 0EChu)---

    Msi_Data[15..0]              - (RW) Message Data for MSI.
                                     System-specified message.
                                     Each MSI function is allocated up to 32 unique messages.
                                     System architecture specifies the number of unique messages supported by the system. If the Message Enable bit (bit 0 of the Message Control register) is set, the message data is driven onto the lower word of the memory write transactions data phase.
    Msi_Ext_Data[31..16]         - (RO) Extended Message Data
                                     This register is optional. For the MSI Capability structures without Per-vector Masking, it must be implemented if the Extended Message Data Capable bit is Set; otherwise, it is outside the MSI Capability structure and undefined. For the MSI Capability structures with Per-vector Masking, it must be implemented if the Extended Message Data Capable bit is Set; otherwise, it is Reserved.
                                     If Extended Message Data Enable bit (bit 10 of the Message Control register) is set, are driven during the memory write transaction's data phase to the Extended Message Data field value; otherwise, AD[31::16] are driven to zero.
                                     If implemented, this field must be read/write.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_Msi_Ext_Data_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_Msi_Ext_Data_MASK 0xFFFF0000u                // Msi_Ext_Data[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_Msi_Ext_Data_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_Msi_Data_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_Msi_Data_MASK 0x0000FFFFu                // Msi_Data[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_0_Msi_Data_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_MASK_0 (0x74041000 + 0F0hu)---

    MSI_MASK[31..0]              - (RW) Mask Bits
                                     For each Mask bit that is Set, the Function is prohibited from sending the associated message.
                                     Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_0_MSI_MASK_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_0_MSI_MASK_MASK 0xFFFFFFFFu                // MSI_MASK[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_0_MSI_MASK_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_PENDING_0 (0x74041000 + 0F4hu)---

    MSI_PENDING[1..0]            - (RO) Pending Bits
                                     For each Pending bit that is Set, the Function has a pending associated message.
                                     Default is 0.
    MSI_PENDING_RSVD[31..2]      - (RO) Reserved Pending Bits for MSI (RO for PCIe RC W1C for backend)

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_MSI_PENDING_RSVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_MSI_PENDING_RSVD_MASK 0xFFFFFFFCu                // MSI_PENDING_RSVD[31..2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_MSI_PENDING_RSVD_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_MSI_PENDING_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_MSI_PENDING_MASK 0x00000003u                // MSI_PENDING[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_0_MSI_PENDING_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_PM_CAP_0 (0x74041000 + 0F8hu)---

    Pmcsr_Cap_Id[7..0]           - (RO) Capability ID
                                     This field, when 01h identifies the linked list item as being the PCI Power Management registers.
    Pmcsr_Nx_Ptr[15..8]          - (RO) Next Pointer
                                     This field provides an offset into the functions PCI Configuration Space pointing to the location of next item in the functions capability list.
    Pmcsr_Version[18..16]        - (RO) Version
                                     A value of 011b indicates that this function complies with revision 1.2 of the PCI Power Management Interface Specification.
    Pmcsr_Pme_Clk[19]            - (RO) PME Clock
                                     When this bit is a 1, it indicates that the function relies on the presence of the PCI clock for PME# operation.
                                     When this bit is a 0, it indicates that no PCI clock is required for the function to generate PME#.
                                     Functions that do not support PME# generation in any state must return 0 for this field.
    RSVD1[20]                    - (RO) Reserved
    Pmcsr_Dsi[21]                - (RO) DSI
                                     The Device Specific Initialization bit indicates whether special initialization of this function is required (beyond the standard PCI configuration header) before the generic class device driver is able to use it.
                                     
                                     Note that this bit is not used by some operating systems.
                                     Microsoft Windows and Windows NT, for instance, do not use this bit to determine whether to use D3. Instead, they use the drivers capabilities to determine this.
                                     
                                     A 1 indicates that the function requires a device specific initialization sequence following transition to the D0 uninitialized state.
    Pmcsr_Aux_Current[24..22]    - (RO) AUX Current
                                     This 3 bit field reports the 3.3Vaux auxiliary current requirements for the PCI function.
                                     If the Data Register has been implemented by this function:
                                     - Reads of this field must return a value of 000b.
                                     - The Data Register takes precedence over this field for 3.3Vaux current requirement reporting.
                                     
                                     If PME# generation from D3cold is not supported by the function (PMC(15)=0), this field must return a value of 000b when read.
                                     
                                     For functions that support PME# from D3cold, and do not implement the Data Register, the following bit assignments apply :
                                     - 000b: self powered
                                     - 001b: Max aux current 55mA required
                                     - 010b: Max aux current 100mA required
                                     - 011b: Max aux current 160mA required
                                     - 100b: Max aux current 220mA required
                                     - 101b: Max aux current 270mA required
                                     - 110b: Max aux current 320mA required
                                     - 111b: Max aux current 375mA required
    Pmcsr_D1_Sup[25]             - (RO) D1 Support
                                     If this bit is a 1, this function supports the D1 Power Management State.
                                     Functions that do not support D1 must always return a value of 0 for this bit
    Pmcsr_D2_Sup[26]             - (RO) D2 Support
                                     If this bit is a 1, this function supports the D2 Power Management State.
                                     Functions that do not support D2 must always return a value of 0 for this bit.
    Pmcsr_Pme_Sup[31..27]        - (RO) PME Support
                                     This 5-bit field indicates the power states in which the function may assert PME#. A value of 0b for any bit indicates that the function is not capable of asserting the PME# signal while in that power state.
                                     
                                     - X XXX1b: PME# can be asserted from D0
                                     - X XX1Xb: PME# can be asserted from D1
                                     - X X1XXb: PME# can be asserted from D2
                                     - X 1XXXb: PME# can be asserted from D3hot
                                     - 1 XXXXb: PME# can be asserted from D3cold

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Pme_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Pme_Sup_MASK 0xF8000000u                // Pmcsr_Pme_Sup[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Pme_Sup_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_D2_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_D2_Sup_MASK 0x04000000u                // Pmcsr_D2_Sup[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_D2_Sup_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_D1_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_D1_Sup_MASK 0x02000000u                // Pmcsr_D1_Sup[25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_D1_Sup_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Aux_Current_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Aux_Current_MASK 0x01C00000u                // Pmcsr_Aux_Current[24..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Aux_Current_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Dsi_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Dsi_MASK 0x00200000u                // Pmcsr_Dsi[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Dsi_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_RSVD1_MASK     0x00100000u                // RSVD1[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_RSVD1_SHFT     20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Pme_Clk_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Pme_Clk_MASK 0x00080000u                // Pmcsr_Pme_Clk[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Pme_Clk_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Version_MASK 0x00070000u                // Pmcsr_Version[18..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Nx_Ptr_MASK 0x0000FF00u                // Pmcsr_Nx_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Nx_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Cap_Id_MASK 0x000000FFu                // Pmcsr_Cap_Id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_0_Pmcsr_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_PM_CTL_STS_0 (0x74041000 + 0FChu)---

    Pmcsr_Pwr_State[1..0]        - (RW) Power State
                                     This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state. The definition of the field values is given below.
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot
                                     
                                     If software attempts to write an unsupported, optional state to this field, the write operation must complete normally on the bus; however, the data is discarded and no state change occurs.
    RSVD1[2]                     - (RO) Reserved
    Pmcsr_No_Soft_Rst[3]         - (RO) No Soft Reset
                                     When set to 1, this bit indicates that devices transitioning from D3hot to D0 because of PowerState commands do not perform an internal reset.
                                     Configuration Context is preserved. Upon transition from the D3hot to the D0 Initialized state, no additional operating system intervention is required to preserve Configuration Context beyond writing the PowerState bits.
                                     
                                     When clear to zero, devices do perform an internal reset upon transitioning from D3hot to D0 via software control of the PowerState bits. Configuration Context is lost when performing the soft reset. Upon transition from the D3hot to the D0 state, full reinitialization sequence is needed to return the device to D0 Initialized.
                                     
                                     Regardless of this bit, devices that transition from D3hot to D0 by a system or bus segment reset will return to the device state D0 Uninitialized with only PME context preserved if PME is supported and enabled.
    RSVD2[7..4]                  - (RO) Reserved
    Pmcsr_Pme_En[8]              - (RW) PME Enable
                                     A 1 enables the function to assert PME#.
                                     When 0, PME# assertion is disabled.
                                     This bit defaults to 0 if the function does not support PME# generation from D3cold.
                                     
                                     If the function supports PME# from D3cold, then this bit is sticky and must be explicitly cleared by the operating system each time it is initially loaded.
                                     Functions that do not support PME# generation from any D-state (i.e., PMC(15:11) = 00000b), may hardwire this bit to be read-only always returning a 0 when read by system software.
    Pmcsr_Data_Sel[12..9]        - (RO) Data Select
                                     This 4-bit field is used to select which data is to be reported through the Data register and Data_Scale field.
                                     This field is a required component of the Data register (offset 7) and must be implemented if the Data register is implemented.
    Pmcsr_Data_Scale[14..13]     - (RO) Data Scale
                                     This 2-bit read-only field indicates the scaling factor to be used when interpreting the value of the Data register. The value and meaning of this field will vary depending on which data value has been selected by the Data_Select field.
                                     This field is a required component of the Data register (offset 7) and must be implemented if the Data register is implemented.
    Pmcsr_Pme_Sts[15]            - (W1C) PME Status
                                     This bit is set when the function would normally assert the PME# signal independent of the state of the PME_En bit.
                                     
                                     Writing a 1 to this bit will clear it and cause the function to stop asserting a PME# (if enabled). Writing a 0 has no effect.
                                     This bit defaults to 0 if the function does not support PME# generation from D3cold.
                                     
                                     If the function supports PME# from D3cold, then this bit is sticky and must be explicitly cleared by the operating system each time the operating system is initially loaded.
    RSVD3[23..16]                - (RO) Reserved
    Pm_Dat[31..24]               - (RO) PME Data
                                     This register is used to report the state dependent data requested by the Data_Select field. The value of this register is scaled by the value reported by the Data_Scale field.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pm_Dat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pm_Dat_MASK 0xFF000000u                // Pm_Dat[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pm_Dat_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD3_MASK 0x00FF0000u                // RSVD3[23..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD3_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pme_Sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pme_Sts_MASK 0x00008000u                // Pmcsr_Pme_Sts[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pme_Sts_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Data_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Data_Scale_MASK 0x00006000u                // Pmcsr_Data_Scale[14..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Data_Scale_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Data_Sel_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Data_Sel_MASK 0x00001E00u                // Pmcsr_Data_Sel[12..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Data_Sel_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pme_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pme_En_MASK 0x00000100u                // Pmcsr_Pme_En[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pme_En_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD2_MASK 0x000000F0u                // RSVD2[7..4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD2_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_No_Soft_Rst_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_No_Soft_Rst_MASK 0x00000008u                // Pmcsr_No_Soft_Rst[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_No_Soft_Rst_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD1_MASK 0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_RSVD1_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pwr_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pwr_State_MASK 0x00000003u                // Pmcsr_Pwr_State[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_0_Pmcsr_Pwr_State_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_CONF_VENDOR_CAP_0 (0x74041000 + 100hu)---

    Ves_Cap_Id[15..0]            - (RO) Capability ID
                                     Extended Capability ID for the Vendor-Specific Capability is 000Bh.
    Ves_Cap_Version[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    Ves_Nx_Ptr[31..20]           - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Nx_Ptr_MASK 0xFFF00000u                // Ves_Nx_Ptr[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Nx_Ptr_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Cap_Version_MASK 0x000F0000u                // Ves_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Cap_Id_MASK 0x0000FFFFu                // Ves_Cap_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_0_Ves_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_CONF_VENDOR_HDR_0 (0x74041000 + 104hu)---

    Ves_Id[15..0]                - (RO) VSEC ID
                                     This field is a vendor-defined ID number that indicates the nature and format of the VSEC structure.
                                     Software must qualify the Vendor ID before interpreting this field.
    Ves_Rev[19..16]              - (RO) VSEC Version
                                     This field is a vendor-defined version number that indicates the version of the VSEC structure.
                                     Software must qualify the Vendor ID and VSEC ID before interpreting this field.
    Ves_Len[31..20]              - (RO) VSEC(Vendor-Specific Extended Capability) Length
                                     This field indicates the number of bytes in the entire VSEC structure, including the PCI Express Extended Capability header, the Vendor-Specific header, and the Vendor-Specific Registers.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Len_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Len_MASK 0xFFF00000u                // Ves_Len[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Len_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Rev_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Rev_MASK 0x000F0000u                // Ves_Rev[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Rev_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Id_MASK 0x0000FFFFu                // Ves_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_0_Ves_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_LTR_EXT_CAP_HDR (0x74041000 + 108hu)---

    PCI_EXT_CAP_ID[15..0]        - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability for the LTR Extended Capability is 0018h.
    PCI_EXT_CAP_VER[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    PCI_EXT_NEXT_CAP[31..20]     - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_NEXT_CAP_MASK 0xFFF00000u                // PCI_EXT_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_CAP_VER_MASK 0x000F0000u                // PCI_EXT_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_CAP_ID_MASK 0x0000FFFFu                // PCI_EXT_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_LTR_EXT_CAP_HDR_PCI_EXT_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_SNOOP_LATENCY (0x74041000 + 10Chu)---

    Max_Snoop_Latency_Val[9..0]  - (RW) Max Snoop LatencyValue
                                     Along with the Max Snoop LatencyScale field, this register specifies the maximum snoop latency that a device is permitted to request. Software should set this to the platform maximum supported latency or less.
    Max_Snoop_Latency_Scale[12..10] - (RW) Max Snoop LatencyScale
                                     This register provides a scale for the value contained within the Maximum Snoop LatencyValue field. Encoding is the same as the LatencyScale fields in the LTR Message.
                                     Hardware operation is undefined if software writes a Not Permitted value to this field.
    RSVD1[15..13]                - (RO) Reserved
    Max_No_Snoop_Latency_Val[25..16] - (RW) Max No-Snoop LatencyValue
                                     Along with the Max No-Snoop LatencyScale field, this register specifies the maximum no-snoop latency that a device is permitted to request. Software should set this to the platform maximum supported latency or less.
    Max_No_Snoop_Latency_Scale[28..26] - (RW) Max No-Snoop LatencyScale
                                     This register provides a scale for the value contained within the Max No-Snoop LatencyValue field. Encoding is the same as the LatencyScale fields in the LTR Message.
                                     Hardware operation is undefined if software writes a Not Permitted value to this field.
    RSVD2[31..29]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_RSVD2_ADDR     PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_RSVD2_MASK     0xE0000000u                // RSVD2[31..29]
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_RSVD2_SHFT     29u
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_No_Snoop_Latency_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_No_Snoop_Latency_Scale_MASK 0x1C000000u                // Max_No_Snoop_Latency_Scale[28..26]
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_No_Snoop_Latency_Scale_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_No_Snoop_Latency_Val_ADDR PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_No_Snoop_Latency_Val_MASK 0x03FF0000u                // Max_No_Snoop_Latency_Val[25..16]
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_No_Snoop_Latency_Val_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_RSVD1_MASK     0x0000E000u                // RSVD1[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_RSVD1_SHFT     13u
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_Snoop_Latency_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_Snoop_Latency_Scale_MASK 0x00001C00u                // Max_Snoop_Latency_Scale[12..10]
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_Snoop_Latency_Scale_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_Snoop_Latency_Val_ADDR PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_Snoop_Latency_Val_MASK 0x000003FFu                // Max_Snoop_Latency_Val[9..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SNOOP_LATENCY_Max_Snoop_Latency_Val_SHFT 0u

/* =====================================================================================

  ---PCIE_L1_PM_SUBS_CAP_HD (0x74041000 + 110hu)---

    L1_PM_CAP_ID[15..0]          - (RO) L1 PM Capability ID
                                     Extended Capability ID for L1 PM Substates is 001Eh.
    L1_PM_CAP_VER[19..16]        - (RO) L1 PM Capability Version
                                     Must be 1h for this version of the specification
    L1_PM_NEXT_CAP[31..20]       - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_NEXT_CAP_MASK 0xFFF00000u                // L1_PM_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_CAP_VER_MASK 0x000F0000u                // L1_PM_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_CAP_ID_MASK 0x0000FFFFu                // L1_PM_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_L1_PM_SUBS_CAP_HD_L1_PM_CAP_ID_SHFT 0u

/* =====================================================================================

  ---L1_PM_SUBS_CAP (0x74041000 + 114hu)---

    PCI_PM_L12_Supported[0]      - (RO) PCI PM L12 Supported
                                     When Set this bit indicates that PCI-PM L1.2 is supported.
    PCI_PM_L11_Supported[1]      - (RO) PCI PM L11 Supported
                                     When Set this bit indicates that PCI-PM L1.1 is supported, and must be Set by all Ports implementing L1 PM Substates.
    ASPM_L12_Supported[2]        - (RO) ASPM L12 Supported
                                     When Set this bit indicates that ASPM L1.2 is supported.
    ASPM_L11_Supported[3]        - (RO) ASPM L11 Supported
                                     When Set this bit indicates that ASPM L1.1 is supported.
    L1_PM_Supported[4]           - (RO) L1 PM Supported
                                     When Set this bit indicates that this Port supports L1 PM Substates.
    T_POWEROFF_val[7..5]         - (RO) T_POWEROFF value
                                     in units of 256ns (000 = 256ns, 110 = 7*256ns)
    Port_Common_Mode_Restore_Time[15..8] - (RO) Port Common Mode Restore Time
                                     Time (in us) required for this Port to re-establish common mode. Required for all Ports for which either the PCI-PM L1.2 Supported bit is Set ASPM L1.2 Supported bit is Set or both are Set otherwise this field is of type RsvdP.
    Port_T_POWER_ON_Scale[17..16] - (RO) Port T_Power_On Scale
                                     Specifies the scale used for the Port T_POWER_ON Value field in the L1 PM Substates Capabilities register.
                                     - 00b: 2 us
                                     - 01b: 10 us 
                                     - 10b: 100 us 
                                     - 11b: Reserved
    RESERVED18[18]               - (RO) Reserved bits
    Port_T_POWER_ON_Value[23..19] - (RO) Port T_Power_On Value
                                     Along with the Port T_POWER_ON Scale field in the L1 PM Substates Capabilities register sets the time (in us) that this Port requires the port on the opposite side of Link to wait in L1.2.Exit after sampling CLKREQ# asserted before actively driving the interface.
    RSVD1[31..24]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_RSVD1_ADDR         PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_RSVD1_MASK         0xFF000000u                // RSVD1[31..24]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_RSVD1_SHFT         24u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_T_POWER_ON_Value_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_T_POWER_ON_Value_MASK 0x00F80000u                // Port_T_POWER_ON_Value[23..19]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_T_POWER_ON_Value_SHFT 19u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_T_POWER_ON_Scale_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_T_POWER_ON_Scale_MASK 0x00030000u                // Port_T_POWER_ON_Scale[17..16]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_T_POWER_ON_Scale_SHFT 16u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_Common_Mode_Restore_Time_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_Common_Mode_Restore_Time_MASK 0x0000FF00u                // Port_Common_Mode_Restore_Time[15..8]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_Port_Common_Mode_Restore_Time_SHFT 8u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_T_POWEROFF_val_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_T_POWEROFF_val_MASK 0x000000E0u                // T_POWEROFF_val[7..5]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_T_POWEROFF_val_SHFT 5u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_L1_PM_Supported_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_L1_PM_Supported_MASK 0x00000010u                // L1_PM_Supported[4]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_L1_PM_Supported_SHFT 4u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ASPM_L11_Supported_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ASPM_L11_Supported_MASK 0x00000008u                // ASPM_L11_Supported[3]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ASPM_L11_Supported_SHFT 3u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ASPM_L12_Supported_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ASPM_L12_Supported_MASK 0x00000004u                // ASPM_L12_Supported[2]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ASPM_L12_Supported_SHFT 2u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_PCI_PM_L11_Supported_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_PCI_PM_L11_Supported_MASK 0x00000002u                // PCI_PM_L11_Supported[1]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_PCI_PM_L11_Supported_SHFT 1u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_PCI_PM_L12_Supported_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_PCI_PM_L12_Supported_MASK 0x00000001u                // PCI_PM_L12_Supported[0]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CAP_PCI_PM_L12_Supported_SHFT 0u

/* =====================================================================================

  ---L1_PM_SUBS_CTR1 (0x74041000 + 118hu)---

    PCI_PM_L12_Enable[0]         - (RW) PCI PM L12 Enable
                                     When set, this bit enables PCI-PM L1.2.
                                     Required for both Upstream and Downstream Ports. For Ports for which the PCI-PM L1.2 Supported bit is Clear this bit is permitted to be hardwired to 0.
                                     For compatibility with possible future extensions, software must not enable L1 PM Substates unless the L1 PM Substates Supported bit in the L1 PM Substates Capabilities Register is Set.
                                     Default value is 0b.
    PCI_PM_L11_Enable[1]         - (RW) PCI PM L11 Enable
                                     When set, this bit enables PCI-PM L1.1.
                                     Required for both Upstream and Downstream Ports.
                                     For compatibility with possible future extensions, software must not enable L1 PM Substates unless the L1 PM Substates Supported bit in the L1 PM Substates Capabilities Register is Set.
                                     Default value is 0b.
    ASPM_L12_Enable[2]           - (RW) ASPM L12 Enable
                                     When set, this bit enables ASPM L1.2.
                                     Required for both Upstream and Downstream Ports.
                                     For Ports for which the ASPM L1.2 Supported bit is Clear this bit is permitted to be hardwired to 0.
                                     For compatibility with possible future extensions, software must not enable L1 PM Substates unless the L1 PM Substates Supported bit in the L1 PM Substates Capabilities Register is Set.
                                     Default value is 0b.
    ASPM_L11_Enable[3]           - (RW) ASPM L11 Enable
                                     When set, this bit enables ASPM L1.1.
                                     Required for both Upstream and Downstream Ports.
                                     For Ports for which the ASPM L1.1 Supported bit is Clear this bit is permitted to be hardwired to 0.
                                     For compatibility with possible future extensions, software must not enable L1 PM Substates unless the L1 PM Substates Supported bit in the L1 PM Substates Capabilities Register is Set.
                                     Default value is 0b.
    RSVD1[7..4]                  - (RO) Reserved
    Common_Mode_Restore_Time[15..8] - (RO) Common Mode Restore Time
                                     Sets value of TCOMMONMODE (in us), which must be used by the Downstream Port for timing the re-establishment of common mode.
                                     This field must only be modified when the ASPM L1.2 Enable and PCI-PM L1.2 Enable bits are both Clear. The Port behavior is undefined if this field is modified when either the ASPM L1.2 Enable and/or PCI-PM L1.2 Enable bit(s) are Set.
    LTR_L12_THRESHOLD_Value[25..16] - (RW) LTR L1.2 Threshold Value
                                     Along with the LTR_L1.2_THRESHOLD_Scale, this field indicates the LTR threshold used to determine if entry into L1 results in L1.1 (if enabled) or L1.2 (if enabled).
    RESERVED26[28..26]           - (RO) Reserved bits
    LTR_L12_THRESHOLD_Scale[31..29] - (RW) LTR L1.2 Threshold Scale
                                     This field provides a scale for the value contained within the LTR_L1.2_THRESHOLD_Value. Encoding is the same as LTR L1.2 Threshold Scale. (LatencyScale fields in the LTR Message)

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_LTR_L12_THRESHOLD_Scale_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_LTR_L12_THRESHOLD_Scale_MASK 0xE0000000u                // LTR_L12_THRESHOLD_Scale[31..29]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_LTR_L12_THRESHOLD_Scale_SHFT 29u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_LTR_L12_THRESHOLD_Value_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_LTR_L12_THRESHOLD_Value_MASK 0x03FF0000u                // LTR_L12_THRESHOLD_Value[25..16]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_LTR_L12_THRESHOLD_Value_SHFT 16u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_Common_Mode_Restore_Time_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_Common_Mode_Restore_Time_MASK 0x0000FF00u                // Common_Mode_Restore_Time[15..8]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_Common_Mode_Restore_Time_SHFT 8u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_RSVD1_MASK        0x000000F0u                // RSVD1[7..4]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_RSVD1_SHFT        4u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ASPM_L11_Enable_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ASPM_L11_Enable_MASK 0x00000008u                // ASPM_L11_Enable[3]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ASPM_L11_Enable_SHFT 3u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ASPM_L12_Enable_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ASPM_L12_Enable_MASK 0x00000004u                // ASPM_L12_Enable[2]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ASPM_L12_Enable_SHFT 2u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_PCI_PM_L11_Enable_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_PCI_PM_L11_Enable_MASK 0x00000002u                // PCI_PM_L11_Enable[1]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_PCI_PM_L11_Enable_SHFT 1u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_PCI_PM_L12_Enable_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_PCI_PM_L12_Enable_MASK 0x00000001u                // PCI_PM_L12_Enable[0]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR1_PCI_PM_L12_Enable_SHFT 0u

/* =====================================================================================

  ---L1_PM_SUBS_CTR2 (0x74041000 + 11Chu)---

    T_POWER_ON_Scale[1..0]       - (RW) T_Power_On Scale
                                     Specifies the scale used for T_POWER_ON Value.
                                     Range of Values
                                     - 00b: 2 us
                                     - 01b: 10 us
                                     - 10b: 100 us
                                     - 11b: Reserved
                                     Required for all Ports that support L1.2, otherwise this field is of type RsvdP.
                                     This field must only be modified when the ASPM L1.2 Enable and PCI-PM L1.2 Enable bits are both Clear. The Port behavior is undefined if this field is modified when either the ASPM L1.2 Enable and/or PCI-PM L1.2 Enable bit(s) are Set.
    RSVD1[2]                     - (RO) Reserved
    T_POWER_ON_Value[7..3]       - (RW) T_Power_On Value
                                     Along with the T_POWER_ON Scale sets the minimum amount of time (in us) that the Port must wait in L1.2.Exit after sampling CLKREQ asserted before actively driving the interface.
    RSVD2[31..8]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_RSVD2_MASK        0xFFFFFF00u                // RSVD2[31..8]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_RSVD2_SHFT        8u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_T_POWER_ON_Value_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_T_POWER_ON_Value_MASK 0x000000F8u                // T_POWER_ON_Value[7..3]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_T_POWER_ON_Value_SHFT 3u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_RSVD1_MASK        0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_T_POWER_ON_Scale_ADDR PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_ADDR
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_T_POWER_ON_Scale_MASK 0x00000003u                // T_POWER_ON_Scale[1..0]
#define PCIE_MAC_CONF_COMMON_L1_PM_SUBS_CTR2_T_POWER_ON_Scale_SHFT 0u

/* =====================================================================================

  ---PCIE_ATS_CAP1_0 (0x74041000 + 120hu)---

    ATS_CAP_ID[15..0]            - (RO) ATS Extended Capability ID
                                     Indicates the ATS Extended Capability structure. This field must return a Capability ID of 000Fh indicating that this is an ATS Extended Capability structure.
    ATS_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    ATS_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_NEXT_CAP_MASK 0xFFF00000u                // ATS_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_CAP_VER_MASK  0x000F0000u                // ATS_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_CAP_ID_MASK   0x0000FFFFu                // ATS_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_0_ATS_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ATS_CAP2_0 (0x74041000 + 124hu)---

    ATS_invalidate_queuedepth[4..0] - (RO) Invalidate Queue Depth
                                     The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.
    ATS_page_aligned_req[5]      - (RO) Page Aligned Request
                                     If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended. This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].
    ATS_invalidate_supported[6]  - (RO) Global Invalidate Supported
                                     If Set, the Function supports Invalidation Requests that have the Global Invalidate bit Set. If Clear, the Function ignores the Global Invalidate bit in all Invalidate Requests (see Section 10.3.8).
                                     This bit is 0b if the Function does not support the PASID TLP Prefix.
    RSVD1[15..7]                 - (RO) Reserved
    ATS_stu[20..16]              - (RO) Smallest Translation Unit (STU)
                                     This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation Completions or Invalidate Requests. This is a power of 2 multiplier and the number of blocks is 2STU. A value of 0 0000b indicates one block and a value of 1 1111b indicates 231 blocks (or 8 TB total)
                                     Default value is 0 0000b.
    RSVD2[30..21]                - (RO) Reserved
    ATS_en[31]                   - (RO) Enable (E)
                                     When Set, the Function is enabled to cache translations.
                                     Behavior is undefined if this bit is Set and the value of the PASID Enable, Execute Requested Enable, or Privileged Mode Requested bits are changed.
                                     Default value is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_en_ADDR       PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_en_MASK       0x80000000u                // ATS_en[31]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_en_SHFT       31u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_RSVD2_MASK        0x7FE00000u                // RSVD2[30..21]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_RSVD2_SHFT        21u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_stu_ADDR      PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_stu_MASK      0x001F0000u                // ATS_stu[20..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_stu_SHFT      16u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_RSVD1_MASK        0x0000FF80u                // RSVD1[15..7]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_RSVD1_SHFT        7u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_invalidate_supported_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_invalidate_supported_MASK 0x00000040u                // ATS_invalidate_supported[6]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_invalidate_supported_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_page_aligned_req_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_page_aligned_req_MASK 0x00000020u                // ATS_page_aligned_req[5]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_page_aligned_req_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_invalidate_queuedepth_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_invalidate_queuedepth_MASK 0x0000001Fu                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_0_ATS_invalidate_queuedepth_SHFT 0u

/* =====================================================================================

  ---PCIE_ARI_CAP1_0 (0x74041000 + 128hu)---

    ARI_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCISIG defined ID number that indicates the nature and format of the extended capability.
                                     PCI Express Extended Capability ID for the ARI Capability is 000Eh.This field is a PCI-SIG defined ID number that indicates the nature and format of the extended capability.
    ARI_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
                                     Must be 1h for this version of the specification.
    ARI_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_NEXT_CAP_MASK 0xFFF00000u                // ARI_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_CAP_VER_MASK  0x000F0000u                // ARI_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_CAP_ID_MASK   0x0000FFFFu                // ARI_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_0_ARI_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ARI_CAP2_0 (0x74041000 + 12Chu)---

    MFVC_Func_Grp_CAP[0]         - (RO) Applicable only for Function 0; must be 0b for all other Functions. If 1b, indicates that the ARI Device supports Function Group level arbitration via its Multi-Function Virtual Channel (MFVC) Capability structure.
    ACS_Func_GrP_CAP[1]          - (RO) Applicable only for Function 0; must be 0b for all other Functions. If 1b, indicates that the ARI Device supports Function Group level granularity for ACS P2P Egress Control via its ACS Capability structures.
    RSVD1[7..2]                  - (RO) Reserved
    NEXT_FUNC_NUM[15..8]         - (RO) This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions. Function 0 starts this linked list of Functions.
    MFVC_Func_Grp_En[16]         - (RO) Applicable only for Function 0; must be hardwired to 0b for all other Functions. When set, the ARI Device must interpret entries in its Function Arbitration Table as Function Group Numbers rather than Function Numbers.
    ACS_Func_Grp_En[17]          - (RO) Applicable only for Function 0; must be hardwired to 0b for all other Functions. When set, each Function in the ARI Device must associate bits within its Egress Control Vector with Function Group Numbers rather than Function Numbers.
    RSVD2[23..18]                - (RO) Reserved
    Func_Grp[31..24]             - (RO) Assigns a Function Group Number to this Function.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_Func_Grp_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_Func_Grp_MASK     0xFF000000u                // Func_Grp[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_Func_Grp_SHFT     24u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_RSVD2_MASK        0x00FC0000u                // RSVD2[23..18]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_RSVD2_SHFT        18u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ACS_Func_Grp_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ACS_Func_Grp_En_MASK 0x00020000u                // ACS_Func_Grp_En[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ACS_Func_Grp_En_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_MFVC_Func_Grp_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_MFVC_Func_Grp_En_MASK 0x00010000u                // MFVC_Func_Grp_En[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_MFVC_Func_Grp_En_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_NEXT_FUNC_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_NEXT_FUNC_NUM_MASK 0x0000FF00u                // NEXT_FUNC_NUM[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_NEXT_FUNC_NUM_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_RSVD1_MASK        0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ACS_Func_GrP_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ACS_Func_GrP_CAP_MASK 0x00000002u                // ACS_Func_GrP_CAP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ACS_Func_GrP_CAP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_MFVC_Func_Grp_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_MFVC_Func_Grp_CAP_MASK 0x00000001u                // MFVC_Func_Grp_CAP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_0_MFVC_Func_Grp_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PRI_CAP1_0 (0x74041000 + 130hu)---

    PRI_CAP_ID[15..0]            - (RO) Page Request Extended Capability ID
                                     Indicates that the associated extended capability structure is a Page Request Extended Capability. This field must return a Capability ID of 0013h.
    PRI_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    PRI_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_NEXT_CAP_MASK 0xFFF00000u                // PRI_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_CAP_VER_MASK  0x000F0000u                // PRI_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_CAP_ID_MASK   0x0000FFFFu                // PRI_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_0_PRI_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_PRI_CAP2_0 (0x74041000 + 134hu)---

    PRI_EN[0]                    - (RO) Enable (E)
                                     This field, when set, indicates that the Page Request Interface is allowed to make page requests. If this field is Clear, the Page Request Interface is not allowed to issue page requests. If both this field and the Stopped field are Clear, then the Page Request Interface will not issue new page requests, but has outstanding page requests that have been transmitted or are queued for transmission. When the Page Request Interface is transitioned from not-Enabled to Enabled, its status flags (Stopped, Response Failure, and Unexpected Response flags) are cleared. Enabling a Page Request Interface that has not successfully Stopped has indeterminate results.
                                     Default value is 0b.
    PRI_RST[1]                   - (RO) Reset (R)
                                     When the Enable field is clear, or is being cleared in the same register update that sets this field, writing a 1b to this field, clears the associated implementation dependent page request credit counter and pending request state for the associated Page Request Interface. No action is initiated if this field is written to 0b or if this field is written with any value while the Enable field is Set. Reads of this field return 0b.
    RSVD1[15..2]                 - (RO) Reserved
    PRI_RF[16]                   - (RO) Response Failure (RF)
                                     This field, when Set, indicates that the Function has received a PRG Response Message indicating a Response Failure. The Function expects no further responses from the host (any received are ignored). This field is Set by the Function and Cleared when a one is written to the field.
                                     For SR-IOV, this field is Set in the PF if any associated Function (PF or VF) receives a PRG Response Message indicating Response Failure.
                                     Default value is 0b.
    PRI_UPRGI[17]                - (RO) Unexpected Page Request Group Index (UPRGI)
                                     This field, when Set, indicates that the Function has received a PRG Response Message containing a PRG index that has no matching request. This field is Set by the Function and cleared when a one is written to the field.
                                     For SR-IOV, this field is Set in the PF if any associated Function (PF or VF) receives a PRG Response Message that does has no matching request.
                                     Default value is 0b.
    RSVD2[23..18]                - (RO) Reserved
    PRI_STOPPED[24]              - (RO) Stopped (S)
                                     When this field is Set, the associated page request interface has stopped issuing additional page requests and that all previously issued Page Requests have completed. When this field is Clear the associated page request interface either has not stopped or has stopped issuing new Page Requests but has outstanding Page Requests. This field is only meaningful if Enable is Clear. If Enable is Set, this field is undefined.
                                     When the Enable field is Cleared, after having been previously Set, the interface transitions to the stopping state and Clears this field. After all page requests currently outstanding at the Function(s) have completed, this field is Set and the interface enters the disabled state. If there were no outstanding page requests, this field may be Set immediately when Enable is Cleared. Resetting the interface will cause an immediate transition to the disabled state. While in the stopping state, receipt of a Response Failure message will result in the immediate transition to the disabled state (Setting this field).
                                     For SR-IOV, this field is Set only when all associated Functions (PF and VFs) have stopped issuing page requests.
                                     Default value is 1b.
    RSVD3[30..25]                - (RO) Reserved
    PRI_RESP_PASID_REQUIRED[31]  - (RO) PRG Response PASID Required
                                     If Set, the Function expects a PASID TLP Prefix on PRG Response Messages when the corresponding Page Requests had a PASID TLP Prefix. If Clear, the Function does not expect PASID TLP Prefixes on any PRG Response Message.
                                     Function behavior is undefined if this bit is Clear and the Function receives a PRG Response Message with a PASID TLP Prefix.
                                     Function behavior is undefined if this bit is Set and the Function receives a PRG Response Message with no PASID TLP Prefix when the corresponding Page Requests had a PASID TLP Prefix.
                                     This bit is RsvdZ if the Function does not support the PASID TLP Prefix.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RESP_PASID_REQUIRED_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RESP_PASID_REQUIRED_MASK 0x80000000u                // PRI_RESP_PASID_REQUIRED[31]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RESP_PASID_REQUIRED_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD3_MASK        0x7E000000u                // RSVD3[30..25]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD3_SHFT        25u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_STOPPED_ADDR  PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_STOPPED_MASK  0x01000000u                // PRI_STOPPED[24]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_STOPPED_SHFT  24u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD2_MASK        0x00FC0000u                // RSVD2[23..18]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD2_SHFT        18u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_UPRGI_ADDR    PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_UPRGI_MASK    0x00020000u                // PRI_UPRGI[17]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_UPRGI_SHFT    17u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RF_ADDR       PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RF_MASK       0x00010000u                // PRI_RF[16]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RF_SHFT       16u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD1_MASK        0x0000FFFCu                // RSVD1[15..2]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RST_ADDR      PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RST_MASK      0x00000002u                // PRI_RST[1]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_RST_SHFT      1u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_EN_ADDR       PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_EN_MASK       0x00000001u                // PRI_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_0_PRI_EN_SHFT       0u

/* =====================================================================================

  ---PCIE_PRI_CAP3_0 (0x74041000 + 138hu)---

    PRI_OUT_PAGE_REQ_CAP[31..0]  - (RO) outstanding page request Capability
                                     This register contains the number of outstanding page request messages the associated Page Request Interface physically supports. This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.
                                     This register is Read Only.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_0_PRI_OUT_PAGE_REQ_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_0_PRI_OUT_PAGE_REQ_CAP_MASK 0xFFFFFFFFu                // PRI_OUT_PAGE_REQ_CAP[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_0_PRI_OUT_PAGE_REQ_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PRI_CAP4_0 (0x74041000 + 13Chu)---

    PRI_OPRA[31..0]              - (RO) outstanding page request allocation
                                     This register contains the number of outstanding page request messages the associated Page Request Interface is allowed to issue (have outstanding at any given instance).
                                     This register is Read/Write. Behavior is undefined if this register is changed while the Enable flag is set. Behavior is undefined if this register is written with a value larger than Outstanding Page Request Capacity. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_0_PRI_OPRA_ADDR     PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_0_PRI_OPRA_MASK     0xFFFFFFFFu                // PRI_OPRA[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_0_PRI_OPRA_SHFT     0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP1 (0x74041000 + 140hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP1_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP1_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP1_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP2 (0x74041000 + 144hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP2_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP2_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP2_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP3 (0x74041000 + 148hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP3_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP3_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP3_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP4 (0x74041000 + 14Chu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP4_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP4_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP4_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP4_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP5 (0x74041000 + 150hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP5_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP5_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP5_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP5_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP6 (0x74041000 + 154hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP6_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP6_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP6_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP6_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP7 (0x74041000 + 158hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP7_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP7_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP7_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP7_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP8 (0x74041000 + 15Chu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP8_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP8_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP8_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP8_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP9 (0x74041000 + 160hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP9_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP9_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP9_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP9_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP10 (0x74041000 + 164hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP10_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP10_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP10_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP10_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP11 (0x74041000 + 168hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP11_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP11_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP11_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP11_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP12 (0x74041000 + 16Chu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP12_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP12_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP12_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP12_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP13 (0x74041000 + 170hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP13_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP13_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP13_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP13_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP14 (0x74041000 + 174hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP14_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP14_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP14_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP14_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP15 (0x74041000 + 178hu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP15_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP15_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP15_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP15_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_SRIOV_CAP16 (0x74041000 + 17Chu)---

    RSVD[31..0]                  - (RO) No implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP16_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP16_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP16_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SRIOV_CAP16_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_MCAST_CAP1_0 (0x74041000 + 180hu)---

    MC_CAP_ID[15..0]             - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the Multicast Capability is 0012h.
    MC_CAP_VER[19..16]           - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    MC_NEXT_CAP[31..20]          - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_NEXT_CAP_MASK 0xFFF00000u                // MC_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_CAP_VER_MASK 0x000F0000u                // MC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_CAP_ID_ADDR  PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_CAP_ID_MASK  0x0000FFFFu                // MC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_0_MC_CAP_ID_SHFT  0u

/* =====================================================================================

  ---PCIE_MCAST_CAP2_0 (0x74041000 + 184hu)---

    MC_MAX_GRP[5..0]             - (RO) MC Maximum Group
                                     Value indicates the maximum number of Multicast Groups that the component supports, encoded as M-1. A value of 00h indicates that one Multicast Group is supported.
    RSVD1[7..6]                  - (RO) Reserved
    MC_WIN_SIZE[13..8]           - (RO) MC Window Size Requested
                                     In Endpoints, the log2 of the Multicast Window size requested. RsvdP in Switch and Root Ports.
    RSVD2[14]                    - (RO) Reserved
    MC_ECRC_REGEN_SUP[15]        - (RO) MC ECRC Regeneration Supported
                                     If Set, indicates that ECRC regeneration is supported.
                                     This bit must not be Set unless the Function supports Advanced Error Reporting, and the ECRC Check Capable bit in the Advanced Error Capabilities and Control register is also Set. However, if ECRC regeneration is supported, its operation is not contingent upon the setting of the ECRC Check Enable bit in the Advanced Error Capabilities and Control register. This bit is applicable to Switch and Root Ports and is RsvdP in all other Functions.
    MC_NUM_GRP[21..16]           - (RO) MC Number Group
                                     Value indicates the number of Multicast Groups configured for use, encoded as N-1. The default value of 00 0000b indicates that one Multicast Group is configured for use. Behavior is undefined if value exceeds MC_Max_Group. This parameter indirectly defines the upper limit of the Multicast address range. This field is ignored if MC_Enable is Clear. Default value is 00 0000b.
    RSVD3[30..22]                - (RO) Reserved
    MC_En[31]                    - (RO) MC Enable
                                     When Set, the Multicast mechanism is enabled for the component. Default value is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_En_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_En_MASK      0x80000000u                // MC_En[31]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_En_SHFT      31u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD3_MASK      0x7FC00000u                // RSVD3[30..22]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD3_SHFT      22u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_NUM_GRP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_NUM_GRP_MASK 0x003F0000u                // MC_NUM_GRP[21..16]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_NUM_GRP_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_ECRC_REGEN_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_ECRC_REGEN_SUP_MASK 0x00008000u                // MC_ECRC_REGEN_SUP[15]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_ECRC_REGEN_SUP_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD2_MASK      0x00004000u                // RSVD2[14]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD2_SHFT      14u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_WIN_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_WIN_SIZE_MASK 0x00003F00u                // MC_WIN_SIZE[13..8]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_WIN_SIZE_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD1_MASK      0x000000C0u                // RSVD1[7..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_RSVD1_SHFT      6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_MAX_GRP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_MAX_GRP_MASK 0x0000003Fu                // MC_MAX_GRP[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_0_MC_MAX_GRP_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP3_0 (0x74041000 + 188hu)---

    MC_Index_pos[5..0]           - (RO) MC Index Position
                                     The location of the LSB of the Multicast Group number within the address. Behavior is undefined if this value is less than 12 and MC_Enable is Set. Default is 0.
    RSVD1[11..6]                 - (RO) Reserved
    MC_Addr_lsb[31..12]          - (RO) MC Base Address Lsb
                                     The base address of the Multicast address range. The behavior is undefined if MC_Enable is Set and bits in this field corresponding to address bits that contain the Multicast Group number or address bits less than MC_Index_Position are non-zero. Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_MC_Addr_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_MC_Addr_lsb_MASK 0xFFFFF000u                // MC_Addr_lsb[31..12]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_MC_Addr_lsb_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_RSVD1_MASK      0x00000FC0u                // RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_RSVD1_SHFT      6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_MC_Index_pos_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_MC_Index_pos_MASK 0x0000003Fu                // MC_Index_pos[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_0_MC_Index_pos_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP4_0 (0x74041000 + 18Chu)---

    MC_Addr_msb[31..0]           - (RO) MC Base Address Msb
                                     The base address of the Multicast address range. The behavior is undefined if MC_Enable is Set and bits in this field corresponding to address bits that contain the Multicast Group number or address bits less than MC_Index_Position are non-zero. Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_0_MC_Addr_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_0_MC_Addr_msb_MASK 0xFFFFFFFFu                // MC_Addr_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_0_MC_Addr_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP5_0 (0x74041000 + 190hu)---

    MC_Rcv_lsb[31..0]            - (RO) MC Receive Lsb
                                     For each bit that's Set, this Function gets a copy of any Multicast TLPs for the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_0_MC_Rcv_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_0_MC_Rcv_lsb_MASK 0xFFFFFFFFu                // MC_Rcv_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_0_MC_Rcv_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP6_0 (0x74041000 + 194hu)---

    MC_Rcv_msb[31..0]            - (RO) MC Receive Msb
                                     For each bit that's Set, this Function gets a copy of any Multicast TLPs for the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_0_MC_Rcv_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_0_MC_Rcv_msb_MASK 0xFFFFFFFFu                // MC_Rcv_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_0_MC_Rcv_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP7_0 (0x74041000 + 198hu)---

    MC_BLK_ALL_lsb[31..0]        - (RO) MC Block All Lsb
                                     For each bit that is Set, this Function is blocked from sending TLPs to the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_0_MC_BLK_ALL_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_0_MC_BLK_ALL_lsb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_0_MC_BLK_ALL_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP8_0 (0x74041000 + 19Chu)---

    MC_BLK_ALL_msb[31..0]        - (RO) MC Block All_Msb
                                     For each bit that is Set, this Function is blocked from sending TLPs to the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_0_MC_BLK_ALL_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_0_MC_BLK_ALL_msb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_0_MC_BLK_ALL_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP9_0 (0x74041000 + 1A0hu)---

    MC_BLK_ALL_UNT_lsb[31..0]    - (RO) MC Block Untranslated Lsb
                                     For each bit that is Set, this Function is blocked from sending TLPs containing Untranslated Addresses to the associated MCG. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_0_MC_BLK_ALL_UNT_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_0_MC_BLK_ALL_UNT_lsb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_UNT_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_0_MC_BLK_ALL_UNT_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP10_0 (0x74041000 + 1A4hu)---

    MC_BLK_ALL_UNT_msb[31..0]    - (RO) MC Block Untranslated Msb
                                     For each bit that is Set, this Function is blocked from sending TLPs containing Untranslated Addresses to the associated MCG. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_0_MC_BLK_ALL_UNT_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_0_MC_BLK_ALL_UNT_msb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_UNT_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_0_MC_BLK_ALL_UNT_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP11_0 (0x74041000 + 1A8hu)---

    MC_overlay_size[5..0]        - (RO) MC Overlay Size
                                     If 6 or greater, specifies the size in bytes of the overlay aperture as a power of 2. If less than 6, disables the overlay mechanism. Default value is 00 0000b.
    MC_overlay_bar_lsb[31..6]    - (RO) MC Overlay BAR Lsb
                                     Specifies the base address of the window onto which MC TLPs passing through this Function will be overlaid. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_MC_overlay_bar_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_MC_overlay_bar_lsb_MASK 0xFFFFFFC0u                // MC_overlay_bar_lsb[31..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_MC_overlay_bar_lsb_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_MC_overlay_size_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_MC_overlay_size_MASK 0x0000003Fu                // MC_overlay_size[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_0_MC_overlay_size_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP12_0 (0x74041000 + 1AChu)---

    MC_overlay_bar_msb[31..0]    - (RO) MC Overlay BAR Msb
                                     Specifies the base address of the window onto which MC TLPs passing through this Function will be overlaid. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_0_MC_overlay_bar_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_0_MC_overlay_bar_msb_MASK 0xFFFFFFFFu                // MC_overlay_bar_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_0_MC_overlay_bar_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP1_0 (0x74041000 + 1B0hu)---

    TPHR_CAP_ID[15..0]           - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the TPH Requester Capability is 0017h.
    TPHR_CAP_VER[19..16]         - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    TPHR_NEXT_CAP[31..20]        - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_NEXT_CAP_MASK 0xFFF00000u                // TPHR_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_CAP_VER_MASK 0x000F0000u                // TPHR_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_CAP_ID_MASK 0x0000FFFFu                // TPHR_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_0_TPHR_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP2_0 (0x74041000 + 1B4hu)---

    TPHR_NOST_MODE_SUP[0]        - (RO) No ST Mode Supported
                                     If set indicates that the Function supports the No ST Mode of operation.
                                     This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.
    TPHR_INT_VECTOR_MODE_SUP[1]  - (RO) Interrupt Vector Mode Supported
                                     If set indicates that the Function supports the Interrupt Vector Mode of operation.
    TPHR_DEV_SPECIFIC_MODE_SUP[2] - (RO) Device Specific Mode Supported
                                     If set indicates that the Function supports the Device Specific Mode of operation.
    RSVD1[7..3]                  - (RO) Reserved
    TPHR_EXTREQ_SUP[8]           - (RO) Extended TPH Requester Supported
                                     If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix.
    TPHR_ST_TABLE_LOC[10..9]     - (RO) ST Table Location
                                     Value indicates if and where the ST Table is located.
                                     Defined Encodings are:
                                     00b: ST Table is not present.
                                     01b: ST Table is located in the TPH Requester Capability structure.
                                     10b: ST Table is located in the MSI-X Table (see Section 7.7).
                                     11b: Reserved
                                     A Function that only supports the No ST Mode of operation must have a value of 00b in this field.
                                     A Function may report a value of 10b only if it implements an MSI-X Capability.
    RSVD3[15..11]                - (RO) Reserved
    TPHR_ST_TABLE_SIZE[26..16]   - (RO) ST Table Size
                                     Value indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of four entries.
                                     There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Capability structure.
                                     When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
                                     This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.
    RSVD4[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD4_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD4_MASK       0xF8000000u                // RSVD4[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD4_SHFT       27u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_ST_TABLE_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_ST_TABLE_SIZE_MASK 0x07FF0000u                // TPHR_ST_TABLE_SIZE[26..16]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_ST_TABLE_SIZE_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD3_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD3_MASK       0x0000F800u                // RSVD3[15..11]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD3_SHFT       11u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_ST_TABLE_LOC_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_ST_TABLE_LOC_MASK 0x00000600u                // TPHR_ST_TABLE_LOC[10..9]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_ST_TABLE_LOC_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_EXTREQ_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_EXTREQ_SUP_MASK 0x00000100u                // TPHR_EXTREQ_SUP[8]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_EXTREQ_SUP_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD1_MASK       0x000000F8u                // RSVD1[7..3]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_DEV_SPECIFIC_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_DEV_SPECIFIC_MODE_SUP_MASK 0x00000004u                // TPHR_DEV_SPECIFIC_MODE_SUP[2]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_DEV_SPECIFIC_MODE_SUP_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_INT_VECTOR_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_INT_VECTOR_MODE_SUP_MASK 0x00000002u                // TPHR_INT_VECTOR_MODE_SUP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_INT_VECTOR_MODE_SUP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_NOST_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_NOST_MODE_SUP_MASK 0x00000001u                // TPHR_NOST_MODE_SUP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_0_TPHR_NOST_MODE_SUP_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP3_0 (0x74041000 + 1B8hu)---

    st_mode_sel[2..0]            - (RO) ST Mode Select
                                     Selects the ST Mode of operation.
                                     Defined encodings are:
                                     000b: No ST Mode
                                     001b: Interrupt Vector Mode
                                     010b: Device Specific Mode
                                     all other encodings: reserved for future use
                                     Functions that support only the No ST Mode of operation must hardwire this field to 000b.
                                     Function operation is undefined if software enables a mode of operation that does not correspond to a mode supported by the Function.
                                     The default value of this field is 000b.
    RSVD1[7..3]                  - (RO) Reserved
    tphr_en[9..8]                - (RO) TPH Requester Enable
                                     Controls the ability to issue Request TLPs using either TPH or Extended TPH.
                                     Defined encodings are:
                                     00b: Function operating as a Requester is not permitted to issue Requests with TPH or Extended TPH.
                                     01b: Function operating as a Requester is permitted to issue Requests with TPH and is not permitted to issue Requests with Extended TPH.
                                     10b: Reserved.
                                     11b: Function operating as a Requester is permitted to issue Requests with TPH and Extended TPH.
                                     Functions that advertise that they do not support Extended TPH are permitted to hardwire bit 9 of this field to 0b.
                                     The default value of this field is 00b.
    RSVD2[31..10]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_RSVD2_MASK       0xFFFFFC00u                // RSVD2[31..10]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_RSVD2_SHFT       10u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_tphr_en_ADDR     PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_tphr_en_MASK     0x00000300u                // tphr_en[9..8]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_tphr_en_SHFT     8u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_RSVD1_MASK       0x000000F8u                // RSVD1[7..3]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_st_mode_sel_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_st_mode_sel_MASK 0x00000007u                // st_mode_sel[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_0_st_mode_sel_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP4_0 (0x74041000 + 1BChu)---

    RSVD[31..0]                  - (RO) No Implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_0_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_0_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_0_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_ACS_CAP1_0 (0x74041000 + 1C0hu)---

    ACS_CAP_ID[15..0]            - (RO) ACS Capability ID
    ACS_CAP_VER[19..16]          - (RO) ACS Capability Version
    ACS_NEXT_CAP[31..20]         - (RO) Next Capability Offset

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_NEXT_CAP_MASK 0xFFF00000u                // ACS_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_CAP_VER_MASK  0x000F0000u                // ACS_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_CAP_ID_MASK   0x0000FFFFu                // ACS_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_0_ACS_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ACS_CAP2_0 (0x74041000 + 1C4hu)---

    ACS_V[0]                     - (RO) ACS Source Validation (V)
                                     Required for Root Ports and Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Source Validation.
    ACS_B[1]                     - (RO) ACS Translation Blocking (B)
                                     Required for Root Ports and Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Translation Blocking.
    ACS_R[2]                     - (RO) ACS P2P Request Redirect (R)
                                     Required for Root Ports that support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.
    ACS_C[3]                     - (RO) ACS P2P Completion Redirect (C)
                                     Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.
    ACS_U[4]                     - (RO) ACS Upstream Forwarding (U)
                                     Required for Root Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.
    ACS_E[5]                     - (RO) ACS P2P Egress Control (E)
                                     Optional for Root Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Control.
    ACS_T[6]                     - (RO) ACS Direct Translated P2P (T)
                                     Required for Root Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Direct Translated P2P.
    RSVD1[7]                     - (RO) Reserved
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_RSVD1_MASK        0x00000080u                // RSVD1[7]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_RSVD1_SHFT        7u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_T_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_T_MASK        0x00000040u                // ACS_T[6]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_T_SHFT        6u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_E_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_E_MASK        0x00000020u                // ACS_E[5]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_E_SHFT        5u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_U_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_U_MASK        0x00000010u                // ACS_U[4]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_U_SHFT        4u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_C_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_C_MASK        0x00000008u                // ACS_C[3]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_C_SHFT        3u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_R_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_R_MASK        0x00000004u                // ACS_R[2]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_R_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_B_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_B_MASK        0x00000002u                // ACS_B[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_B_SHFT        1u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_V_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_V_MASK        0x00000001u                // ACS_V[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_0_ACS_V_SHFT        0u

/* =====================================================================================

  ---PCIE_ACS_CAP3_0 (0x74041000 + 1C8hu)---

    RESERVED0[7..0]              - (RO) Reserved bits
    ACS_VEC_SIZE[13..8]          - (RO) Egress Control Vector Size
                                     Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Control Vector; the encoding 00h indicates 256 bits.
                                     If the ACS P2P Egress Control (E) bit is 0b, the value of the size field is undefined, and the Egress Control Vector register is not required to be present.
    RSVD2[15..14]                - (RO) Reserved
    ACS_V_EN[16]                 - (RO) ACS Source Validation Enable (V)
                                     When Set, the component validates the Bus Number from the Requester ID of Upstream Requests against the secondary/subordinate Bus Numbers.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Source Validation functionality is not implemented.
    ACS_B_EN[17]                 - (RO) ACS Translation Blocking Enable (B)
                                     When Set, the component blocks all Upstream Memory Requests whose Address Translation (AT) field is not set to the default value.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Translation Blocking functionality is not implemented.
    ACS_R_EN[18]                 - (RO) ACS P2P Request Redirect Enable (R)
                                     In conjunction with ACS P2P Egress Control and ACS Direct Translated P2P mechanisms, determines when the component redirects peer-to-peer Requests Upstream (see Section 6.12.3). Note that with Downstream Ports, this bit only applies to Upstream Requests arriving at the Downstream Port, and whose normal routing targets a different Downstream Port.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Request Redirect functionality is not implemented.
    ACS_C_EN[19]                 - (RO) ACS P2P Completion Redirect Enable (C)
                                     Determines when the component redirects peer-to-peer Completions Upstream; applicable only to Completions130 whose Relaxed Ordering Attribute is clear.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Completion Redirect functionality is not implemented.
    ACS_U_EN[20]                 - (RO) ACS Upstream Forwarding Enable (U)
                                     When Set, the component forwards Upstream any Request or Completion TLPs it receives that were redirected Upstream by a component lower in the hierarchy. Note that this bit only applies to Upstream TLPs arriving at a Downstream Port, and whose normal routing targets the same Downstream Port.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Upstream Forwarding functionality is not implemented.
    ACS_E_EN[21]                 - (RO) ACS P2P Egress Control Enable (E)
                                     In conjunction with the Egress Control Vector plus the ACS P2P Request Redirect and ACS Direct Translated P2P mechanisms, determines when to allow, disallow, or redirect peer-to-peer Requests.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Egress Control functionality is not implemented.
    ACS_T_EN[22]                 - (RO) ACS Direct Translated P2P Enable (T)
                                     When Set, overrides the ACS P2P Request Redirect and ACS P2P Egress Control mechanisms with peer-to-peer Memory Requests whose Address Translation (AT) field indicates a Translated address.
                                     This bit is ignored if ACS Translation Blocking Enable (B) is 1b.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Direct Translated P2P functionality is not implemented.
    RSVD3[31..23]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_RSVD3_MASK        0xFF800000u                // RSVD3[31..23]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_RSVD3_SHFT        23u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_T_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_T_EN_MASK     0x00400000u                // ACS_T_EN[22]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_T_EN_SHFT     22u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_E_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_E_EN_MASK     0x00200000u                // ACS_E_EN[21]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_E_EN_SHFT     21u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_U_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_U_EN_MASK     0x00100000u                // ACS_U_EN[20]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_U_EN_SHFT     20u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_C_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_C_EN_MASK     0x00080000u                // ACS_C_EN[19]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_C_EN_SHFT     19u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_R_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_R_EN_MASK     0x00040000u                // ACS_R_EN[18]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_R_EN_SHFT     18u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_B_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_B_EN_MASK     0x00020000u                // ACS_B_EN[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_B_EN_SHFT     17u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_V_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_V_EN_MASK     0x00010000u                // ACS_V_EN[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_V_EN_SHFT     16u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_RSVD2_MASK        0x0000C000u                // RSVD2[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_RSVD2_SHFT        14u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_VEC_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_VEC_SIZE_MASK 0x00003F00u                // ACS_VEC_SIZE[13..8]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_0_ACS_VEC_SIZE_SHFT 8u

/* =====================================================================================

  ---PCIE_ACS_CAP4_0 (0x74041000 + 1CChu)---

    RSVD[31..0]                  - (RO) No Implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_0_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_0_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_0_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIE_PTM_CAP1 (0x74041000 + 1D0hu)---

    PTM_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the Precision Time Measurement Capability is 001Fh.
    PTM_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    PTM_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_NEXT_CAP_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_NEXT_CAP_MASK   0xFFF00000u                // PTM_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_NEXT_CAP_SHFT   20u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_CAP_VER_ADDR    PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_CAP_VER_MASK    0x000F0000u                // PTM_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_CAP_VER_SHFT    16u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_CAP_ID_ADDR     PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_CAP_ID_MASK     0x0000FFFFu                // PTM_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP1_PTM_CAP_ID_SHFT     0u

/* =====================================================================================

  ---PCIE_PTM_CAP2 (0x74041000 + 1D4hu)---

    PTM_REQUEST_CAP[0]           - (RO) PTM request Capability
                                     Endpoints and Root Complex Integrated Endpoints are permitted to, and Switches supporting PTM must, set this bit to 1b to indicate they implement the PTM Requester role.
    PTM_RESPONDER_CAP[1]         - (RO) PTM Responder Capable
                                     Root Ports and RCRB's are permitted to, and Switches supporting PTM must, set this bit to 1b to indicate they implement the PTM Responder role.
                                     If PTM Root Capable is Set, this bit must be Set to 1b.
    PTM_ROOT_CAP[2]              - (RO) PTM Root Capable
                                     Root Ports, RCRB's and Switches are permitted to set this bit to 1b, if they implement a PTM Time Source Role and are capable of serving as the PTM Root.
    PTM_EPTM_CAP[3]              - (RO) ePTM Capable - If Set, indicates that this device supports Enhanced Precision Time Management
                                     (ePTM).
                                     It is strongly recommended that this bit be Set in all PTM Devices.
    PTM_PDA_CAP[4]               - (RO) PTM Propagation Delay Adaptation Capable – When Set, this field indicates the Port supports the PTM Propagation Delay Adaptation Capability, controlled via the PTM Propagation Delay Adaptation Interpretation B bit in the Link Control register.
                                     For a Switch, when Set in the Upstream Port of the Switch, indicates that the Upstream Port and all Downstream Ports of the Switch support the PTM Propagation Delay Adaptation Capability, controlled per Port via the PTM Propagation Delay Adaptation Interpretation B bit in the Link Control register of each Port.
    RSVD1[7..5]                  - (RO) Reserved
    PTM_LOC_CLK_GRAN[15..8]      - (RO) Local Clock Granularity
                                     0000 0000b: Time Source does not implement a local clock. It simply propagates timing information obtained from further Upstream in the PTM Hierarchy when responding to PTM Request messages.
                                     0000 0001b - 1111 1110b: Indicates the period of this Time Source's local clock in ns.
                                     1111 1111b: Indicates the period of this Time Source's local clock is greater than 254 ns.
                                     If the PTM Root Select bit is Set, this local clock is used to provide PTM Master Time. Otherwise, the Time Source uses this local clock to locally track PTM Master Time received from further Upstream within a PTM Hierarchy.
                                     This field is reserved for Functions that do not implement the PTM Time Source role.
    RSVD2[31..16]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_RSVD2_ADDR          PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_RSVD2_MASK          0xFFFF0000u                // RSVD2[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_RSVD2_SHFT          16u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_LOC_CLK_GRAN_ADDR PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_LOC_CLK_GRAN_MASK 0x0000FF00u                // PTM_LOC_CLK_GRAN[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_LOC_CLK_GRAN_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_RSVD1_ADDR          PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_RSVD1_MASK          0x000000E0u                // RSVD1[7..5]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_RSVD1_SHFT          5u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_PDA_CAP_ADDR    PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_PDA_CAP_MASK    0x00000010u                // PTM_PDA_CAP[4]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_PDA_CAP_SHFT    4u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_EPTM_CAP_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_EPTM_CAP_MASK   0x00000008u                // PTM_EPTM_CAP[3]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_EPTM_CAP_SHFT   3u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_ROOT_CAP_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_ROOT_CAP_MASK   0x00000004u                // PTM_ROOT_CAP[2]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_ROOT_CAP_SHFT   2u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_RESPONDER_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_RESPONDER_CAP_MASK 0x00000002u                // PTM_RESPONDER_CAP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_RESPONDER_CAP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_REQUEST_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_REQUEST_CAP_MASK 0x00000001u                // PTM_REQUEST_CAP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP2_PTM_REQUEST_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PTM_CAP3 (0x74041000 + 1D8hu)---

    PTM_EN[0]                    - (RW) PTM enable
                                     When Set, this Function is permitted to participate in the PTM mechanism according to its selected role(s).
    PTM_ROOT_SEL[1]              - (RO) PTM root select
                                     When Set, if the PTM Enable bit is also Set, this Time Source is the PTM Root.
                                     Within each PTM Hierarchy, it is recommended that system software select only the furthest Upstream Time Source to be the PTM Root.
    RSVD1[7..2]                  - (RO) Reserved
    PTM_EFFECTIVE_GRANULARITY[15..8] - (RW) PTM effective granularity
                                     For Functions implementing the PTM Requester Role, this field provides information relating to the expected accuracy of the PTM clock, but does not otherwise affect the PTM mechanism.
                                     For Endpoints, system software must program this field to the value representing the maximum Local Clock Granularity reported by the PTM Root and all intervening PTM Time Sources.
                                     For Root Complex Integrated Endpoints, system software must set this field to the value reported in the Local Clock Granularity field by the associated PTM Time Source.
                                     Permitted values:
                                     0000 0000b: Unknown PTM granularity, one or more Switches between this Function and the PTM Root reported a Local Clock Granularity value of 0000 0000b.
                                     0000 0001b - 1111 1110b: Indicates the effective PTM granularity in ns.
                                     1111 1111b: Indicates the effective PTM granularity is greater than 254 ns.
    RSVD2[31..16]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_RSVD2_ADDR          PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_RSVD2_MASK          0xFFFF0000u                // RSVD2[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_RSVD2_SHFT          16u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_EFFECTIVE_GRANULARITY_ADDR PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_EFFECTIVE_GRANULARITY_MASK 0x0000FF00u                // PTM_EFFECTIVE_GRANULARITY[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_EFFECTIVE_GRANULARITY_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_RSVD1_ADDR          PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_RSVD1_MASK          0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_RSVD1_SHFT          2u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_ROOT_SEL_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_ROOT_SEL_MASK   0x00000002u                // PTM_ROOT_SEL[1]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_ROOT_SEL_SHFT   1u
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_EN_ADDR         PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_EN_MASK         0x00000001u                // PTM_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_PTM_CAP3_PTM_EN_SHFT         0u

/* =====================================================================================

  ---PCIF_DLF_CAP1_0 (0x74041000 + 1E0hu)---

    DLF_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID.
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for Data Link Feature is 0025h
    DLF_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    DLF_NEXT_CAP[31..20]         - (RO) Next Capability Offset.
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
                                     The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_NEXT_CAP_MASK 0xFFF00000u                // DLF_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_CAP_VER_MASK  0x000F0000u                // DLF_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_CAP_ID_MASK   0x0000FFFFu                // DLF_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_0_DLF_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIF_DLF_CAP2_0 (0x74041000 + 1E4hu)---

    DLF_SUP[22..0]               - (RO) Local Data Link Feature Supported.
                                     This field contains the Feature Supported value used when this Port sends a Data Link Feature DLLP (see Figure 3-12). Defined features are:
                                     Bit 0 : Local Scaled Flow Control Supported
                                     This bit indicates that this Port supports the Scaled Flow Control Feature (see Section 3.4.2).
                                     Bits 22:1 RsvdP
                                     Bits associated with features that this Port is capable of supporting are HwInit, defaulting to 1b.
                                     Other bits in this field are RsvdP.
    RESERVED23[30..23]           - (RO) Reserved bits
    DLF_EXCHG_EN[31]             - (RO) Data Link Feature Exchange Enable.
                                     If Set, this bit indicates that this Port will enter the DL_Feature negotiation state (see Section 3.2.1). Default is 1b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_DLF_EXCHG_EN_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_DLF_EXCHG_EN_MASK 0x80000000u                // DLF_EXCHG_EN[31]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_DLF_EXCHG_EN_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_DLF_SUP_ADDR      PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_DLF_SUP_MASK      0x007FFFFFu                // DLF_SUP[22..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_0_DLF_SUP_SHFT      0u

/* =====================================================================================

  ---PCIF_DLF_CAP3_0 (0x74041000 + 1E8hu)---

    RMT_DLF_SUP[22..0]           - (RO) Remote Data Link Feature Supported.
                                     These bits indicate that the Remote Port supports the corresponding Data Link Feature. These bits capture all information from the Feature Supported field of the Data Link Feature DLLP even when this Port doesn't support the corresponding feature.
                                     This field is Cleared on entry to state DL_Inactive (see Section 3.2.1).
                                     Features currently defined are:
                                     Bit 0 : Remote Scaled Flow Control Supported
                                     This bit indicates that the Remote Port supports the Scaled Flow Control Feature (see Section 3.4.2).
                                     Bits 22:1 : Undefined
                                     Default is 00 0000h
    RESERVED23[30..23]           - (RO) Reserved bits
    RMT_DLF_SUP_VALID[31]        - (RO) Remote Data Link Feature Supported Valid.
                                     This bit indicates that the Port has received a Data Link Feature DLLP in state DL_Feature (see Section 3.2.1) and that the Remote Data Link Feature Supported field is meaningful. This bit is Cleared on entry to state DL_Inactive (see Section 3.2.1).
                                     Default is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_RMT_DLF_SUP_VALID_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_RMT_DLF_SUP_VALID_MASK 0x80000000u                // RMT_DLF_SUP_VALID[31]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_RMT_DLF_SUP_VALID_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_RMT_DLF_SUP_ADDR  PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_RMT_DLF_SUP_MASK  0x007FFFFFu                // RMT_DLF_SUP[22..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_0_RMT_DLF_SUP_SHFT  0u

/* =====================================================================================

  ---PCIE_AER_CAP_0 (0x74041000 + 200hu)---

    AER_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability. The Extended Capability ID for the Advanced Error Reporting Capability is 0001h.
    AER_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present. Must be 1h for this version of the specification.
    AER_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_NEXT_CAP_ADDR  PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_NEXT_CAP_MASK  0xFFF00000u                // AER_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_NEXT_CAP_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_CAP_VER_ADDR   PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_CAP_VER_MASK   0x000F0000u                // AER_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_CAP_VER_SHFT   16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_CAP_ID_ADDR    PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_CAP_ID_MASK    0x0000FFFFu                // AER_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_0_AER_CAP_ID_SHFT    0u

/* =====================================================================================

  ---PCIE_AER_UNC_STATUS_0 (0x74041000 + 204hu)---

    AER_UNC_Undefined[3..0]      - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNC_DLPE[4]              - (W1C) Data Link Protocol Error Status
                                     This bit set to one indicates that a Data Link Protocol Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_SDES[5]              - (RO) Surprise Down Error Status
                                     This bit set to one indicates that a Surprise Down Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD1[11..6]         - (RO) Reserved
    AER_UNC_PTLP[12]             - (W1C) Poisoned TLP Status
                                     This bit set to one indicates that a Poisoned TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_FCPE[13]             - (W1C) Flow Control Protocol Error Status
                                     This bit set to one indicates that a Flow Control Protocol Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_CT[14]               - (W1C) Completion Timeout Status
                                     This bit set to one indicates that a Completion Timeout was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_CA[15]               - (W1C) Completer Abort Status
                                     This bit set to one indicates that a Completer Abort was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_UnC[16]              - (W1C) Unexpected Completion Status
                                     This bit set to one indicates that an Unexpected Completion was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD2[17]            - (RO) Reserved
    AER_UNC_MTLP[18]             - (W1C) Malformed TLP Status
                                     This bit set to one indicates that a Malformed TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_ECRC[19]             - (RO) ECRC Error Status
                                     This bit set to one indicates that an ECRC Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_URE[20]              - (W1C) Unsupported Request Error Status
                                     This bit set to one indicates that a Poisoned TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_ACSVIOLATION[21]    - (RO) ACS violation Error Status
                                     This bit set to one indicates that an ACS violation Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_INTERNAL[22]        - (W1C) Internal Error Status
                                     This bit set to one indicates that an Internal Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_MCBLK[23]           - (RO) MC Block Error Status
                                     This bit set to one indicates that a MC Block Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_ATOEGRESSBLK[24]    - (RO) AtomicOp Egress Blocked Status
                                     This bit set to one indicates that an AtomicOp Egress Blocked was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_EEPFXBLK[25]        - (RO) TLP Prefix Blocked Error Status
                                     This bit set to one indicates that a TLP Prefix Blocked Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_POIS_TLP_EGBLK[26]  - (RO) Poisoned TLP Egress Blocked Status
                                     This bit set to one indicates that a Poisoned TLP Egress Blocked was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD3[31..27]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD3_MASK 0xF8000000u                // AER_UNC_RSVD3[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD3_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCM_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_EEPFXBLK_MASK 0x02000000u                // AER_UNCM_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCM_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_MCBLK_MASK 0x00800000u                // AER_UNCM_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_INTERNAL_MASK 0x00400000u                // AER_UNCM_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_ACSVIOLATION_MASK 0x00200000u                // AER_UNCM_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNCM_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_URE_MASK 0x00100000u                // AER_UNC_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_ECRC_MASK 0x00080000u                // AER_UNC_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_MTLP_MASK 0x00040000u                // AER_UNC_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD2_MASK 0x00020000u                // AER_UNC_RSVD2[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD2_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_UnC_MASK 0x00010000u                // AER_UNC_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_CA_MASK 0x00008000u                // AER_UNC_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_CT_MASK 0x00004000u                // AER_UNC_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_FCPE_MASK 0x00002000u                // AER_UNC_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_PTLP_MASK 0x00001000u                // AER_UNC_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD1_MASK 0x00000FC0u                // AER_UNC_RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_RSVD1_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_SDES_MASK 0x00000020u                // AER_UNC_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_DLPE_MASK 0x00000010u                // AER_UNC_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_Undefined_MASK 0x0000000Fu                // AER_UNC_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_0_AER_UNC_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_UNC_MASK_0 (0x74041000 + 208hu)---

    AER_UNCM_Undefined[3..0]     - (RO) Undefined  Mask
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNCM_DLPE[4]             - (RW) Data Link Protocol Error Mask
                                     There is a mask bit per error bit of the Data Link Protocol Error Status register.
    AER_UNCM_SDES[5]             - (RO) Surprise Down Error Mask
                                     There is a mask bit per error bit of the Surprise Down Error Status register. (Endpoint : RO)
    RESERVED6[11..6]             - (RO) Reserved bits
    AER_UNCM_PTLP[12]            - (RW) Poisoned TLP Mask
                                     There is a mask bit per error bit of the Poisoned TLP Status register.
    AER_UNCM_FCPE[13]            - (RW) Flow Control Protocol Error Mask
                                     There is a mask bit per error bit of the Flow Control Protocol Error Status register.
    AER_UNCM_CT[14]              - (RW) Completion Timeout Mask
                                     There is a mask bit per error bit of the Surprise Down Error Status register.
    AER_UNCM_CA[15]              - (RW) Completer Abort Mask
                                     There is a mask bit per error bit of the Completer Abort Status register.
    AER_UNCM_UnC[16]             - (RW) Unexpected Completion Mask
                                     There is a mask bit per error bit of the Unexpected Completion Status register.
    AER_UNCM_RcvOvf[17]          - (RW) Receiver Overflow Mask
                                     There is a mask bit per error bit of the Receiver Overflow Status register.
    AER_UNCM_MTLP[18]            - (RW) Malformed TLP Mask
                                     There is a mask bit per error bit of the Malformed TLP Status register.
    AER_UNCM_ECRC[19]            - (RW) ECRC Error Mask
                                     There is a mask bit per error bit of the ECRC Error Status register.
    AER_UNCM_URE[20]             - (RW) Unsupported Request Error Mask
                                     There is a mask bit per error bit of the Unsupported Request Error Status register.
    AER_UNCM_ACSVIOLATION[21]    - (RO) ACS violation Error Mask
                                     There is a mask bit per error bit of the ACS violation Error Status register.
    AER_UNCM_INTERNAL[22]        - (RW) Internal Error Mask
                                     There is a mask bit per error bit of the Internal Error Status register.
    AER_UNCM_MCBLK[23]           - (RO) MC Block Error Mask
                                     There is a mask bit per error bit of the MC Block Error Status register.
    AER_UNCM_ATOEGRESSBLK[24]    - (RO) AtomicOp Egress Blocked Mask
                                     There is a mask bit per error bit of the AtomicOp Egress Blocked Status register.
    AER_UNCM_EEPFXBLK[25]        - (RO) TLP Prefix Blocked Error Mask
                                     There is a mask bit per error bit of the TLP Prefix Blocked Error Status register.
    AER_UNCM_POIS_TLP_EGBLK[26]  - (RO) Poisoned TLP Egress Blocked Mask
                                     There is a mask bit per error bit of the Poisoned TLP Egress Blocked Status register.
    AER_UNCM_RSVD2[31..27]       - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_RSVD2_MASK 0xF8000000u                // AER_UNCM_RSVD2[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_RSVD2_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCM_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_EEPFXBLK_MASK 0x02000000u                // AER_UNCM_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCM_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_MCBLK_MASK 0x00800000u                // AER_UNCM_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_INTERNAL_MASK 0x00400000u                // AER_UNCM_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ACSVIOLATION_MASK 0x00200000u                // AER_UNCM_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_URE_MASK 0x00100000u                // AER_UNCM_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ECRC_MASK 0x00080000u                // AER_UNCM_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_MTLP_MASK 0x00040000u                // AER_UNCM_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_RcvOvf_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_RcvOvf_MASK 0x00020000u                // AER_UNCM_RcvOvf[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_RcvOvf_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_UnC_MASK 0x00010000u                // AER_UNCM_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_CA_MASK 0x00008000u                // AER_UNCM_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_CT_MASK 0x00004000u                // AER_UNCM_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_FCPE_MASK 0x00002000u                // AER_UNCM_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_PTLP_MASK 0x00001000u                // AER_UNCM_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_SDES_MASK 0x00000020u                // AER_UNCM_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_DLPE_MASK 0x00000010u                // AER_UNCM_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_Undefined_MASK 0x0000000Fu                // AER_UNCM_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_0_AER_UNCM_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_UNC_SEVERITY_0 (0x74041000 + 20Chu)---

    AER_UNCS_Undefined[3..0]     - (RO) Undefined  Severity
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNCS_DLPE[4]             - (RW) Data Link Protocol Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_SDES[5]             - (RO) Surprise Down Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    RSVD1[11..6]                 - (RO) Reserved
    AER_UNCS_PTLP[12]            - (RW) Poisoned TLP Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_FCPE[13]            - (RW) Flow Control Protocol Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_CT[14]              - (RW) Completion Timeout Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_CA[15]              - (RW) Completer Abort Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_UnC[16]             - (RW) Unexpected Completion Severity
                                     1: Reported as fatal error
                                     0: Reported as non-fatal error
    AER_UNCS_RcvOvf[17]          - (RW) Receiver Overflow Error Severity
                                     1: Reported as fatal error
                                     0: Reported as non-fatal error
    AER_UNCS_MTLP[18]            - (RW) Malformed TLP Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ECRC[19]            - (RW) ECRC Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_URE[20]             - (RW) Unsupported Request Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ACSVIOLATION[21]    - (RO) ACS violation Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_INTERNAL[22]        - (RW) Internal Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_MCBLK[23]           - (RO) MC Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ATOEGRESSBLK[24]    - (RO) atoegress Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_EEPFXBLK[25]        - (RO) eepfx Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_POIS_TLP_EGBLK[26]  - (RO) Posioned TLP eg Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_RSVD3_MASK 0xF8000000u                // RSVD3[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_RSVD3_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCS_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_EEPFXBLK_MASK 0x02000000u                // AER_UNCS_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCS_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_MCBLK_MASK 0x00800000u                // AER_UNCS_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_INTERNAL_MASK 0x00400000u                // AER_UNCS_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ACSVIOLATION_MASK 0x00200000u                // AER_UNCS_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_URE_MASK 0x00100000u                // AER_UNCS_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ECRC_MASK 0x00080000u                // AER_UNCS_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_MTLP_MASK 0x00040000u                // AER_UNCS_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_RcvOvf_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_RcvOvf_MASK 0x00020000u                // AER_UNCS_RcvOvf[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_RcvOvf_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_UnC_MASK 0x00010000u                // AER_UNCS_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_CA_MASK 0x00008000u                // AER_UNCS_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_CT_MASK 0x00004000u                // AER_UNCS_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_FCPE_MASK 0x00002000u                // AER_UNCS_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_PTLP_MASK 0x00001000u                // AER_UNCS_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_RSVD1_MASK 0x00000FC0u                // RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_RSVD1_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_SDES_MASK 0x00000020u                // AER_UNCS_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_DLPE_MASK 0x00000010u                // AER_UNCS_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_Undefined_MASK 0x0000000Fu                // AER_UNCS_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_0_AER_UNCS_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CO_STATUS_0 (0x74041000 + 210hu)---

    AER_CO_RE[0]                 - (W1C) Receiver Error Status
                                     This bit set to one indicates that a Receiver Error was detected; software may clear an error status by writing a 1b
    AER_CO_RSVD1[5..1]           - (RO) Reserved
    AER_CO_BTLP[6]               - (W1C) Bad TLP Status
                                     This bit set to one indicates that a Bad TLP was detected; software may clear an error status by writing a 1b.
    AER_CO_BDLLP[7]              - (W1C) Bad DLLP Status
                                     This bit set to one indicates that a Bad DLLP was detected; software may clear an error status by writing a 1b.
    AER_CO_RNR[8]                - (W1C) REPLAY_NUM Rollover Status
                                     This bit set to one indicates that a REPLAY_NUM Rollover was detected; software may clear an error status by writing a 1b.
    AER_CO_RSVD2[11..9]          - (RO) Reserved
    AER_CO_RTT[12]               - (W1C) Replay Timer Timeout Status
                                     This bit set to one indicates that a Replay Timer Timeout was detected; software may clear an error status by writing a 1b.
    AER_CO_ANFE[13]              - (W1C) Advisory Non-Fatal Error Status
                                     This bit set to one indicates that an Advisory Non-Fatal Error was detected; software may clear an error status by writing a 1b.
    AER_CO_INTERNAL[14]          - (W1C) Internal Non-Fatal Error Status
                                     This bit set to one indicates that an Internal Non-Fatal Error was detected; software may clear an error status by writing a 1b.
    AER_CO_RSVD3[31..15]         - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD3_MASK 0xFFFF8000u                // AER_CO_RSVD3[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD3_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_INTERNAL_MASK 0x00004000u                // AER_CO_INTERNAL[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_INTERNAL_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_ANFE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_ANFE_MASK 0x00002000u                // AER_CO_ANFE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_ANFE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RTT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RTT_MASK 0x00001000u                // AER_CO_RTT[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RTT_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD2_MASK 0x00000E00u                // AER_CO_RSVD2[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD2_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RNR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RNR_MASK 0x00000100u                // AER_CO_RNR[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RNR_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_BDLLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_BDLLP_MASK 0x00000080u                // AER_CO_BDLLP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_BDLLP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_BTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_BTLP_MASK 0x00000040u                // AER_CO_BTLP[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_BTLP_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD1_MASK 0x0000003Eu                // AER_CO_RSVD1[5..1]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RSVD1_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RE_MASK 0x00000001u                // AER_CO_RE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_0_AER_CO_RE_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CO_MASK_0 (0x74041000 + 214hu)---

    AER_COM_RE[0]                - (RW) Receiver Error Mask
                                     There is a mask bit per error bit of the Receiver Error Status register.
    AER_COM_RSVD1[5..1]          - (RO) Reserved
    AER_COM_BTLP[6]              - (RW) Bad TLP Mask
                                     There is a mask bit per error bit of the Bad TLP Status register.
    AER_COM_BDLLP[7]             - (RW) Bad DLLP Mask
                                     There is a mask bit per error bit of the Bad DLLP Status register.
    AER_COM_RNR[8]               - (RW) REPLAY_NUM Rollover Mask
                                     There is a mask bit per error bit of the REPLAY_NUM Rollover Status register.
    AER_COM_RSVD2[11..9]         - (RO) Reserved
    AER_COM_RTT[12]              - (RW) Replay Timer Timeout Mask
                                     There is a mask bit per error bit of the Replay Timer Timeout Status register.
    AER_COM_ANFE[13]             - (RW) Advisory Non-Fatal Error Mask
                                     There is a mask bit per error bit of the Advisory Non-Fatal Error Status register.
    AER_COM_INTERNAL_MSK_COR[14] - (RW) Internal Correctable Error Mask
                                     There is a mask bit per error bit of the Internal Correctable Error Status register.
    AER_COM_RSVD3[31..15]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD3_MASK 0xFFFF8000u                // AER_COM_RSVD3[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD3_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_INTERNAL_MSK_COR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_INTERNAL_MSK_COR_MASK 0x00004000u                // AER_COM_INTERNAL_MSK_COR[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_INTERNAL_MSK_COR_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_ANFE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_ANFE_MASK 0x00002000u                // AER_COM_ANFE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_ANFE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RTT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RTT_MASK 0x00001000u                // AER_COM_RTT[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RTT_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD2_MASK 0x00000E00u                // AER_COM_RSVD2[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD2_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RNR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RNR_MASK 0x00000100u                // AER_COM_RNR[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RNR_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_BDLLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_BDLLP_MASK 0x00000080u                // AER_COM_BDLLP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_BDLLP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_BTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_BTLP_MASK 0x00000040u                // AER_COM_BTLP[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_BTLP_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD1_MASK 0x0000003Eu                // AER_COM_RSVD1[5..1]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RSVD1_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RE_MASK 0x00000001u                // AER_COM_RE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_0_AER_COM_RE_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CAPCTL_0 (0x74041000 + 218hu)---

    AER_CAP_FEP[4..0]            - (RO) First Error Pointer
                                     The First Error Pointer is a field that identifies the bit position of the first error reported in the Uncorrectable Error Status register
    AER_CAP_ECRC_CAP[5]          - (RO) ECRC Generation Capable
                                     If Set, this bit indicates that the Function is capable of generating
    AER_CAP_ECRC_EN[6]           - (RW) ECRC Generation Enable
                                     When Set, ECRC generation is enabled Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b. Default value of this bit is 0b.
    AER_CAP_ECRC_CK_CAP[7]       - (RO) ECRC Check Capable
                                     If Set, this bit indicates that the Function is capable of checking ECRC
    AER_CAP_ECRC_CK_EN[8]        - (RW) ECRC Check Enable
                                     When Set, ECRC checking is enabled. Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b. Default value of this bit is 0b.
    AER_CAP_RSVD1[10..9]         - (RO) Reserved
    AER_CAP_TLPPFX_LOG[11]       - (RO) TLP prefix log present
                                     If the VF implements Header Log Sharing, this bit is 0b when the Header Log contains all 1s due to an overflow condition.
    AER_CAP_COMP_LOG[12]         - (RO) Completion Timeout log
                                     If Set, this bit indicates that the Function is capable of recording header of TLP associated with error to AER_HDX_LOG.
                                     Please refer to internal register 0x00D8[0].
    AER_CAP_RSVD2[31..13]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_RSVD2_MASK 0xFFFFE000u                // AER_CAP_RSVD2[31..13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_RSVD2_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_COMP_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_COMP_LOG_MASK 0x00001000u                // AER_CAP_COMP_LOG[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_COMP_LOG_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_TLPPFX_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_TLPPFX_LOG_MASK 0x00000800u                // AER_CAP_TLPPFX_LOG[11]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_TLPPFX_LOG_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_RSVD1_MASK 0x00000600u                // AER_CAP_RSVD1[10..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_RSVD1_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CK_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CK_EN_MASK 0x00000100u                // AER_CAP_ECRC_CK_EN[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CK_EN_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CK_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CK_CAP_MASK 0x00000080u                // AER_CAP_ECRC_CK_CAP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CK_CAP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_EN_MASK 0x00000040u                // AER_CAP_ECRC_EN[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_EN_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CAP_MASK 0x00000020u                // AER_CAP_ECRC_CAP[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_ECRC_CAP_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_FEP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_FEP_MASK 0x0000001Fu                // AER_CAP_FEP[4..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_0_AER_CAP_FEP_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD0_LOG_0 (0x74041000 + 21Chu)---

    AER_HD0_LOG[31..0]           - (RO) Header Log Register  1st DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_0_AER_HD0_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_0_AER_HD0_LOG_MASK 0xFFFFFFFFu                // AER_HD0_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_0_AER_HD0_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD1_LOG_0 (0x74041000 + 220hu)---

    AER_HD1_LOG[31..0]           - (RO) Header Log Register 2nd DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_0_AER_HD1_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_0_AER_HD1_LOG_MASK 0xFFFFFFFFu                // AER_HD1_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_0_AER_HD1_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD2_LOG_0 (0x74041000 + 224hu)---

    AER_HD2_LOG[31..0]           - (RO) Header Log Register 3rd DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_0_AER_HD2_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_0_AER_HD2_LOG_MASK 0xFFFFFFFFu                // AER_HD2_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_0_AER_HD2_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD3_LOG_0 (0x74041000 + 228hu)---

    AER_HD3_LOG[31..0]           - (RO) Header Log Register 4th DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_0_AER_HD3_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_0_AER_HD3_LOG_MASK 0xFFFFFFFFu                // AER_HD3_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_0_AER_HD3_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_RP_CMD_REG_0 (0x74041000 + 22Chu)---

    COR_ERR_RPT_EN[0]            - (RO) Correctable Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a correctable error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port
    NFT_ERR_RPT_EN[1]            - (RO) Non-Fatal Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a Non-fatal error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port.
    FAT_ERR_RPT_EN[2]            - (RO) Fatal Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a Non-fatal error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port.
    RSVD1[31..3]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_RSVD1_MASK      0xFFFFFFF8u                // RSVD1[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_RSVD1_SHFT      3u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_FAT_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_FAT_ERR_RPT_EN_MASK 0x00000004u                // FAT_ERR_RPT_EN[2]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_FAT_ERR_RPT_EN_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_NFT_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_NFT_ERR_RPT_EN_MASK 0x00000002u                // NFT_ERR_RPT_EN[1]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_NFT_ERR_RPT_EN_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_COR_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_COR_ERR_RPT_EN_MASK 0x00000001u                // COR_ERR_RPT_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_0_COR_ERR_RPT_EN_SHFT 0u

/* =====================================================================================

  ---PCIE_RP_STS_REG_0 (0x74041000 + 230hu)---

    COR_ERR_RX[0]                - (RO) ERR_COR Received
                                     Set when a Correctable error Message is received and this bit is not already Set.
    COR_ERR_MULT_RX[1]           - (RO) Multiple ERR_COR Received
                                     Set when a Correctable error Message is received and ERR_COR Received is already Set.
    UNC_ERR_RX[2]                - (RO) ERR_FATAL/NONFATAL Received
                                     Set when either a Fatal or a Non-fatal error Message is received and this bit is not already Set.
    UNC_ERR_MULT_RX[3]           - (RO) Multiple ERR_FATAL/NONFATAL Received
                                     Set when either a Fatal or a Non-fatal error is received and ERR_FATAL/NONFATAL Received is already Set.
    UNC_ERR_FIRST_FAT[4]         - (RO) First Uncorrectable Fatal
                                     Set when the first Uncorrectable error Message received is for a Fatal error.
    UNC_ERR_NON_FAT[5]           - (RO) Non-Fatal Error Messages Received
                                     Set when one or more Non-Fatal Uncorrectable error Messages have been received.
    UNC_ERR_FAT[6]               - (RO) Fatal Error Messages Received
                                     Set when one or more Fatal Uncorrectable error Messages have been received.
    UNC_ERR_RSVD1[26..7]         - (RO) Reserved
    AER_MSI_NUM[31..27]          - (RO) Advanced Error Interrupt Message Number
                                     This register indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_AER_MSI_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_AER_MSI_NUM_MASK 0xF8000000u                // AER_MSI_NUM[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_AER_MSI_NUM_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_RSVD1_MASK 0x07FFFF80u                // UNC_ERR_RSVD1[26..7]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_RSVD1_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_FAT_MASK 0x00000040u                // UNC_ERR_FAT[6]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_FAT_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_NON_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_NON_FAT_MASK 0x00000020u                // UNC_ERR_NON_FAT[5]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_NON_FAT_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_FIRST_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_FIRST_FAT_MASK 0x00000010u                // UNC_ERR_FIRST_FAT[4]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_FIRST_FAT_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_MULT_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_MULT_RX_MASK 0x00000008u                // UNC_ERR_MULT_RX[3]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_MULT_RX_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_RX_MASK 0x00000004u                // UNC_ERR_RX[2]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_UNC_ERR_RX_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_COR_ERR_MULT_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_COR_ERR_MULT_RX_MASK 0x00000002u                // COR_ERR_MULT_RX[1]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_COR_ERR_MULT_RX_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_COR_ERR_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_COR_ERR_RX_MASK 0x00000001u                // COR_ERR_RX[0]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_0_COR_ERR_RX_SHFT 0u

/* =====================================================================================

  ---ERR_SRC_ID_REG_0 (0x74041000 + 234hu)---

    ERR_COR_SRC_ID[15..0]        - (RO) ERR_COR Source Identification
                                     Loaded with the Requester ID indicated in the received ERR_COR Message when the ERR_COR Received bit is not already set.
                                     Default value of this field is 0000h.
    ERR_FAT_NFAT_SRC_ID[31..16]  - (RO) ERR_FATAL/NONFATAL Source Identification
                                     Loaded with the Requester ID indicated in the received ERR_FATAL or ERR_NONFATAL Message when the ERR_FATAL/NONFATAL Received bit is not already set.
                                     Default value of this field is 0000h.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ERR_FAT_NFAT_SRC_ID_ADDR PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ERR_FAT_NFAT_SRC_ID_MASK 0xFFFF0000u                // ERR_FAT_NFAT_SRC_ID[31..16]
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ERR_FAT_NFAT_SRC_ID_SHFT 16u
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ERR_COR_SRC_ID_ADDR PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ADDR
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ERR_COR_SRC_ID_MASK 0x0000FFFFu                // ERR_COR_SRC_ID[15..0]
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_0_ERR_COR_SRC_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX0_LOG_0 (0x74041000 + 238hu)---

    AER_PFX0_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_0_AER_PFX0_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_0_AER_PFX0_LOG_MASK 0xFFFFFFFFu                // AER_PFX0_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_0_AER_PFX0_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX1_LOG_0 (0x74041000 + 23Chu)---

    AER_PFX1_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_0_AER_PFX1_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_0_AER_PFX1_LOG_MASK 0xFFFFFFFFu                // AER_PFX1_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_0_AER_PFX1_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX2_LOG_0 (0x74041000 + 240hu)---

    AER_PFX2_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_0_AER_PFX2_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_0_AER_PFX2_LOG_MASK 0xFFFFFFFFu                // AER_PFX2_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_0_AER_PFX2_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX3_LOG_0 (0x74041000 + 244hu)---

    AER_PFX3_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_0_AER_PFX3_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_0_AER_PFX3_LOG_MASK 0xFFFFFFFFu                // AER_PFX3_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_0_AER_PFX3_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_FRS_QUEUE_CAP1 (0x74041000 + 250hu)---

    FRS_QUEUE_CAP_ID[15..0]      - (RO) PCI Express Extended Capability ID - This field is a PCI-SIG defined ID number that indicates the nature
                                     and format of the extended capability.
                                     PCI Express Extended Capability ID for the FRS Queueing Extended Capability is 0021h.
    FRS_QUEUE_CAP_VER[19..16]    - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    FRS_QUEUE_NEXT_PTR[31..20]   - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_NEXT_PTR_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_NEXT_PTR_MASK 0xFFF00000u                // FRS_QUEUE_NEXT_PTR[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_NEXT_PTR_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_CAP_VER_MASK 0x000F0000u                // FRS_QUEUE_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_CAP_ID_MASK 0x0000FFFFu                // FRS_QUEUE_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP1_FRS_QUEUE_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_FRS_QUEUE_CAP2 (0x74041000 + 254hu)---

    FRS_QUEUE_MAX_DEPTH[11..0]   - (RO) FRS Queue Max Depth - Indicates the implemented queue depth, with valid values ranging from 001h
                                     (queue depth of 1) to FFFh (queue depth of 4095)
                                     The value of FRS Message Queue Depth must not exceed this value.
                                     The value 000h is Reserved.
    RSVD20[15..12]               - (RO) Reserved
    FRS_INT_MSG_NUM[20..16]      - (RO) FRS Interrupt Message Number - This register indicates which MSI/MSI-X vector is used for the interrupt
                                     message generated in association with FRS Message Received or FRS Message Overflow.
                                     For MSI, the value in this register indicates the offset between the base Message Data and the interrupt
                                     message that is generated. Hardware is required to update this field so that it is correct if the number of
                                     MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable
                                     field in the Message Control Register for MSI.
                                     For MSI-X, the value in this register indicates which MSI-X Table entry is used to generate the interrupt
                                     message. The entry must be one of the first 32 entries even if the Function implements more than 32 entries.
                                     For a given MSI-X implementation, the entry must remain constant.
                                     If both MSI and MSI-X are implemented, they are permitted to use different vectors, though software is
                                     permitted to enable only one mechanism at a time. If MSI-X is enabled, the value in this register must indicate
                                     the vector for MSI-X. If MSI is enabled or neither is enabled, the value in this register must indicate
                                     the vector for MSI. If software enables both MSI and MSI-X at the same time, the value in this register is
                                     undefined.
    RSVD21[31..21]               - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_RSVD21_ADDR   PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_RSVD21_MASK   0xFFE00000u                // RSVD21[31..21]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_RSVD21_SHFT   21u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_FRS_INT_MSG_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_FRS_INT_MSG_NUM_MASK 0x001F0000u                // FRS_INT_MSG_NUM[20..16]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_FRS_INT_MSG_NUM_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_RSVD20_ADDR   PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_RSVD20_MASK   0x0000F000u                // RSVD20[15..12]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_RSVD20_SHFT   12u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_FRS_QUEUE_MAX_DEPTH_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_FRS_QUEUE_MAX_DEPTH_MASK 0x00000FFFu                // FRS_QUEUE_MAX_DEPTH[11..0]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP2_FRS_QUEUE_MAX_DEPTH_SHFT 0u

/* =====================================================================================

  ---PCIE_FRS_QUEUE_CAP3 (0x74041000 + 258hu)---

    FRS_MSG_RCVD[0]              - (W1C) FRS Message Received - This bit is Set when a new FRS Message is Received or generated by this Root
                                     or generated by this Root Port or Root Complex Event Collector.
                                     Root Ports must Clear this bit when the Link is DL_Down.
                                     Default value of this bit is 0b.
    FRS_MSG_OVER_FLOW[1]         - (W1C) FRS Message Overflow - This bit is set if the FRS Message queue is full and a new FRS Message is received
                                     or generated by this Root Port or Root Complex Event Collector.
                                     Root Ports must Clear this bit when the Link is DL_Down.
                                     Default value of this bit is 0b.
    RSVD21[15..2]                - (RO) Reserved
    FRS_INT_EN[16]               - (RW) FRS Interrupt Enable - When Set and MSI or MSI-X is enabled, the Port must issue an MSI/MSI-X interrupt
                                     to indicate the 0b to 1b transition of either the FRS Message Received or the FRS Message Overflow bits.
                                     Default value of this bit is 0b.
    RSVD22[31..17]               - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_RSVD22_ADDR   PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_RSVD22_MASK   0xFFFE0000u                // RSVD22[31..17]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_RSVD22_SHFT   17u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_INT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_INT_EN_MASK 0x00010000u                // FRS_INT_EN[16]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_INT_EN_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_RSVD21_ADDR   PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_RSVD21_MASK   0x0000FFFCu                // RSVD21[15..2]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_RSVD21_SHFT   2u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_MSG_OVER_FLOW_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_MSG_OVER_FLOW_MASK 0x00000002u                // FRS_MSG_OVER_FLOW[1]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_MSG_OVER_FLOW_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_MSG_RCVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_MSG_RCVD_MASK 0x00000001u                // FRS_MSG_RCVD[0]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP3_FRS_MSG_RCVD_SHFT 0u

/* =====================================================================================

  ---PCIE_FRS_QUEUE_CAP4 (0x74041000 + 25Chu)---

    FRS_MSG_RCVD[15..0]          - (RO) FRS Message Queue Function ID - Recorded from the Requester ID of the oldest FRS Message Received
                                     or generated by this Root Port or Root Complex Event Collector and still in the queue.
                                     Undefined if FRS Message Queue Depth is 000h.
    FRS_MSG_REASON[19..16]       - (RO) FRS Message Queue Reason - Recorded from the FRS Reason of the oldest FRS Message Received or
                                     generated by this Root Port or Root Complex Event Collector and still in the queue.
                                     Undefined if FRS Message Queue Depth is 000h.
    FRS_MSG_QUEUE_DEPTH[31..20]  - (RO) FRS Message Queue Depth - indicates the current number of FRS Messages in the queue.
                                     The value of 000h indicates an empty queue.
                                     Default value of this field is 000h.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_QUEUE_DEPTH_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_QUEUE_DEPTH_MASK 0xFFF00000u                // FRS_MSG_QUEUE_DEPTH[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_QUEUE_DEPTH_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_REASON_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_REASON_MASK 0x000F0000u                // FRS_MSG_REASON[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_REASON_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_RCVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_RCVD_MASK 0x0000FFFFu                // FRS_MSG_RCVD[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_FRS_QUEUE_CAP4_FRS_MSG_RCVD_SHFT 0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP0_0 (0x74041000 + 2D0hu)---

    DVSEC_CAP_ID[15..0]          - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for the Designated Vendor-Specific Extended Capability is 0023h.
    DVSEC_CAP_VER[19..16]        - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    DVSEC_NEXT_PTR[31..20]       - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_NEXT_PTR_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_NEXT_PTR_MASK 0xFFF00000u                // DVSEC_NEXT_PTR[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_NEXT_PTR_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_CAP_VER_MASK 0x000F0000u                // DVSEC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_CAP_ID_MASK 0x0000FFFFu                // DVSEC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_0_DVSEC_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP1_0 (0x74041000 + 2D4hu)---

    DVSEC_VID[15..0]             - (RO) DVSEC Vendor ID
                                     This field is the Vendor ID associated with the vendor that defined the contents of this capability.
    DVSEC_REV[19..16]            - (RO) DVSEC Revision
                                     This field is a vendor-defined version number that indicates the version of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID and DVSEC ID before interpreting this field.
    DVSEC_LEN[31..20]            - (RO) DVSEC Length
                                     This field indicates the number of bytes in the entire DVSEC structure, including the PCI Express Extended Capability Header , the DVSEC Header 1, DVSEC Header 2, and DVSEC vendor-specific registers.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_LEN_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_LEN_MASK  0xFFF00000u                // DVSEC_LEN[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_LEN_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_REV_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_REV_MASK  0x000F0000u                // DVSEC_REV[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_REV_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_VID_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_VID_MASK  0x0000FFFFu                // DVSEC_VID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_0_DVSEC_VID_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP2_0 (0x74041000 + 2D8hu)---

    DVSEC_ID[15..0]              - (RO) DVSEC ID
                                     This field is a vendor-defined ID that indicates the nature and format of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID before interpreting this field.
    DVSEC_REG[31..16]            - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_DVSEC_REG_MASK  0xFFFF0000u                // DVSEC_REG[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_DVSEC_REG_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_DVSEC_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_DVSEC_ID_MASK   0x0000FFFFu                // DVSEC_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_0_DVSEC_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP3_0 (0x74041000 + 2DChu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_0_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_0_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_0_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP4_0 (0x74041000 + 2E0hu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_0_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_0_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_0_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP5_0 (0x74041000 + 2E4hu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_0_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_0_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_0_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_EXT_DSN_CAP_0 (0x74041000 + 2F0hu)---

    DSN_Cap_Id[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability. Extended Capability ID for the Device Serial Number Capability is 0003h.
    DSN_Cap_Version[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present. Must be 1h for this version of the specification.
    DSN_Nx_Ptr[31..20]           - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Nx_Ptr_MASK 0xFFF00000u                // DSN_Nx_Ptr[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Nx_Ptr_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Cap_Version_MASK 0x000F0000u                // DSN_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Cap_Id_MASK 0x0000FFFFu                // DSN_Cap_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_0_DSN_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_DSN_NUB1_0 (0x74041000 + 2F4hu)---

    DSN_NUMBER_1ST[31..0]        - (RO) PCI Express Device Serial Number
                                     This field contains the IEEE defined 64 bit extended unique identifier . This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_0_DSN_NUMBER_1ST_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_0_DSN_NUMBER_1ST_MASK 0xFFFFFFFFu                // DSN_NUMBER_1ST[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_0_DSN_NUMBER_1ST_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_DSN_NUB2_0 (0x74041000 + 2F8hu)---

    DSN_NUMBER_2nd[31..0]        - (RO) PCI Express Device Serial Number
                                     This field contains the IEEE defined 64 bit extended unique identifier. This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_0_DSN_NUMBER_2nd_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_0_DSN_NUMBER_2nd_MASK 0xFFFFFFFFu                // DSN_NUMBER_2nd[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_0_DSN_NUMBER_2nd_SHFT 0u

/* =====================================================================================

  ---SEC_PCIE_EXT_CAP (0x74041000 + 300hu)---

    SEC_PCIE_EXT_ID[15..0]       - (RO) Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the Secondary PCI Express Extended Capability is 0019h.
    SEC_PCIE_EXT_CAP_VER[19..16] - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    SEC_PCIE_EXT_NEXT_PTR[31..20] - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_NEXT_PTR_ADDR PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_NEXT_PTR_MASK 0xFFF00000u                // SEC_PCIE_EXT_NEXT_PTR[31..20]
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_NEXT_PTR_SHFT 20u
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_CAP_VER_MASK 0x000F0000u                // SEC_PCIE_EXT_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_ID_ADDR PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_ID_MASK 0x0000FFFFu                // SEC_PCIE_EXT_ID[15..0]
#define PCIE_MAC_CONF_COMMON_SEC_PCIE_EXT_CAP_SEC_PCIE_EXT_ID_SHFT 0u

/* =====================================================================================

  ---LINK_CONTROL_3 (0x74041000 + 304hu)---

    Perform_Equalization[0]      - (RO) Perform Equalization
                                     When this bit is 1b and a 1b is written to the Retrain Link bit with the Target Link Speed field set to 8.0 GT/s, the Downstream Port must perform Link Equalization. This bit is RW for Downstream Ports and for Upstream Ports when Crosslink Supported is 1b. This bit is not applicable and is RsvdP for Upstream Ports when the Crosslink Supported bit is 0b. The default value is 0b.
    Link_Eq_Req_Int_En[1]        - (RO) Link Equalization Request Interrupt Enable
                                     When set, this bit enables the generation of an interrupt to indicate that the Link Equalization Request bit has been set. This bit is RW for Downstream Ports and for Upstream Ports when Crosslink Supported is 1b This bit is not applicable and is RsvdP for Upstream Ports when the Crosslink Supported bit is 0b.
    RSVD1[8..2]                  - (RO) Reserved
    Lower_Skp_Gen_En[15..9]      - (RO) Enable Lower SKP OS Generation Vector
                                     When the Link is in L0 and the bit in this field corresponding to the current Link speed is Set, SKP Ordered Sets are scheduled at the rate defined for SRNS, overriding the rate required based on the clock tolerance architecture. See Section 4.2.7 for additional requirements.
                                     Bit definitions within this field are:
                                     Bit 0 2.5 GT/s
                                     Bit 1 5.0 GT/s
                                     Bit 2 8.0 GT/s
                                     Bit 3 16.0 GT/s
                                     Bits 6:4 RsvdP
                                     Each unreserved bit in this field must be RW if the corresponding bit in the Lower SKP OS Generation Supported Speeds Vector is Set, otherwise the bit must be RW or hardwired to 0.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit in the Lower SKP OS Generation Supported Speeds Vector is not Set.
                                     The default value of this field is 000 0000b.
    RSVD2[31..16]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_RSVD2_ADDR         PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_RSVD2_MASK         0xFFFF0000u                // RSVD2[31..16]
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_RSVD2_SHFT         16u
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Lower_Skp_Gen_En_ADDR PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Lower_Skp_Gen_En_MASK 0x0000FE00u                // Lower_Skp_Gen_En[15..9]
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Lower_Skp_Gen_En_SHFT 9u
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_RSVD1_ADDR         PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_RSVD1_MASK         0x000001FCu                // RSVD1[8..2]
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_RSVD1_SHFT         2u
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Link_Eq_Req_Int_En_ADDR PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Link_Eq_Req_Int_En_MASK 0x00000002u                // Link_Eq_Req_Int_En[1]
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Link_Eq_Req_Int_En_SHFT 1u
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Perform_Equalization_ADDR PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Perform_Equalization_MASK 0x00000001u                // Perform_Equalization[0]
#define PCIE_MAC_CONF_COMMON_LINK_CONTROL_3_Perform_Equalization_SHFT 0u

/* =====================================================================================

  ---LANE_ERR_STATUS_G3 (0x74041000 + 308hu)---

    Lane_Err_Status_Bits[31..0]  - (W1C) Lane Error Status Bits Each bit indicates
                                     Each bit indicates if the corresponding Lane detected a Lane-based error. A value
                                     of 1b indicates that a Lane based-error was detected on the corresponding Lane Number

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_ERR_STATUS_G3_Lane_Err_Status_Bits_ADDR PCIE_MAC_CONF_COMMON_LANE_ERR_STATUS_G3_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_ERR_STATUS_G3_Lane_Err_Status_Bits_MASK 0xFFFFFFFFu                // Lane_Err_Status_Bits[31..0]
#define PCIE_MAC_CONF_COMMON_LANE_ERR_STATUS_G3_Lane_Err_Status_Bits_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_01 (0x74041000 + 30Chu)---

    Ln0_DnP_TxPreset[3..0]       - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln0_DnP_RxPresetHint[6..4]   - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln0_UpP_TxPreset[11..8]      - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln0_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln1_DnP_TxPreset[19..16]     - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln1_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln1_UpP_TxPreset[27..24]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln1_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_UpP_RxPresetHinr_MASK 0x70000000u                // Ln1_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_UpP_TxPreset_MASK 0x0F000000u                // Ln1_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_DnP_RxPresetHint_MASK 0x00700000u                // Ln1_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_DnP_TxPreset_MASK 0x000F0000u                // Ln1_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln1_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_UpP_RxPresetHinr_MASK 0x00007000u                // Ln0_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_UpP_TxPreset_MASK 0x00000F00u                // Ln0_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_DnP_RxPresetHint_MASK 0x00000070u                // Ln0_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_DnP_TxPreset_MASK 0x0000000Fu                // Ln0_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_01_Ln0_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_23 (0x74041000 + 310hu)---

    Ln2_DnP_TxPreset[3..0]       - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln2_DnP_RxPresetHint[6..4]   - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln2_UpP_TxPreset[11..8]      - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln2_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln3_DnP_TxPreset[19..16]     - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln3_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln3_UpP_TxPreset[27..24]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln3_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_UpP_RxPresetHinr_MASK 0x70000000u                // Ln3_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_UpP_TxPreset_MASK 0x0F000000u                // Ln3_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_DnP_RxPresetHint_MASK 0x00700000u                // Ln3_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_DnP_TxPreset_MASK 0x000F0000u                // Ln3_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln3_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_UpP_RxPresetHinr_MASK 0x00007000u                // Ln2_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_UpP_TxPreset_MASK 0x00000F00u                // Ln2_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_DnP_RxPresetHint_MASK 0x00000070u                // Ln2_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_DnP_TxPreset_MASK 0x0000000Fu                // Ln2_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_23_Ln2_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_45 (0x74041000 + 314hu)---

    Ln4_DnP_TxPreset[3..0]       - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln4_DnP_RxPresetHint[6..4]   - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln4_UpP_TxPreset[11..8]      - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln4_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln5_DnP_TxPreset[19..16]     - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln5_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln5_UpP_TxPreset[27..24]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln5_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_UpP_RxPresetHinr_MASK 0x70000000u                // Ln5_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_UpP_TxPreset_MASK 0x0F000000u                // Ln5_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_DnP_RxPresetHint_MASK 0x00700000u                // Ln5_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_DnP_TxPreset_MASK 0x000F0000u                // Ln5_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln5_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_UpP_RxPresetHinr_MASK 0x00007000u                // Ln4_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_UpP_TxPreset_MASK 0x00000F00u                // Ln4_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_DnP_RxPresetHint_MASK 0x00000070u                // Ln4_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_DnP_TxPreset_MASK 0x0000000Fu                // Ln4_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_45_Ln4_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_67 (0x74041000 + 318hu)---

    Ln6_DnP_TxPreset[3..0]       - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln6_DnP_RxPresetHint[6..4]   - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln6_UpP_TxPreset[11..8]      - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln6_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln7_DnP_TxPreset[19..16]     - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln7_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln7_UpP_TxPreset[27..24]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln7_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_UpP_RxPresetHinr_MASK 0x70000000u                // Ln7_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_UpP_TxPreset_MASK 0x0F000000u                // Ln7_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_DnP_RxPresetHint_MASK 0x00700000u                // Ln7_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_DnP_TxPreset_MASK 0x000F0000u                // Ln7_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln7_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_UpP_RxPresetHinr_MASK 0x00007000u                // Ln6_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_UpP_TxPreset_MASK 0x00000F00u                // Ln6_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_DnP_RxPresetHint_MASK 0x00000070u                // Ln6_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_DnP_TxPreset_MASK 0x0000000Fu                // Ln6_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_67_Ln6_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_89 (0x74041000 + 31Chu)---

    Ln8_DnP_TxPreset[3..0]       - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln8_DnP_RxPresetHint[6..4]   - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln8_UpP_TxPreset[11..8]      - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln8_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln9_DnP_TxPreset[19..16]     - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln9_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln9_UpP_TxPreset[27..24]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln9_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_UpP_RxPresetHinr_MASK 0x70000000u                // Ln9_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_UpP_TxPreset_MASK 0x0F000000u                // Ln9_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_DnP_RxPresetHint_MASK 0x00700000u                // Ln9_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_DnP_TxPreset_MASK 0x000F0000u                // Ln9_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln9_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_UpP_RxPresetHinr_MASK 0x00007000u                // Ln8_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_UpP_TxPreset_MASK 0x00000F00u                // Ln8_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_DnP_RxPresetHint_MASK 0x00000070u                // Ln8_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_DnP_TxPreset_MASK 0x0000000Fu                // Ln8_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_89_Ln8_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_1011 (0x74041000 + 320hu)---

    Ln10_DnP_TxPreset[3..0]      - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln10_DnP_RxPresetHint[6..4]  - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln10_UpP_TxPreset[11..8]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln10_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln11_DnP_TxPreset[19..16]    - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln11_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln11_UpP_TxPreset[27..24]    - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln11_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_UpP_RxPresetHinr_MASK 0x70000000u                // Ln11_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_UpP_TxPreset_MASK 0x0F000000u                // Ln11_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_DnP_RxPresetHint_MASK 0x00700000u                // Ln11_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_DnP_TxPreset_MASK 0x000F0000u                // Ln11_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln11_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_UpP_RxPresetHinr_MASK 0x00007000u                // Ln10_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_UpP_TxPreset_MASK 0x00000F00u                // Ln10_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_DnP_RxPresetHint_MASK 0x00000070u                // Ln10_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_DnP_TxPreset_MASK 0x0000000Fu                // Ln10_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1011_Ln10_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_1213 (0x74041000 + 324hu)---

    Ln12_DnP_TxPreset[3..0]      - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln12_DnP_RxPresetHint[6..4]  - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln12_UpP_TxPreset[11..8]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln12_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln13_DnP_TxPreset[19..16]    - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln13_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln13_UpP_TxPreset[27..24]    - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln13_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_UpP_RxPresetHinr_MASK 0x70000000u                // Ln13_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_UpP_TxPreset_MASK 0x0F000000u                // Ln13_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_DnP_RxPresetHint_MASK 0x00700000u                // Ln13_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_DnP_TxPreset_MASK 0x000F0000u                // Ln13_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln13_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_UpP_RxPresetHinr_MASK 0x00007000u                // Ln12_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_UpP_TxPreset_MASK 0x00000F00u                // Ln12_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_DnP_RxPresetHint_MASK 0x00000070u                // Ln12_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_DnP_TxPreset_MASK 0x0000000Fu                // Ln12_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1213_Ln12_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---LANE_EQ_CTR_1415 (0x74041000 + 328hu)---

    Ln14_DnP_TxPreset[3..0]      - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln14_DnP_RxPresetHint[6..4]  - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED7[7]                 - (RO) Reserved bits
    Ln14_UpP_TxPreset[11..8]     - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln14_UpP_RxPresetHinr[14..12] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED15[15]               - (RO) Reserved bits
    Ln15_DnP_TxPreset[19..16]    - (RO) Downstream Port Transmitter Preset 
                                     Transmitter Preset used for equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    Ln15_DnP_RxPresetHint[22..20] - (RO) Downstream Port Receiver Preset Hint
                                     Receiver Preset Hint may be used as a hint for receiver equalization by this Port when the Port is operating as a Downstream Port. 
                                     This field is ignored when the Port is operating as an Upstream Port.
    RESERVED23[23]               - (RO) Reserved bits
    Ln15_UpP_TxPreset[27..24]    - (RO) Upstream Port Transmitter Preset
                                     Field contains the Transmit Preset value sent on the associated Lane during Link Equalization.
    Ln15_UpP_RxPresetHinr[30..28] - (RO) Upstream Port Receiver Preset Hint
                                     Field contains the Receiver Preset Hint value sent on the associated Lane during Link Equalization.
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_UpP_RxPresetHinr_MASK 0x70000000u                // Ln15_UpP_RxPresetHinr[30..28]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_UpP_RxPresetHinr_SHFT 28u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_UpP_TxPreset_MASK 0x0F000000u                // Ln15_UpP_TxPreset[27..24]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_UpP_TxPreset_SHFT 24u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_DnP_RxPresetHint_MASK 0x00700000u                // Ln15_DnP_RxPresetHint[22..20]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_DnP_RxPresetHint_SHFT 20u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_DnP_TxPreset_MASK 0x000F0000u                // Ln15_DnP_TxPreset[19..16]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln15_DnP_TxPreset_SHFT 16u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_UpP_RxPresetHinr_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_UpP_RxPresetHinr_MASK 0x00007000u                // Ln14_UpP_RxPresetHinr[14..12]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_UpP_RxPresetHinr_SHFT 12u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_UpP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_UpP_TxPreset_MASK 0x00000F00u                // Ln14_UpP_TxPreset[11..8]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_UpP_TxPreset_SHFT 8u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_DnP_RxPresetHint_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_DnP_RxPresetHint_MASK 0x00000070u                // Ln14_DnP_RxPresetHint[6..4]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_DnP_RxPresetHint_SHFT 4u
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_DnP_TxPreset_ADDR PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_ADDR
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_DnP_TxPreset_MASK 0x0000000Fu                // Ln14_DnP_TxPreset[3..0]
#define PCIE_MAC_CONF_COMMON_LANE_EQ_CTR_1415_Ln14_DnP_TxPreset_SHFT 0u

/* =====================================================================================

  ---PL_16G_CAP1 (0x74041000 + 340hu)---

    PL_16G_CAP[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     The Extended Capability ID for the Physical Layer 16.0 GT/s Capability is 0026h.
    PL_16G_VER[19..16]           - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    PL_16G_NEXT_CAP[31..20]      - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_NEXT_CAP_ADDR  PCIE_MAC_CONF_COMMON_PL_16G_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_NEXT_CAP_MASK  0xFFF00000u                // PL_16G_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_NEXT_CAP_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_VER_ADDR       PCIE_MAC_CONF_COMMON_PL_16G_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_VER_MASK       0x000F0000u                // PL_16G_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_VER_SHFT       16u
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_CAP_ADDR       PCIE_MAC_CONF_COMMON_PL_16G_CAP1_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_CAP_MASK       0x0000FFFFu                // PL_16G_CAP[15..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP1_PL_16G_CAP_SHFT       0u

/* =====================================================================================

  ---PL_16G_CAP2 (0x74041000 + 344hu)---

    RSVD[31..0]                  - (RO) RsvdP

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP2_RSVD_ADDR             PCIE_MAC_CONF_COMMON_PL_16G_CAP2_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP2_RSVD_MASK             0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP2_RSVD_SHFT             0u

/* =====================================================================================

  ---PL_16G_CAP3 (0x74041000 + 348hu)---

    RSVD[31..0]                  - (RO) RsvdP

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP3_RSVD_ADDR             PCIE_MAC_CONF_COMMON_PL_16G_CAP3_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP3_RSVD_MASK             0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_CAP3_RSVD_SHFT             0u

/* =====================================================================================

  ---PL_16G_STS (0x74041000 + 34Chu)---

    EQ_16G_CPL[0]                - (RO) Equalization 16.0 GT/s Complete
                                     When Set, this bit indicates that the 16.0 GT/s Transmitter Equalization procedure has completed.
                                     The default value of this bit is 0b.
                                     For a Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions.
    EQ_16G_PH1_SUC[1]            - (RO) Equalization 16.0 GT/s Phase 1 Successful
                                     When set to 1b, this bit indicates that Phase 1 of the 16.0 GT/s Transmitter Equalization procedure has successfully completed.
                                     The default value of this bit is 0b.
                                     For a Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions.
    EQ_16G_PH2_SUC[2]            - (RO) Equalization 16.0 GT/s Phase 2 Successful
                                     When set to 1b, this bit indicates that Phase 2 of the 16.0 GT/s Transmitter Equalization procedure has successfully completed.
                                     The default value of this bit is 0b.
                                     For a Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions.
    EQ_16G_PH3_SUC[3]            - (RO) Equalization 16.0 GT/s Phase 3 Successful
                                     When set to 1b, this bit indicates that Phase 3 of the 16.0 GT/s Transmitter Equalization procedure has successfully completed.
                                     The default value of this bit is 0b.
                                     For a Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions.
    EQ_16G_REQ[4]                - (W1C) Link Equalization Request 16.0 GT/s
                                     This bit is Set by hardware to request the 16.0 GT/s Link equalization process to be performed on the Link.
                                     The default value of this bit is 0b.
                                     For a Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions.
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_REQ_ADDR        PCIE_MAC_CONF_COMMON_PL_16G_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_REQ_MASK        0x00000010u                // EQ_16G_REQ[4]
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_REQ_SHFT        4u
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH3_SUC_ADDR    PCIE_MAC_CONF_COMMON_PL_16G_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH3_SUC_MASK    0x00000008u                // EQ_16G_PH3_SUC[3]
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH3_SUC_SHFT    3u
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH2_SUC_ADDR    PCIE_MAC_CONF_COMMON_PL_16G_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH2_SUC_MASK    0x00000004u                // EQ_16G_PH2_SUC[2]
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH2_SUC_SHFT    2u
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH1_SUC_ADDR    PCIE_MAC_CONF_COMMON_PL_16G_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH1_SUC_MASK    0x00000002u                // EQ_16G_PH1_SUC[1]
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_PH1_SUC_SHFT    1u
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_CPL_ADDR        PCIE_MAC_CONF_COMMON_PL_16G_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_CPL_MASK        0x00000001u                // EQ_16G_CPL[0]
#define PCIE_MAC_CONF_COMMON_PL_16G_STS_EQ_16G_CPL_SHFT        0u

/* =====================================================================================

  ---PL_16G_DP_STS (0x74041000 + 350hu)---

    Data_Parity_Mis_STS[15..0]   - (W1C) Local Data Parity Mismatch Status
                                     Each bit indicates if the corresponding Lane detected a Data Parity mismatch. A value of 1b indicates that a mismatch was detected on the corresponding Lane Number.
                                     The default value of each bit is 0b.
                                     For Ports that are narrower than 32 Lanes, the unused upper bits [31: Maximum Link Width] are RsvdZ.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_DP_STS_Data_Parity_Mis_STS_ADDR PCIE_MAC_CONF_COMMON_PL_16G_DP_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_DP_STS_Data_Parity_Mis_STS_MASK 0x0000FFFFu                // Data_Parity_Mis_STS[15..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_DP_STS_Data_Parity_Mis_STS_SHFT 0u

/* =====================================================================================

  ---PL_16G_FR_DP_STS (0x74041000 + 354hu)---

    Data_Parity_Mis_STS[15..0]   - (W1C) First Retimer Data Parity Mismatch Status
                                     Each bit indicates if the corresponding Lane detected a Data Parity mismatch. A value of 1b indicates that a mismatch was detected on the corresponding Lane Number.
                                     The default value of each bit is 0b.
                                     The value of this field is undefined when no Retimers are present.
                                     For Ports that are narrower than 32 Lanes, the unused upper bits [31: Maximum Link Width] are RsvdZ.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_FR_DP_STS_Data_Parity_Mis_STS_ADDR PCIE_MAC_CONF_COMMON_PL_16G_FR_DP_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_FR_DP_STS_Data_Parity_Mis_STS_MASK 0x0000FFFFu                // Data_Parity_Mis_STS[15..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_FR_DP_STS_Data_Parity_Mis_STS_SHFT 0u

/* =====================================================================================

  ---PL_16G_SR_DP_STS (0x74041000 + 358hu)---

    Data_Parity_Mis_STS[15..0]   - (W1C) Second Retimer Data Parity Mismatch Status
                                     Each bit indicates if the corresponding Lane detected a Data Parity mismatch. A value of 1b indicates that a mismatch was detected on the corresponding Lane Number.
                                     The default value of each bit is 0b.
                                     The value of this field is undefined when no Retimers are present or only one Retimer is present.
                                     For Ports that are narrower than 32 Lanes, the unused upper bits [31: Maximum Link Width] are RsvdZ.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_SR_DP_STS_Data_Parity_Mis_STS_ADDR PCIE_MAC_CONF_COMMON_PL_16G_SR_DP_STS_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_SR_DP_STS_Data_Parity_Mis_STS_MASK 0x0000FFFFu                // Data_Parity_Mis_STS[15..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_SR_DP_STS_Data_Parity_Mis_STS_SHFT 0u

/* =====================================================================================

  ---PL_16G_RSVD (0x74041000 + 35Chu)---

    RSVD[31..0]                  - (RO) RsvdZ

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_RSVD_RSVD_ADDR             PCIE_MAC_CONF_COMMON_PL_16G_RSVD_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_RSVD_RSVD_MASK             0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_RSVD_RSVD_SHFT             0u

/* =====================================================================================

  ---PL_16G_LANE_EQ_3_0 (0x74041000 + 360hu)---

    LANE0_DP_16G_TXPRESET[3..0]  - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE0_UP_16G_TXPRESET[7..4]  - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE1_DP_16G_TXPRESET[11..8] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE1_UP_16G_TXPRESET[15..12] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE2_DP_16G_TXPRESET[19..16] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE2_UP_16G_TXPRESET[23..20] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE3_DP_16G_TXPRESET[27..24] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE3_UP_16G_TXPRESET[31..28] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE3_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE3_UP_16G_TXPRESET_MASK 0xF0000000u                // LANE3_UP_16G_TXPRESET[31..28]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE3_UP_16G_TXPRESET_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE3_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE3_DP_16G_TXPRESET_MASK 0x0F000000u                // LANE3_DP_16G_TXPRESET[27..24]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE3_DP_16G_TXPRESET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE2_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE2_UP_16G_TXPRESET_MASK 0x00F00000u                // LANE2_UP_16G_TXPRESET[23..20]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE2_UP_16G_TXPRESET_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE2_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE2_DP_16G_TXPRESET_MASK 0x000F0000u                // LANE2_DP_16G_TXPRESET[19..16]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE2_DP_16G_TXPRESET_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE1_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE1_UP_16G_TXPRESET_MASK 0x0000F000u                // LANE1_UP_16G_TXPRESET[15..12]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE1_UP_16G_TXPRESET_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE1_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE1_DP_16G_TXPRESET_MASK 0x00000F00u                // LANE1_DP_16G_TXPRESET[11..8]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE1_DP_16G_TXPRESET_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE0_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE0_UP_16G_TXPRESET_MASK 0x000000F0u                // LANE0_UP_16G_TXPRESET[7..4]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE0_UP_16G_TXPRESET_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE0_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE0_DP_16G_TXPRESET_MASK 0x0000000Fu                // LANE0_DP_16G_TXPRESET[3..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_3_0_LANE0_DP_16G_TXPRESET_SHFT 0u

/* =====================================================================================

  ---PL_16G_LANE_EQ_7_4 (0x74041000 + 364hu)---

    LANE4_DP_16G_TXPRESET[3..0]  - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE4_UP_16G_TXPRESET[7..4]  - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE5_DP_16G_TXPRESET[11..8] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE5_UP_16G_TXPRESET[15..12] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE6_DP_16G_TXPRESET[19..16] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE6_UP_16G_TXPRESET[23..20] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE7_DP_16G_TXPRESET[27..24] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE7_UP_16G_TXPRESET[31..28] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE7_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE7_UP_16G_TXPRESET_MASK 0xF0000000u                // LANE7_UP_16G_TXPRESET[31..28]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE7_UP_16G_TXPRESET_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE7_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE7_DP_16G_TXPRESET_MASK 0x0F000000u                // LANE7_DP_16G_TXPRESET[27..24]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE7_DP_16G_TXPRESET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE6_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE6_UP_16G_TXPRESET_MASK 0x00F00000u                // LANE6_UP_16G_TXPRESET[23..20]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE6_UP_16G_TXPRESET_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE6_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE6_DP_16G_TXPRESET_MASK 0x000F0000u                // LANE6_DP_16G_TXPRESET[19..16]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE6_DP_16G_TXPRESET_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE5_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE5_UP_16G_TXPRESET_MASK 0x0000F000u                // LANE5_UP_16G_TXPRESET[15..12]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE5_UP_16G_TXPRESET_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE5_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE5_DP_16G_TXPRESET_MASK 0x00000F00u                // LANE5_DP_16G_TXPRESET[11..8]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE5_DP_16G_TXPRESET_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE4_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE4_UP_16G_TXPRESET_MASK 0x000000F0u                // LANE4_UP_16G_TXPRESET[7..4]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE4_UP_16G_TXPRESET_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE4_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE4_DP_16G_TXPRESET_MASK 0x0000000Fu                // LANE4_DP_16G_TXPRESET[3..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_7_4_LANE4_DP_16G_TXPRESET_SHFT 0u

/* =====================================================================================

  ---PL_16G_LANE_EQ_11_8 (0x74041000 + 368hu)---

    LANE8_DP_16G_TXPRESET[3..0]  - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE8_UP_16G_TXPRESET[7..4]  - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE9_DP_16G_TXPRESET[11..8] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE9_UP_16G_TXPRESET[15..12] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE10_DP_16G_TXPRESET[19..16] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE10_UP_16G_TXPRESET[23..20] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE11_DP_16G_TXPRESET[27..24] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE11_UP_16G_TXPRESET[31..28] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE11_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE11_UP_16G_TXPRESET_MASK 0xF0000000u                // LANE11_UP_16G_TXPRESET[31..28]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE11_UP_16G_TXPRESET_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE11_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE11_DP_16G_TXPRESET_MASK 0x0F000000u                // LANE11_DP_16G_TXPRESET[27..24]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE11_DP_16G_TXPRESET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE10_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE10_UP_16G_TXPRESET_MASK 0x00F00000u                // LANE10_UP_16G_TXPRESET[23..20]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE10_UP_16G_TXPRESET_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE10_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE10_DP_16G_TXPRESET_MASK 0x000F0000u                // LANE10_DP_16G_TXPRESET[19..16]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE10_DP_16G_TXPRESET_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE9_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE9_UP_16G_TXPRESET_MASK 0x0000F000u                // LANE9_UP_16G_TXPRESET[15..12]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE9_UP_16G_TXPRESET_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE9_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE9_DP_16G_TXPRESET_MASK 0x00000F00u                // LANE9_DP_16G_TXPRESET[11..8]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE9_DP_16G_TXPRESET_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE8_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE8_UP_16G_TXPRESET_MASK 0x000000F0u                // LANE8_UP_16G_TXPRESET[7..4]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE8_UP_16G_TXPRESET_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE8_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE8_DP_16G_TXPRESET_MASK 0x0000000Fu                // LANE8_DP_16G_TXPRESET[3..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_11_8_LANE8_DP_16G_TXPRESET_SHFT 0u

/* =====================================================================================

  ---PL_16G_LANE_EQ_15_12 (0x74041000 + 36Chu)---

    LANE12_DP_16G_TXPRESET[3..0] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE12_UP_16G_TXPRESET[7..4] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE13_DP_16G_TXPRESET[11..8] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE13_UP_16G_TXPRESET[15..12] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE14_DP_16G_TXPRESET[19..16] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE14_UP_16G_TXPRESET[23..20] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.
    LANE15_DP_16G_TXPRESET[27..24] - (RO) Downstream Port 16.0 GT/s Transmitter Preset
                                     Transmitter Preset used for 16.0 GT/s equalization by this Port when the Port is operating as a Downstream Port. This field is ignored when the Port is operating as an Upstream Port.
    LANE15_UP_16G_TXPRESET[31..28] - (RO) Upstream Port 16.0 GT/s Transmitter Preset
                                     Field contains the Transmit Preset value sent or received during 16.0 GT/s Link Equalization.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE15_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE15_UP_16G_TXPRESET_MASK 0xF0000000u                // LANE15_UP_16G_TXPRESET[31..28]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE15_UP_16G_TXPRESET_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE15_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE15_DP_16G_TXPRESET_MASK 0x0F000000u                // LANE15_DP_16G_TXPRESET[27..24]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE15_DP_16G_TXPRESET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE14_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE14_UP_16G_TXPRESET_MASK 0x00F00000u                // LANE14_UP_16G_TXPRESET[23..20]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE14_UP_16G_TXPRESET_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE14_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE14_DP_16G_TXPRESET_MASK 0x000F0000u                // LANE14_DP_16G_TXPRESET[19..16]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE14_DP_16G_TXPRESET_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE13_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE13_UP_16G_TXPRESET_MASK 0x0000F000u                // LANE13_UP_16G_TXPRESET[15..12]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE13_UP_16G_TXPRESET_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE13_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE13_DP_16G_TXPRESET_MASK 0x00000F00u                // LANE13_DP_16G_TXPRESET[11..8]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE13_DP_16G_TXPRESET_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE12_UP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE12_UP_16G_TXPRESET_MASK 0x000000F0u                // LANE12_UP_16G_TXPRESET[7..4]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE12_UP_16G_TXPRESET_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE12_DP_16G_TXPRESET_ADDR PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_ADDR
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE12_DP_16G_TXPRESET_MASK 0x0000000Fu                // LANE12_DP_16G_TXPRESET[3..0]
#define PCIE_MAC_CONF_COMMON_PL_16G_LANE_EQ_15_12_LANE12_DP_16G_TXPRESET_SHFT 0u

/* =====================================================================================

  ---LMR_CAP_1 (0x74041000 + 378hu)---

    LMR_CAP[15..0]               - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     The Extended Capability ID for the Physical Layer 16.0 GT/s Margining Extended Capability is 0027h.
    LMR_VER[19..16]              - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    LMR_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_NEXT_CAP_ADDR       PCIE_MAC_CONF_COMMON_LMR_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_NEXT_CAP_MASK       0xFFF00000u                // LMR_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_NEXT_CAP_SHFT       20u
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_VER_ADDR            PCIE_MAC_CONF_COMMON_LMR_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_VER_MASK            0x000F0000u                // LMR_VER[19..16]
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_VER_SHFT            16u
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_CAP_ADDR            PCIE_MAC_CONF_COMMON_LMR_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_CAP_MASK            0x0000FFFFu                // LMR_CAP[15..0]
#define PCIE_MAC_CONF_COMMON_LMR_CAP_1_LMR_CAP_SHFT            0u

/* =====================================================================================

  ---LMR_CAP_2 (0x74041000 + 37Chu)---

    lmr_use_driver_sw[0]         - (RO) Margining uses Driver Software
                                     If Set, indicates that Margining is partially implemented using Device Driver software. Margining Software Ready indicates when this software is initialized. If Clear, Margining does not require device driver software. In this case the value read from Margining Software Ready is undefined.
    RESERVED1[15..1]             - (RO) Reserved bits
    lmr_ready[16]                - (RO) Margining Ready
                                     Indicates when the Margining feature is ready to accept margining commands.
                                     Behavior is undefined if this bit is Clear and, for any Lane, any of the Receiver Number, Margin Type, Usage Model, or Margin Payload fields are written (see Section 7.7.6.5).
                                     If Margining uses Driver Software is Set, Margining Ready must be Set no later than 100 ms after the later of Margining Software Ready becoming Set or the link training to 16.0 GT/s.
                                     If Margining uses Driver Software is Clear, Margining Ready must be Set no later than 100 ms after the Link trains to 16.0 GT/s.
                                     Default value is implementation specific.
    lmr_sw_ready[17]             - (RO) Margining Software Ready
                                     When Margining uses Driver Software is Set, then this bit, when Set, indicates that the required software has performed the required initialization.
                                     The value of this bit is Undefined if Margining users Driver Software is Clear. The default value of this bit is implementation specific.
    RESERVED18[31..18]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_sw_ready_ADDR       PCIE_MAC_CONF_COMMON_LMR_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_sw_ready_MASK       0x00020000u                // lmr_sw_ready[17]
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_sw_ready_SHFT       17u
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_ready_ADDR          PCIE_MAC_CONF_COMMON_LMR_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_ready_MASK          0x00010000u                // lmr_ready[16]
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_ready_SHFT          16u
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_use_driver_sw_ADDR  PCIE_MAC_CONF_COMMON_LMR_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_use_driver_sw_MASK  0x00000001u                // lmr_use_driver_sw[0]
#define PCIE_MAC_CONF_COMMON_LMR_CAP_2_lmr_use_driver_sw_SHFT  0u

/* =====================================================================================

  ---LMR_CTRL_0 (0x74041000 + 380hu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_0_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_0_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_1 (0x74041000 + 384hu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_1_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_1_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_2 (0x74041000 + 388hu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_2_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_2_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_3 (0x74041000 + 38Chu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_3_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_3_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_4 (0x74041000 + 390hu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_4_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_4_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_5 (0x74041000 + 394hu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_5_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_5_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_6 (0x74041000 + 398hu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_6_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_6_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---LMR_CTRL_7 (0x74041000 + 39Chu)---

    mr_rcv_num[2..0]             - (RO) Receiver Number
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_type[5..3]                - (RO) Margin Type
                                     The default value is 111b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_usage_model[6]            - (RO) Usage Model
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED7[7]                 - (RO) Reserved bits
    mr_payload[15..8]            - (RO) Margin Payload
                                     This field value is used in conjunction with the Margin Type field, as described in Section 8.4.4.
                                     The default value is 9Ch.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    mr_rcv_num_sts[18..16]       - (RO) Receiver Number Status
                                     The default value is 000b.
                                     For Downstream Ports, this field must be reset to the default value if the Port goes to DL_Down status.
    mr_type_sts[21..19]          - (RO) Margin Type Status
                                     The default value is 000b.
                                     This field must be reset to the default value if the Port goes to DL_Down status. RO (see description)
    mr_usage_model_sts[22]       - (RO) Usage Model Status
                                     The default value is 0b.
                                     This field must be reset to the default value if the Port goes to DL_Down status.
    RESERVED23[23]               - (RO) Reserved bits
    mr_payload_sts[31..24]       - (RO) MarginPayload Status
                                     This field is only meaningful, when the Margin Type is a defined encoding other than No Command.
                                     The default value is 00h.
                                     This field must be reset to the default value if the Port goes to DL_Down status.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_payload_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_payload_sts_MASK    0xFF000000u                // mr_payload_sts[31..24]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_payload_sts_SHFT    24u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_usage_model_sts_ADDR PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_usage_model_sts_MASK 0x00400000u                // mr_usage_model_sts[22]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_usage_model_sts_SHFT 22u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_type_sts_ADDR       PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_type_sts_MASK       0x00380000u                // mr_type_sts[21..19]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_type_sts_SHFT       19u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_rcv_num_sts_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_rcv_num_sts_MASK    0x00070000u                // mr_rcv_num_sts[18..16]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_rcv_num_sts_SHFT    16u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_payload_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_payload_MASK        0x0000FF00u                // mr_payload[15..8]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_payload_SHFT        8u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_usage_model_ADDR    PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_usage_model_MASK    0x00000040u                // mr_usage_model[6]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_usage_model_SHFT    6u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_type_ADDR           PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_type_MASK           0x00000038u                // mr_type[5..3]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_type_SHFT           3u
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_rcv_num_ADDR        PCIE_MAC_CONF_COMMON_LMR_CTRL_7_ADDR
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_rcv_num_MASK        0x00000007u                // mr_rcv_num[2..0]
#define PCIE_MAC_CONF_COMMON_LMR_CTRL_7_mr_rcv_num_SHFT        0u

/* =====================================================================================

  ---PCIE_VENDOR_CTL (0x74041000 + 400hu)---

    PCIe_SWITCH_P2P_DISABLE[0]   - (RW) Disable peer-to-peer transaction between switch downstream port
                                     Switch Upstream Ports:
                                     - 0b: Enable peer-to-peer transaction.
                                     - 1b: Disable peer-to-peer transaction.
                                     This bit can be accessed only through PCIe configuration access.
                                     For Functions other than Switch Upstream Ports, this field is Reserved and must be hardwired to 0b.
    RSVD1[1]                     - (RW) Reserved
    PCIE_TA_PROT_EMC_W[2]        - (RW) PCIe TA protect EMC writing
                                     Endpoints (only func0):
                                     0: EMC can't write to PCIe TA
                                     1: EMC can write to PCIe TA
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 0b.
    PCIE_TA_PROT_EMC_R[3]        - (RW) PCIe TA protect EMC reading
                                     Endpoints (only func0):
                                     0: EMC can't read from PCIe TA
                                     1: EMC can read from PCIe TA
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 0b.
    RSVD2[7..4]                  - (RW) Reserved
    RSVD3[31..8]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD3_MASK        0xFFFFFF00u                // RSVD3[31..8]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD3_SHFT        8u
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD2_MASK        0x000000F0u                // RSVD2[7..4]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD2_SHFT        4u
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIE_TA_PROT_EMC_R_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIE_TA_PROT_EMC_R_MASK 0x00000008u                // PCIE_TA_PROT_EMC_R[3]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIE_TA_PROT_EMC_R_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIE_TA_PROT_EMC_W_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIE_TA_PROT_EMC_W_MASK 0x00000004u                // PCIE_TA_PROT_EMC_W[2]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIE_TA_PROT_EMC_W_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD1_MASK        0x00000002u                // RSVD1[1]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_RSVD1_SHFT        1u
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIe_SWITCH_P2P_DISABLE_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIe_SWITCH_P2P_DISABLE_MASK 0x00000001u                // PCIe_SWITCH_P2P_DISABLE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_CTL_PCIe_SWITCH_P2P_DISABLE_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_STS_0 (0x74041000 + 480hu)---

    PCIE_VENDOR_EINT_STS[31..0]  - (W1C) PCIe Vendor eint status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_0_PCIE_VENDOR_EINT_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_0_PCIE_VENDOR_EINT_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_0_PCIE_VENDOR_EINT_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_SET_0 (0x74041000 + 484hu)---

    PCIE_VENDOR_EINT_SET[31..0]  - (W1S) PCIe Vendor eint set

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_0_PCIE_VENDOR_EINT_SET_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_0_PCIE_VENDOR_EINT_SET_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_SET[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_0_PCIE_VENDOR_EINT_SET_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_STS_0_0 (0x74041000 + 488hu)---

    PCIE_VENDOR_STS[31..0]       - (RO) PCIe Vendor Status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_0_PCIE_VENDOR_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_0_PCIE_VENDOR_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_0_PCIE_VENDOR_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_STS_1_0 (0x74041000 + 48Chu)---

    PCIE_VENDOR_STS[31..0]       - (RO) PCIe Vendor Status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_0_PCIE_VENDOR_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_0_PCIE_VENDOR_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_0_PCIE_VENDOR_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_0_0 (0x74041000 + 490hu)---

    PCIE_CFG_RSV_0[31..0]        - (RW) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_0_PCIE_CFG_RSV_0_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_0_PCIE_CFG_RSV_0_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_0[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_0_PCIE_CFG_RSV_0_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_1_0 (0x74041000 + 494hu)---

    PCIE_CFG_RSV_1[31..0]        - (RW) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_0_PCIE_CFG_RSV_1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_0_PCIE_CFG_RSV_1_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_1[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_0_PCIE_CFG_RSV_1_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_2_0 (0x74041000 + 498hu)---

    PCIE_CFG_RSV_2[31..0]        - (RO) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_0_PCIE_CFG_RSV_2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_0_PCIE_CFG_RSV_2_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_2[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_0_PCIE_CFG_RSV_2_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_LOG_0 (0x74041000 + 49Chu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Set when receive unexpected CPL, Clear the error record including ERR_HEADER and ERR_LOG to all 0
    CPL_EXTRA_TIME[8..1]         - (RO) Record the extra time after completion timeout
    RSVD1[31..9]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_RSVD1_MASK       0xFFFFFE00u                // RSVD1[31..9]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_RSVD1_SHFT       9u
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_CPL_EXTRA_TIME_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_CPL_EXTRA_TIME_MASK 0x000001FEu                // CPL_EXTRA_TIME[8..1]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_CPL_EXTRA_TIME_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ERR_STS_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ERR_STS_MASK     0x00000001u                // ERR_STS[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_0_ERR_STS_SHFT     0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER0_0 (0x74041000 + 4A0hu)---

    PCIE_ERROR_HEADER0[31..0]    - (RO) PCIe Error Header0 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_0_PCIE_ERROR_HEADER0_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_0_PCIE_ERROR_HEADER0_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER0[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_0_PCIE_ERROR_HEADER0_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER1_0 (0x74041000 + 4A4hu)---

    PCIE_ERROR_HEADER1[31..0]    - (RO) PCIe Error Header1 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_0_PCIE_ERROR_HEADER1_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_0_PCIE_ERROR_HEADER1_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER1[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_0_PCIE_ERROR_HEADER1_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER2_0 (0x74041000 + 4A8hu)---

    PCIE_ERROR_HEADER2[31..0]    - (RO) PCIe Error Header2 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_0_PCIE_ERROR_HEADER2_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_0_PCIE_ERROR_HEADER2_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER2[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_0_PCIE_ERROR_HEADER2_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER3_0 (0x74041000 + 4AChu)---

    PCIE_ERROR_HEADER3[31..0]    - (RO) PCIe Error Header3 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_0_PCIE_ERROR_HEADER3_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_0_PCIE_ERROR_HEADER3_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER3[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_0_PCIE_ERROR_HEADER3_SHFT 0u

/* =====================================================================================

  ---PCIE_WCR_CFG_0 (0x74041000 + 4B0hu)---

    PCIE_WCR_CFG[31..0]          - (RW) PCIe Vendor Whole Chip Reset Config

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_0_PCIE_WCR_CFG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_0_PCIE_WCR_CFG_MASK  0xFFFFFFFFu                // PCIE_WCR_CFG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_0_PCIE_WCR_CFG_SHFT  0u

/* =====================================================================================

  ---PCIE_WCR_RB_0 (0x74041000 + 4B4hu)---

    PCIE_WCR_RB[31..0]           - (RO) PCIe Vendor Whole Chip Reset Read Back

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_0_PCIE_WCR_RB_ADDR    PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_0_PCIE_WCR_RB_MASK    0xFFFFFFFFu                // PCIE_WCR_RB[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_0_PCIE_WCR_RB_SHFT    0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_2_STS_0 (0x74041000 + 4B8hu)---

    PCIE_VENDOR_EINT_2_STS[31..0] - (W1C) PCIe Vendor eint 2 status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_0_PCIE_VENDOR_EINT_2_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_0_PCIE_VENDOR_EINT_2_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_2_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_0_PCIE_VENDOR_EINT_2_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_2_SET_0 (0x74041000 + 4BChu)---

    PCIE_VENDOR_EINT_2_SET[31..0] - (W1S) PCIe Vendor eint 2 set

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_0_PCIE_VENDOR_EINT_2_SET_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_0_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_0_PCIE_VENDOR_EINT_2_SET_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_2_SET[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_0_PCIE_VENDOR_EINT_2_SET_SHFT 0u

/* =====================================================================================

  ---VC_EXT_CAP_HEADER (0x74041000 + 600hu)---

    VC_CAP_ID[15..0]             - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for the Virtual Channel Capability is either 0002h or 0009h.
    VC_CAP_VER[19..16]           - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    VC_NEXT_CAP[31..20]          - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space
                                     and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_NEXT_CAP_MASK 0xFFF00000u                // VC_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_CAP_VER_MASK 0x000F0000u                // VC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_CAP_ID_ADDR  PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_CAP_ID_MASK  0x0000FFFFu                // VC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_HEADER_VC_CAP_ID_SHFT  0u

/* =====================================================================================

  ---VC_EXT_CAP_REG_1 (0x74041000 + 604hu)---

    VC_CNT[2..0]                 - (RO) Extended VC Count
                                     Indicates the number of (extended) Virtual Channels in addition to the default VC supported by the device. This field is valid for all Functions.
                                     The minimum value of this field is 000b (for devices that only support the default VC). The maximum value is 7.
    RSVD1[3]                     - (RO) Reserved
    LPVC_CNT[6..4]               - (RO) Low Priority Extended VC Count
                                     Indicates the number of (extended) Virtual Channels in addition to the default VC belonging to the low-priority VC (LPVC) group that has the lowest priority with respect to other VC resources in a strict priority VC Arbitration. This field is valid for all Functions.
                                     The minimum value of this field is 000b and the maximum value is Extended VC Count.
    RSVD2[7]                     - (RO) Reserved
    REF_CLK[9..8]                - (RO) Reference Clock
                                     Indicates the reference clock for Virtual Channels that support time-based WRR Port Arbitration.
                                     This field is valid for RCRBs, Switch Ports, and Root Ports that support peer-to-peer traffic. It is not valid for Root Ports that do not support peer-to-peer traffic, Endpoints, and Switches or Root Complexes not implementing WRR, and must be hardwired to 00b.
                                     Defined encodings are:
                                     00b 100 ns reference clock
                                     01b - 11b Reserved
    ARB_TABLE_ENTRY_SIZE[11..10] - (RO) Port Arbitration Table Entry Size
                                     Indicates the size (in bits) of Port Arbitration table entry in the Function. This field is valid only for RCRBs, Switch Ports, and Root Ports that support peer-to-peer traffic. It is not valid and must be hardwired to 00b for Root Ports that do not support peer-to-peer traffic and Endpoints.
                                     Defined encodings are:
                                     00b The size of Port Arbitration table entry is 1 bit.
                                     01b The size of Port Arbitration table entry is 2 bits.
                                     10b The size of Port Arbitration table entry is 4 bits.
                                     11b The size of Port Arbitration table entry is 8 bits.
    RSVD3[31..12]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD3_ADDR       PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD3_MASK       0xFFFFF000u                // RSVD3[31..12]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD3_SHFT       12u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ARB_TABLE_ENTRY_SIZE_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ARB_TABLE_ENTRY_SIZE_MASK 0x00000C00u                // ARB_TABLE_ENTRY_SIZE[11..10]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ARB_TABLE_ENTRY_SIZE_SHFT 10u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_REF_CLK_ADDR     PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_REF_CLK_MASK     0x00000300u                // REF_CLK[9..8]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_REF_CLK_SHFT     8u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD2_MASK       0x00000080u                // RSVD2[7]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD2_SHFT       7u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_LPVC_CNT_ADDR    PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_LPVC_CNT_MASK    0x00000070u                // LPVC_CNT[6..4]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_LPVC_CNT_SHFT    4u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD1_MASK       0x00000008u                // RSVD1[3]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_VC_CNT_ADDR      PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_VC_CNT_MASK      0x00000007u                // VC_CNT[2..0]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_1_VC_CNT_SHFT      0u

/* =====================================================================================

  ---VC_EXT_CAP_REG_2 (0x74041000 + 608hu)---

    VC_ARB_CAP[7..0]             - (RO) VC Arbitration Capability
                                     Indicates the types of VC Arbitration supported by the Function for the LPVC group. This field is valid for all Functions that report a Low Priority Extended VC Count field greater than 0. For all other Functions, this field must be hardwired to 00h.
                                     Each bit location within this field corresponds to a VC Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the Port can be configured to provide different VC arbitration services.
                                     Defined bit positions are:
                                     Bit 0 Hardware fixed arbitration scheme, e.g., Round Robin
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bits 4-7 Reserved
    RESERVED8[23..8]             - (RO) Reserved bits
    VC_ARB_TABLE_OFFSET[31..24]  - (RO) VC Arbitration Table Offset
                                     Indicates the location of the VC Arbitration Table. This field is valid for all Functions.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 0 indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_VC_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_VC_ARB_TABLE_OFFSET_MASK 0xFF000000u                // VC_ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_VC_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_VC_ARB_CAP_ADDR  PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_VC_ARB_CAP_MASK  0x000000FFu                // VC_ARB_CAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CAP_REG_2_VC_ARB_CAP_SHFT  0u

/* =====================================================================================

  ---VC_EXT_CTR_REG (0x74041000 + 60Chu)---

    VC_ARB_TABLE_LOAD[0]         - (RO) Load VC Arbitration Table
                                     Used by software to update the VC Arbitration Table. This bit is valid for all Functions when the selected VC Arbitration uses the VC Arbitration Table.
                                     Software sets this bit to request hardware to apply new values programmed into VC Arbitration Table; clearing this bit has no effect. Software checks the VC Arbitration Table Status bit to confirm that new values stored in the VC Arbitration Table are latched by the VC arbitration logic.
                                     This bit always returns 0b when read.
    VC_ARB_SELECT[3..1]          - (RO) VC Arbitration Select
                                     Used by software to configure the VC arbitration by selecting one of the supported VC Arbitration schemes indicated by the VC Arbitration Capability field in the Port VC Capability register 2. This field is valid for all Functions.
                                     The permissible values of this field are numbers corresponding to one of the asserted bits in the VC Arbitration Capability field.
                                     This field cannot be modified when more than one VC in the LPVC group is enabled.
    RSVD1[15..4]                 - (RO) Reserved
    VC_ARB_TABLE_STS[16]         - (RO) VC Arbitration Table Status
                                     Indicates the coherency status of the VC Arbitration Table. This bit is valid for all Functions when the selected VC uses the VC Arbitration Table.
                                     This bit is Set by hardware when any entry of the VC Arbitration Table is written by software. This bit is Cleared by hardware when hardware finishes loading values stored in the VC Arbitration Table after software sets the Load VC Arbitration Table bit in the Port VC Control register.
                                     Default value of this bit is 0b.
    RSVD2[31..17]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_RSVD2_ADDR         PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_RSVD2_MASK         0xFFFE0000u                // RSVD2[31..17]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_RSVD2_SHFT         17u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_TABLE_STS_MASK 0x00010000u                // VC_ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_RSVD1_ADDR         PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_RSVD1_MASK         0x0000FFF0u                // RSVD1[15..4]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_RSVD1_SHFT         4u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_SELECT_MASK 0x0000000Eu                // VC_ARB_SELECT[3..1]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_SELECT_SHFT 1u
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_ADDR
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_TABLE_LOAD_MASK 0x00000001u                // VC_ARB_TABLE_LOAD[0]
#define PCIE_MAC_CONF_COMMON_VC_EXT_CTR_REG_VC_ARB_TABLE_LOAD_SHFT 0u

/* =====================================================================================

  ---VC0_ARB_CAP (0x74041000 + 610hu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC0_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC0_RESOURCE_CTRL (0x74041000 + 614hu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC0_RESOURCE_STS (0x74041000 + 618hu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC0_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC1_ARB_CAP (0x74041000 + 61Chu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC1_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC1_RESOURCE_CTRL (0x74041000 + 620hu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC1_RESOURCE_STS (0x74041000 + 624hu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC1_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC2_ARB_CAP (0x74041000 + 628hu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC2_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC2_RESOURCE_CTRL (0x74041000 + 62Chu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC2_RESOURCE_STS (0x74041000 + 630hu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC2_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC3_ARB_CAP (0x74041000 + 634hu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC3_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC3_RESOURCE_CTRL (0x74041000 + 638hu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC3_RESOURCE_STS (0x74041000 + 63Chu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC3_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC4_ARB_CAP (0x74041000 + 640hu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC4_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC4_RESOURCE_CTRL (0x74041000 + 644hu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC4_RESOURCE_STS (0x74041000 + 648hu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC4_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC5_ARB_CAP (0x74041000 + 64Chu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC5_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC5_RESOURCE_CTRL (0x74041000 + 650hu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC5_RESOURCE_STS (0x74041000 + 654hu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC5_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC6_ARB_CAP (0x74041000 + 658hu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC6_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC6_RESOURCE_CTRL (0x74041000 + 65Chu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC6_RESOURCE_STS (0x74041000 + 660hu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC6_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---VC7_ARB_CAP (0x74041000 + 664hu)---

    ARB_SCHEME[7..0]             - (RO) Port Arbitration Capability
                                     Indicates types of Port Arbitration supported by the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but not for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     Each bit location within this field corresponds to a Port Arbitration Capability defined below. When more than 1 bit in this field is Set, it indicates that the VC resource can be configured to provide different arbitration services.
                                     Software selects among these capabilities by writing to the Port Arbitration Select field.
                                     Defined bit positions are:
                                     Bit 0 Non-configurable hardware-fixed arbitration scheme, e.g., Round Robin (RR)
                                     Bit 1 Weighted Round Robin (WRR) arbitration with 32 phases
                                     Bit 2 WRR arbitration with 64 phases
                                     Bit 3 WRR arbitration with 128 phases
                                     Bit 4 Time-based WRR with 128 phases
                                     Bit 5 WRR arbitration with 256 phases
                                     Bits 6-7 Reserved
    RSVD1[13..8]                 - (RO) Reserved
    UNDEFINED[14]                - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate Advanced Packet Switching. System software must ignore the value read from this bit.
    REJECT_SNOOP_TRANS[15]       - (RO) Reject Snoop Transactions
                                     When Clear, transactions with or without the No Snoop bit Set within the TLP header are allowed on this VC. When Set, any transaction for which the No Snoop attribute is applicable but is not Set within the TLP header is permitted to be rejected as an Unsupported Request. Refer to Section 2.2.6.5 for information on where the No Snoop attribute is applicable. This bit is valid for Root Ports and RCRB; it is not valid for Endpoints or Switch Ports.
    MAX_TIME_SLOT[22..16]        - (RO) Maximum Time Slots
                                     Indicates the maximum number of time slots (minus one) that the VC resource is capable of supporting when it is configured for time-based WRR Port Arbitration. For example, a value 000 0000b in this field indicates the supported maximum number of time slots is 1 and a value of 111 1111b indicates the supported maximum number of time slots is 128. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this field is valid only when the Port Arbitration Capability field indicates that the VC resource supports time-based WRR Port Arbitration.
    RSVD2[23]                    - (RO) Reserved
    ARB_TABLE_OFFSET[31..24]     - (RO) Port Arbitration Table Offset
                                     Indicates the location of the Port Arbitration Table associated with the VC resource. This field is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     This field contains the zero-based offset of the table in DQWORDS (16 bytes) from the base address of the Virtual Channel Capability structure. A value of 00h indicates that the table is not present.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ARB_TABLE_OFFSET_ADDR PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ARB_TABLE_OFFSET_MASK 0xFF000000u                // ARB_TABLE_OFFSET[31..24]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ARB_TABLE_OFFSET_SHFT 24u
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_RSVD2_ADDR            PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_RSVD2_SHFT            23u
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_MAX_TIME_SLOT_ADDR    PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_MAX_TIME_SLOT_MASK    0x007F0000u                // MAX_TIME_SLOT[22..16]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_MAX_TIME_SLOT_SHFT    16u
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_REJECT_SNOOP_TRANS_ADDR PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_REJECT_SNOOP_TRANS_MASK 0x00008000u                // REJECT_SNOOP_TRANS[15]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_REJECT_SNOOP_TRANS_SHFT 15u
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_UNDEFINED_ADDR        PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_UNDEFINED_MASK        0x00004000u                // UNDEFINED[14]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_UNDEFINED_SHFT        14u
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_RSVD1_ADDR            PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_RSVD1_MASK            0x00003F00u                // RSVD1[13..8]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_RSVD1_SHFT            8u
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ARB_SCHEME_ADDR       PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ARB_SCHEME_MASK       0x000000FFu                // ARB_SCHEME[7..0]
#define PCIE_MAC_CONF_COMMON_VC7_ARB_CAP_ARB_SCHEME_SHFT       0u

/* =====================================================================================

  ---VC7_RESOURCE_CTRL (0x74041000 + 668hu)---

    TC_VC_MAP[7..0]              - (RO) TC_VC Map
                                     This field indicates the TCs that are mapped to the VC resource. This field is valid for all Functions.
                                     Bit locations within this field correspond to TC values. For example, when bit 7 is Set in this field, TC7 is mapped to this VC resource. When more than 1 bit in this field is Set, it indicates that multiple TCs are mapped to the VC resource.
                                     In order to remove one or more TCs from the TC_VC Map of an enabled VC, software must ensure that no new or outstanding transactions with the TC labels are targeted at the given Link.
                                     Default value of this field is FFh for the first VC resource and is 00h for other VC resources.
                                     Note:
                                     Bit 0 of this field is read-only. It must be Set for the default VC0 and Clear for all other enabled VCs.
    RSVD1[15..8]                 - (RO) Reserved
    ARB_TABLE_LOAD[16]           - (RO) Load Port Arbitration Table
                                     When Set, this bit updates the Port Arbitration logic from the Port Arbitration Table for the VC resource. This bit is valid for all Switch Ports, Root Ports that support peer-to-peer traffic, and RCRBs, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is only valid when the Port Arbitration Table is used by the selected Port Arbitration scheme (that is indicated by a Set bit in the Port Arbitration Capability field selected by Port Arbitration Select).
                                     Software sets this bit to signal hardware to update Port Arbitration logic with new values stored in Port Arbitration Table; clearing this bit has no effect. Software uses the Port Arbitration Table Status bit to confirm whether the new values of Port Arbitration Table are completely latched by the arbitration logic.
                                     This bit always returns 0b when read.
                                     Default value of this bit is 0b.
    ARB_SELECT[19..17]           - (RO) Port Arbitration Select
                                     This field configures the VC resource to provide a particular Port Arbitration service. This field is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic.
                                     The permissible value of this field is a number corresponding to one of the asserted bits in the Port Arbitration Capability field of the VC resource.
    RSVD2[23..20]                - (RO) Reserved
    VC_ID[26..24]                - (RO) VC ID
                                     This field assigns a VC ID to the VC resource (see note for exceptions). This field is valid for all Functions.
                                     This field cannot be modified when the VC is already enabled.
                                     Note:
                                     For the first VC resource (default VC), this field is read-only and must be hardwired to 000b.
    RSVD3[30..27]                - (RO) Reserved
    VC_EN[31]                    - (RO) VC Enable
                                     This bit, when Set, enables a Virtual Channel (see note 1 for exceptions). The Virtual Channel is disabled when this bit is cleared. This bit is valid for all Functions.
                                     Software must use the VC Negotiation Pending bit to check whether the VC negotiation is complete.
                                     Default value of this bit is 1b for the first VC resource and is 0b for other VC resource(s).
                                     Notes:
                                     1. This bit is hardwired to 1b for the default VC (VC0), i.e., writing to this bit has no effect for VC0.
                                     2. To enable a Virtual Channel, the VC Enable bits for that Virtual Channel must be Set in both components on a Link.
                                     3. To disable a Virtual Channel, the VC Enable bits for that Virtual Channel must be cleared in both components on a Link.
                                     4. Software must ensure that no traffic is using a Virtual Channel at the time it is disabled.
                                     5. Software must fully disable a Virtual Channel in both components on a Link before re-enabling the Virtual Channel.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_VC_EN_ADDR      PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_VC_EN_MASK      0x80000000u                // VC_EN[31]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_VC_EN_SHFT      31u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD3_MASK      0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD3_SHFT      27u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_VC_ID_ADDR      PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_VC_ID_MASK      0x07000000u                // VC_ID[26..24]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_VC_ID_SHFT      24u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD2_MASK      0x00F00000u                // RSVD2[23..20]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD2_SHFT      20u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ARB_SELECT_ADDR PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ARB_SELECT_MASK 0x000E0000u                // ARB_SELECT[19..17]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ARB_SELECT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ARB_TABLE_LOAD_ADDR PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ARB_TABLE_LOAD_MASK 0x00010000u                // ARB_TABLE_LOAD[16]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ARB_TABLE_LOAD_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD1_MASK      0x0000FF00u                // RSVD1[15..8]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_RSVD1_SHFT      8u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_TC_VC_MAP_ADDR  PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_TC_VC_MAP_MASK  0x000000FFu                // TC_VC_MAP[7..0]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_CTRL_TC_VC_MAP_SHFT  0u

/* =====================================================================================

  ---VC7_RESOURCE_STS (0x74041000 + 66Chu)---

    RSVD1[15..0]                 - (RO) Reserved
    ARB_TABLE_STS[16]            - (RO) Port Arbitration Table Status
                                     This bit indicates the coherency status of the Port Arbitration Table associated with the VC resource. This bit is valid for RCRBs, Root Ports that support peer-to-peer traffic, and Switch Ports, but is not valid for Endpoints or Root Ports that do not support peer-to-peer traffic. In addition, this bit is valid only when the Port Arbitration Table is used by the selected Port Arbitration for the VC resource.
                                     This bit is Set by hardware when any entry of the Port Arbitration Table is written to by software. This bit is Cleared by hardware when hardware finishes loading values stored in the Port Arbitration Table after software sets the Load Port Arbitration Table bit.
                                     Default value of this bit is 0b.
    VC_NEGOTIATION_PENDING[17]   - (RO) VC Negotiation Pending
                                     This bit indicates whether the Virtual Channel negotiation (initialization or disabling) is in pending state. This bit is valid for all Functions.
                                     The value of this bit is defined only when the Link is in the DL_Active state and the Virtual Channel is enabled (its VC Enable bit is Set).
                                     When this bit is Set by hardware, it indicates that the VC resource has not completed the process of negotiation. This bit is Cleared by hardware after the VC negotiation is complete (on exit from the FC_INIT2 state). For VC0, this bit is permitted to be hardwired to 0b.
                                     Before using a Virtual Channel, software must check whether the VC Negotiation Pending bits for that Virtual Channel are Clear in both components on the Link.
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_RSVD2_MASK       0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_RSVD2_SHFT       18u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_VC_NEGOTIATION_PENDING_ADDR PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_VC_NEGOTIATION_PENDING_MASK 0x00020000u                // VC_NEGOTIATION_PENDING[17]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_VC_NEGOTIATION_PENDING_SHFT 17u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ARB_TABLE_STS_ADDR PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ARB_TABLE_STS_MASK 0x00010000u                // ARB_TABLE_STS[16]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ARB_TABLE_STS_SHFT 16u
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_ADDR
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_RSVD1_MASK       0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_CONF_COMMON_VC7_RESOURCE_STS_RSVD1_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_0_1 (0x74041000 + 0x00008040u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_1_1 (0x74041000 + 0x00008044u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_2_1 (0x74041000 + 0x00008048u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_3_1 (0x74041000 + 0x0000804Cu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_4_1 (0x74041000 + 0x00008050u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_5_1 (0x74041000 + 0x00008054u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_6_1 (0x74041000 + 0x00008058u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_7_1 (0x74041000 + 0x0000805Cu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_8_1 (0x74041000 + 0x00008060u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_9_1 (0x74041000 + 0x00008064u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_10_1 (0x74041000 + 0x00008068u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_1_RSVD_ADDR       PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_1_RSVD_MASK       0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_1_RSVD_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_11_1 (0x74041000 + 0x0000806Cu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_1_RSVD_ADDR       PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_1_RSVD_MASK       0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_1_RSVD_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_12_1 (0x74041000 + 0x00008070u)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_1_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_1_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_1_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_13_1 (0x74041000 + 0x00008074u)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_1_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_1_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_1_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_14_1 (0x74041000 + 0x00008078u)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_1_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_1_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_1_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_15_1 (0x74041000 + 0x0000807Cu)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_1_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_1_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_1_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_CAP_1 (0x74041000 + 0x00008080u)---

    Pex_Cap_id[7..0]             - (RO) Capability ID
                                     This field must return a Capability ID of 10h indicating that this is a PCI Express Capability structure.
    Pex_Next_Ptr[15..8]          - (RO) Next Capability Pointer
                                     This field contains the offset to the next PCI Capability structure.
    Pex_Cap_Version[19..16]      - (RO) Capability Version
                                     Indicates PCI-SIG defined PCI Express Capability structure version number.
    Pex_Dev_Type[23..20]         - (RO) Device Type
                                     Indicates the specific type of this PCI Express Function.
                                     Note that different Functions in a multi-Function device can generally be of different types.
                                     Defined encodings are:
                                     - 0000b: PCI Express Endpoint
                                     - 0001b: Legacy PCI Express Endpoint
                                     - 0100b: Root Port of PCI Express Root Complex*
                                     - 0101b: Upstream Port of PCI Express Switch*
                                     - 0110b: Downstream Port of PCI Express Switch*
                                     - 0111b: PCI Express to PCI/PCI-X Bridge*
                                     - 1000b: PCI/PCI-X to PCI Express Bridge*
                                     - 1001b: Root Complex Integrated Endpoint
                                     - 1010b: Root Complex Event Collector
                                     *This value is only valid for Functions that implement a Type 01h PCI Configuration Space header.
                                     All other encodings are Reserved.
    Pex_Slot_Imp[24]             - (RO) Slot Implemented
                                     When Set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled).
                                     This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.
    Pex_Msi_Num[29..25]          - (RO) Interrupt Message Number
                                     This field indicates which MSI vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.
                                     For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated.
                                     Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    RSVD[31..30]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_RSVD_MASK         0xC0000000u                // RSVD[31..30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_RSVD_SHFT         30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Msi_Num_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Msi_Num_MASK  0x3E000000u                // Pex_Msi_Num[29..25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Msi_Num_SHFT  25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Slot_Imp_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Slot_Imp_MASK 0x01000000u                // Pex_Slot_Imp[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Slot_Imp_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Dev_Type_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Dev_Type_MASK 0x00F00000u                // Pex_Dev_Type[23..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Dev_Type_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Cap_Version_MASK 0x000F0000u                // Pex_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Next_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Next_Ptr_MASK 0x0000FF00u                // Pex_Next_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Next_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Cap_id_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Cap_id_MASK   0x000000FFu                // Pex_Cap_id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_1_Pex_Cap_id_SHFT   0u

/* =====================================================================================

  ---PCIE_CONF_DEV_CAP_1 (0x74041000 + 0x00008084u)---

    Dcr_Max_Payload_Sup[2..0]    - (RO) Max Payload Size Supported
                                     This field indicates the maximum payload size that the Function can support for TLPs.
                                     Defined encodings are:
                                     - 000b: 128 bytes max payload size
                                     - 001b: 256 bytes max payload size
                                     - 010b: 512 bytes max payload size
                                     - 011b: 1024 bytes max payload size
                                     - 100b: 2048 bytes max payload size
                                     - 101b: 4096 bytes max payload size
                                     - otherwise: Reserved
                                     The Functions of a multi-Function device are permitted to report different values for this field.
    Dcr_Ph_Fun_Sup[4..3]         - (RO) Phantom Functions Supported
                                     This field indicates the support for use of unclaimed Function Numbers to extend the number of outstanding transactions allowed by logically combining unclaimed Function Numbers (called Phantom Functions) with the Tag identifier.
                                     With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI multi-Function devices.
                                     This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
                                     
                                     Defined encodings are:
                                     - 00b: No Function Number bits are used for Phantom Functions. Multi-Function devices are permitted to implement up to 8 independent Functions.
                                     - 01b: The most significant bit of the Function number in Requester ID is used for Phantom Functions; a multi-Function device is permitted to implement Functions 0-3. Functions 0, 1, 2, and 3 are permitted to use Function Numbers 4, 5, 6, and 7 respectively as Phantom Functions.
                                     - 10b: The two most significant bits of Function Number in Requester ID are used for Phantom Functions; a multi-Function device is permitted to implement Functions 0-1. Function 0 is permitted to use Function Numbers 2, 4, and 6 for Phantom Functions. Function 1 is permitted to use Function Numbers 3, 5, and 7 as Phantom Functions.
                                     - 11b: All 3 bits of Function Number in Requester ID used for Phantom Functions. The device must have a single Function 0 that is permitted to use all other Function Numbers as Phantom Functions.
                                     
                                     Note that Phantom Function support for the Function must be enabled by the Phantom Functions Enable field in the Device Control register before the Function is permitted to use the
                                     Function Number field in the Requester ID for Phantom Functions.
    Dcr_Ext_Tag_Sup[5]           - (RO) Extended Tag Filed Supported
                                     This bit indicates the maximum supported size of the Tag field as a Requester.
                                     Defined encodings are:
                                     - 0b: 5-bit Tag field supported
                                     - 1b: 8-bit Tag field supported
                                     
                                     Note that 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Control register of the Requester Function before 8-bit Tags can be generated by the Requester.
    Dcr_L0s_Acceptable_Lat[8..6] - (RO) Endpoint L0s Acceptable Latency
                                     This field indicates the acceptable total latency that an Endpoint can withstand due to the transition from L0s state to the L0 state. It is essentially an indirect measure of the Endpoints internal buffering.
                                     Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L0s entry can be used with no loss of performance.
                                     
                                     Defined encodings are:
                                     - 000b: Maximum of 64 ns
                                     - 001b: Maximum of 128 ns
                                     - 010b: Maximum of 256 ns
                                     - 011b: Maximum of 512 ns
                                     - 100b: Maximum of 1 us
                                     - 101b: Maximum of 2 us
                                     - 110b: Maximum of 4 us
                                     - 111b: No limit
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 000b.
    Dcr_L1_Acceptable_Lat[11..9] - (RO) Endpoint L1 Acceptable Latency
                                     This field indicates the acceptable latency that an Endpoint can withstand due to the transition from L1 state to the L0 state. It is essentially an indirect measure of the Endpoints internal buffering.
                                     Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L1 entry can be used with no loss of performance.
                                     
                                     Defined encodings are:
                                     - 000b: Maximum of 1 us
                                     - 001b: Maximum of 2 us
                                     - 010b: Maximum of 4 us
                                     - 011b: Maximum of 8 us
                                     - 100b: Maximum of 16 us
                                     - 101b: Maximum of 32 us
                                     - 110b: Maximum of 64 us
                                     - 111b: No limit
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 000b.
    Undefined[14..12]            - (RO) Undefined
    Dcr_Rbe_Rpt[15]              - (RO) Role Based Error Reporting
                                     When Set, this bit indicates that the Function implements the functionality originally defined in the Error Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1.
                                     
                                     This bit must be Set by all Functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.
    RSVD1[17..16]                - (RO) Reserved
    Dcr_Slot_Pwr[25..18]         - (RO) Captured Slot Power Limit Value
                                     In combination with the Captured Slot Power Limit Scale value, specifies the upper limit on power available to the adapter. 
                                     Power limit (in Watts) is calculated by multiplying the value in this field by the value in the Captured Slot Power Limit Scale field except when the Captured Slot Power Limit Scale field equals 00b (1.0x) and the Captured Slot Power Limit Value exceeds EFh, then alternative encodings are used.
                                     
                                     This value is set by the Set_Slot_Power_Limit Message or hardwired to 00h.
                                     The default value is 00h.
    Dcr_Slot_Pwr_Scale[27..26]   - (RO) Captured Slot Power Limit Scale
                                     Specifies the scale used for the Slot Power Limit Value.
                                     Range of Values:
                                     - 00b: 1.0x
                                     - 01b: 0.1x
                                     - 10b: 0.01x
                                     - 11b: 0.001x
                                     This value is set by the Set_Slot_Power_Limit Message or hardwired to 00b.
                                     The default value is 00b.
    Dcr_Flr[28]                  - (RO) Function Level Reset Capability
                                     A value of 1b indicates the Function supports the optional Function Level Reset mechanism.
                                     This bit applies to Endpoints only. For all other Function types this bit must be hardwired to 0b.
    RSVD2[31..29]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_RSVD2_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_RSVD2_MASK    0xE0000000u                // RSVD2[31..29]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_RSVD2_SHFT    29u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Flr_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Flr_MASK  0x10000000u                // Dcr_Flr[28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Flr_SHFT  28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Slot_Pwr_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Slot_Pwr_Scale_MASK 0x0C000000u                // Dcr_Slot_Pwr_Scale[27..26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Slot_Pwr_Scale_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Slot_Pwr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Slot_Pwr_MASK 0x03FC0000u                // Dcr_Slot_Pwr[25..18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Slot_Pwr_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_RSVD1_MASK    0x00030000u                // RSVD1[17..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_RSVD1_SHFT    16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Rbe_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Rbe_Rpt_MASK 0x00008000u                // Dcr_Rbe_Rpt[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Rbe_Rpt_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Undefined_MASK 0x00007000u                // Undefined[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Undefined_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_L1_Acceptable_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_L1_Acceptable_Lat_MASK 0x00000E00u                // Dcr_L1_Acceptable_Lat[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_L1_Acceptable_Lat_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_L0s_Acceptable_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_L0s_Acceptable_Lat_MASK 0x000001C0u                // Dcr_L0s_Acceptable_Lat[8..6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_L0s_Acceptable_Lat_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Ext_Tag_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Ext_Tag_Sup_MASK 0x00000020u                // Dcr_Ext_Tag_Sup[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Ext_Tag_Sup_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Ph_Fun_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Ph_Fun_Sup_MASK 0x00000018u                // Dcr_Ph_Fun_Sup[4..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Ph_Fun_Sup_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Max_Payload_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Max_Payload_Sup_MASK 0x00000007u                // Dcr_Max_Payload_Sup[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_1_Dcr_Max_Payload_Sup_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV_CTL_STS_1 (0x74041000 + 0x00008088u)---

    Dcr_Cor_Rpt[0]               - (RW) Correctable Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_COR Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Nfat_Rpt[1]              - (RW) Non-Fatal Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_NONFATAL Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Fat_Rpt[2]               - (RW) Fatal Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_FATAL Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Ur_Rpt[3]                - (RW) Unsupported Request Reporting Enable
                                     This bit, in conjunction with other bits, controls the signaling of Unsupported
                                     Request Errors by sending error Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_RO[4]                    - (RW) Enable Relaxed Ordering
                                     If this bit is Set, the Function is permitted to set the Relaxed Ordering bit in the Attributes field of transactions it initiates that do not require strong write ordering.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the Relaxed Ordering attribute in transactions it initiates as a Requester.
                                     
                                     Default value of this bit is 1b.
    Dcr_Max_Payload[7..5]        - (RW) Max Payload Size
                                     This field sets maximum TLP payload size for the Function. As a Receiver, the Function must handle TLPs as large as the set value. As a Transmitter, the Function must not generate TLPs exceeding the set value. Permissible values that can be programmed are indicated by the
                                     Max_Payload_Size Supported field in the Device Capabilities register.
                                     
                                     Defined encodings for this field are:
                                     - 000b: 128 bytes max payload size
                                     - 001b: 256 bytes max payload size
                                     - 010b: 512 bytes max payload size
                                     - 011b: 1024 bytes max payload size
                                     - 100b: 2048 bytes max payload size
                                     - 101b: 4096 bytes max payload size
                                     - 110b: Reserved
                                     - 111b: Reserved
                                     Functions that support only the 128-byte max payload size are permitted to hardwire this field to 000b.
                                     System software is not required to program the same value for this field for all the Functions of a multi-Function device.
                                     
                                     Default value of this field is 000b.
    Dcr_Ext_Tag[8]               - (RW) Extended Tag Field Enable
                                     When Set, this bit enables a Function to use an 8-bit Tag field as a Requester.
                                     If the bit is Clear, the Function is restricted to a 5-bit Tag field.
    Dcr_Ph_Fun[9]                - (RO) Phantom Functions Enable
                                     When Set, this bit enables a Function to use unclaimed Functions as Phantom Functions to extend the number of outstanding transaction identifiers.
                                     If the bit is Clear, the Function is not allowed to use Phantom Functions.
                                     
                                     Default value of this bit is 0b
    Dcr_Aux_PM[10]               - (RW) Aux Power PM Enable
                                     When Set this bit, enables a Function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements.
                                     Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Control/Status register (PMCSR).
                                     For multi-Function devices, a component is allowed to draw Aux power if at least one of the Functions has this bit set.
                                     
                                     Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such Functions, this bit is not modified by Conventional Reset.
    Dcr_No_Snoop[11]             - (RW) Enable No Snoop
                                     If this bit is Set, the Function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency.
                                     Note that setting this bit to 1b should not cause a Function to Set the No Snoop attribute on all
                                     transactions that it initiates.
                                     Even when this bit is Set, a Function is only permitted to Set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.
                                     
                                     Default value of this bit is 1b.
    Dcr_Max_Read_Request[14..12] - (RW) Max Read Request Size
                                     This field sets the maximum Read Request size for the Function as a Requester. The Function must not generate Read Requests with a size exceeding the set value.
                                     
                                     Defined encodings for this field are:
                                     - 000b: 128 bytes maximum Read Request size
                                     - 001b: 256 bytes maximum Read Request size
                                     - 010b: 512 bytes maximum Read Request size
                                     - 011b: 1024 bytes maximum Read Request size
                                     - 100b: 2048 bytes maximum Read Request size
                                     - 101b: 4096 bytes maximum Read Request size
                                     - 110b: Reserved
                                     - 111b: Reserved
                                     
                                     Functions that do not generate Read Requests larger than 128 bytes and Functions that do not generate Read Requests on their own behalf are permitted to implement this field as Read Only (RO) with a value of 000b.
    Ep_Flr[15]                   - (RW) Bridge Configuration Retry Enable
                                     PCI Express to PCI/PCI-X Bridges:
                                     Bridge Configuration Retry Enable - When Set, this bit enables PCI Express to PCI/PCI-X bridges to return Configuration Request Retry Status (CRS) in response to Configuration Requests that target devices below the bridge. Refer to the PCI Express to PCI/PCI-X Bridge Specification, Revision 1.0 for further details.
                                     Endpoints with Function Level Reset Capability set to 1b:
                                     Initiate Function Level Reset - A write of 1b initiates Function Level Reset to the Function.
                                     All others:
                                     Reserved - Must hardwire the bit to 0b.
    Dsr_Cor_Det[16]              - (W1C) Correctable Error Detected
                                     This bit indicates status of correctable errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Correctable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Nfat_Det[17]             - (W1C) Non Fatal Error Detected
                                     This bit indicates status of Nonfatal errors detected. Errors are logged in this register
                                     regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each
                                     Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Fat_Det[18]              - (W1C) Fatal-Error Detected
                                     This bit indicates status of Fatal errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Ur_Det[19]               - (W1C) Unsupported Request Detected
                                     This bit indicates that the Function received an Unsupported Request. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dsr_Aux_Det[20]              - (RO) AUX Power Detected
                                     Functions that require Aux power report this bit as Set if Aux power is detected by the Function.
    Dsr_Trn_Pending[21]          - (RO) Transactions Pending
                                     When Set, this bit indicates that the Function has issued Non-Posted Requests that have not been completed.
                                     A Function reports this bit cleared only when all outstanding Non-Posted Requests have completed or have been terminated by the Completion Timeout mechanism.
                                     This bit must also be cleared upon the completion of an FLR.
    RSVD1[31..22]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_RSVD1_MASK 0xFFC00000u                // RSVD1[31..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_RSVD1_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Trn_Pending_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Trn_Pending_MASK 0x00200000u                // Dsr_Trn_Pending[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Trn_Pending_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Aux_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Aux_Det_MASK 0x00100000u                // Dsr_Aux_Det[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Aux_Det_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Ur_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Ur_Det_MASK 0x00080000u                // Dsr_Ur_Det[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Ur_Det_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Fat_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Fat_Det_MASK 0x00040000u                // Dsr_Fat_Det[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Fat_Det_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Nfat_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Nfat_Det_MASK 0x00020000u                // Dsr_Nfat_Det[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Nfat_Det_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Cor_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Cor_Det_MASK 0x00010000u                // Dsr_Cor_Det[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dsr_Cor_Det_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Ep_Flr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Ep_Flr_MASK 0x00008000u                // Ep_Flr[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Ep_Flr_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Max_Read_Request_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Max_Read_Request_MASK 0x00007000u                // Dcr_Max_Read_Request[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Max_Read_Request_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_No_Snoop_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_No_Snoop_MASK 0x00000800u                // Dcr_No_Snoop[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_No_Snoop_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Aux_PM_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Aux_PM_MASK 0x00000400u                // Dcr_Aux_PM[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Aux_PM_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ph_Fun_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ph_Fun_MASK 0x00000200u                // Dcr_Ph_Fun[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ph_Fun_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ext_Tag_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ext_Tag_MASK 0x00000100u                // Dcr_Ext_Tag[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ext_Tag_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Max_Payload_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Max_Payload_MASK 0x000000E0u                // Dcr_Max_Payload[7..5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Max_Payload_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_RO_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_RO_MASK 0x00000010u                // Dcr_RO[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_RO_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ur_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ur_Rpt_MASK 0x00000008u                // Dcr_Ur_Rpt[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Ur_Rpt_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Fat_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Fat_Rpt_MASK 0x00000004u                // Dcr_Fat_Rpt[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Fat_Rpt_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Nfat_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Nfat_Rpt_MASK 0x00000002u                // Dcr_Nfat_Rpt[1]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Nfat_Rpt_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Cor_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Cor_Rpt_MASK 0x00000001u                // Dcr_Cor_Rpt[0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_1_Dcr_Cor_Rpt_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK_CAP_1 (0x74041000 + 0x0000808Cu)---

    Lcr_Max_Speed[3..0]          - (RO) Max Link Speed
                                     This field indicates the maximum Link speed of the associated Port.
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: 2.5GT
                                     - 0010b: 5GT
                                     - 0011b: 8GT
                                     - 0100b: 16GT
                                     - 0101b: Reserved
                                     - 0110b: Reserved
                                     - 0111b: Reserved
                                     All other encodings are reserved.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions
    Lcr_Max_Width[9..4]          - (RO) Maximum Link Width
                                     This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes routed to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
                                     
                                     Defined encodings are:
                                     - 00 0000b: Reserved
                                     - 00 0001b: x1
                                     - 00 0010b: x2
                                     - 00 0100b: x4
                                     - 00 1000b: x8
                                     - 00 1100b: x12
                                     - 01 0000b: x16
                                     - 10 0000b: x32
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_Aspm_Sup[11..10]         - (RO) ASPM Support
                                     This field indicates the level of ASPM supported on the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00b: No ASPM Support
                                     - 01b: L0s Supported
                                     - 10b: L1 Supported
                                     - 11b: L0s and L1 Supported
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_L0s_Exit_Lat[14..12]     - (RO) L0s Exit Latency
                                     This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from L0s to L0.
                                     
                                     Defined encodings are:
                                     - 000b: Less than 64 ns
                                     - 001b: 64 ns to less than 128 ns
                                     - 010b: 128 ns to less than 256 ns
                                     - 011b: 256 ns to less than 512 ns
                                     - 100b: 512 ns to less than 1 us
                                     - 101b: 1 us to less than 2 us
                                     - 110b: 2 us-4 us
                                     - 111b: More than 4 us
                                     Note that exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_L1_Exit_Lat[17..15]      - (RO) L1 Exit Latency
                                     This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from ASPM L1 to L0.
                                     If ASPM L1 is not supported, the value is undefined.
                                     
                                     Defined encodings are:
                                     - 000b: Less than 1us
                                     - 001b: 1 us to less than 2 us
                                     - 010b: 2 us to less than 4 us
                                     - 011b: 4 us to less than 8 us
                                     - 100b: 8 us to less than 16 us
                                     - 101b: 16 us to less than 32 us
                                     - 110b: 32 us-64 us
                                     - 111b: More than 64 us
                                     Note that exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_Clock_PM_Cap[18]         - (RO) Clock Power Management
                                     For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) via the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2L3 Ready Link states.
                                     A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.
                                     This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.
                                     For a multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all Functions of the multi-Function device indicate a 1b in this bit.
                                     For ARI Devices, all Functions must indicate the same value in this bit.
    Lcr_Sup_Down_Rpt_Cap[19]     - (RO) Surprise Down Error Reporting Capable
                                     For a Downstream Port, this bit must be Set if the component supports the optional capability of detecting and reporting a Surprise Down error condition.
                                     
                                     For Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.
    Lcr_Dll_Rpt_Cap[20]          - (RO) Data Link Layer Link Active Reporting Capable
                                     For a Downstream Port, this bit must be hardwired to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Control and Management State Machine.
                                     For Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.
    Lcr_Lbw_Cap[21]              - (RO) Link Bandwidth Notification Capability
                                     A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms.
                                     This capability is required for all Root Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.
                                     This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
    Lcr_Aspm_Com[22]             - (RO) ASPM Optionally Compliance
                                     This bit must be set to 1b in all Functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.
                                     Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.
    RESERVED23[23]               - (RO) Reserved bits
    Lcr_Port_Num[31..24]         - (RO) Port Number
                                     This field indicates the PCI Express Port number for the given PCI Express Link.
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Port_Num_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Port_Num_MASK 0xFF000000u                // Lcr_Port_Num[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Port_Num_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Aspm_Com_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Aspm_Com_MASK 0x00400000u                // Lcr_Aspm_Com[22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Aspm_Com_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Lbw_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Lbw_Cap_MASK 0x00200000u                // Lcr_Lbw_Cap[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Lbw_Cap_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Dll_Rpt_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Dll_Rpt_Cap_MASK 0x00100000u                // Lcr_Dll_Rpt_Cap[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Dll_Rpt_Cap_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Sup_Down_Rpt_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Sup_Down_Rpt_Cap_MASK 0x00080000u                // Lcr_Sup_Down_Rpt_Cap[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Sup_Down_Rpt_Cap_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Clock_PM_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Clock_PM_Cap_MASK 0x00040000u                // Lcr_Clock_PM_Cap[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Clock_PM_Cap_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_L1_Exit_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_L1_Exit_Lat_MASK 0x00038000u                // Lcr_L1_Exit_Lat[17..15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_L1_Exit_Lat_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_L0s_Exit_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_L0s_Exit_Lat_MASK 0x00007000u                // Lcr_L0s_Exit_Lat[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_L0s_Exit_Lat_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Aspm_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Aspm_Sup_MASK 0x00000C00u                // Lcr_Aspm_Sup[11..10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Aspm_Sup_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Max_Width_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Max_Width_MASK 0x000003F0u                // Lcr_Max_Width[9..4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Max_Width_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Max_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Max_Speed_MASK 0x0000000Fu                // Lcr_Max_Speed[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_1_Lcr_Max_Speed_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK_CTL_STS_1 (0x74041000 + 0x00008090u)---

    Lcr_Aspm_Ctl[1..0]           - (RW) ASPM Control
                                     This field controls the level of ASPM enabled on the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00b: Disabled
                                     - 01b: L0s Entry Enabled
                                     - 10b: L1 Entry Enabled
                                     - 11b: L0s and L1 Entry Enabled
                                     
                                     Note: L0s Entry Enabled enables the Transmitter to enter L0s.
                                     If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled from entering L0s (00b or 10b).
                                     ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link.
                                     When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the
                                     Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.
                                     
                                     For multi-Function devices (including ARI Devices), it is recommended that software program the same value for this field in all Functions. For non-ARI multi-Function devices, only capabilities enabled in all Functions are enabled for the component as a whole.
                                     
                                     Default value of this field is 00b unless otherwise required by a particular form factor.
    RSVD1[2]                     - (RO) Reserved
    Lcr_Rcb[3]                   - (RW) RCB
                                     Optionally Set by configuration software to indicate the RCB value of the Root Port Upstream from the Endpoint or Bridge.
                                     
                                     Defined encodings are:
                                     - 0b: 64 byte
                                     - 1b: 128 byte
                                     Configuration software must only Set this bit if the Root Port Upstream from the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
                                     
                                     Default value of this bit is 0b.
                                     Functions that do not implement this feature must hardwire the bit to 0b
    link_dis[4]                  - (RO) Link Disable
                                     This bit disables the Link by directing the LTSSM to the Disabled state when Set;
                                     this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream
                                     Ports of Switches.
                                     Writes to this bit are immediately reflected in the value read from the bit, regardless of actual Link state.
                                     After clearing this bit, software must honor timing requirements defined in PCIe Spec. with respect to the first Configuration Read following a Conventional Reset.
                                     Default value of this bit is 0b.
    retrain_link[5]              - (RO) Link Retrain
                                     A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. Reads of this bit always return 0b.
                                     It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in progress.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     This bit always returns 0b when read.
    Lcr_Com_clock[6]             - (RW) Common Clock Configuration
                                     When Set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.
                                     
                                     A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchronous reference clock.
                                     
                                     For non-ARI multi-Function devices, software must program the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.
                                     
                                     Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.
                                     
                                     After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.
                                     
                                     Default value of this bit is 0b.
    Lcr_Ext_Sync[7]              - (RW) Extended Synch
                                     When Set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state and when in the Recovery state.
                                     This mode provides external devices (e.g., logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.
                                     
                                     For multi-Function devices if any Function has this bit Set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.
                                     
                                     Default value for this bit is 0b.
    Lcr_Clock_PM[8]              - (RW) Enable Clock Power Management
                                     Applicable only for Upstream Ports and with form factors that support a Clock
                                     Request (CLKREQ#) mechanism, this bit operates as follows:
                                     - 0b: Clock power management is disabled and device must hold CLKREQ# signal low.
                                     - 1b: When this bit is Set, the device is permitted to use CLKREQ# signal to power manage Link clock according to protocol defined in appropriate form factor specification.
                                     
                                     For a non-ARI multi-Function device, power-management configuration software must only Set this bit if all Functions of the multi-Function device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.
                                     
                                     Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register) must hardwire this bit to 0b.
                                     
                                     Default value of this bit is 0b, unless specified otherwise by the form factor specification.
    hw_auto_width_dis[9]         - (RW) Hardware Autonomous Width Disable
                                     When Set, this bit disables hardware from changing the Link width for reasons other than attempting to correct unreliable Link operation by reducing Link width.
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RW, and only Function 0 controls the component Link behavior. In all other Functions of that device, this bit is of type RsvdP.
    lnk_bdw_mng_en[10]           - (RO) Link Bandwidth Management Interrupt Enable
                                     When Set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been Set.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    lnk_auto_bdw_en[11]          - (RO) Link Autonomous Bandwidth Interrupt Enable
                                     When Set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been Set.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    RSVD2[13..12]                - (RO) Reserved
    drs_signaling_ctrl[15..14]   - (RO) DRS Signaling Control - Indicates the mechanism used to report reception of a DRS message. Must be
                                     implemented for Downstream Ports with the DRS Supported bit Set in the Link Capabilities 2 Register.
                                     Encodings are:
                                     00b: DRS not Reported: If DRS Supported is Set, receiving a DRS Message will set DRS Message
                                     Received in the Link Status 2 Register but will otherwise have no effect
                                     01b: DRS Interrupt Enabled: If the DRS Message Received bit in the Link Status 2 Register transitions
                                     from 0 to 1, and either MSI or MSI-X is enabled, an MSI or MSI-X interrupt is generated
                                     using the vector in Interrupt Message Number (Section 7.5.3.2 )
                                     10b: DRS to FRS Signaling Enabled: If the DRS Message Received bit in the Link Status 2 Register
                                     transitions from 0 to 1, the Port must send an FRS Message Upstream with the FRS
                                     Reason field set to DRS Message Received.
                                     Behavior is undefined if this field is set to 10b and the FRS Supported bit in the Device Capabilities 2
                                     Register is Clear.
                                     Behavior is undefined if this field is set to 11b.
                                     Downstream Ports with the DRS Supported bit Clear in the Link Capabilities 2 Register must hardwire
                                     this field to 00b.
                                     This field is Reserved for Upstream
    Lsr_Link_Speed[19..16]       - (RO) Current Link Speed
                                     This field indicates the negotiated Link speed of the given PCI Express Link.
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the current Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: 2.5GT
                                     - 0010b: 5GT
                                     - 0011b: 8GT
                                     - 0100b: 16GT
                                     - 0101b: Reserved
                                     - 0110b: Reserved
                                     - 0111b: Reserved
                                     
                                     All other encodings are Reserved.
                                     The value in this field is undefined when the Link is not up.
    Lsr_Link_Width[25..20]       - (RO) Negotiated Link Width
                                     This field indicates the negotiated width of the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00 0001b: x1
                                     - 00 0010b: x2
                                     - 00 0100b: x4
                                     - 00 1000b: x8
                                     - 00 1100b: x12
                                     - 01 0000b: x16
                                     - 10 0000b: x32
                                     All other encodings are Reserved. The value in this field is undefined when the Link is not up.
    Undefined[26]                - (RO) Undefined
    Link_Training[27]            - (RO) Link Training
                                     This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.
                                     This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
    Lsr_Slot_Clock[28]           - (RO) Slot Clock Configuration
                                     This bit indicates that the component uses the same physical reference clock that the platform provides on the connector.
                                     If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.
                                     
                                     For a multi-Function device, each Function must report the same value for this bit.
    Lsr_Dll_Act[29]              - (RO) Data Link Layer Lin Active
                                     This bit indicates the status of the Data Link Control and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.
                                     
                                     This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, this bit must be hardwired to 0b.
    lnk_bdw_mng_sts[30]          - (W1C) Link Bandwidth Management Status
                                     This bit is Set by hardware to indicate that either of the following has occurred without the Port transitioning through DL_Down status:
                                     A Link retraining has completed following a write of 1b to the Retrain Link bit.
                                     Note: This bit is Set following any write of 1b to the Retrain Link bit, including when the Link is in the process of retraining for some other reason.
                                     Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either through an LTSSM timeout or a higher level process.
                                     This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
    lnk_auto_bdw_sts[31]         - (W1C) Link Autonomous Bandwidth Status
                                     This bit is Set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning through DL_Down status, for reasons other than to attempt to correct unreliable Link operation.
                                     This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_auto_bdw_sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_auto_bdw_sts_MASK 0x80000000u                // lnk_auto_bdw_sts[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_auto_bdw_sts_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_bdw_mng_sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_bdw_mng_sts_MASK 0x40000000u                // lnk_bdw_mng_sts[30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_bdw_mng_sts_SHFT 30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Dll_Act_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Dll_Act_MASK 0x20000000u                // Lsr_Dll_Act[29]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Dll_Act_SHFT 29u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Slot_Clock_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Slot_Clock_MASK 0x10000000u                // Lsr_Slot_Clock[28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Slot_Clock_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Link_Training_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Link_Training_MASK 0x08000000u                // Link_Training[27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Link_Training_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Undefined_MASK 0x04000000u                // Undefined[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Undefined_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Link_Width_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Link_Width_MASK 0x03F00000u                // Lsr_Link_Width[25..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Link_Width_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Link_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Link_Speed_MASK 0x000F0000u                // Lsr_Link_Speed[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lsr_Link_Speed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_drs_signaling_ctrl_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_drs_signaling_ctrl_MASK 0x0000C000u                // drs_signaling_ctrl[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_drs_signaling_ctrl_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_RSVD2_MASK 0x00003000u                // RSVD2[13..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_RSVD2_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_auto_bdw_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_auto_bdw_en_MASK 0x00000800u                // lnk_auto_bdw_en[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_auto_bdw_en_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_bdw_mng_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_bdw_mng_en_MASK 0x00000400u                // lnk_bdw_mng_en[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_lnk_bdw_mng_en_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_hw_auto_width_dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_hw_auto_width_dis_MASK 0x00000200u                // hw_auto_width_dis[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_hw_auto_width_dis_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Clock_PM_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Clock_PM_MASK 0x00000100u                // Lcr_Clock_PM[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Clock_PM_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Ext_Sync_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Ext_Sync_MASK 0x00000080u                // Lcr_Ext_Sync[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Ext_Sync_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Com_clock_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Com_clock_MASK 0x00000040u                // Lcr_Com_clock[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Com_clock_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_retrain_link_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_retrain_link_MASK 0x00000020u                // retrain_link[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_retrain_link_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_link_dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_link_dis_MASK 0x00000010u                // link_dis[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_link_dis_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Rcb_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Rcb_MASK 0x00000008u                // Lcr_Rcb[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Rcb_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_RSVD1_MASK 0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_RSVD1_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Aspm_Ctl_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Aspm_Ctl_MASK 0x00000003u                // Lcr_Aspm_Ctl[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_1_Lcr_Aspm_Ctl_SHFT 0u

/* =====================================================================================

  ---PCIE_SLOT_CAP_1 (0x74041000 + 0x00008094u)---

    PCIE_SLOT_CAP[31..0]         - (RO) Slot Capabilities Register
                                     The Slot Capabilities register identifies PCI Express slot specific capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_1_PCIE_SLOT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_1_PCIE_SLOT_CAP_MASK 0xFFFFFFFFu                // PCIE_SLOT_CAP[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_1_PCIE_SLOT_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_SLOT_CTR_1 (0x74041000 + 0x00008098u)---

    Attention_Button_Pressed_En[0] - (RO) Attention Button Pressed Enable
                                     When Set to 1b, this bit enables software notification on an attention button pressed event
    Power_Fault_Detected_En[1]   - (RO) Power Fault Detected Enable
                                     When Set, this bit enables software notification on a power fault event
    MRL_Sensor_Changed_En[2]     - (RO) MRL Sensor Changed Enable
                                     When Set, this bit enables software notification on a MRL sensor changed event
    Presence_Detect_Changed_En[3] - (RO) Presence Detect Changed Enable
                                     When Set, this bit enables software notification on a presence detect changed event
    Command_Completed_Interrupt_En[4] - (RO) Command Completed Interrupt Enable
                                     If Command Completed notification is supported (if the No Command Completed Support bit in the Slot Capabilities register is 0b), when Set, this bit enables software notification when a hot-plug command is completed by the Hot-Plug Controller
    HotPlug_Interrupt_En[5]      - (RO) Hot-Plug Interrupt Enable
                                     When Set, this bit enables generation of an interrupt on enabled hot-plug events
    Attention_Indicator_Ctr[7..6] - (RO) Attention Indicator Control
                                     If an Attention Indicator is implemented, writes to this field set the Attention Indicator to the written state.
    Power_Indicator_Ctr[9..8]    - (RO) Power Indicator Control
                                     If a Power Indicator is implemented, writes to this field set the Power Indicator to the written state. Reads of this field must reflect the value from the latest write, even if the corresponding hot-plug command is not complete, unless software issues a write without waiting, if required to, for the previous command to complete in which case the read value is undefined.
                                     Defined encodings are:
                                     00b Reserved
                                     01b On
                                     10b Blink
                                     11b Off
                                     Note: The default value of this field must be one of the non-Reserved values. If the Power Indicator Present bit in the Slot Capabilities register is 0b, this bit is permitted to be read-only with a value of 00b.
    Power_Controller_Control[10] - (RO) Power Controller Control
                                     The defined encodings are 0b Power On 1b Power Off
    Electromechanical_Interlock_Control[11] - (RO) Electromechanical Interlock Control
                                     If an Electromechanical Interlock is implemented, a write of 1b to this bit causes the state of the interlock to toggle. A write of 0b to this bit has no effect. A read of this bit always returns a 0b.
    DLL_State_Changed_En[12]     - (RO) Data Link Layer State Changed Enable
                                     If the Data Link Layer Link Active Reporting capability is 1b, this bit enables software notification when Data Link Layer Link Active bit is changed
    RSVD1[15..13]                - (RO) Reserved
    Attention_Button_Pressed[16] - (RO) Attention Button Pressed
                                     If an Attention Button is implemented, this bit is Set when the attention button is pressed. If an Attention Button is not supported, this bit must not be Set.
    Power_Fault_Detected[17]     - (RO) Power Fault Detected
                                     When Set, this bit enables software notification on a power fault event
    MRL_Sensor_Changed[18]       - (RO) MRL Sensor Changed
                                     When Set, this bit enables software notification on a MRL sensor changed event
    Presence_Detect_Changed[19]  - (RO) Presence Detect Changed
                                     When Set, this bit enables software notification on a presence detect changed event
    Command_Completed_Interrupt[20] - (RO) Command Completed
                                     If Command Completed notification is supported (if the No Command Completed Support bit in the Slot Capabilities register is 0b), when Set, this bit enables software notification when a hot-plug command is completed by the Hot-Plug Controller
    MRL_Sensor_State[21]         - (RO) MRL Sensor Changed
                                     If an MRL sensor is implemented, this bit is Set when a MRL Sensor state change is detected. If an MRL sensor is not implemented, this bit must not be Set.
    Presence_Detect_State[22]    - (RO) Presence Detect Changed
                                     This bit is set when the value reported in the Presence Detect State bit is changed.
    Electromechanical_Interlock_Status[23] - (RO) Electromechanical Interlock Status
                                     If an Electromechanical Interlock is implemented, this bit indicates the status of the Electromechanical Interlock.
                                     Defined encodings are:
                                     0b Electromechanical Interlock Disengaged
                                     1b Electromechanical Interlock Engaged
    DLL_State_Changed[24]        - (W1C) Data Link Layer State Changed
                                     This bit is Set when the value reported in the Data Link Layer Link Active bit of the Link Status register is changed.
                                     In response to a Data Link Layer State Changed event, software must read the Data Link Layer Link Active bit of the Link Status register to determine if the Link is active before initiating configuration cycles to the hot plugged device.
    RSVD2[31..25]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_RSVD2_MASK        0xFE000000u                // RSVD2[31..25]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_RSVD2_SHFT        25u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_DLL_State_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_DLL_State_Changed_MASK 0x01000000u                // DLL_State_Changed[24]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_DLL_State_Changed_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Electromechanical_Interlock_Status_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Electromechanical_Interlock_Status_MASK 0x00800000u                // Electromechanical_Interlock_Status[23]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Electromechanical_Interlock_Status_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_State_MASK 0x00400000u                // Presence_Detect_State[22]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_State_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_State_MASK 0x00200000u                // MRL_Sensor_State[21]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_State_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Command_Completed_Interrupt_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Command_Completed_Interrupt_MASK 0x00100000u                // Command_Completed_Interrupt[20]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Command_Completed_Interrupt_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_Changed_MASK 0x00080000u                // Presence_Detect_Changed[19]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_Changed_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_Changed_MASK 0x00040000u                // MRL_Sensor_Changed[18]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_Changed_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Fault_Detected_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Fault_Detected_MASK 0x00020000u                // Power_Fault_Detected[17]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Fault_Detected_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Button_Pressed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Button_Pressed_MASK 0x00010000u                // Attention_Button_Pressed[16]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Button_Pressed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_RSVD1_MASK        0x0000E000u                // RSVD1[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_RSVD1_SHFT        13u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_DLL_State_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_DLL_State_Changed_En_MASK 0x00001000u                // DLL_State_Changed_En[12]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_DLL_State_Changed_En_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Electromechanical_Interlock_Control_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Electromechanical_Interlock_Control_MASK 0x00000800u                // Electromechanical_Interlock_Control[11]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Electromechanical_Interlock_Control_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Controller_Control_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Controller_Control_MASK 0x00000400u                // Power_Controller_Control[10]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Controller_Control_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Indicator_Ctr_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Indicator_Ctr_MASK 0x00000300u                // Power_Indicator_Ctr[9..8]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Indicator_Ctr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Indicator_Ctr_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Indicator_Ctr_MASK 0x000000C0u                // Attention_Indicator_Ctr[7..6]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Indicator_Ctr_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_HotPlug_Interrupt_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_HotPlug_Interrupt_En_MASK 0x00000020u                // HotPlug_Interrupt_En[5]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_HotPlug_Interrupt_En_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Command_Completed_Interrupt_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Command_Completed_Interrupt_En_MASK 0x00000010u                // Command_Completed_Interrupt_En[4]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Command_Completed_Interrupt_En_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_Changed_En_MASK 0x00000008u                // Presence_Detect_Changed_En[3]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Presence_Detect_Changed_En_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_Changed_En_MASK 0x00000004u                // MRL_Sensor_Changed_En[2]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_MRL_Sensor_Changed_En_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Fault_Detected_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Fault_Detected_En_MASK 0x00000002u                // Power_Fault_Detected_En[1]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Power_Fault_Detected_En_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Button_Pressed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Button_Pressed_En_MASK 0x00000001u                // Attention_Button_Pressed_En[0]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_1_Attention_Button_Pressed_En_SHFT 0u

/* =====================================================================================

  ---PCIE_ROOT_CONTROL_1 (0x74041000 + 0x0000809Cu)---

    serr_cor_en[0]               - (RO) System Error on Correctable Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a correctable error (ERR_COR) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    serr_non_en[1]               - (RO) System Error on Non-Fatal Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a Non-fatal error (ERR_NONFATAL) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    serr_fat_en[2]               - (RO) System Error on Fatal Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a Fatal error (ERR_FATAL) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    pme_int_en[3]                - (RO) PME Interrupt Enable
                                     When Set, this bit enables PME interrupt generation upon receipt of a PME Message as reflected in the PME Status bit.
                                     A PME interrupt is also generated if the PME Status bit is Set when this bit is changed from Clear to Set
    crs_en[4]                    - (RO) CRS Software Visibility Enable
                                     When Set, this bit enables the Root Port to return Configuration Request Retry Status (CRS) Completion Status to software
                                     Root Ports that do not implement this capability must hardwire this bit to 0b.
    RSVD1[15..5]                 - (RO) Reserved
    root_crs[16]                 - (RO) CRS Software Visibility
                                     When Set, this bit indicates that the Root Port is capable of returning CRS (Configuration Request Retry Status) Completion Status to software
    RSVD2[31..17]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_RSVD2_ADDR    PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_RSVD2_MASK    0xFFFE0000u                // RSVD2[31..17]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_RSVD2_SHFT    17u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_root_crs_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_root_crs_MASK 0x00010000u                // root_crs[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_root_crs_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_RSVD1_MASK    0x0000FFE0u                // RSVD1[15..5]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_RSVD1_SHFT    5u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_crs_en_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_crs_en_MASK   0x00000010u                // crs_en[4]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_crs_en_SHFT   4u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_pme_int_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_pme_int_en_MASK 0x00000008u                // pme_int_en[3]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_pme_int_en_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_fat_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_fat_en_MASK 0x00000004u                // serr_fat_en[2]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_fat_en_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_non_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_non_en_MASK 0x00000002u                // serr_non_en[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_non_en_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_cor_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_cor_en_MASK 0x00000001u                // serr_cor_en[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_1_serr_cor_en_SHFT 0u

/* =====================================================================================

  ---PCIE_ROOT_STATUS_1 (0x74041000 + 0x000080A0u)---

    pme_req_id[15..0]            - (RO) PME Request ID
                                     This field indicates the PCI Requester ID of the last PME Requester. This field is only valid when the PME Status bit is Set.
    pme_status[16]               - (W1C) PME Status
                                     This bit indicates that PME was asserted by the PME Requester indicated in the PME Requester ID field. Subsequent PMEs are kept pending until the status register is cleared by software by writing a 1b.
    pme_pending[17]              - (RO) PME Pending
                                     This bit indicates that another PME is pending when the PME Status bit is Set. When the PME Status bit is cleared by software; the PME is delivered by hardware by setting the PME Status bit again and updating the PME Requester ID field appropriately. The PME Pending bit is cleared by hardware if no more PMEs are pending.
    RSVD1[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_RSVD1_MASK     0xFFFC0000u                // RSVD1[31..18]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_RSVD1_SHFT     18u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_pending_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_pending_MASK 0x00020000u                // pme_pending[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_pending_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_status_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_status_MASK 0x00010000u                // pme_status[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_status_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_req_id_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_req_id_MASK 0x0000FFFFu                // pme_req_id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_1_pme_req_id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV2_CAP_1 (0x74041000 + 0x000080A4u)---

    Dcr2_Cpl_To_Range_Sup[3..0]  - (RO) Completion Timeout Ranges Supported
                                     This field indicates device Function support for the optional Completion Timeout programmability mechanism. This mechanism allows system software to modify the Completion Timeout value.
                                     
                                     Four time value ranges are defined:
                                     - Range A: 50 us to 10 ms
                                     - Range B: 10 ms to 250 ms
                                     - Range C: 250 ms to 4 s
                                     - Range D: 4 s to 64 s
                                     Bits are set according to the table below to show timeout value ranges supported.
                                     
                                     - 0000b: Completion Timeout programming not supported - the Function must implement a
                                     timeout value in the range 50 us to 50 ms.
                                     - 0001b: Range A
                                     - 0010b: Range B
                                     - 0011b: Ranges A and B
                                     - 0110b: Ranges B and C
                                     - 0111b: Ranges A, B, and C
                                     - 1110b: Ranges B, C, and D
                                     - 1111b: Ranges A, B, C, and D
                                     All other values are Reserved.
                                     
                                     It is strongly recommended that the Completion Timeout mechanism not expire in less than 10 ms.
    Dcr2_Cpl_To_Dis_Sup[4]       - (RO) Completion Timeout Disable Supported
                                     A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
    ARI_Forwarding_Support[5]    - (RO) ARI Forwarding Supported
                                     A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
                                     This mechanism is optional for Root Ports.
                                     For all other Functions this field is Reserved and must be hardwired to 0b.
    AtomicOp_Routing_Support[6]  - (RO) AtomicOp Routing Supported
                                     Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability.
    AtomicOp_32b_Completer_Support[7] - (RO) 32-bit AtomicOp Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    AtomicOp_64b_Completer_Support[8] - (RO) 64-bit AtomicOp Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    CAS_128b_Completer_Support[9] - (RO) 128-bit CAS Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability.
    No_RO_enabled_PR_PR_Passing[10] - (RO) No RO-enabled PR-PR Passing
                                     If this bit is Set, the routing element never carries out the passing permitted.
                                     This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
                                     For all other functions, this bit must be 0b.
    Dcr2_LTR_Sup[11]             - (RO) LTR Mechanism Supported
                                     A value of 1b indicates support for the optional LTR (Latency Tolerance Reporting) mechanism
    TPH_COMPLETER_SUP[13..12]    - (RO) TPH Completer Supported
                                     Value indicates Completer support for TPH or Extended TPH. Applicable only to Root Ports and Endpoints. For all other Functions, this field is Reserved.
                                     Defined Encodings are:
                                     00b TPH and Extended TPH Completer not supported.
                                     01b TPH Completer supported; Extended TPH Completer not supported.
                                     10b Reserved.
                                     11b Both TPH and Extended TPH Completer supported.
    LN_SYS_CLS[15..14]           - (RO) LN System CLS
                                     Applicable only to Root Ports and RCRBs; must be 00b for all other Function types. This field indicates if the Root Port or RCRB supports LN protocol as an LN Completer, and if so, what cacheline size is in effect.
                                     Encodings are:
                                     00b LN Completer either not supported or not in effect
                                     01b LN Completer with 64-byte cachelines in effect
                                     10b LN Completer with 128-byte cachelines in effect
                                     11b Reserved
    SUP_10B_TAG_CPL[16]          - (RO) 10-Bit Tag Completer Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. See Section 2.2.6.2.
    SUP_10B_TAG_REQ[17]          - (RO) 10-Bit Tag Requester Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.
                                     This bit must not be Set if the 10-Bit Tag Completer Supported bit is Clear.
                                     If the Function is an RCiEP, this bit must be Clear if the RC does not support 10-Bit Tag Completer capability for Requests coming from this RCiEP.
                                     Note that 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Control 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. See Section 2.2.6.2.
    Dcr2_OBFF_Sup[19..18]        - (RO) OBFF (Optimized Buffer Flush Fill) Supported
                                     -00b: OBFF Not Supported
                                     -01b: OBFF supported using Message signaling only
                                     -10b: OBFF supported using WAKE# signaling only
                                     -11b: OBFF supported using WAKE# and Message signaling
    EXT_FMT_FIELD_SUP[20]        - (RO) Extended Fmt Field Supported
                                     If Set, the Function supports the 3-bit definition of the Fmt field. If Clear, the Function supports a 2-bit definition of the Fmt field. See Section 2.2.
                                     Must be Set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.
                                     It is strongly recommended that Functions support the 3-bit definition of the Fmt field.
    END_END_TLP_PREFIX_SUP[21]   - (RO) End-End TLP Prefix Supported
                                     Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
                                     0b No Support
                                     1b Support is provided to receive TLPs containing End-End TLP Prefixes.
                                     All Ports of a Switch must have the same value for this bit.
    MAX_END_END_TLP_PREFIX[23..22] - (RO) Max End-End TLP Prefixes
                                     Indicates the maximum number of End-End TLP Prefixes supported by this Function. See Section 2.2.10.2 for important details. Values are:
                                     01b 1 End-End TLP Prefix
                                     10b 2 End-End TLP Prefixes
                                     11b 3 End-End TLP Prefixes
                                     00b 4 End-End TLP Prefixes
                                     If End-End TLP Prefix Supported is Clear, this field is RsvdP.
                                     Different Root Ports that have the End-End TLP Prefix Supported bit Set are permitted to report different values for this field.
                                     For Switches where End-End TLP Prefix Supported is Set, this field must be 00b indicating support for up to four End-End TLP Prefixes.
    RSVD2[30..24]                - (RO) Reserved
    FRS_SUP[31]                  - (RO) FRS Supported
                                     When Set, indicates support for the optional Function Readiness Status (FRS) capability.
                                     Must be Set for all Functions that support generation or receipt capabilities of FRS Messages.
                                     Must not be Set by Switch Functions that do not generate FRS Messages on their own behalf.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_FRS_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_FRS_SUP_MASK 0x80000000u                // FRS_SUP[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_FRS_SUP_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_RSVD2_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_RSVD2_MASK   0x7F000000u                // RSVD2[30..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_RSVD2_SHFT   24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_MAX_END_END_TLP_PREFIX_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_MAX_END_END_TLP_PREFIX_MASK 0x00C00000u                // MAX_END_END_TLP_PREFIX[23..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_MAX_END_END_TLP_PREFIX_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_END_END_TLP_PREFIX_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_END_END_TLP_PREFIX_SUP_MASK 0x00200000u                // END_END_TLP_PREFIX_SUP[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_END_END_TLP_PREFIX_SUP_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_EXT_FMT_FIELD_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_EXT_FMT_FIELD_SUP_MASK 0x00100000u                // EXT_FMT_FIELD_SUP[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_EXT_FMT_FIELD_SUP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_OBFF_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_OBFF_Sup_MASK 0x000C0000u                // Dcr2_OBFF_Sup[19..18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_OBFF_Sup_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_SUP_10B_TAG_REQ_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_SUP_10B_TAG_REQ_MASK 0x00020000u                // SUP_10B_TAG_REQ[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_SUP_10B_TAG_REQ_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_SUP_10B_TAG_CPL_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_SUP_10B_TAG_CPL_MASK 0x00010000u                // SUP_10B_TAG_CPL[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_SUP_10B_TAG_CPL_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_LN_SYS_CLS_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_LN_SYS_CLS_MASK 0x0000C000u                // LN_SYS_CLS[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_LN_SYS_CLS_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_TPH_COMPLETER_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_TPH_COMPLETER_SUP_MASK 0x00003000u                // TPH_COMPLETER_SUP[13..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_TPH_COMPLETER_SUP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_LTR_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_LTR_Sup_MASK 0x00000800u                // Dcr2_LTR_Sup[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_LTR_Sup_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_No_RO_enabled_PR_PR_Passing_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_No_RO_enabled_PR_PR_Passing_MASK 0x00000400u                // No_RO_enabled_PR_PR_Passing[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_No_RO_enabled_PR_PR_Passing_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_CAS_128b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_CAS_128b_Completer_Support_MASK 0x00000200u                // CAS_128b_Completer_Support[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_CAS_128b_Completer_Support_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_64b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_64b_Completer_Support_MASK 0x00000100u                // AtomicOp_64b_Completer_Support[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_64b_Completer_Support_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_32b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_32b_Completer_Support_MASK 0x00000080u                // AtomicOp_32b_Completer_Support[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_32b_Completer_Support_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_Routing_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_Routing_Support_MASK 0x00000040u                // AtomicOp_Routing_Support[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_AtomicOp_Routing_Support_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ARI_Forwarding_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ARI_Forwarding_Support_MASK 0x00000020u                // ARI_Forwarding_Support[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ARI_Forwarding_Support_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_Cpl_To_Dis_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_Cpl_To_Dis_Sup_MASK 0x00000010u                // Dcr2_Cpl_To_Dis_Sup[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_Cpl_To_Dis_Sup_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_Cpl_To_Range_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_Cpl_To_Range_Sup_MASK 0x0000000Fu                // Dcr2_Cpl_To_Range_Sup[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_1_Dcr2_Cpl_To_Range_Sup_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV2_CTL_STS_1 (0x74041000 + 0x000080A8u)---

    Dcr2_Cpl_To[3..0]            - (RW) Completion Timeout Value
                                     In device Functions that support Completion Timeout programmability, this field allows system software to modify the Completion Timeout value.
                                     A Function that does not support this optional capability must hardwire this field to 0000b and is required to implement a timeout value in the range 50 us to 50 ms.
                                     Functions that support Completion Timeout programmability must support the values given below corresponding to the programmability ranges indicated in the Completion Timeout Ranges Supported field.
                                     
                                     Defined encodings:
                                     - 0000b: Default range: 50 us to 50 ms
                                     - 0001b: 50 us to 100 us
                                     - 0010b: 1 ms to 10 ms
                                     - 0101b: 16 ms to 55 ms
                                     - 0110b: 65 ms to 210 ms
                                     - 1001b: 260 ms to 900 ms
                                     - 1010b: 1 s to 3.5 s
                                     - 1101b: 4 s to 13 s
                                     - 1110b: 17 s to 64 s
                                     Values not defined above are Reserved.
                                     
                                     Software is permitted to change the value in this field at any time. For Requests already pending when the Completion Timeout Value is changed, hardware is permitted to use either the new or the old value for the outstanding Requests, and is permitted to base the start time for each Request either on when this value was changed or on when each request was issued.
                                     
                                     The default value for this field is 0000b.
    Dcr2_Cpl_to_Dis[4]           - (RW) Completion Timeout Disable
                                     When Set, this bit disables the Completion Timeout mechanism.
                                     
                                     This bit is required for all Functions that support the Completion Timeout Disable Capability. Functions that do not support this optional capability are permitted to hardwire this bit to 0b
                                     Software is permitted to Set or Clear this bit at any time. When Set, the Completion Timeout detection mechanism is disabled.
                                     If there are outstanding Requests when the bit is cleared, it is permitted but not required for hardware to apply the completion timeout mechanism to the outstanding Requests. If this is done, it is permitted to base the start time for each Request on either the time this bit was cleared or the time each Request was issued.
                                     
                                     The default value for this bit is 0b.
    ARI_Forwarding_En[5]         - (RO) ARI Forwarding Enable
                                     When set, the Downstream Port disables its traditional Device Number field being 0 enforcement when turning a Type 1 Configuration Request into a Type 0 Configuration Request, permitting access to Extended Functions
                                     in an ARI Device immediately below the Port.
                                     Must be hardwired to 0b if the ARI Forwarding Supported bit is 0b.
    AtomicOp_Requester_En[6]     - (RW) AtomicOp Requester Enable
                                     Applicable only to Endpoints and Root Ports; must be hardwired to 0b for other Function types. The Function is allowed to initiate AtomicOp Requests
                                     only if this bit and the Bus Master Enable bit in the Command register are both Set.
                                     This bit is required to be RW if the Endpoint or Root Port is capable of initiating AtomicOp Requests, but otherwise is permitted to be hardwired to 0b.
                                     This bit does not serve as a capability bit. This bit is permitted to be RW even if no AtomicOp Requester capabilities are supported by the Endpoint or Root Port.
    AtomicOp_Egress_Blocking[7]  - (RO) AtomicOp Egress Blocking
                                     Applicable and mandatory for Switch Upstream Ports, Switch Downstream Ports, and Root Ports that implement AtomicOp routing capability; otherwise must be hardwired to 0b.
                                     When this bit is Set, AtomicOp Requests that target going out this Egress Port must be blocked.
    IDO_Request_En[8]            - (RW) IDO Request Enable
                                     If this bit is Set, the Function is permitted to set the ID-Based Ordering (IDO) bit (Attr[2]) of
                                     Requests it initiates.
                                     Endpoints, including RC Integrated Endpoints, and Root Ports are permitted to implement this capability.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the IDO attribute in Requests.
    IDO_Completion_En[9]         - (RW) IDO Completion Enable
                                     If this bit is Set, the Function is permitted to set the ID-Based Ordering (IDO) bit (Attr[2]) of
                                     Completions it returns.
                                     Endpoints, including RC Integrated Endpoints, and Root Ports are permitted to implement this capability.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the IDO attribute in Completions.
    Dcr2_LTR_Enable[10]          - (RW) LTR(Latency Tolerance Reporting) Mechanism Enable
                                     When Set to 1b, this bit enables upstream ports to send LTR messages and Downstream Ports to process LTR Messages.
                                     For a Multi-Function device associated with an Upstream Port of a device that implements LTR, the bit in Function 0 is RW, and only Function 0 controls link behavior of the component. In all other Functions of that device, this bit is Reserved.
                                     This bit is RO if LTR is not supported
    RESERVED11[11]               - (RO) Reserved bits
    dcr2_10btag_req_en[12]       - (RO) 10-Bit Tag Requester Enable.
                                     This bit, in combination with the Extended Tag Field Enable bit in the Device Control register, determines how many Tag field bits a Requester is permitted to use. When the 10-Bit Tag Requester Enable bit is Set, the Requester is permitted to use 10-Bit Tags. See Section 2.2.6.2 for complete details.
                                     If software changes the value of this bit while the Function has outstanding Non-Posted Requests, the result is undefined.
                                     Functions that do not implement 10-Bit Tag Requester capability are permitted to hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    Dcr2_OBFF_Enable[14..13]     - (RO) OBFF (Optimized Buffer Flush Fill) Enable
                                     These two bits are RO if OBFF is not supported
    RSVD1[31..15]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_RSVD1_MASK 0xFFFF8000u                // RSVD1[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_RSVD1_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_OBFF_Enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_OBFF_Enable_MASK 0x00006000u                // Dcr2_OBFF_Enable[14..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_OBFF_Enable_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_dcr2_10btag_req_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_dcr2_10btag_req_en_MASK 0x00001000u                // dcr2_10btag_req_en[12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_dcr2_10btag_req_en_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_LTR_Enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_LTR_Enable_MASK 0x00000400u                // Dcr2_LTR_Enable[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_LTR_Enable_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_IDO_Completion_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_IDO_Completion_En_MASK 0x00000200u                // IDO_Completion_En[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_IDO_Completion_En_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_IDO_Request_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_IDO_Request_En_MASK 0x00000100u                // IDO_Request_En[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_IDO_Request_En_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_AtomicOp_Egress_Blocking_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_AtomicOp_Egress_Blocking_MASK 0x00000080u                // AtomicOp_Egress_Blocking[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_AtomicOp_Egress_Blocking_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_AtomicOp_Requester_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_AtomicOp_Requester_En_MASK 0x00000040u                // AtomicOp_Requester_En[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_AtomicOp_Requester_En_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ARI_Forwarding_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ARI_Forwarding_En_MASK 0x00000020u                // ARI_Forwarding_En[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ARI_Forwarding_En_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_Cpl_to_Dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_Cpl_to_Dis_MASK 0x00000010u                // Dcr2_Cpl_to_Dis[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_Cpl_to_Dis_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_Cpl_To_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_Cpl_To_MASK 0x0000000Fu                // Dcr2_Cpl_To[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_1_Dcr2_Cpl_To_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK2_CAP_1 (0x74041000 + 0x000080ACu)---

    RSVD1[0]                     - (RO) Reserved
    Lcr2_Speed_Sup[7..1]         - (RO) Supported Link Speed Vector
                                     This field indicates the supported Link speed(s) of the associated Port. For each bit, a value of 1b indicates that the corresponding Link speed is supported; otherwise, the Link speed is not supported.
                                     
                                     Bit definitions within this field are:
                                     - Bit [0]: 2.5 GT/s
                                     - Bit [1]: 5.0 GT/s
                                     - Bit [2]: 8.0 GT/s
                                     - Bit [3]: 16.0 GT/s
                                     - Bits [6:4]: RsvdP
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr2_Cross_Sup[8]            - (RO) Crosslink Supported
                                     When set to 1b, this bit indicates that the associated Port supports crosslinks.
                                     
                                     When set to 0b on a Port that only supports Link speeds of 2.5 GTs or 5.0 GTs, this bit provides no information regarding the Ports level of crosslink support.
                                     It is recommended that this bit be Set in any Port that supports crosslinks even though doing so is only required for Ports that also support operating at 8.0 GTs or higher Link speeds.
                                     
                                     Note: Software should use this bit when referencing fields whose definition depends on whether or not the Port supports crosslinks.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr2_SRIS_Lower_SKP_OS_Gen_Speed[12..9] - (RO) Lower SKP OS Generation Supported Speeds Vector
                                     If this field is non-zero, it indicates that the
                                     Port, when operating at the indicated speed(s) supports SRIS and also supports software control of
                                     the SKP Ordered Set transmission scheduling rate.
                                     Bit definitions within this field are:
                                     Bit 0 : 2.5 GT/s
                                     Bit 1 : 5.0 GT/s
                                     Bit 2 : 8.0 GT/s
                                     Bit 3 : 16.0 GT/s
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit is not Set in the Supported
                                     Link Speeds Vector.
    RSVD2[15..13]                - (RO)  xxx 
    Lcr2_SRIS_Lower_SKP_OS_Rec_Speed[19..16] - (RO) Lower SKP OS Reception Supported Speeds Vector
                                     If this field is non-zero, it indicates that the
                                     Port, when operating at the indicated speed(s) supports SRIS and also supports receiving SKP OS at
                                     the rate defined for SRNS while running in SRIS.
                                     Bit definitions within this field are:
                                     Bit 0 : 2.5 GT/s
                                     Bit 1 : 5.0 GT/s
                                     Bit 2 : 8.0 GT/s
                                     Bit 3 : 16.0 GT/s
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit is not Set in the Supported
                                     Link Speeds Vector.
    RSVD3[22..20]                - (RO)  xxx 
    Lcr2_Retimer_det_Sup[23]     - (RO) Retimer Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated Port
                                     supports detection and reporting of Retimer presence.
                                     This bit must be set to 1b in a Port when the Supported Link Speeds Vector of the Link Capabilities 2
                                     Register indicates support for a Link speed of 16.0 GT/s or higher.
                                     It is permitted to be set to 1b regardless of the supported Link speeds.
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
    Lcr2_2Retimer_det_Sup[24]    - (RO) Two Retimers Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated
                                     Port supports detection and reporting of two Retimers presence.
                                     This bit must be set to 1b in a Port when the Supported Link Speeds Vector of the Link Capabilities 2
                                     Register indicates support for a Link speed of 16.0 GT/s or higher.
                                     It is permitted to be set to 1b regardless of the supported Link speeds if the Retimer Presence Detect
                                     Supported bit is also set to 1b.
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
    RSVD4[30..25]                - (RO) Reserved
    DRS_Sup[31]                  - (RO) DRS Supported - When Set, indicates support for the optional Device Readiness Status (DRS) capability.
                                     Must be Set in Downstream Ports that support DRS.
                                     Must be Set in Downstream Ports that support FRS.
                                     For Upstream Ports that support DRS, it is strongly recommended that this bit be Set in Function 0.
                                     For all other Functions associated with an Upstream Port, this bit must be Clear.142
                                     Must be Clear in Functions that are not associated with a Port.
                                     RsvdP in all other Functions.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_DRS_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_DRS_Sup_MASK 0x80000000u                // DRS_Sup[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_DRS_Sup_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD4_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD4_MASK  0x7E000000u                // RSVD4[30..25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD4_SHFT  25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_2Retimer_det_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_2Retimer_det_Sup_MASK 0x01000000u                // Lcr2_2Retimer_det_Sup[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_2Retimer_det_Sup_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Retimer_det_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Retimer_det_Sup_MASK 0x00800000u                // Lcr2_Retimer_det_Sup[23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Retimer_det_Sup_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD3_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD3_MASK  0x00700000u                // RSVD3[22..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD3_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_MASK 0x000F0000u                // Lcr2_SRIS_Lower_SKP_OS_Rec_Speed[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD2_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD2_MASK  0x0000E000u                // RSVD2[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD2_SHFT  13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_MASK 0x00001E00u                // Lcr2_SRIS_Lower_SKP_OS_Gen_Speed[12..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Cross_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Cross_Sup_MASK 0x00000100u                // Lcr2_Cross_Sup[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Cross_Sup_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Speed_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Speed_Sup_MASK 0x000000FEu                // Lcr2_Speed_Sup[7..1]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_Lcr2_Speed_Sup_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD1_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD1_MASK  0x00000001u                // RSVD1[0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_1_RSVD1_SHFT  0u

/* =====================================================================================

  ---PCIE_CONF_LINK2_CTL_STS_1 (0x74041000 + 0x000080B0u)---

    Lcr2_Link_Speed[3..0]        - (RW) Target Link Speed
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: Supported Link Speeds Vector field bit 0
                                     - 0010b: Supported Link Speeds Vector field bit 1
                                     - 0011b: Supported Link Speeds Vector field bit 2
                                     - 0100b: Supported Link Speeds Vector field bit 3
                                     - 0101b: Supported Link Speeds Vector field bit 4
                                     - 0110b: Supported Link Speeds Vector field bit 5
                                     - 0111b: Supported Link Speeds Vector field bit 6
                                     All other encodings are Reserved.
                                     
                                     If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.
                                     If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.
                                     The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform or form factor requires a different default value.
                                     
                                     For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.
                                     For a Multi-Function device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this field is of type RsvdP.
                                     
                                     Components that support only the 2.5 GTs speed are permitted to hardwire this field to 0000b.
    Lcr2_Compliance[4]           - (RW) Enter Compliance
                                     Software is permitted to force a Link to enter Compliance mode at the speed indicated in the Target Link Speed field by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.
                                     
                                     Default value of this bit following Fundamental Reset is 0b.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of
                                     that device, this bit is of type RsvdP.
    Lcr2_Hw_Auto_Dis[5]          - (RW) Hardware Autonomous Speed Disable
                                     When Set, this bit disables hardware from changing the Link speed for device specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.
                                     
                                     Default value of this bit is 0b.
    Lcr2_Sel_Deemp[6]            - (RO) Reserved
    Lcr2_Tx_Margin[9..7]         - (RW) Transmit Margin
                                     This field controls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration sub-state.
                                     
                                     Encodings:
                                     - 000b: Normal operating range
                                     - 001b: 800~1200 mV for full swing and 400~700 mV for half-swing
                                     - 010b ~ (n-1) Values must be monotonic with a non-zero slope. The value of n must be greater than 3 and less than 7. At least two of these must be below the normal operating range of n: 200~400 mV for full-swing and 100~200 mV for half-swing
                                     - n ~ 111b: reserved
                                     For a Multi-Function device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this field is of type RsvdP.
                                     
                                     Default value of this field is 000b.
                                     
                                     This register is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this register only during debug or compliance testing. In all other cases, the system must ensure that this register is set to the default value.
    Lcr2_Mod_Compliance[10]      - (RW) Enter Modified Compliance
                                     When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance sub-state.
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     Default value of this bit is 0b.
                                     
                                     This register is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this register only during debug or compliance testing. 
                                     In all other cases, the system must ensure that this register is set to the default value.
    Lcr2_Comp_Sos[11]            - (RW) Compliance SOS
                                     When set to 1b, the LTSSM is required to send SKP Ordered Sets periodically in between the (modified) compliance patterns.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     The default value of this bit is 0b.
    Lcr2_Comp_Preset[15..12]     - (RW) Compliance Preset De-emphasis
                                     This bit sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
                                     
                                     Encodings:
                                     - 1b: -3.5 dB
                                     - 0b: -6 dB
                                     When the Link is operating at 2.5 GTs, the setting of this bit has no effect. Components that support only 2.5 GTs speed are permitted to hardwire this bit to 0b.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     The default value of this bit is 0b.
                                     
                                     This bit is intended for debug, compliance testing purposes. System firmware and software is allowed to modify this bit only during debug or compliance testing.
    Lsr2_Deemph[16]              - (RO) Current De-emphasis Level
                                     When the Link is operating at 5 GT/s speed, this bit reflects the level of de-emphasis.
                                     Encodings:
                                     - 1b -3.5 dB
                                     - 0b -6 dB
                                     The value in this bit is undefined when the Link is operating at 2.5 GT/s speed.
    Link2_Equ_Complete_8GT[17]   - (RO) Equalization 8.0 GT/s Complete
                                     When set to 1b, this bit indicates that the Transmitter Equalization procedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase1_Success_8GT[18] - (RO) Equalization 8.0 GT/s Phase 1 Successful
                                     When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase2_Success_8GT[19] - (RO) Equalization 8.0 GT/s Phase 2 Successful
                                     When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase3_Success_8GT[20] - (RO) Equalization 8.0 GT/s Phase 3 Successful
                                     When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Req_8GT[21]        - (RO) Link Equalization Request
                                     This bit is Set by hardware to request the 8.0 GT/s Link equalization process to be performed on the Link.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    retimer_det[22]              - (RO) Retimer Presence Detected
                                     When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation.
                                     The default value of this bit is 0b.
                                     This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.
                                     Ports that have the Retimer Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.
                                     For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.
    RSVD1[27..23]                - (RO) Reserved
    ds_component_presence[30..28] - (RO) Downstream Component Presence - This field indicates the presence and DRS status for the Downstream
                                     Component, if any, connected to the Link; defined values are:
                                     000b: Link Down - Presence Not Determined
                                     001b: Link Down - Component Not Present indicates the Downstream Port (DP) has determined
                                     that a Downstream Component is not present
                                     010b: Link Down - Component Present indicates the DP has determined that a Downstream
                                     Component is present, but the Data Link Layer is not active
                                     011b: Reserved
                                     100b: Link Up - Component Present indicates the DP has determined that a Downstream
                                     Component is present, but no DRS Message has been received since the Data Link Layer
                                     became active
                                     101b: Link Up - Component Present and DRS Received indicates the DP has received a DRS
                                     Message since the Data Link Layer became active
                                     110b: Reserved
                                     111b: Reserved
                                     Downstream Component Presence state must be determined by the logical “OR” of the Physical Layer
                                     in-band presence detect mechanism and, if present, any out-of-band presence detect mechanism
                                     implemented for the Link. If no out-of-band presence detect mechanism is implemented, then Downstream
                                     Component Presence state must be determined solely by the Physical Layer in-band presence
                                     detect mechanism.
                                     If the In-Band PD Disable bit in the Slot Control Register is Set, the Physical Layer in-band presence
                                     detect mechanism must always indicate that no component is present.
                                     Component Presence, Link Up, and DRS Received states indicated by this field must reflect their
                                     maskable states, which are controlled by the SFI PD State Mask, SFI DLL State Mask, or SFI DRS Mask
                                     bits in the SFI Control Register. See Section 7.9.23.3 .
                                     This field must be implemented in any Downstream Port where the DRS Supported bit is Set in the
                                     Link Capabilities 2 Register.
                                     This field is RsvdZ for all other Functions.
                                     Default value of this field is 000b.
    drs_msg_rcvd[31]             - (RO) DRS Message Received - This bit must be Set whenever the Port receives a DRS Message.
                                     This bit must be Cleared in DL_Down.
                                     This bit must be implemented in any Downstream Port where the DRS Supported bit is Set in the Link
                                     Capabilities 2 Register.
                                     This bit is RsvdZ for all other Functions.
                                     Default value of this bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_drs_msg_rcvd_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_drs_msg_rcvd_MASK 0x80000000u                // drs_msg_rcvd[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_drs_msg_rcvd_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ds_component_presence_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ds_component_presence_MASK 0x70000000u                // ds_component_presence[30..28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ds_component_presence_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_RSVD1_MASK 0x0F800000u                // RSVD1[27..23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_RSVD1_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_retimer_det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_retimer_det_MASK 0x00400000u                // retimer_det[22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_retimer_det_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Req_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Req_8GT_MASK 0x00200000u                // Link2_Equ_Req_8GT[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Req_8GT_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase3_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase3_Success_8GT_MASK 0x00100000u                // Link2_Equ_Phase3_Success_8GT[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase3_Success_8GT_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase2_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase2_Success_8GT_MASK 0x00080000u                // Link2_Equ_Phase2_Success_8GT[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase2_Success_8GT_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase1_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase1_Success_8GT_MASK 0x00040000u                // Link2_Equ_Phase1_Success_8GT[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Phase1_Success_8GT_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Complete_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Complete_8GT_MASK 0x00020000u                // Link2_Equ_Complete_8GT[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Link2_Equ_Complete_8GT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lsr2_Deemph_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lsr2_Deemph_MASK 0x00010000u                // Lsr2_Deemph[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lsr2_Deemph_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Comp_Preset_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Comp_Preset_MASK 0x0000F000u                // Lcr2_Comp_Preset[15..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Comp_Preset_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Comp_Sos_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Comp_Sos_MASK 0x00000800u                // Lcr2_Comp_Sos[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Comp_Sos_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Mod_Compliance_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Mod_Compliance_MASK 0x00000400u                // Lcr2_Mod_Compliance[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Mod_Compliance_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Tx_Margin_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Tx_Margin_MASK 0x00000380u                // Lcr2_Tx_Margin[9..7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Tx_Margin_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Sel_Deemp_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Sel_Deemp_MASK 0x00000040u                // Lcr2_Sel_Deemp[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Sel_Deemp_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Hw_Auto_Dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Hw_Auto_Dis_MASK 0x00000020u                // Lcr2_Hw_Auto_Dis[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Hw_Auto_Dis_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Compliance_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Compliance_MASK 0x00000010u                // Lcr2_Compliance[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Compliance_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Link_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Link_Speed_MASK 0x0000000Fu                // Lcr2_Link_Speed[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_1_Lcr2_Link_Speed_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_SLOT_CAP_1 (0x74041000 + 0x000080B4u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_1_RSVD_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_1_RSVD_MASK    0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_1_RSVD_SHFT    0u

/* =====================================================================================

  ---PCIE_CONF_SLOT_CTL_STS_1 (0x74041000 + 0x000080B8u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_1_RSVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_1_RSVD_MASK 0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_1_RSVD_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_0_1 (0x74041000 + 0x000080BCu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_1_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_1_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_1_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_1_1 (0x74041000 + 0x000080C0u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_1_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_1_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_1_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_2_1 (0x74041000 + 0x000080C4u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_1_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_1_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_1_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_3_1 (0x74041000 + 0x000080C8u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_1_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_1_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_1_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_4_1 (0x74041000 + 0x000080CCu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_1_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_1_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_1_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_0_1 (0x74041000 + 0x000080D0u)---

    capability_id[7..0]          - (RO) Capability ID
                                     Indicates the MSI-X Capability structure. This field must return a Capability ID of 11h indicating that this is an MSI-X Capability structure.
    next_capability_pointer[15..8] - (RO) Next Capability Pointer
                                     This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.
    msix_table_size[26..16]      - (RO) MSI-X Table Size
                                     System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.
    RSVD2[29..27]                - (RO) Reserved
    msix_function_mask[30]       - (RW) MSI-X Mask
                                     If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
                                     If Clear, each vector's Mask bit determines whether the vector is masked or not.
                                     Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.
                                     Default value of this bit is 0b.
    msix_enable[31]              - (RW) MSI-X Enable
                                     If Set and the MSI Enable bit in the MSI Message Control register is Clear, the Function is permitted to use MSI-X to request service and is prohibited from using INTx interrupts (if implemented). System configuration software Sets this bit to enable MSI-X. A device driver is prohibited from writing this bit to mask a Function's service request.
                                     If Clear, the Function is prohibited from using MSI-X to request service.
                                     Default value of this bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_enable_MASK 0x80000000u                // msix_enable[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_enable_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_function_mask_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_function_mask_MASK 0x40000000u                // msix_function_mask[30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_function_mask_SHFT 30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_RSVD2_MASK 0x38000000u                // RSVD2[29..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_RSVD2_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_table_size_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_table_size_MASK 0x07FF0000u                // msix_table_size[26..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_msix_table_size_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_next_capability_pointer_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_next_capability_pointer_MASK 0x0000FF00u                // next_capability_pointer[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_next_capability_pointer_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_capability_id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_capability_id_MASK 0x000000FFu                // capability_id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_1_capability_id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_1_1 (0x74041000 + 0x000080D4u)---

    MsiX_Tab_Bir[2..0]           - (RO) Table BIR
                                     Indicates which one of a Function's Base Address registers, located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X Table into Memory Space.
                                     For a 64-bit Base Address register, the Table BIR indicates the lower DWORD. For Functions with Type 1 Configuration Space headers, BIR values 2 through 5 are also Reserved.
    MsiX_Tab_Off[31..3]          - (RO) Table Offset
                                     Used as an offset from the address contained by one of the Function's Base Address registers to point to the base of the MSI-X Table. The lower 3 Table BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_MsiX_Tab_Off_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_MsiX_Tab_Off_MASK 0xFFFFFFF8u                // MsiX_Tab_Off[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_MsiX_Tab_Off_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_MsiX_Tab_Bir_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_MsiX_Tab_Bir_MASK 0x00000007u                // MsiX_Tab_Bir[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_1_MsiX_Tab_Bir_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_2_1 (0x74041000 + 0x000080D8u)---

    MsiX_Pba_Bir[2..0]           - (RO) PBA BIR
                                     Indicates which one of a Function's Base Address registers, located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
                                     The PBA BIR value definitions are identical to those for the MSI-X Table BIR.
    MsiX_Pba_Off[31..3]          - (RO) PBA Offset
                                     Used as an offset from the address contained by one of the Function's Base Address registers to point to the base of the MSI-X PBA. The lower 3 PBA BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_MsiX_Pba_Off_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_MsiX_Pba_Off_MASK 0xFFFFFFF8u                // MsiX_Pba_Off[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_MsiX_Pba_Off_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_MsiX_Pba_Bir_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_MsiX_Pba_Bir_MASK 0x00000007u                // MsiX_Pba_Bir[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_1_MsiX_Pba_Bir_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_5_1 (0x74041000 + 0x000080DCu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_1_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_1_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_1_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_MSI_CAP_1 (0x74041000 + 0x000080E0u)---

    Msi_Cap_Id[7..0]             - (RO) Capability ID
                                     The value of 05h in this field identifies the function as message signaled interrupt capable.
    Msi_Nx_Ptr[15..8]            - (RO) Next Pointer
                                     Pointer to the next item in the capabilities list.
    Msi_En[16]                   - (RW) MSI Enable
                                     If 1, the function is permitted to use MSI to request service and is prohibited from using its INTx# pin (if implemented). System configuration software sets this bit to enable MSI. A device driver is prohibited from writing this bit to mask a functions service request.
                                     If 0, the function is prohibited from using MSI to request service.
                                     
                                     This state after reset is 0 (MSI is disabled).
    Msi_Multi_Cap[19..17]        - (RO) Multiple Message Capable
                                     System software reads this field to determine the number of requested messages. The number of requested messages must be aligned to a power of two (if a function requires three messages, it requests four by initializing this field to 010b).
                                     
                                     The encoding is defined as:
                                     - 000b: 1 message requested
                                     - 001b: 2 messages requested
                                     - 010b: 4 message requested
                                     - 011b: 8 messages requested
                                     - 100b: 16 message requested
                                     - 101b: 32 messages requested
                                     - 110b: reserved
                                     - 111b: reserved
                                     
                                     (Please refer to PCIE_MAC_IREG 0x00A8[6:4])
    Msi_Multi_En[22..20]         - (RW) Multiple Message Enable
                                     System software writes to this field to indicate the number of allocated messages (equal to or less than the number of requested messages).
                                     The number of allocated messages is aligned to a power of two. If a function requests four messages (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, two, or one message by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a device will be allocated at least 1 message.
                                     
                                     The encoding is defined as:
                                     - 000b: 1 message allocated
                                     - 001b: 2 messages  allocated
                                     - 010b: 4 message  allocated
                                     - 011b: 8 messages  allocated
                                     - 100b: 16 message  allocated
                                     - 101b: 32 messages  allocated
                                     - 110b: reserved
                                     - 111b: reserved
                                     
                                     The state after reset is 000b.
    Msi_64b_En[23]               - (RO) 64-bit Address Capable
                                     0: The function is not capable of generating a 64-bit message address.
                                     1: The function is capable of generating a 64-bit message address.
    Per_Vector_Masking_Capable[24] - (RO) Per Vector Masking Capable
                                     0: The function does not support MSI per-vector masking.
                                     1: The function supports MSI per-vector masking.
                                     (Please refer to PCIE_MAC_IREG 0x00A8[7])
    Msi_Ext_Cap[25]              - (RO) Extended Message Data Capable
                                     0: The function does not support providing Extended Message Data.
                                     1: The function is capable of providing Extended Message Data.
                                     (Please refer to PCIE_MAC_IREG 0x00A8[27])
    Msi_Ext_En[26]               - (RO) Extended Message Data Enable
                                     0: The function is not enabled to provide Extended Message Data.
                                     1: The function is enabled to provide Extended Message Data.
                                     This bit must be read/write if the Extended Message Data Capable bit is 1; otherwise it must be hardwired to 0.
    RSVD1[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_RSVD1_MASK    0xF8000000u                // RSVD1[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_RSVD1_SHFT    27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Ext_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Ext_En_MASK 0x04000000u                // Msi_Ext_En[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Ext_En_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Ext_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Ext_Cap_MASK 0x02000000u                // Msi_Ext_Cap[25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Ext_Cap_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Per_Vector_Masking_Capable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Per_Vector_Masking_Capable_MASK 0x01000000u                // Per_Vector_Masking_Capable[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Per_Vector_Masking_Capable_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_64b_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_64b_En_MASK 0x00800000u                // Msi_64b_En[23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_64b_En_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Multi_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Multi_En_MASK 0x00700000u                // Msi_Multi_En[22..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Multi_En_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Multi_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Multi_Cap_MASK 0x000E0000u                // Msi_Multi_Cap[19..17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Multi_Cap_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_En_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_En_MASK   0x00010000u                // Msi_En[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_En_SHFT   16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Nx_Ptr_MASK 0x0000FF00u                // Msi_Nx_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Nx_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Cap_Id_MASK 0x000000FFu                // Msi_Cap_Id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_1_Msi_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_ADDR_L_1 (0x74041000 + 0x000080E4u)---

    RSVD1[1..0]                  - (RO) Reserved
    Msi_Addr_L[31..2]            - (RW) Message Address bit[31:2] for MSI.
                                     System-specified message address.
                                     If the Message Enable bit (bit 0 of the Message Control register) is set, the contents of this register specify the DWORD aligned address (AD[31::02]) for the MSI memory write transaction. AD[1::0] are driven to zero during the address phase.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_Msi_Addr_L_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_Msi_Addr_L_MASK 0xFFFFFFFCu                // Msi_Addr_L[31..2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_Msi_Addr_L_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_RSVD1_MASK 0x00000003u                // RSVD1[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_1_RSVD1_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_ADDR_H_1 (0x74041000 + 0x000080E8u)---

    Msi_Addr_H[31..0]            - (RW) Message Address bit[63:32] for MSI.
                                     System-specified message upper address.
                                     This register is optional and is implemented only if the device supports a 64-bit message address (bit 7 in Message Control register set). If the Message Enable bit (bit 0 of the Message Control register) is set, the contents of this register (if non-zero) specify the upper 32-bits of a 64-bit message address (AD[63::32]).
                                     If the contents of this register are zero, the device uses the 32 bit address specified by the message address register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_1_Msi_Addr_H_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_1_Msi_Addr_H_MASK 0xFFFFFFFFu                // Msi_Addr_H[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_1_Msi_Addr_H_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_DATA_1 (0x74041000 + 0x000080ECu)---

    Msi_Data[15..0]              - (RW) Message Data for MSI.
                                     System-specified message.
                                     Each MSI function is allocated up to 32 unique messages.
                                     System architecture specifies the number of unique messages supported by the system. If the Message Enable bit (bit 0 of the Message Control register) is set, the message data is driven onto the lower word of the memory write transactions data phase.
    Msi_Ext_Data[31..16]         - (RO) Extended Message Data
                                     This register is optional. For the MSI Capability structures without Per-vector Masking, it must be implemented if the Extended Message Data Capable bit is Set; otherwise, it is outside the MSI Capability structure and undefined. For the MSI Capability structures with Per-vector Masking, it must be implemented if the Extended Message Data Capable bit is Set; otherwise, it is Reserved.
                                     If Extended Message Data Enable bit (bit 10 of the Message Control register) is set, are driven during the memory write transaction's data phase to the Extended Message Data field value; otherwise, AD[31::16] are driven to zero.
                                     If implemented, this field must be read/write.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_Msi_Ext_Data_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_Msi_Ext_Data_MASK 0xFFFF0000u                // Msi_Ext_Data[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_Msi_Ext_Data_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_Msi_Data_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_Msi_Data_MASK 0x0000FFFFu                // Msi_Data[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_1_Msi_Data_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_MASK_1 (0x74041000 + 0x000080F0u)---

    MSI_MASK[31..0]              - (RW) Mask Bits
                                     For each Mask bit that is Set, the Function is prohibited from sending the associated message.
                                     Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_1_MSI_MASK_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_1_MSI_MASK_MASK 0xFFFFFFFFu                // MSI_MASK[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_1_MSI_MASK_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_PENDING_1 (0x74041000 + 0x000080F4u)---

    MSI_PENDING[1..0]            - (RO) Pending Bits
                                     For each Pending bit that is Set, the Function has a pending associated message.
                                     Default is 0.
    MSI_PENDING_RSVD[31..2]      - (RO) Reserved Pending Bits for MSI (RO for PCIe RC W1C for backend)

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_MSI_PENDING_RSVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_MSI_PENDING_RSVD_MASK 0xFFFFFFFCu                // MSI_PENDING_RSVD[31..2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_MSI_PENDING_RSVD_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_MSI_PENDING_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_MSI_PENDING_MASK 0x00000003u                // MSI_PENDING[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_1_MSI_PENDING_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_PM_CAP_1 (0x74041000 + 0x000080F8u)---

    Pmcsr_Cap_Id[7..0]           - (RO) Capability ID
                                     This field, when 01h identifies the linked list item as being the PCI Power Management registers.
    Pmcsr_Nx_Ptr[15..8]          - (RO) Next Pointer
                                     This field provides an offset into the functions PCI Configuration Space pointing to the location of next item in the functions capability list.
    Pmcsr_Version[18..16]        - (RO) Version
                                     A value of 011b indicates that this function complies with revision 1.2 of the PCI Power Management Interface Specification.
    Pmcsr_Pme_Clk[19]            - (RO) PME Clock
                                     When this bit is a 1, it indicates that the function relies on the presence of the PCI clock for PME# operation.
                                     When this bit is a 0, it indicates that no PCI clock is required for the function to generate PME#.
                                     Functions that do not support PME# generation in any state must return 0 for this field.
    RSVD1[20]                    - (RO) Reserved
    Pmcsr_Dsi[21]                - (RO) DSI
                                     The Device Specific Initialization bit indicates whether special initialization of this function is required (beyond the standard PCI configuration header) before the generic class device driver is able to use it.
                                     
                                     Note that this bit is not used by some operating systems.
                                     Microsoft Windows and Windows NT, for instance, do not use this bit to determine whether to use D3. Instead, they use the drivers capabilities to determine this.
                                     
                                     A 1 indicates that the function requires a device specific initialization sequence following transition to the D0 uninitialized state.
    Pmcsr_Aux_Current[24..22]    - (RO) AUX Current
                                     This 3 bit field reports the 3.3Vaux auxiliary current requirements for the PCI function.
                                     If the Data Register has been implemented by this function:
                                     - Reads of this field must return a value of 000b.
                                     - The Data Register takes precedence over this field for 3.3Vaux current requirement reporting.
                                     
                                     If PME# generation from D3cold is not supported by the function (PMC(15)=0), this field must return a value of 000b when read.
                                     
                                     For functions that support PME# from D3cold, and do not implement the Data Register, the following bit assignments apply :
                                     - 000b: self powered
                                     - 001b: Max aux current 55mA required
                                     - 010b: Max aux current 100mA required
                                     - 011b: Max aux current 160mA required
                                     - 100b: Max aux current 220mA required
                                     - 101b: Max aux current 270mA required
                                     - 110b: Max aux current 320mA required
                                     - 111b: Max aux current 375mA required
    Pmcsr_D1_Sup[25]             - (RO) D1 Support
                                     If this bit is a 1, this function supports the D1 Power Management State.
                                     Functions that do not support D1 must always return a value of 0 for this bit
    Pmcsr_D2_Sup[26]             - (RO) D2 Support
                                     If this bit is a 1, this function supports the D2 Power Management State.
                                     Functions that do not support D2 must always return a value of 0 for this bit.
    Pmcsr_Pme_Sup[31..27]        - (RO) PME Support
                                     This 5-bit field indicates the power states in which the function may assert PME#. A value of 0b for any bit indicates that the function is not capable of asserting the PME# signal while in that power state.
                                     
                                     - X XXX1b: PME# can be asserted from D0
                                     - X XX1Xb: PME# can be asserted from D1
                                     - X X1XXb: PME# can be asserted from D2
                                     - X 1XXXb: PME# can be asserted from D3hot
                                     - 1 XXXXb: PME# can be asserted from D3cold

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Pme_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Pme_Sup_MASK 0xF8000000u                // Pmcsr_Pme_Sup[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Pme_Sup_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_D2_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_D2_Sup_MASK 0x04000000u                // Pmcsr_D2_Sup[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_D2_Sup_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_D1_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_D1_Sup_MASK 0x02000000u                // Pmcsr_D1_Sup[25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_D1_Sup_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Aux_Current_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Aux_Current_MASK 0x01C00000u                // Pmcsr_Aux_Current[24..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Aux_Current_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Dsi_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Dsi_MASK 0x00200000u                // Pmcsr_Dsi[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Dsi_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_RSVD1_MASK     0x00100000u                // RSVD1[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_RSVD1_SHFT     20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Pme_Clk_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Pme_Clk_MASK 0x00080000u                // Pmcsr_Pme_Clk[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Pme_Clk_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Version_MASK 0x00070000u                // Pmcsr_Version[18..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Nx_Ptr_MASK 0x0000FF00u                // Pmcsr_Nx_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Nx_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Cap_Id_MASK 0x000000FFu                // Pmcsr_Cap_Id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_1_Pmcsr_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_PM_CTL_STS_1 (0x74041000 + 0x000080FCu)---

    Pmcsr_Pwr_State[1..0]        - (RW) Power State
                                     This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state. The definition of the field values is given below.
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot
                                     
                                     If software attempts to write an unsupported, optional state to this field, the write operation must complete normally on the bus; however, the data is discarded and no state change occurs.
    RSVD1[2]                     - (RO) Reserved
    Pmcsr_No_Soft_Rst[3]         - (RO) No Soft Reset
                                     When set to 1, this bit indicates that devices transitioning from D3hot to D0 because of PowerState commands do not perform an internal reset.
                                     Configuration Context is preserved. Upon transition from the D3hot to the D0 Initialized state, no additional operating system intervention is required to preserve Configuration Context beyond writing the PowerState bits.
                                     
                                     When clear to zero, devices do perform an internal reset upon transitioning from D3hot to D0 via software control of the PowerState bits. Configuration Context is lost when performing the soft reset. Upon transition from the D3hot to the D0 state, full reinitialization sequence is needed to return the device to D0 Initialized.
                                     
                                     Regardless of this bit, devices that transition from D3hot to D0 by a system or bus segment reset will return to the device state D0 Uninitialized with only PME context preserved if PME is supported and enabled.
    RSVD2[7..4]                  - (RO) Reserved
    Pmcsr_Pme_En[8]              - (RW) PME Enable
                                     A 1 enables the function to assert PME#.
                                     When 0, PME# assertion is disabled.
                                     This bit defaults to 0 if the function does not support PME# generation from D3cold.
                                     
                                     If the function supports PME# from D3cold, then this bit is sticky and must be explicitly cleared by the operating system each time it is initially loaded.
                                     Functions that do not support PME# generation from any D-state (i.e., PMC(15:11) = 00000b), may hardwire this bit to be read-only always returning a 0 when read by system software.
    Pmcsr_Data_Sel[12..9]        - (RO) Data Select
                                     This 4-bit field is used to select which data is to be reported through the Data register and Data_Scale field.
                                     This field is a required component of the Data register (offset 7) and must be implemented if the Data register is implemented.
    Pmcsr_Data_Scale[14..13]     - (RO) Data Scale
                                     This 2-bit read-only field indicates the scaling factor to be used when interpreting the value of the Data register. The value and meaning of this field will vary depending on which data value has been selected by the Data_Select field.
                                     This field is a required component of the Data register (offset 7) and must be implemented if the Data register is implemented.
    Pmcsr_Pme_Sts[15]            - (W1C) PME Status
                                     This bit is set when the function would normally assert the PME# signal independent of the state of the PME_En bit.
                                     
                                     Writing a 1 to this bit will clear it and cause the function to stop asserting a PME# (if enabled). Writing a 0 has no effect.
                                     This bit defaults to 0 if the function does not support PME# generation from D3cold.
                                     
                                     If the function supports PME# from D3cold, then this bit is sticky and must be explicitly cleared by the operating system each time the operating system is initially loaded.
    RSVD3[23..16]                - (RO) Reserved
    Pm_Dat[31..24]               - (RO) PME Data
                                     This register is used to report the state dependent data requested by the Data_Select field. The value of this register is scaled by the value reported by the Data_Scale field.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pm_Dat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pm_Dat_MASK 0xFF000000u                // Pm_Dat[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pm_Dat_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD3_MASK 0x00FF0000u                // RSVD3[23..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD3_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pme_Sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pme_Sts_MASK 0x00008000u                // Pmcsr_Pme_Sts[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pme_Sts_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Data_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Data_Scale_MASK 0x00006000u                // Pmcsr_Data_Scale[14..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Data_Scale_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Data_Sel_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Data_Sel_MASK 0x00001E00u                // Pmcsr_Data_Sel[12..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Data_Sel_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pme_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pme_En_MASK 0x00000100u                // Pmcsr_Pme_En[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pme_En_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD2_MASK 0x000000F0u                // RSVD2[7..4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD2_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_No_Soft_Rst_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_No_Soft_Rst_MASK 0x00000008u                // Pmcsr_No_Soft_Rst[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_No_Soft_Rst_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD1_MASK 0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_RSVD1_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pwr_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pwr_State_MASK 0x00000003u                // Pmcsr_Pwr_State[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_1_Pmcsr_Pwr_State_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_CONF_VENDOR_CAP_1 (0x74041000 + 0x00008100u)---

    Ves_Cap_Id[15..0]            - (RO) Capability ID
                                     Extended Capability ID for the Vendor-Specific Capability is 000Bh.
    Ves_Cap_Version[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    Ves_Nx_Ptr[31..20]           - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Nx_Ptr_MASK 0xFFF00000u                // Ves_Nx_Ptr[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Nx_Ptr_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Cap_Version_MASK 0x000F0000u                // Ves_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Cap_Id_MASK 0x0000FFFFu                // Ves_Cap_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_1_Ves_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_CONF_VENDOR_HDR_1 (0x74041000 + 0x00008104u)---

    Ves_Id[15..0]                - (RO) VSEC ID
                                     This field is a vendor-defined ID number that indicates the nature and format of the VSEC structure.
                                     Software must qualify the Vendor ID before interpreting this field.
    Ves_Rev[19..16]              - (RO) VSEC Version
                                     This field is a vendor-defined version number that indicates the version of the VSEC structure.
                                     Software must qualify the Vendor ID and VSEC ID before interpreting this field.
    Ves_Len[31..20]              - (RO) VSEC(Vendor-Specific Extended Capability) Length
                                     This field indicates the number of bytes in the entire VSEC structure, including the PCI Express Extended Capability header, the Vendor-Specific header, and the Vendor-Specific Registers.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Len_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Len_MASK 0xFFF00000u                // Ves_Len[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Len_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Rev_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Rev_MASK 0x000F0000u                // Ves_Rev[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Rev_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Id_MASK 0x0000FFFFu                // Ves_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_1_Ves_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_ATS_CAP1_1 (0x74041000 + 0x00008120u)---

    ATS_CAP_ID[15..0]            - (RO) ATS Extended Capability ID
                                     Indicates the ATS Extended Capability structure. This field must return a Capability ID of 000Fh indicating that this is an ATS Extended Capability structure.
    ATS_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    ATS_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_NEXT_CAP_MASK 0xFFF00000u                // ATS_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_CAP_VER_MASK  0x000F0000u                // ATS_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_CAP_ID_MASK   0x0000FFFFu                // ATS_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_1_ATS_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ATS_CAP2_1 (0x74041000 + 0x00008124u)---

    ATS_invalidate_queuedepth[4..0] - (RO) Invalidate Queue Depth
                                     The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.
    ATS_page_aligned_req[5]      - (RO) Page Aligned Request
                                     If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended. This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].
    ATS_invalidate_supported[6]  - (RO) Global Invalidate Supported
                                     If Set, the Function supports Invalidation Requests that have the Global Invalidate bit Set. If Clear, the Function ignores the Global Invalidate bit in all Invalidate Requests (see Section 10.3.8).
                                     This bit is 0b if the Function does not support the PASID TLP Prefix.
    RSVD1[15..7]                 - (RO) Reserved
    ATS_stu[20..16]              - (RO) Smallest Translation Unit (STU)
                                     This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation Completions or Invalidate Requests. This is a power of 2 multiplier and the number of blocks is 2STU. A value of 0 0000b indicates one block and a value of 1 1111b indicates 231 blocks (or 8 TB total)
                                     Default value is 0 0000b.
    RSVD2[30..21]                - (RO) Reserved
    ATS_en[31]                   - (RO) Enable (E)
                                     When Set, the Function is enabled to cache translations.
                                     Behavior is undefined if this bit is Set and the value of the PASID Enable, Execute Requested Enable, or Privileged Mode Requested bits are changed.
                                     Default value is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_en_ADDR       PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_en_MASK       0x80000000u                // ATS_en[31]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_en_SHFT       31u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_RSVD2_MASK        0x7FE00000u                // RSVD2[30..21]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_RSVD2_SHFT        21u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_stu_ADDR      PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_stu_MASK      0x001F0000u                // ATS_stu[20..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_stu_SHFT      16u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_RSVD1_MASK        0x0000FF80u                // RSVD1[15..7]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_RSVD1_SHFT        7u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_invalidate_supported_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_invalidate_supported_MASK 0x00000040u                // ATS_invalidate_supported[6]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_invalidate_supported_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_page_aligned_req_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_page_aligned_req_MASK 0x00000020u                // ATS_page_aligned_req[5]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_page_aligned_req_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_invalidate_queuedepth_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_invalidate_queuedepth_MASK 0x0000001Fu                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_1_ATS_invalidate_queuedepth_SHFT 0u

/* =====================================================================================

  ---PCIE_ARI_CAP1_1 (0x74041000 + 0x00008128u)---

    ARI_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCISIG defined ID number that indicates the nature and format of the extended capability.
                                     PCI Express Extended Capability ID for the ARI Capability is 000Eh.This field is a PCI-SIG defined ID number that indicates the nature and format of the extended capability.
    ARI_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
                                     Must be 1h for this version of the specification.
    ARI_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_NEXT_CAP_MASK 0xFFF00000u                // ARI_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_CAP_VER_MASK  0x000F0000u                // ARI_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_CAP_ID_MASK   0x0000FFFFu                // ARI_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_1_ARI_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ARI_CAP2_1 (0x74041000 + 0x0000812Cu)---

    MFVC_Func_Grp_CAP[0]         - (RO) Applicable only for Function 0; must be 0b for all other Functions. If 1b, indicates that the ARI Device supports Function Group level arbitration via its Multi-Function Virtual Channel (MFVC) Capability structure.
    ACS_Func_GrP_CAP[1]          - (RO) Applicable only for Function 0; must be 0b for all other Functions. If 1b, indicates that the ARI Device supports Function Group level granularity for ACS P2P Egress Control via its ACS Capability structures.
    RSVD1[7..2]                  - (RO) Reserved
    NEXT_FUNC_NUM[15..8]         - (RO) This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions. Function 0 starts this linked list of Functions.
    MFVC_Func_Grp_En[16]         - (RO) Applicable only for Function 0; must be hardwired to 0b for all other Functions. When set, the ARI Device must interpret entries in its Function Arbitration Table as Function Group Numbers rather than Function Numbers.
    ACS_Func_Grp_En[17]          - (RO) Applicable only for Function 0; must be hardwired to 0b for all other Functions. When set, each Function in the ARI Device must associate bits within its Egress Control Vector with Function Group Numbers rather than Function Numbers.
    RSVD2[23..18]                - (RO) Reserved
    Func_Grp[31..24]             - (RO) Assigns a Function Group Number to this Function.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_Func_Grp_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_Func_Grp_MASK     0xFF000000u                // Func_Grp[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_Func_Grp_SHFT     24u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_RSVD2_MASK        0x00FC0000u                // RSVD2[23..18]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_RSVD2_SHFT        18u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ACS_Func_Grp_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ACS_Func_Grp_En_MASK 0x00020000u                // ACS_Func_Grp_En[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ACS_Func_Grp_En_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_MFVC_Func_Grp_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_MFVC_Func_Grp_En_MASK 0x00010000u                // MFVC_Func_Grp_En[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_MFVC_Func_Grp_En_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_NEXT_FUNC_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_NEXT_FUNC_NUM_MASK 0x0000FF00u                // NEXT_FUNC_NUM[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_NEXT_FUNC_NUM_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_RSVD1_MASK        0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ACS_Func_GrP_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ACS_Func_GrP_CAP_MASK 0x00000002u                // ACS_Func_GrP_CAP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ACS_Func_GrP_CAP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_MFVC_Func_Grp_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_MFVC_Func_Grp_CAP_MASK 0x00000001u                // MFVC_Func_Grp_CAP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_1_MFVC_Func_Grp_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PRI_CAP1_1 (0x74041000 + 0x00008130u)---

    PRI_CAP_ID[15..0]            - (RO) Page Request Extended Capability ID
                                     Indicates that the associated extended capability structure is a Page Request Extended Capability. This field must return a Capability ID of 0013h.
    PRI_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    PRI_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_NEXT_CAP_MASK 0xFFF00000u                // PRI_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_CAP_VER_MASK  0x000F0000u                // PRI_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_CAP_ID_MASK   0x0000FFFFu                // PRI_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_1_PRI_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_PRI_CAP2_1 (0x74041000 + 0x00008134u)---

    PRI_EN[0]                    - (RO) Enable (E)
                                     This field, when set, indicates that the Page Request Interface is allowed to make page requests. If this field is Clear, the Page Request Interface is not allowed to issue page requests. If both this field and the Stopped field are Clear, then the Page Request Interface will not issue new page requests, but has outstanding page requests that have been transmitted or are queued for transmission. When the Page Request Interface is transitioned from not-Enabled to Enabled, its status flags (Stopped, Response Failure, and Unexpected Response flags) are cleared. Enabling a Page Request Interface that has not successfully Stopped has indeterminate results.
                                     Default value is 0b.
    PRI_RST[1]                   - (RO) Reset (R)
                                     When the Enable field is clear, or is being cleared in the same register update that sets this field, writing a 1b to this field, clears the associated implementation dependent page request credit counter and pending request state for the associated Page Request Interface. No action is initiated if this field is written to 0b or if this field is written with any value while the Enable field is Set. Reads of this field return 0b.
    RSVD1[15..2]                 - (RO) Reserved
    PRI_RF[16]                   - (RO) Response Failure (RF)
                                     This field, when Set, indicates that the Function has received a PRG Response Message indicating a Response Failure. The Function expects no further responses from the host (any received are ignored). This field is Set by the Function and Cleared when a one is written to the field.
                                     For SR-IOV, this field is Set in the PF if any associated Function (PF or VF) receives a PRG Response Message indicating Response Failure.
                                     Default value is 0b.
    PRI_UPRGI[17]                - (RO) Unexpected Page Request Group Index (UPRGI)
                                     This field, when Set, indicates that the Function has received a PRG Response Message containing a PRG index that has no matching request. This field is Set by the Function and cleared when a one is written to the field.
                                     For SR-IOV, this field is Set in the PF if any associated Function (PF or VF) receives a PRG Response Message that does has no matching request.
                                     Default value is 0b.
    RSVD2[23..18]                - (RO) Reserved
    PRI_STOPPED[24]              - (RO) Stopped (S)
                                     When this field is Set, the associated page request interface has stopped issuing additional page requests and that all previously issued Page Requests have completed. When this field is Clear the associated page request interface either has not stopped or has stopped issuing new Page Requests but has outstanding Page Requests. This field is only meaningful if Enable is Clear. If Enable is Set, this field is undefined.
                                     When the Enable field is Cleared, after having been previously Set, the interface transitions to the stopping state and Clears this field. After all page requests currently outstanding at the Function(s) have completed, this field is Set and the interface enters the disabled state. If there were no outstanding page requests, this field may be Set immediately when Enable is Cleared. Resetting the interface will cause an immediate transition to the disabled state. While in the stopping state, receipt of a Response Failure message will result in the immediate transition to the disabled state (Setting this field).
                                     For SR-IOV, this field is Set only when all associated Functions (PF and VFs) have stopped issuing page requests.
                                     Default value is 1b.
    RSVD3[30..25]                - (RO) Reserved
    PRI_RESP_PASID_REQUIRED[31]  - (RO) PRG Response PASID Required
                                     If Set, the Function expects a PASID TLP Prefix on PRG Response Messages when the corresponding Page Requests had a PASID TLP Prefix. If Clear, the Function does not expect PASID TLP Prefixes on any PRG Response Message.
                                     Function behavior is undefined if this bit is Clear and the Function receives a PRG Response Message with a PASID TLP Prefix.
                                     Function behavior is undefined if this bit is Set and the Function receives a PRG Response Message with no PASID TLP Prefix when the corresponding Page Requests had a PASID TLP Prefix.
                                     This bit is RsvdZ if the Function does not support the PASID TLP Prefix.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RESP_PASID_REQUIRED_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RESP_PASID_REQUIRED_MASK 0x80000000u                // PRI_RESP_PASID_REQUIRED[31]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RESP_PASID_REQUIRED_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD3_MASK        0x7E000000u                // RSVD3[30..25]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD3_SHFT        25u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_STOPPED_ADDR  PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_STOPPED_MASK  0x01000000u                // PRI_STOPPED[24]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_STOPPED_SHFT  24u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD2_MASK        0x00FC0000u                // RSVD2[23..18]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD2_SHFT        18u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_UPRGI_ADDR    PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_UPRGI_MASK    0x00020000u                // PRI_UPRGI[17]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_UPRGI_SHFT    17u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RF_ADDR       PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RF_MASK       0x00010000u                // PRI_RF[16]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RF_SHFT       16u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD1_MASK        0x0000FFFCu                // RSVD1[15..2]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RST_ADDR      PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RST_MASK      0x00000002u                // PRI_RST[1]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_RST_SHFT      1u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_EN_ADDR       PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_EN_MASK       0x00000001u                // PRI_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_1_PRI_EN_SHFT       0u

/* =====================================================================================

  ---PCIE_PRI_CAP3_1 (0x74041000 + 0x00008138u)---

    PRI_OUT_PAGE_REQ_CAP[31..0]  - (RO) outstanding page request Capability
                                     This register contains the number of outstanding page request messages the associated Page Request Interface physically supports. This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.
                                     This register is Read Only.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_1_PRI_OUT_PAGE_REQ_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_1_PRI_OUT_PAGE_REQ_CAP_MASK 0xFFFFFFFFu                // PRI_OUT_PAGE_REQ_CAP[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_1_PRI_OUT_PAGE_REQ_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PRI_CAP4_1 (0x74041000 + 0x0000813Cu)---

    PRI_OPRA[31..0]              - (RO) outstanding page request allocation
                                     This register contains the number of outstanding page request messages the associated Page Request Interface is allowed to issue (have outstanding at any given instance).
                                     This register is Read/Write. Behavior is undefined if this register is changed while the Enable flag is set. Behavior is undefined if this register is written with a value larger than Outstanding Page Request Capacity. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_1_PRI_OPRA_ADDR     PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_1_PRI_OPRA_MASK     0xFFFFFFFFu                // PRI_OPRA[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_1_PRI_OPRA_SHFT     0u

/* =====================================================================================

  ---PCIE_MCAST_CAP1_1 (0x74041000 + 0x00008180u)---

    MC_CAP_ID[15..0]             - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the Multicast Capability is 0012h.
    MC_CAP_VER[19..16]           - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    MC_NEXT_CAP[31..20]          - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_NEXT_CAP_MASK 0xFFF00000u                // MC_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_CAP_VER_MASK 0x000F0000u                // MC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_CAP_ID_ADDR  PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_CAP_ID_MASK  0x0000FFFFu                // MC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_1_MC_CAP_ID_SHFT  0u

/* =====================================================================================

  ---PCIE_MCAST_CAP2_1 (0x74041000 + 0x00008184u)---

    MC_MAX_GRP[5..0]             - (RO) MC Maximum Group
                                     Value indicates the maximum number of Multicast Groups that the component supports, encoded as M-1. A value of 00h indicates that one Multicast Group is supported.
    RSVD1[7..6]                  - (RO) Reserved
    MC_WIN_SIZE[13..8]           - (RO) MC Window Size Requested
                                     In Endpoints, the log2 of the Multicast Window size requested. RsvdP in Switch and Root Ports.
    RSVD2[14]                    - (RO) Reserved
    MC_ECRC_REGEN_SUP[15]        - (RO) MC ECRC Regeneration Supported
                                     If Set, indicates that ECRC regeneration is supported.
                                     This bit must not be Set unless the Function supports Advanced Error Reporting, and the ECRC Check Capable bit in the Advanced Error Capabilities and Control register is also Set. However, if ECRC regeneration is supported, its operation is not contingent upon the setting of the ECRC Check Enable bit in the Advanced Error Capabilities and Control register. This bit is applicable to Switch and Root Ports and is RsvdP in all other Functions.
    MC_NUM_GRP[21..16]           - (RO) MC Number Group
                                     Value indicates the number of Multicast Groups configured for use, encoded as N-1. The default value of 00 0000b indicates that one Multicast Group is configured for use. Behavior is undefined if value exceeds MC_Max_Group. This parameter indirectly defines the upper limit of the Multicast address range. This field is ignored if MC_Enable is Clear. Default value is 00 0000b.
    RSVD3[30..22]                - (RO) Reserved
    MC_En[31]                    - (RO) MC Enable
                                     When Set, the Multicast mechanism is enabled for the component. Default value is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_En_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_En_MASK      0x80000000u                // MC_En[31]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_En_SHFT      31u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD3_MASK      0x7FC00000u                // RSVD3[30..22]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD3_SHFT      22u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_NUM_GRP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_NUM_GRP_MASK 0x003F0000u                // MC_NUM_GRP[21..16]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_NUM_GRP_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_ECRC_REGEN_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_ECRC_REGEN_SUP_MASK 0x00008000u                // MC_ECRC_REGEN_SUP[15]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_ECRC_REGEN_SUP_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD2_MASK      0x00004000u                // RSVD2[14]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD2_SHFT      14u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_WIN_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_WIN_SIZE_MASK 0x00003F00u                // MC_WIN_SIZE[13..8]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_WIN_SIZE_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD1_MASK      0x000000C0u                // RSVD1[7..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_RSVD1_SHFT      6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_MAX_GRP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_MAX_GRP_MASK 0x0000003Fu                // MC_MAX_GRP[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_1_MC_MAX_GRP_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP3_1 (0x74041000 + 0x00008188u)---

    MC_Index_pos[5..0]           - (RO) MC Index Position
                                     The location of the LSB of the Multicast Group number within the address. Behavior is undefined if this value is less than 12 and MC_Enable is Set. Default is 0.
    RSVD1[11..6]                 - (RO) Reserved
    MC_Addr_lsb[31..12]          - (RO) MC Base Address Lsb
                                     The base address of the Multicast address range. The behavior is undefined if MC_Enable is Set and bits in this field corresponding to address bits that contain the Multicast Group number or address bits less than MC_Index_Position are non-zero. Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_MC_Addr_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_MC_Addr_lsb_MASK 0xFFFFF000u                // MC_Addr_lsb[31..12]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_MC_Addr_lsb_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_RSVD1_MASK      0x00000FC0u                // RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_RSVD1_SHFT      6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_MC_Index_pos_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_MC_Index_pos_MASK 0x0000003Fu                // MC_Index_pos[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_1_MC_Index_pos_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP4_1 (0x74041000 + 0x0000818Cu)---

    MC_Addr_msb[31..0]           - (RO) MC Base Address Msb
                                     The base address of the Multicast address range. The behavior is undefined if MC_Enable is Set and bits in this field corresponding to address bits that contain the Multicast Group number or address bits less than MC_Index_Position are non-zero. Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_1_MC_Addr_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_1_MC_Addr_msb_MASK 0xFFFFFFFFu                // MC_Addr_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_1_MC_Addr_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP5_1 (0x74041000 + 0x00008190u)---

    MC_Rcv_lsb[31..0]            - (RO) MC Receive Lsb
                                     For each bit that's Set, this Function gets a copy of any Multicast TLPs for the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_1_MC_Rcv_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_1_MC_Rcv_lsb_MASK 0xFFFFFFFFu                // MC_Rcv_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_1_MC_Rcv_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP6_1 (0x74041000 + 0x00008194u)---

    MC_Rcv_msb[31..0]            - (RO) MC Receive Msb
                                     For each bit that's Set, this Function gets a copy of any Multicast TLPs for the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_1_MC_Rcv_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_1_MC_Rcv_msb_MASK 0xFFFFFFFFu                // MC_Rcv_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_1_MC_Rcv_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP7_1 (0x74041000 + 0x00008198u)---

    MC_BLK_ALL_lsb[31..0]        - (RO) MC Block All Lsb
                                     For each bit that is Set, this Function is blocked from sending TLPs to the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_1_MC_BLK_ALL_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_1_MC_BLK_ALL_lsb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_1_MC_BLK_ALL_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP8_1 (0x74041000 + 0x0000819Cu)---

    MC_BLK_ALL_msb[31..0]        - (RO) MC Block All_Msb
                                     For each bit that is Set, this Function is blocked from sending TLPs to the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_1_MC_BLK_ALL_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_1_MC_BLK_ALL_msb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_1_MC_BLK_ALL_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP9_1 (0x74041000 + 0x000081A0u)---

    MC_BLK_ALL_UNT_lsb[31..0]    - (RO) MC Block Untranslated Lsb
                                     For each bit that is Set, this Function is blocked from sending TLPs containing Untranslated Addresses to the associated MCG. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_1_MC_BLK_ALL_UNT_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_1_MC_BLK_ALL_UNT_lsb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_UNT_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_1_MC_BLK_ALL_UNT_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP10_1 (0x74041000 + 0x000081A4u)---

    MC_BLK_ALL_UNT_msb[31..0]    - (RO) MC Block Untranslated Msb
                                     For each bit that is Set, this Function is blocked from sending TLPs containing Untranslated Addresses to the associated MCG. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_1_MC_BLK_ALL_UNT_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_1_MC_BLK_ALL_UNT_msb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_UNT_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_1_MC_BLK_ALL_UNT_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP11_1 (0x74041000 + 0x000081A8u)---

    MC_overlay_size[5..0]        - (RO) MC Overlay Size
                                     If 6 or greater, specifies the size in bytes of the overlay aperture as a power of 2. If less than 6, disables the overlay mechanism. Default value is 00 0000b.
    MC_overlay_bar_lsb[31..6]    - (RO) MC Overlay BAR Lsb
                                     Specifies the base address of the window onto which MC TLPs passing through this Function will be overlaid. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_MC_overlay_bar_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_MC_overlay_bar_lsb_MASK 0xFFFFFFC0u                // MC_overlay_bar_lsb[31..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_MC_overlay_bar_lsb_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_MC_overlay_size_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_MC_overlay_size_MASK 0x0000003Fu                // MC_overlay_size[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_1_MC_overlay_size_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP12_1 (0x74041000 + 0x000081ACu)---

    MC_overlay_bar_msb[31..0]    - (RO) MC Overlay BAR Msb
                                     Specifies the base address of the window onto which MC TLPs passing through this Function will be overlaid. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_1_MC_overlay_bar_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_1_MC_overlay_bar_msb_MASK 0xFFFFFFFFu                // MC_overlay_bar_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_1_MC_overlay_bar_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP1_1 (0x74041000 + 0x000081B0u)---

    TPHR_CAP_ID[15..0]           - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the TPH Requester Capability is 0017h.
    TPHR_CAP_VER[19..16]         - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    TPHR_NEXT_CAP[31..20]        - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_NEXT_CAP_MASK 0xFFF00000u                // TPHR_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_CAP_VER_MASK 0x000F0000u                // TPHR_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_CAP_ID_MASK 0x0000FFFFu                // TPHR_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_1_TPHR_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP2_1 (0x74041000 + 0x000081B4u)---

    TPHR_NOST_MODE_SUP[0]        - (RO) No ST Mode Supported
                                     If set indicates that the Function supports the No ST Mode of operation.
                                     This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.
    TPHR_INT_VECTOR_MODE_SUP[1]  - (RO) Interrupt Vector Mode Supported
                                     If set indicates that the Function supports the Interrupt Vector Mode of operation.
    TPHR_DEV_SPECIFIC_MODE_SUP[2] - (RO) Device Specific Mode Supported
                                     If set indicates that the Function supports the Device Specific Mode of operation.
    RSVD1[7..3]                  - (RO) Reserved
    TPHR_EXTREQ_SUP[8]           - (RO) Extended TPH Requester Supported
                                     If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix.
    TPHR_ST_TABLE_LOC[10..9]     - (RO) ST Table Location
                                     Value indicates if and where the ST Table is located.
                                     Defined Encodings are:
                                     00b: ST Table is not present.
                                     01b: ST Table is located in the TPH Requester Capability structure.
                                     10b: ST Table is located in the MSI-X Table (see Section 7.7).
                                     11b: Reserved
                                     A Function that only supports the No ST Mode of operation must have a value of 00b in this field.
                                     A Function may report a value of 10b only if it implements an MSI-X Capability.
    RSVD3[15..11]                - (RO) Reserved
    TPHR_ST_TABLE_SIZE[26..16]   - (RO) ST Table Size
                                     Value indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of four entries.
                                     There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Capability structure.
                                     When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
                                     This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.
    RSVD4[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD4_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD4_MASK       0xF8000000u                // RSVD4[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD4_SHFT       27u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_ST_TABLE_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_ST_TABLE_SIZE_MASK 0x07FF0000u                // TPHR_ST_TABLE_SIZE[26..16]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_ST_TABLE_SIZE_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD3_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD3_MASK       0x0000F800u                // RSVD3[15..11]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD3_SHFT       11u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_ST_TABLE_LOC_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_ST_TABLE_LOC_MASK 0x00000600u                // TPHR_ST_TABLE_LOC[10..9]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_ST_TABLE_LOC_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_EXTREQ_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_EXTREQ_SUP_MASK 0x00000100u                // TPHR_EXTREQ_SUP[8]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_EXTREQ_SUP_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD1_MASK       0x000000F8u                // RSVD1[7..3]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_DEV_SPECIFIC_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_DEV_SPECIFIC_MODE_SUP_MASK 0x00000004u                // TPHR_DEV_SPECIFIC_MODE_SUP[2]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_DEV_SPECIFIC_MODE_SUP_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_INT_VECTOR_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_INT_VECTOR_MODE_SUP_MASK 0x00000002u                // TPHR_INT_VECTOR_MODE_SUP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_INT_VECTOR_MODE_SUP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_NOST_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_NOST_MODE_SUP_MASK 0x00000001u                // TPHR_NOST_MODE_SUP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_1_TPHR_NOST_MODE_SUP_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP3_1 (0x74041000 + 0x000081B8u)---

    st_mode_sel[2..0]            - (RO) ST Mode Select
                                     Selects the ST Mode of operation.
                                     Defined encodings are:
                                     000b: No ST Mode
                                     001b: Interrupt Vector Mode
                                     010b: Device Specific Mode
                                     all other encodings: reserved for future use
                                     Functions that support only the No ST Mode of operation must hardwire this field to 000b.
                                     Function operation is undefined if software enables a mode of operation that does not correspond to a mode supported by the Function.
                                     The default value of this field is 000b.
    RSVD1[7..3]                  - (RO) Reserved
    tphr_en[9..8]                - (RO) TPH Requester Enable
                                     Controls the ability to issue Request TLPs using either TPH or Extended TPH.
                                     Defined encodings are:
                                     00b: Function operating as a Requester is not permitted to issue Requests with TPH or Extended TPH.
                                     01b: Function operating as a Requester is permitted to issue Requests with TPH and is not permitted to issue Requests with Extended TPH.
                                     10b: Reserved.
                                     11b: Function operating as a Requester is permitted to issue Requests with TPH and Extended TPH.
                                     Functions that advertise that they do not support Extended TPH are permitted to hardwire bit 9 of this field to 0b.
                                     The default value of this field is 00b.
    RSVD2[31..10]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_RSVD2_MASK       0xFFFFFC00u                // RSVD2[31..10]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_RSVD2_SHFT       10u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_tphr_en_ADDR     PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_tphr_en_MASK     0x00000300u                // tphr_en[9..8]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_tphr_en_SHFT     8u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_RSVD1_MASK       0x000000F8u                // RSVD1[7..3]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_st_mode_sel_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_st_mode_sel_MASK 0x00000007u                // st_mode_sel[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_1_st_mode_sel_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP4_1 (0x74041000 + 0x000081BCu)---

    RSVD[31..0]                  - (RO) No Implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_1_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_1_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_1_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_ACS_CAP1_1 (0x74041000 + 0x000081C0u)---

    ACS_CAP_ID[15..0]            - (RO) ACS Capability ID
    ACS_CAP_VER[19..16]          - (RO) ACS Capability Version
    ACS_NEXT_CAP[31..20]         - (RO) Next Capability Offset

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_NEXT_CAP_MASK 0xFFF00000u                // ACS_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_CAP_VER_MASK  0x000F0000u                // ACS_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_CAP_ID_MASK   0x0000FFFFu                // ACS_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_1_ACS_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ACS_CAP2_1 (0x74041000 + 0x000081C4u)---

    ACS_V[0]                     - (RO) ACS Source Validation (V)
                                     Required for Root Ports and Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Source Validation.
    ACS_B[1]                     - (RO) ACS Translation Blocking (B)
                                     Required for Root Ports and Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Translation Blocking.
    ACS_R[2]                     - (RO) ACS P2P Request Redirect (R)
                                     Required for Root Ports that support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.
    ACS_C[3]                     - (RO) ACS P2P Completion Redirect (C)
                                     Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.
    ACS_U[4]                     - (RO) ACS Upstream Forwarding (U)
                                     Required for Root Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.
    ACS_E[5]                     - (RO) ACS P2P Egress Control (E)
                                     Optional for Root Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Control.
    ACS_T[6]                     - (RO) ACS Direct Translated P2P (T)
                                     Required for Root Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Direct Translated P2P.
    RSVD1[7]                     - (RO) Reserved
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_RSVD1_MASK        0x00000080u                // RSVD1[7]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_RSVD1_SHFT        7u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_T_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_T_MASK        0x00000040u                // ACS_T[6]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_T_SHFT        6u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_E_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_E_MASK        0x00000020u                // ACS_E[5]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_E_SHFT        5u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_U_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_U_MASK        0x00000010u                // ACS_U[4]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_U_SHFT        4u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_C_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_C_MASK        0x00000008u                // ACS_C[3]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_C_SHFT        3u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_R_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_R_MASK        0x00000004u                // ACS_R[2]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_R_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_B_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_B_MASK        0x00000002u                // ACS_B[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_B_SHFT        1u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_V_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_V_MASK        0x00000001u                // ACS_V[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_1_ACS_V_SHFT        0u

/* =====================================================================================

  ---PCIE_ACS_CAP3_1 (0x74041000 + 0x000081C8u)---

    RESERVED0[7..0]              - (RO) Reserved bits
    ACS_VEC_SIZE[13..8]          - (RO) Egress Control Vector Size
                                     Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Control Vector; the encoding 00h indicates 256 bits.
                                     If the ACS P2P Egress Control (E) bit is 0b, the value of the size field is undefined, and the Egress Control Vector register is not required to be present.
    RSVD2[15..14]                - (RO) Reserved
    ACS_V_EN[16]                 - (RO) ACS Source Validation Enable (V)
                                     When Set, the component validates the Bus Number from the Requester ID of Upstream Requests against the secondary/subordinate Bus Numbers.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Source Validation functionality is not implemented.
    ACS_B_EN[17]                 - (RO) ACS Translation Blocking Enable (B)
                                     When Set, the component blocks all Upstream Memory Requests whose Address Translation (AT) field is not set to the default value.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Translation Blocking functionality is not implemented.
    ACS_R_EN[18]                 - (RO) ACS P2P Request Redirect Enable (R)
                                     In conjunction with ACS P2P Egress Control and ACS Direct Translated P2P mechanisms, determines when the component redirects peer-to-peer Requests Upstream (see Section 6.12.3). Note that with Downstream Ports, this bit only applies to Upstream Requests arriving at the Downstream Port, and whose normal routing targets a different Downstream Port.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Request Redirect functionality is not implemented.
    ACS_C_EN[19]                 - (RO) ACS P2P Completion Redirect Enable (C)
                                     Determines when the component redirects peer-to-peer Completions Upstream; applicable only to Completions130 whose Relaxed Ordering Attribute is clear.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Completion Redirect functionality is not implemented.
    ACS_U_EN[20]                 - (RO) ACS Upstream Forwarding Enable (U)
                                     When Set, the component forwards Upstream any Request or Completion TLPs it receives that were redirected Upstream by a component lower in the hierarchy. Note that this bit only applies to Upstream TLPs arriving at a Downstream Port, and whose normal routing targets the same Downstream Port.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Upstream Forwarding functionality is not implemented.
    ACS_E_EN[21]                 - (RO) ACS P2P Egress Control Enable (E)
                                     In conjunction with the Egress Control Vector plus the ACS P2P Request Redirect and ACS Direct Translated P2P mechanisms, determines when to allow, disallow, or redirect peer-to-peer Requests.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Egress Control functionality is not implemented.
    ACS_T_EN[22]                 - (RO) ACS Direct Translated P2P Enable (T)
                                     When Set, overrides the ACS P2P Request Redirect and ACS P2P Egress Control mechanisms with peer-to-peer Memory Requests whose Address Translation (AT) field indicates a Translated address.
                                     This bit is ignored if ACS Translation Blocking Enable (B) is 1b.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Direct Translated P2P functionality is not implemented.
    RSVD3[31..23]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_RSVD3_MASK        0xFF800000u                // RSVD3[31..23]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_RSVD3_SHFT        23u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_T_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_T_EN_MASK     0x00400000u                // ACS_T_EN[22]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_T_EN_SHFT     22u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_E_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_E_EN_MASK     0x00200000u                // ACS_E_EN[21]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_E_EN_SHFT     21u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_U_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_U_EN_MASK     0x00100000u                // ACS_U_EN[20]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_U_EN_SHFT     20u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_C_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_C_EN_MASK     0x00080000u                // ACS_C_EN[19]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_C_EN_SHFT     19u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_R_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_R_EN_MASK     0x00040000u                // ACS_R_EN[18]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_R_EN_SHFT     18u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_B_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_B_EN_MASK     0x00020000u                // ACS_B_EN[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_B_EN_SHFT     17u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_V_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_V_EN_MASK     0x00010000u                // ACS_V_EN[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_V_EN_SHFT     16u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_RSVD2_MASK        0x0000C000u                // RSVD2[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_RSVD2_SHFT        14u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_VEC_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_VEC_SIZE_MASK 0x00003F00u                // ACS_VEC_SIZE[13..8]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_1_ACS_VEC_SIZE_SHFT 8u

/* =====================================================================================

  ---PCIE_ACS_CAP4_1 (0x74041000 + 0x000081CCu)---

    RSVD[31..0]                  - (RO) No Implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_1_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_1_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_1_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIF_DLF_CAP1_1 (0x74041000 + 0x000081E0u)---

    DLF_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID.
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for Data Link Feature is 0025h
    DLF_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    DLF_NEXT_CAP[31..20]         - (RO) Next Capability Offset.
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
                                     The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_NEXT_CAP_MASK 0xFFF00000u                // DLF_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_CAP_VER_MASK  0x000F0000u                // DLF_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_CAP_ID_MASK   0x0000FFFFu                // DLF_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_1_DLF_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIF_DLF_CAP2_1 (0x74041000 + 0x000081E4u)---

    DLF_SUP[22..0]               - (RO) Local Data Link Feature Supported.
                                     This field contains the Feature Supported value used when this Port sends a Data Link Feature DLLP (see Figure 3-12). Defined features are:
                                     Bit 0 : Local Scaled Flow Control Supported
                                     This bit indicates that this Port supports the Scaled Flow Control Feature (see Section 3.4.2).
                                     Bits 22:1 RsvdP
                                     Bits associated with features that this Port is capable of supporting are HwInit, defaulting to 1b.
                                     Other bits in this field are RsvdP.
    RESERVED23[30..23]           - (RO) Reserved bits
    DLF_EXCHG_EN[31]             - (RO) Data Link Feature Exchange Enable.
                                     If Set, this bit indicates that this Port will enter the DL_Feature negotiation state (see Section 3.2.1). Default is 1b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_DLF_EXCHG_EN_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_DLF_EXCHG_EN_MASK 0x80000000u                // DLF_EXCHG_EN[31]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_DLF_EXCHG_EN_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_DLF_SUP_ADDR      PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_DLF_SUP_MASK      0x007FFFFFu                // DLF_SUP[22..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_1_DLF_SUP_SHFT      0u

/* =====================================================================================

  ---PCIF_DLF_CAP3_1 (0x74041000 + 0x000081E8u)---

    RMT_DLF_SUP[22..0]           - (RO) Remote Data Link Feature Supported.
                                     These bits indicate that the Remote Port supports the corresponding Data Link Feature. These bits capture all information from the Feature Supported field of the Data Link Feature DLLP even when this Port doesn't support the corresponding feature.
                                     This field is Cleared on entry to state DL_Inactive (see Section 3.2.1).
                                     Features currently defined are:
                                     Bit 0 : Remote Scaled Flow Control Supported
                                     This bit indicates that the Remote Port supports the Scaled Flow Control Feature (see Section 3.4.2).
                                     Bits 22:1 : Undefined
                                     Default is 00 0000h
    RESERVED23[30..23]           - (RO) Reserved bits
    RMT_DLF_SUP_VALID[31]        - (RO) Remote Data Link Feature Supported Valid.
                                     This bit indicates that the Port has received a Data Link Feature DLLP in state DL_Feature (see Section 3.2.1) and that the Remote Data Link Feature Supported field is meaningful. This bit is Cleared on entry to state DL_Inactive (see Section 3.2.1).
                                     Default is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_RMT_DLF_SUP_VALID_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_RMT_DLF_SUP_VALID_MASK 0x80000000u                // RMT_DLF_SUP_VALID[31]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_RMT_DLF_SUP_VALID_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_RMT_DLF_SUP_ADDR  PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_RMT_DLF_SUP_MASK  0x007FFFFFu                // RMT_DLF_SUP[22..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_1_RMT_DLF_SUP_SHFT  0u

/* =====================================================================================

  ---PCIE_AER_CAP_1 (0x74041000 + 0x00008200u)---

    AER_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability. The Extended Capability ID for the Advanced Error Reporting Capability is 0001h.
    AER_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present. Must be 1h for this version of the specification.
    AER_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_NEXT_CAP_ADDR  PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_NEXT_CAP_MASK  0xFFF00000u                // AER_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_NEXT_CAP_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_CAP_VER_ADDR   PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_CAP_VER_MASK   0x000F0000u                // AER_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_CAP_VER_SHFT   16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_CAP_ID_ADDR    PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_CAP_ID_MASK    0x0000FFFFu                // AER_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_1_AER_CAP_ID_SHFT    0u

/* =====================================================================================

  ---PCIE_AER_UNC_STATUS_1 (0x74041000 + 0x00008204u)---

    AER_UNC_Undefined[3..0]      - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNC_DLPE[4]              - (W1C) Data Link Protocol Error Status
                                     This bit set to one indicates that a Data Link Protocol Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_SDES[5]              - (RO) Surprise Down Error Status
                                     This bit set to one indicates that a Surprise Down Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD1[11..6]         - (RO) Reserved
    AER_UNC_PTLP[12]             - (W1C) Poisoned TLP Status
                                     This bit set to one indicates that a Poisoned TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_FCPE[13]             - (W1C) Flow Control Protocol Error Status
                                     This bit set to one indicates that a Flow Control Protocol Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_CT[14]               - (W1C) Completion Timeout Status
                                     This bit set to one indicates that a Completion Timeout was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_CA[15]               - (W1C) Completer Abort Status
                                     This bit set to one indicates that a Completer Abort was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_UnC[16]              - (W1C) Unexpected Completion Status
                                     This bit set to one indicates that an Unexpected Completion was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD2[17]            - (RO) Reserved
    AER_UNC_MTLP[18]             - (W1C) Malformed TLP Status
                                     This bit set to one indicates that a Malformed TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_ECRC[19]             - (RO) ECRC Error Status
                                     This bit set to one indicates that an ECRC Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_URE[20]              - (W1C) Unsupported Request Error Status
                                     This bit set to one indicates that a Poisoned TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_ACSVIOLATION[21]    - (RO) ACS violation Error Status
                                     This bit set to one indicates that an ACS violation Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_INTERNAL[22]        - (W1C) Internal Error Status
                                     This bit set to one indicates that an Internal Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_MCBLK[23]           - (RO) MC Block Error Status
                                     This bit set to one indicates that a MC Block Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_ATOEGRESSBLK[24]    - (RO) AtomicOp Egress Blocked Status
                                     This bit set to one indicates that an AtomicOp Egress Blocked was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_EEPFXBLK[25]        - (RO) TLP Prefix Blocked Error Status
                                     This bit set to one indicates that a TLP Prefix Blocked Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_POIS_TLP_EGBLK[26]  - (RO) Poisoned TLP Egress Blocked Status
                                     This bit set to one indicates that a Poisoned TLP Egress Blocked was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD3[31..27]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD3_MASK 0xF8000000u                // AER_UNC_RSVD3[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD3_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCM_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_EEPFXBLK_MASK 0x02000000u                // AER_UNCM_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCM_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_MCBLK_MASK 0x00800000u                // AER_UNCM_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_INTERNAL_MASK 0x00400000u                // AER_UNCM_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_ACSVIOLATION_MASK 0x00200000u                // AER_UNCM_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNCM_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_URE_MASK 0x00100000u                // AER_UNC_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_ECRC_MASK 0x00080000u                // AER_UNC_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_MTLP_MASK 0x00040000u                // AER_UNC_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD2_MASK 0x00020000u                // AER_UNC_RSVD2[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD2_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_UnC_MASK 0x00010000u                // AER_UNC_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_CA_MASK 0x00008000u                // AER_UNC_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_CT_MASK 0x00004000u                // AER_UNC_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_FCPE_MASK 0x00002000u                // AER_UNC_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_PTLP_MASK 0x00001000u                // AER_UNC_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD1_MASK 0x00000FC0u                // AER_UNC_RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_RSVD1_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_SDES_MASK 0x00000020u                // AER_UNC_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_DLPE_MASK 0x00000010u                // AER_UNC_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_Undefined_MASK 0x0000000Fu                // AER_UNC_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_1_AER_UNC_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_UNC_MASK_1 (0x74041000 + 0x00008208u)---

    AER_UNCM_Undefined[3..0]     - (RO) Undefined  Mask
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNCM_DLPE[4]             - (RW) Data Link Protocol Error Mask
                                     There is a mask bit per error bit of the Data Link Protocol Error Status register.
    AER_UNCM_SDES[5]             - (RO) Surprise Down Error Mask
                                     There is a mask bit per error bit of the Surprise Down Error Status register. (Endpoint : RO)
    RESERVED6[11..6]             - (RO) Reserved bits
    AER_UNCM_PTLP[12]            - (RW) Poisoned TLP Mask
                                     There is a mask bit per error bit of the Poisoned TLP Status register.
    AER_UNCM_FCPE[13]            - (RW) Flow Control Protocol Error Mask
                                     There is a mask bit per error bit of the Flow Control Protocol Error Status register.
    AER_UNCM_CT[14]              - (RW) Completion Timeout Mask
                                     There is a mask bit per error bit of the Surprise Down Error Status register.
    AER_UNCM_CA[15]              - (RW) Completer Abort Mask
                                     There is a mask bit per error bit of the Completer Abort Status register.
    AER_UNCM_UnC[16]             - (RW) Unexpected Completion Mask
                                     There is a mask bit per error bit of the Unexpected Completion Status register.
    AER_UNCM_RcvOvf[17]          - (RW) Receiver Overflow Mask
                                     There is a mask bit per error bit of the Receiver Overflow Status register.
    AER_UNCM_MTLP[18]            - (RW) Malformed TLP Mask
                                     There is a mask bit per error bit of the Malformed TLP Status register.
    AER_UNCM_ECRC[19]            - (RW) ECRC Error Mask
                                     There is a mask bit per error bit of the ECRC Error Status register.
    AER_UNCM_URE[20]             - (RW) Unsupported Request Error Mask
                                     There is a mask bit per error bit of the Unsupported Request Error Status register.
    AER_UNCM_ACSVIOLATION[21]    - (RO) ACS violation Error Mask
                                     There is a mask bit per error bit of the ACS violation Error Status register.
    AER_UNCM_INTERNAL[22]        - (RW) Internal Error Mask
                                     There is a mask bit per error bit of the Internal Error Status register.
    AER_UNCM_MCBLK[23]           - (RO) MC Block Error Mask
                                     There is a mask bit per error bit of the MC Block Error Status register.
    AER_UNCM_ATOEGRESSBLK[24]    - (RO) AtomicOp Egress Blocked Mask
                                     There is a mask bit per error bit of the AtomicOp Egress Blocked Status register.
    AER_UNCM_EEPFXBLK[25]        - (RO) TLP Prefix Blocked Error Mask
                                     There is a mask bit per error bit of the TLP Prefix Blocked Error Status register.
    AER_UNCM_POIS_TLP_EGBLK[26]  - (RO) Poisoned TLP Egress Blocked Mask
                                     There is a mask bit per error bit of the Poisoned TLP Egress Blocked Status register.
    AER_UNCM_RSVD2[31..27]       - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_RSVD2_MASK 0xF8000000u                // AER_UNCM_RSVD2[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_RSVD2_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCM_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_EEPFXBLK_MASK 0x02000000u                // AER_UNCM_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCM_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_MCBLK_MASK 0x00800000u                // AER_UNCM_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_INTERNAL_MASK 0x00400000u                // AER_UNCM_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ACSVIOLATION_MASK 0x00200000u                // AER_UNCM_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_URE_MASK 0x00100000u                // AER_UNCM_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ECRC_MASK 0x00080000u                // AER_UNCM_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_MTLP_MASK 0x00040000u                // AER_UNCM_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_RcvOvf_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_RcvOvf_MASK 0x00020000u                // AER_UNCM_RcvOvf[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_RcvOvf_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_UnC_MASK 0x00010000u                // AER_UNCM_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_CA_MASK 0x00008000u                // AER_UNCM_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_CT_MASK 0x00004000u                // AER_UNCM_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_FCPE_MASK 0x00002000u                // AER_UNCM_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_PTLP_MASK 0x00001000u                // AER_UNCM_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_SDES_MASK 0x00000020u                // AER_UNCM_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_DLPE_MASK 0x00000010u                // AER_UNCM_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_Undefined_MASK 0x0000000Fu                // AER_UNCM_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_1_AER_UNCM_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_UNC_SEVERITY_1 (0x74041000 + 0x0000820Cu)---

    AER_UNCS_Undefined[3..0]     - (RO) Undefined  Severity
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNCS_DLPE[4]             - (RW) Data Link Protocol Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_SDES[5]             - (RO) Surprise Down Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    RSVD1[11..6]                 - (RO) Reserved
    AER_UNCS_PTLP[12]            - (RW) Poisoned TLP Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_FCPE[13]            - (RW) Flow Control Protocol Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_CT[14]              - (RW) Completion Timeout Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_CA[15]              - (RW) Completer Abort Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_UnC[16]             - (RW) Unexpected Completion Severity
                                     1: Reported as fatal error
                                     0: Reported as non-fatal error
    AER_UNCS_RcvOvf[17]          - (RW) Receiver Overflow Error Severity
                                     1: Reported as fatal error
                                     0: Reported as non-fatal error
    AER_UNCS_MTLP[18]            - (RW) Malformed TLP Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ECRC[19]            - (RW) ECRC Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_URE[20]             - (RW) Unsupported Request Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ACSVIOLATION[21]    - (RO) ACS violation Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_INTERNAL[22]        - (RW) Internal Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_MCBLK[23]           - (RO) MC Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ATOEGRESSBLK[24]    - (RO) atoegress Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_EEPFXBLK[25]        - (RO) eepfx Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_POIS_TLP_EGBLK[26]  - (RO) Posioned TLP eg Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_RSVD3_MASK 0xF8000000u                // RSVD3[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_RSVD3_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCS_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_EEPFXBLK_MASK 0x02000000u                // AER_UNCS_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCS_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_MCBLK_MASK 0x00800000u                // AER_UNCS_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_INTERNAL_MASK 0x00400000u                // AER_UNCS_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ACSVIOLATION_MASK 0x00200000u                // AER_UNCS_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_URE_MASK 0x00100000u                // AER_UNCS_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ECRC_MASK 0x00080000u                // AER_UNCS_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_MTLP_MASK 0x00040000u                // AER_UNCS_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_RcvOvf_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_RcvOvf_MASK 0x00020000u                // AER_UNCS_RcvOvf[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_RcvOvf_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_UnC_MASK 0x00010000u                // AER_UNCS_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_CA_MASK 0x00008000u                // AER_UNCS_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_CT_MASK 0x00004000u                // AER_UNCS_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_FCPE_MASK 0x00002000u                // AER_UNCS_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_PTLP_MASK 0x00001000u                // AER_UNCS_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_RSVD1_MASK 0x00000FC0u                // RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_RSVD1_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_SDES_MASK 0x00000020u                // AER_UNCS_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_DLPE_MASK 0x00000010u                // AER_UNCS_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_Undefined_MASK 0x0000000Fu                // AER_UNCS_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_1_AER_UNCS_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CO_STATUS_1 (0x74041000 + 0x00008210u)---

    AER_CO_RE[0]                 - (W1C) Receiver Error Status
                                     This bit set to one indicates that a Receiver Error was detected; software may clear an error status by writing a 1b
    AER_CO_RSVD1[5..1]           - (RO) Reserved
    AER_CO_BTLP[6]               - (W1C) Bad TLP Status
                                     This bit set to one indicates that a Bad TLP was detected; software may clear an error status by writing a 1b.
    AER_CO_BDLLP[7]              - (W1C) Bad DLLP Status
                                     This bit set to one indicates that a Bad DLLP was detected; software may clear an error status by writing a 1b.
    AER_CO_RNR[8]                - (W1C) REPLAY_NUM Rollover Status
                                     This bit set to one indicates that a REPLAY_NUM Rollover was detected; software may clear an error status by writing a 1b.
    AER_CO_RSVD2[11..9]          - (RO) Reserved
    AER_CO_RTT[12]               - (W1C) Replay Timer Timeout Status
                                     This bit set to one indicates that a Replay Timer Timeout was detected; software may clear an error status by writing a 1b.
    AER_CO_ANFE[13]              - (W1C) Advisory Non-Fatal Error Status
                                     This bit set to one indicates that an Advisory Non-Fatal Error was detected; software may clear an error status by writing a 1b.
    AER_CO_INTERNAL[14]          - (W1C) Internal Non-Fatal Error Status
                                     This bit set to one indicates that an Internal Non-Fatal Error was detected; software may clear an error status by writing a 1b.
    AER_CO_RSVD3[31..15]         - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD3_MASK 0xFFFF8000u                // AER_CO_RSVD3[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD3_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_INTERNAL_MASK 0x00004000u                // AER_CO_INTERNAL[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_INTERNAL_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_ANFE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_ANFE_MASK 0x00002000u                // AER_CO_ANFE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_ANFE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RTT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RTT_MASK 0x00001000u                // AER_CO_RTT[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RTT_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD2_MASK 0x00000E00u                // AER_CO_RSVD2[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD2_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RNR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RNR_MASK 0x00000100u                // AER_CO_RNR[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RNR_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_BDLLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_BDLLP_MASK 0x00000080u                // AER_CO_BDLLP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_BDLLP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_BTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_BTLP_MASK 0x00000040u                // AER_CO_BTLP[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_BTLP_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD1_MASK 0x0000003Eu                // AER_CO_RSVD1[5..1]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RSVD1_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RE_MASK 0x00000001u                // AER_CO_RE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_1_AER_CO_RE_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CO_MASK_1 (0x74041000 + 0x00008214u)---

    AER_COM_RE[0]                - (RW) Receiver Error Mask
                                     There is a mask bit per error bit of the Receiver Error Status register.
    AER_COM_RSVD1[5..1]          - (RO) Reserved
    AER_COM_BTLP[6]              - (RW) Bad TLP Mask
                                     There is a mask bit per error bit of the Bad TLP Status register.
    AER_COM_BDLLP[7]             - (RW) Bad DLLP Mask
                                     There is a mask bit per error bit of the Bad DLLP Status register.
    AER_COM_RNR[8]               - (RW) REPLAY_NUM Rollover Mask
                                     There is a mask bit per error bit of the REPLAY_NUM Rollover Status register.
    AER_COM_RSVD2[11..9]         - (RO) Reserved
    AER_COM_RTT[12]              - (RW) Replay Timer Timeout Mask
                                     There is a mask bit per error bit of the Replay Timer Timeout Status register.
    AER_COM_ANFE[13]             - (RW) Advisory Non-Fatal Error Mask
                                     There is a mask bit per error bit of the Advisory Non-Fatal Error Status register.
    AER_COM_INTERNAL_MSK_COR[14] - (RW) Internal Correctable Error Mask
                                     There is a mask bit per error bit of the Internal Correctable Error Status register.
    AER_COM_RSVD3[31..15]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD3_MASK 0xFFFF8000u                // AER_COM_RSVD3[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD3_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_INTERNAL_MSK_COR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_INTERNAL_MSK_COR_MASK 0x00004000u                // AER_COM_INTERNAL_MSK_COR[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_INTERNAL_MSK_COR_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_ANFE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_ANFE_MASK 0x00002000u                // AER_COM_ANFE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_ANFE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RTT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RTT_MASK 0x00001000u                // AER_COM_RTT[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RTT_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD2_MASK 0x00000E00u                // AER_COM_RSVD2[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD2_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RNR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RNR_MASK 0x00000100u                // AER_COM_RNR[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RNR_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_BDLLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_BDLLP_MASK 0x00000080u                // AER_COM_BDLLP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_BDLLP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_BTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_BTLP_MASK 0x00000040u                // AER_COM_BTLP[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_BTLP_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD1_MASK 0x0000003Eu                // AER_COM_RSVD1[5..1]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RSVD1_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RE_MASK 0x00000001u                // AER_COM_RE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_1_AER_COM_RE_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CAPCTL_1 (0x74041000 + 0x00008218u)---

    AER_CAP_FEP[4..0]            - (RO) First Error Pointer
                                     The First Error Pointer is a field that identifies the bit position of the first error reported in the Uncorrectable Error Status register
    AER_CAP_ECRC_CAP[5]          - (RO) ECRC Generation Capable
                                     If Set, this bit indicates that the Function is capable of generating
    AER_CAP_ECRC_EN[6]           - (RW) ECRC Generation Enable
                                     When Set, ECRC generation is enabled Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b. Default value of this bit is 0b.
    AER_CAP_ECRC_CK_CAP[7]       - (RO) ECRC Check Capable
                                     If Set, this bit indicates that the Function is capable of checking ECRC
    AER_CAP_ECRC_CK_EN[8]        - (RW) ECRC Check Enable
                                     When Set, ECRC checking is enabled. Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b. Default value of this bit is 0b.
    AER_CAP_RSVD1[10..9]         - (RO) Reserved
    AER_CAP_TLPPFX_LOG[11]       - (RO) TLP prefix log present
                                     If the VF implements Header Log Sharing, this bit is 0b when the Header Log contains all 1s due to an overflow condition.
    AER_CAP_COMP_LOG[12]         - (RO) Completion Timeout log
                                     If Set, this bit indicates that the Function is capable of recording header of TLP associated with error to AER_HDX_LOG.
                                     Please refer to internal register 0x00D8[0].
    AER_CAP_RSVD2[31..13]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_RSVD2_MASK 0xFFFFE000u                // AER_CAP_RSVD2[31..13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_RSVD2_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_COMP_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_COMP_LOG_MASK 0x00001000u                // AER_CAP_COMP_LOG[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_COMP_LOG_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_TLPPFX_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_TLPPFX_LOG_MASK 0x00000800u                // AER_CAP_TLPPFX_LOG[11]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_TLPPFX_LOG_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_RSVD1_MASK 0x00000600u                // AER_CAP_RSVD1[10..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_RSVD1_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CK_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CK_EN_MASK 0x00000100u                // AER_CAP_ECRC_CK_EN[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CK_EN_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CK_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CK_CAP_MASK 0x00000080u                // AER_CAP_ECRC_CK_CAP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CK_CAP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_EN_MASK 0x00000040u                // AER_CAP_ECRC_EN[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_EN_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CAP_MASK 0x00000020u                // AER_CAP_ECRC_CAP[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_ECRC_CAP_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_FEP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_FEP_MASK 0x0000001Fu                // AER_CAP_FEP[4..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_1_AER_CAP_FEP_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD0_LOG_1 (0x74041000 + 0x0000821Cu)---

    AER_HD0_LOG[31..0]           - (RO) Header Log Register  1st DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_1_AER_HD0_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_1_AER_HD0_LOG_MASK 0xFFFFFFFFu                // AER_HD0_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_1_AER_HD0_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD1_LOG_1 (0x74041000 + 0x00008220u)---

    AER_HD1_LOG[31..0]           - (RO) Header Log Register 2nd DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_1_AER_HD1_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_1_AER_HD1_LOG_MASK 0xFFFFFFFFu                // AER_HD1_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_1_AER_HD1_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD2_LOG_1 (0x74041000 + 0x00008224u)---

    AER_HD2_LOG[31..0]           - (RO) Header Log Register 3rd DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_1_AER_HD2_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_1_AER_HD2_LOG_MASK 0xFFFFFFFFu                // AER_HD2_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_1_AER_HD2_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD3_LOG_1 (0x74041000 + 0x00008228u)---

    AER_HD3_LOG[31..0]           - (RO) Header Log Register 4th DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_1_AER_HD3_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_1_AER_HD3_LOG_MASK 0xFFFFFFFFu                // AER_HD3_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_1_AER_HD3_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_RP_CMD_REG_1 (0x74041000 + 0x0000822Cu)---

    COR_ERR_RPT_EN[0]            - (RO) Correctable Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a correctable error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port
    NFT_ERR_RPT_EN[1]            - (RO) Non-Fatal Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a Non-fatal error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port.
    FAT_ERR_RPT_EN[2]            - (RO) Fatal Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a Non-fatal error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port.
    RSVD1[31..3]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_RSVD1_MASK      0xFFFFFFF8u                // RSVD1[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_RSVD1_SHFT      3u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_FAT_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_FAT_ERR_RPT_EN_MASK 0x00000004u                // FAT_ERR_RPT_EN[2]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_FAT_ERR_RPT_EN_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_NFT_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_NFT_ERR_RPT_EN_MASK 0x00000002u                // NFT_ERR_RPT_EN[1]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_NFT_ERR_RPT_EN_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_COR_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_COR_ERR_RPT_EN_MASK 0x00000001u                // COR_ERR_RPT_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_1_COR_ERR_RPT_EN_SHFT 0u

/* =====================================================================================

  ---PCIE_RP_STS_REG_1 (0x74041000 + 0x00008230u)---

    COR_ERR_RX[0]                - (RO) ERR_COR Received
                                     Set when a Correctable error Message is received and this bit is not already Set.
    COR_ERR_MULT_RX[1]           - (RO) Multiple ERR_COR Received
                                     Set when a Correctable error Message is received and ERR_COR Received is already Set.
    UNC_ERR_RX[2]                - (RO) ERR_FATAL/NONFATAL Received
                                     Set when either a Fatal or a Non-fatal error Message is received and this bit is not already Set.
    UNC_ERR_MULT_RX[3]           - (RO) Multiple ERR_FATAL/NONFATAL Received
                                     Set when either a Fatal or a Non-fatal error is received and ERR_FATAL/NONFATAL Received is already Set.
    UNC_ERR_FIRST_FAT[4]         - (RO) First Uncorrectable Fatal
                                     Set when the first Uncorrectable error Message received is for a Fatal error.
    UNC_ERR_NON_FAT[5]           - (RO) Non-Fatal Error Messages Received
                                     Set when one or more Non-Fatal Uncorrectable error Messages have been received.
    UNC_ERR_FAT[6]               - (RO) Fatal Error Messages Received
                                     Set when one or more Fatal Uncorrectable error Messages have been received.
    UNC_ERR_RSVD1[26..7]         - (RO) Reserved
    AER_MSI_NUM[31..27]          - (RO) Advanced Error Interrupt Message Number
                                     This register indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_AER_MSI_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_AER_MSI_NUM_MASK 0xF8000000u                // AER_MSI_NUM[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_AER_MSI_NUM_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_RSVD1_MASK 0x07FFFF80u                // UNC_ERR_RSVD1[26..7]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_RSVD1_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_FAT_MASK 0x00000040u                // UNC_ERR_FAT[6]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_FAT_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_NON_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_NON_FAT_MASK 0x00000020u                // UNC_ERR_NON_FAT[5]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_NON_FAT_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_FIRST_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_FIRST_FAT_MASK 0x00000010u                // UNC_ERR_FIRST_FAT[4]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_FIRST_FAT_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_MULT_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_MULT_RX_MASK 0x00000008u                // UNC_ERR_MULT_RX[3]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_MULT_RX_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_RX_MASK 0x00000004u                // UNC_ERR_RX[2]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_UNC_ERR_RX_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_COR_ERR_MULT_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_COR_ERR_MULT_RX_MASK 0x00000002u                // COR_ERR_MULT_RX[1]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_COR_ERR_MULT_RX_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_COR_ERR_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_COR_ERR_RX_MASK 0x00000001u                // COR_ERR_RX[0]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_1_COR_ERR_RX_SHFT 0u

/* =====================================================================================

  ---ERR_SRC_ID_REG_1 (0x74041000 + 0x00008234u)---

    ERR_COR_SRC_ID[15..0]        - (RO) ERR_COR Source Identification
                                     Loaded with the Requester ID indicated in the received ERR_COR Message when the ERR_COR Received bit is not already set.
                                     Default value of this field is 0000h.
    ERR_FAT_NFAT_SRC_ID[31..16]  - (RO) ERR_FATAL/NONFATAL Source Identification
                                     Loaded with the Requester ID indicated in the received ERR_FATAL or ERR_NONFATAL Message when the ERR_FATAL/NONFATAL Received bit is not already set.
                                     Default value of this field is 0000h.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ERR_FAT_NFAT_SRC_ID_ADDR PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ERR_FAT_NFAT_SRC_ID_MASK 0xFFFF0000u                // ERR_FAT_NFAT_SRC_ID[31..16]
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ERR_FAT_NFAT_SRC_ID_SHFT 16u
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ERR_COR_SRC_ID_ADDR PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ADDR
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ERR_COR_SRC_ID_MASK 0x0000FFFFu                // ERR_COR_SRC_ID[15..0]
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_1_ERR_COR_SRC_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX0_LOG_1 (0x74041000 + 0x00008238u)---

    AER_PFX0_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_1_AER_PFX0_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_1_AER_PFX0_LOG_MASK 0xFFFFFFFFu                // AER_PFX0_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_1_AER_PFX0_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX1_LOG_1 (0x74041000 + 0x0000823Cu)---

    AER_PFX1_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_1_AER_PFX1_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_1_AER_PFX1_LOG_MASK 0xFFFFFFFFu                // AER_PFX1_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_1_AER_PFX1_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX2_LOG_1 (0x74041000 + 0x00008240u)---

    AER_PFX2_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_1_AER_PFX2_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_1_AER_PFX2_LOG_MASK 0xFFFFFFFFu                // AER_PFX2_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_1_AER_PFX2_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX3_LOG_1 (0x74041000 + 0x00008244u)---

    AER_PFX3_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_1_AER_PFX3_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_1_AER_PFX3_LOG_MASK 0xFFFFFFFFu                // AER_PFX3_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_1_AER_PFX3_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP0_1 (0x74041000 + 0x000082D0u)---

    DVSEC_CAP_ID[15..0]          - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for the Designated Vendor-Specific Extended Capability is 0023h.
    DVSEC_CAP_VER[19..16]        - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    DVSEC_NEXT_PTR[31..20]       - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_NEXT_PTR_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_NEXT_PTR_MASK 0xFFF00000u                // DVSEC_NEXT_PTR[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_NEXT_PTR_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_CAP_VER_MASK 0x000F0000u                // DVSEC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_CAP_ID_MASK 0x0000FFFFu                // DVSEC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_1_DVSEC_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP1_1 (0x74041000 + 0x000082D4u)---

    DVSEC_VID[15..0]             - (RO) DVSEC Vendor ID
                                     This field is the Vendor ID associated with the vendor that defined the contents of this capability.
    DVSEC_REV[19..16]            - (RO) DVSEC Revision
                                     This field is a vendor-defined version number that indicates the version of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID and DVSEC ID before interpreting this field.
    DVSEC_LEN[31..20]            - (RO) DVSEC Length
                                     This field indicates the number of bytes in the entire DVSEC structure, including the PCI Express Extended Capability Header , the DVSEC Header 1, DVSEC Header 2, and DVSEC vendor-specific registers.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_LEN_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_LEN_MASK  0xFFF00000u                // DVSEC_LEN[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_LEN_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_REV_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_REV_MASK  0x000F0000u                // DVSEC_REV[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_REV_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_VID_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_VID_MASK  0x0000FFFFu                // DVSEC_VID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_1_DVSEC_VID_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP2_1 (0x74041000 + 0x000082D8u)---

    DVSEC_ID[15..0]              - (RO) DVSEC ID
                                     This field is a vendor-defined ID that indicates the nature and format of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID before interpreting this field.
    DVSEC_REG[31..16]            - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_DVSEC_REG_MASK  0xFFFF0000u                // DVSEC_REG[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_DVSEC_REG_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_DVSEC_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_DVSEC_ID_MASK   0x0000FFFFu                // DVSEC_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_1_DVSEC_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP3_1 (0x74041000 + 0x000082DCu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_1_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_1_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_1_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP4_1 (0x74041000 + 0x000082E0u)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_1_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_1_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_1_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP5_1 (0x74041000 + 0x000082E4u)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_1_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_1_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_1_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_EXT_DSN_CAP_1 (0x74041000 + 0x000082F0u)---

    DSN_Cap_Id[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability. Extended Capability ID for the Device Serial Number Capability is 0003h.
    DSN_Cap_Version[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present. Must be 1h for this version of the specification.
    DSN_Nx_Ptr[31..20]           - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Nx_Ptr_MASK 0xFFF00000u                // DSN_Nx_Ptr[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Nx_Ptr_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Cap_Version_MASK 0x000F0000u                // DSN_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Cap_Id_MASK 0x0000FFFFu                // DSN_Cap_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_1_DSN_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_DSN_NUB1_1 (0x74041000 + 0x000082F4u)---

    DSN_NUMBER_1ST[31..0]        - (RO) PCI Express Device Serial Number
                                     This field contains the IEEE defined 64 bit extended unique identifier . This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_1_DSN_NUMBER_1ST_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_1_DSN_NUMBER_1ST_MASK 0xFFFFFFFFu                // DSN_NUMBER_1ST[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_1_DSN_NUMBER_1ST_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_DSN_NUB2_1 (0x74041000 + 0x000082F8u)---

    DSN_NUMBER_2nd[31..0]        - (RO) PCI Express Device Serial Number
                                     This field contains the IEEE defined 64 bit extended unique identifier. This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_1_DSN_NUMBER_2nd_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_1_DSN_NUMBER_2nd_MASK 0xFFFFFFFFu                // DSN_NUMBER_2nd[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_1_DSN_NUMBER_2nd_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_STS_1 (0x74041000 + 0x00008480u)---

    PCIE_VENDOR_EINT_STS[31..0]  - (W1C) PCIe Vendor eint status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_1_PCIE_VENDOR_EINT_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_1_PCIE_VENDOR_EINT_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_1_PCIE_VENDOR_EINT_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_SET_1 (0x74041000 + 0x00008484u)---

    PCIE_VENDOR_EINT_SET[31..0]  - (W1S) PCIe Vendor eint set

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_1_PCIE_VENDOR_EINT_SET_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_1_PCIE_VENDOR_EINT_SET_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_SET[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_1_PCIE_VENDOR_EINT_SET_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_STS_0_1 (0x74041000 + 0x00008488u)---

    PCIE_VENDOR_STS[31..0]       - (RO) PCIe Vendor Status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_1_PCIE_VENDOR_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_1_PCIE_VENDOR_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_1_PCIE_VENDOR_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_STS_1_1 (0x74041000 + 0x0000848Cu)---

    PCIE_VENDOR_STS[31..0]       - (RO) PCIe Vendor Status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_1_PCIE_VENDOR_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_1_PCIE_VENDOR_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_1_PCIE_VENDOR_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_0_1 (0x74041000 + 0x00008490u)---

    PCIE_CFG_RSV_0[31..0]        - (RW) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_1_PCIE_CFG_RSV_0_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_1_PCIE_CFG_RSV_0_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_0[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_1_PCIE_CFG_RSV_0_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_1_1 (0x74041000 + 0x00008494u)---

    PCIE_CFG_RSV_1[31..0]        - (RW) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_1_PCIE_CFG_RSV_1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_1_PCIE_CFG_RSV_1_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_1[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_1_PCIE_CFG_RSV_1_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_2_1 (0x74041000 + 0x00008498u)---

    PCIE_CFG_RSV_2[31..0]        - (RO) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_1_PCIE_CFG_RSV_2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_1_PCIE_CFG_RSV_2_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_2[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_1_PCIE_CFG_RSV_2_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_LOG_1 (0x74041000 + 0x0000849Cu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Set when receive unexpected CPL, Clear the error record including ERR_HEADER and ERR_LOG to all 0
    CPL_EXTRA_TIME[8..1]         - (RO) Record the extra time after completion timeout
    RSVD1[31..9]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_RSVD1_MASK       0xFFFFFE00u                // RSVD1[31..9]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_RSVD1_SHFT       9u
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_CPL_EXTRA_TIME_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_CPL_EXTRA_TIME_MASK 0x000001FEu                // CPL_EXTRA_TIME[8..1]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_CPL_EXTRA_TIME_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ERR_STS_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ERR_STS_MASK     0x00000001u                // ERR_STS[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_1_ERR_STS_SHFT     0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER0_1 (0x74041000 + 0x000084A0u)---

    PCIE_ERROR_HEADER0[31..0]    - (RO) PCIe Error Header0 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_1_PCIE_ERROR_HEADER0_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_1_PCIE_ERROR_HEADER0_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER0[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_1_PCIE_ERROR_HEADER0_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER1_1 (0x74041000 + 0x000084A4u)---

    PCIE_ERROR_HEADER1[31..0]    - (RO) PCIe Error Header1 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_1_PCIE_ERROR_HEADER1_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_1_PCIE_ERROR_HEADER1_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER1[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_1_PCIE_ERROR_HEADER1_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER2_1 (0x74041000 + 0x000084A8u)---

    PCIE_ERROR_HEADER2[31..0]    - (RO) PCIe Error Header2 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_1_PCIE_ERROR_HEADER2_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_1_PCIE_ERROR_HEADER2_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER2[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_1_PCIE_ERROR_HEADER2_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER3_1 (0x74041000 + 0x000084ACu)---

    PCIE_ERROR_HEADER3[31..0]    - (RO) PCIe Error Header3 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_1_PCIE_ERROR_HEADER3_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_1_PCIE_ERROR_HEADER3_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER3[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_1_PCIE_ERROR_HEADER3_SHFT 0u

/* =====================================================================================

  ---PCIE_WCR_CFG_1 (0x74041000 + 0x000084B0u)---

    PCIE_WCR_CFG[31..0]          - (RW) PCIe Vendor Whole Chip Reset Config

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_1_PCIE_WCR_CFG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_1_PCIE_WCR_CFG_MASK  0xFFFFFFFFu                // PCIE_WCR_CFG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_1_PCIE_WCR_CFG_SHFT  0u

/* =====================================================================================

  ---PCIE_WCR_RB_1 (0x74041000 + 0x000084B4u)---

    PCIE_WCR_RB[31..0]           - (RO) PCIe Vendor Whole Chip Reset Read Back

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_1_PCIE_WCR_RB_ADDR    PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_1_PCIE_WCR_RB_MASK    0xFFFFFFFFu                // PCIE_WCR_RB[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_1_PCIE_WCR_RB_SHFT    0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_2_STS_1 (0x74041000 + 0x000084B8u)---

    PCIE_VENDOR_EINT_2_STS[31..0] - (W1C) PCIe Vendor eint 2 status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_1_PCIE_VENDOR_EINT_2_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_1_PCIE_VENDOR_EINT_2_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_2_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_1_PCIE_VENDOR_EINT_2_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_2_SET_1 (0x74041000 + 0x000084BCu)---

    PCIE_VENDOR_EINT_2_SET[31..0] - (W1S) PCIe Vendor eint 2 set

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_1_PCIE_VENDOR_EINT_2_SET_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_1_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_1_PCIE_VENDOR_EINT_2_SET_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_2_SET[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_1_PCIE_VENDOR_EINT_2_SET_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_0_2 (0x74041000 + 0x00010040u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_0_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_1_2 (0x74041000 + 0x00010044u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_1_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_2_2 (0x74041000 + 0x00010048u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_2_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_3_2 (0x74041000 + 0x0001004Cu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_3_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_4_2 (0x74041000 + 0x00010050u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_4_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_5_2 (0x74041000 + 0x00010054u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_5_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_6_2 (0x74041000 + 0x00010058u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_6_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_7_2 (0x74041000 + 0x0001005Cu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_7_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_8_2 (0x74041000 + 0x00010060u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_8_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_9_2 (0x74041000 + 0x00010064u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_9_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_CONF_AS_10_2 (0x74041000 + 0x00010068u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_2_RSVD_ADDR       PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_2_RSVD_MASK       0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_10_2_RSVD_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_11_2 (0x74041000 + 0x0001006Cu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_2_RSVD_ADDR       PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_2_RSVD_MASK       0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_11_2_RSVD_SHFT       0u

/* =====================================================================================

  ---PCIE_CONF_AS_12_2 (0x74041000 + 0x00010070u)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_2_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_2_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_12_2_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_13_2 (0x74041000 + 0x00010074u)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_2_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_2_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_13_2_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_14_2 (0x74041000 + 0x00010078u)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_2_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_2_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_14_2_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_AS_15_2 (0x74041000 + 0x0001007Cu)---

    pex_app_specific[31..0]      - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_2_pex_app_specific_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_2_pex_app_specific_MASK 0xFFFFFFFFu                // pex_app_specific[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_AS_15_2_pex_app_specific_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_CAP_2 (0x74041000 + 0x00010080u)---

    Pex_Cap_id[7..0]             - (RO) Capability ID
                                     This field must return a Capability ID of 10h indicating that this is a PCI Express Capability structure.
    Pex_Next_Ptr[15..8]          - (RO) Next Capability Pointer
                                     This field contains the offset to the next PCI Capability structure.
    Pex_Cap_Version[19..16]      - (RO) Capability Version
                                     Indicates PCI-SIG defined PCI Express Capability structure version number.
    Pex_Dev_Type[23..20]         - (RO) Device Type
                                     Indicates the specific type of this PCI Express Function.
                                     Note that different Functions in a multi-Function device can generally be of different types.
                                     Defined encodings are:
                                     - 0000b: PCI Express Endpoint
                                     - 0001b: Legacy PCI Express Endpoint
                                     - 0100b: Root Port of PCI Express Root Complex*
                                     - 0101b: Upstream Port of PCI Express Switch*
                                     - 0110b: Downstream Port of PCI Express Switch*
                                     - 0111b: PCI Express to PCI/PCI-X Bridge*
                                     - 1000b: PCI/PCI-X to PCI Express Bridge*
                                     - 1001b: Root Complex Integrated Endpoint
                                     - 1010b: Root Complex Event Collector
                                     *This value is only valid for Functions that implement a Type 01h PCI Configuration Space header.
                                     All other encodings are Reserved.
    Pex_Slot_Imp[24]             - (RO) Slot Implemented
                                     When Set, this bit indicates that the Link associated with this Port is connected to a slot (as compared to being connected to a system-integrated device or being disabled).
                                     This bit is valid for Downstream Ports. This bit is undefined for Upstream Ports.
    Pex_Msi_Num[29..25]          - (RO) Interrupt Message Number
                                     This field indicates which MSI vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.
                                     For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated.
                                     Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    RSVD[31..30]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_RSVD_MASK         0xC0000000u                // RSVD[31..30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_RSVD_SHFT         30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Msi_Num_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Msi_Num_MASK  0x3E000000u                // Pex_Msi_Num[29..25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Msi_Num_SHFT  25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Slot_Imp_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Slot_Imp_MASK 0x01000000u                // Pex_Slot_Imp[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Slot_Imp_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Dev_Type_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Dev_Type_MASK 0x00F00000u                // Pex_Dev_Type[23..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Dev_Type_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Cap_Version_MASK 0x000F0000u                // Pex_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Next_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Next_Ptr_MASK 0x0000FF00u                // Pex_Next_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Next_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Cap_id_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Cap_id_MASK   0x000000FFu                // Pex_Cap_id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_CAP_2_Pex_Cap_id_SHFT   0u

/* =====================================================================================

  ---PCIE_CONF_DEV_CAP_2 (0x74041000 + 0x00010084u)---

    Dcr_Max_Payload_Sup[2..0]    - (RO) Max Payload Size Supported
                                     This field indicates the maximum payload size that the Function can support for TLPs.
                                     Defined encodings are:
                                     - 000b: 128 bytes max payload size
                                     - 001b: 256 bytes max payload size
                                     - 010b: 512 bytes max payload size
                                     - 011b: 1024 bytes max payload size
                                     - 100b: 2048 bytes max payload size
                                     - 101b: 4096 bytes max payload size
                                     - otherwise: Reserved
                                     The Functions of a multi-Function device are permitted to report different values for this field.
    Dcr_Ph_Fun_Sup[4..3]         - (RO) Phantom Functions Supported
                                     This field indicates the support for use of unclaimed Function Numbers to extend the number of outstanding transactions allowed by logically combining unclaimed Function Numbers (called Phantom Functions) with the Tag identifier.
                                     With every Function in an ARI Device, the Phantom Functions Supported field must be set to 00b. The remainder of this field description applies only to non-ARI multi-Function devices.
                                     This field indicates the number of most significant bits of the Function Number portion of Requester ID that are logically combined with the Tag identifier.
                                     
                                     Defined encodings are:
                                     - 00b: No Function Number bits are used for Phantom Functions. Multi-Function devices are permitted to implement up to 8 independent Functions.
                                     - 01b: The most significant bit of the Function number in Requester ID is used for Phantom Functions; a multi-Function device is permitted to implement Functions 0-3. Functions 0, 1, 2, and 3 are permitted to use Function Numbers 4, 5, 6, and 7 respectively as Phantom Functions.
                                     - 10b: The two most significant bits of Function Number in Requester ID are used for Phantom Functions; a multi-Function device is permitted to implement Functions 0-1. Function 0 is permitted to use Function Numbers 2, 4, and 6 for Phantom Functions. Function 1 is permitted to use Function Numbers 3, 5, and 7 as Phantom Functions.
                                     - 11b: All 3 bits of Function Number in Requester ID used for Phantom Functions. The device must have a single Function 0 that is permitted to use all other Function Numbers as Phantom Functions.
                                     
                                     Note that Phantom Function support for the Function must be enabled by the Phantom Functions Enable field in the Device Control register before the Function is permitted to use the
                                     Function Number field in the Requester ID for Phantom Functions.
    Dcr_Ext_Tag_Sup[5]           - (RO) Extended Tag Filed Supported
                                     This bit indicates the maximum supported size of the Tag field as a Requester.
                                     Defined encodings are:
                                     - 0b: 5-bit Tag field supported
                                     - 1b: 8-bit Tag field supported
                                     
                                     Note that 8-bit Tag field generation must be enabled by the Extended Tag Field Enable bit in the Device Control register of the Requester Function before 8-bit Tags can be generated by the Requester.
    Dcr_L0s_Acceptable_Lat[8..6] - (RO) Endpoint L0s Acceptable Latency
                                     This field indicates the acceptable total latency that an Endpoint can withstand due to the transition from L0s state to the L0 state. It is essentially an indirect measure of the Endpoints internal buffering.
                                     Power management software uses the reported L0s Acceptable Latency number to compare against the L0s exit latencies reported by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L0s entry can be used with no loss of performance.
                                     
                                     Defined encodings are:
                                     - 000b: Maximum of 64 ns
                                     - 001b: Maximum of 128 ns
                                     - 010b: Maximum of 256 ns
                                     - 011b: Maximum of 512 ns
                                     - 100b: Maximum of 1 us
                                     - 101b: Maximum of 2 us
                                     - 110b: Maximum of 4 us
                                     - 111b: No limit
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 000b.
    Dcr_L1_Acceptable_Lat[11..9] - (RO) Endpoint L1 Acceptable Latency
                                     This field indicates the acceptable latency that an Endpoint can withstand due to the transition from L1 state to the L0 state. It is essentially an indirect measure of the Endpoints internal buffering.
                                     Power management software uses the reported L1 Acceptable Latency number to compare against the L1 Exit Latencies reported (see below) by all components comprising the data path from this Endpoint to the Root Complex Root Port to determine whether ASPM L1 entry can be used with no loss of performance.
                                     
                                     Defined encodings are:
                                     - 000b: Maximum of 1 us
                                     - 001b: Maximum of 2 us
                                     - 010b: Maximum of 4 us
                                     - 011b: Maximum of 8 us
                                     - 100b: Maximum of 16 us
                                     - 101b: Maximum of 32 us
                                     - 110b: Maximum of 64 us
                                     - 111b: No limit
                                     For Functions other than Endpoints, this field is Reserved and must be hardwired to 000b.
    Undefined[14..12]            - (RO) Undefined
    Dcr_Rbe_Rpt[15]              - (RO) Role Based Error Reporting
                                     When Set, this bit indicates that the Function implements the functionality originally defined in the Error Reporting ECN for PCI Express Base Specification, Revision 1.0a, and later incorporated into PCI Express Base Specification, Revision 1.1.
                                     
                                     This bit must be Set by all Functions conforming to the ECN, PCI Express Base Specification, Revision 1.1., or subsequent PCI Express Base Specification revisions.
    RSVD1[17..16]                - (RO) Reserved
    Dcr_Slot_Pwr[25..18]         - (RO) Captured Slot Power Limit Value
                                     In combination with the Captured Slot Power Limit Scale value, specifies the upper limit on power available to the adapter. 
                                     Power limit (in Watts) is calculated by multiplying the value in this field by the value in the Captured Slot Power Limit Scale field except when the Captured Slot Power Limit Scale field equals 00b (1.0x) and the Captured Slot Power Limit Value exceeds EFh, then alternative encodings are used.
                                     
                                     This value is set by the Set_Slot_Power_Limit Message or hardwired to 00h.
                                     The default value is 00h.
    Dcr_Slot_Pwr_Scale[27..26]   - (RO) Captured Slot Power Limit Scale
                                     Specifies the scale used for the Slot Power Limit Value.
                                     Range of Values:
                                     - 00b: 1.0x
                                     - 01b: 0.1x
                                     - 10b: 0.01x
                                     - 11b: 0.001x
                                     This value is set by the Set_Slot_Power_Limit Message or hardwired to 00b.
                                     The default value is 00b.
    Dcr_Flr[28]                  - (RO) Function Level Reset Capability
                                     A value of 1b indicates the Function supports the optional Function Level Reset mechanism.
                                     This bit applies to Endpoints only. For all other Function types this bit must be hardwired to 0b.
    RSVD2[31..29]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_RSVD2_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_RSVD2_MASK    0xE0000000u                // RSVD2[31..29]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_RSVD2_SHFT    29u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Flr_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Flr_MASK  0x10000000u                // Dcr_Flr[28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Flr_SHFT  28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Slot_Pwr_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Slot_Pwr_Scale_MASK 0x0C000000u                // Dcr_Slot_Pwr_Scale[27..26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Slot_Pwr_Scale_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Slot_Pwr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Slot_Pwr_MASK 0x03FC0000u                // Dcr_Slot_Pwr[25..18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Slot_Pwr_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_RSVD1_MASK    0x00030000u                // RSVD1[17..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_RSVD1_SHFT    16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Rbe_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Rbe_Rpt_MASK 0x00008000u                // Dcr_Rbe_Rpt[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Rbe_Rpt_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Undefined_MASK 0x00007000u                // Undefined[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Undefined_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_L1_Acceptable_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_L1_Acceptable_Lat_MASK 0x00000E00u                // Dcr_L1_Acceptable_Lat[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_L1_Acceptable_Lat_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_L0s_Acceptable_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_L0s_Acceptable_Lat_MASK 0x000001C0u                // Dcr_L0s_Acceptable_Lat[8..6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_L0s_Acceptable_Lat_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Ext_Tag_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Ext_Tag_Sup_MASK 0x00000020u                // Dcr_Ext_Tag_Sup[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Ext_Tag_Sup_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Ph_Fun_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Ph_Fun_Sup_MASK 0x00000018u                // Dcr_Ph_Fun_Sup[4..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Ph_Fun_Sup_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Max_Payload_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Max_Payload_Sup_MASK 0x00000007u                // Dcr_Max_Payload_Sup[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CAP_2_Dcr_Max_Payload_Sup_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV_CTL_STS_2 (0x74041000 + 0x00010088u)---

    Dcr_Cor_Rpt[0]               - (RW) Correctable Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_COR Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Nfat_Rpt[1]              - (RW) Non-Fatal Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_NONFATAL Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Fat_Rpt[2]               - (RW) Fatal Error Reporting Enable
                                     This bit, in conjunction with other bits, controls sending ERR_FATAL Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_Ur_Rpt[3]                - (RW) Unsupported Request Reporting Enable
                                     This bit, in conjunction with other bits, controls the signaling of Unsupported
                                     Request Errors by sending error Messages.
                                     For a multi-Function device, this bit controls error reporting for each Function from point-of-view of the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dcr_RO[4]                    - (RW) Enable Relaxed Ordering
                                     If this bit is Set, the Function is permitted to set the Relaxed Ordering bit in the Attributes field of transactions it initiates that do not require strong write ordering.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the Relaxed Ordering attribute in transactions it initiates as a Requester.
                                     
                                     Default value of this bit is 1b.
    Dcr_Max_Payload[7..5]        - (RW) Max Payload Size
                                     This field sets maximum TLP payload size for the Function. As a Receiver, the Function must handle TLPs as large as the set value. As a Transmitter, the Function must not generate TLPs exceeding the set value. Permissible values that can be programmed are indicated by the
                                     Max_Payload_Size Supported field in the Device Capabilities register.
                                     
                                     Defined encodings for this field are:
                                     - 000b: 128 bytes max payload size
                                     - 001b: 256 bytes max payload size
                                     - 010b: 512 bytes max payload size
                                     - 011b: 1024 bytes max payload size
                                     - 100b: 2048 bytes max payload size
                                     - 101b: 4096 bytes max payload size
                                     - 110b: Reserved
                                     - 111b: Reserved
                                     Functions that support only the 128-byte max payload size are permitted to hardwire this field to 000b.
                                     System software is not required to program the same value for this field for all the Functions of a multi-Function device.
                                     
                                     Default value of this field is 000b.
    Dcr_Ext_Tag[8]               - (RW) Extended Tag Field Enable
                                     When Set, this bit enables a Function to use an 8-bit Tag field as a Requester.
                                     If the bit is Clear, the Function is restricted to a 5-bit Tag field.
    Dcr_Ph_Fun[9]                - (RO) Phantom Functions Enable
                                     When Set, this bit enables a Function to use unclaimed Functions as Phantom Functions to extend the number of outstanding transaction identifiers.
                                     If the bit is Clear, the Function is not allowed to use Phantom Functions.
                                     
                                     Default value of this bit is 0b
    Dcr_Aux_PM[10]               - (RW) Aux Power PM Enable
                                     When Set this bit, enables a Function to draw Aux power independent of PME Aux power. Functions that require Aux power on legacy operating systems should continue to indicate PME Aux power requirements.
                                     Aux power is allocated as requested in the Aux_Current field of the Power Management Capabilities register (PMC), independent of the PME_En bit in the Power Management Control/Status register (PMCSR).
                                     For multi-Function devices, a component is allowed to draw Aux power if at least one of the Functions has this bit set.
                                     
                                     Note: Functions that consume Aux power must preserve the value of this sticky register when Aux power is available. In such Functions, this bit is not modified by Conventional Reset.
    Dcr_No_Snoop[11]             - (RW) Enable No Snoop
                                     If this bit is Set, the Function is permitted to Set the No Snoop bit in the Requester Attributes of transactions it initiates that do not require hardware enforced cache coherency.
                                     Note that setting this bit to 1b should not cause a Function to Set the No Snoop attribute on all
                                     transactions that it initiates.
                                     Even when this bit is Set, a Function is only permitted to Set the No Snoop attribute on a transaction when it can guarantee that the address of the transaction is not stored in any cache in the system.
                                     
                                     Default value of this bit is 1b.
    Dcr_Max_Read_Request[14..12] - (RW) Max Read Request Size
                                     This field sets the maximum Read Request size for the Function as a Requester. The Function must not generate Read Requests with a size exceeding the set value.
                                     
                                     Defined encodings for this field are:
                                     - 000b: 128 bytes maximum Read Request size
                                     - 001b: 256 bytes maximum Read Request size
                                     - 010b: 512 bytes maximum Read Request size
                                     - 011b: 1024 bytes maximum Read Request size
                                     - 100b: 2048 bytes maximum Read Request size
                                     - 101b: 4096 bytes maximum Read Request size
                                     - 110b: Reserved
                                     - 111b: Reserved
                                     
                                     Functions that do not generate Read Requests larger than 128 bytes and Functions that do not generate Read Requests on their own behalf are permitted to implement this field as Read Only (RO) with a value of 000b.
    Ep_Flr[15]                   - (RW) Bridge Configuration Retry Enable
                                     PCI Express to PCI/PCI-X Bridges:
                                     Bridge Configuration Retry Enable - When Set, this bit enables PCI Express to PCI/PCI-X bridges to return Configuration Request Retry Status (CRS) in response to Configuration Requests that target devices below the bridge. Refer to the PCI Express to PCI/PCI-X Bridge Specification, Revision 1.0 for further details.
                                     Endpoints with Function Level Reset Capability set to 1b:
                                     Initiate Function Level Reset - A write of 1b initiates Function Level Reset to the Function.
                                     All others:
                                     Reserved - Must hardwire the bit to 0b.
    Dsr_Cor_Det[16]              - (W1C) Correctable Error Detected
                                     This bit indicates status of correctable errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Correctable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Nfat_Det[17]             - (W1C) Non Fatal Error Detected
                                     This bit indicates status of Nonfatal errors detected. Errors are logged in this register
                                     regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each
                                     Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Fat_Det[18]              - (W1C) Fatal-Error Detected
                                     This bit indicates status of Fatal errors detected. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     For Functions supporting Advanced Error Handling, errors are logged in this register regardless of the settings of the Uncorrectable Error Mask register.
                                     
                                     Default value of this bit is 0b.
    Dsr_Ur_Det[19]               - (W1C) Unsupported Request Detected
                                     This bit indicates that the Function received an Unsupported Request. Errors are logged in this register regardless of whether error reporting is enabled or not in the Device Control register.
                                     For a multi-Function device, each Function indicates status of errors as perceived by the respective Function.
                                     
                                     Default value of this bit is 0b.
    Dsr_Aux_Det[20]              - (RO) AUX Power Detected
                                     Functions that require Aux power report this bit as Set if Aux power is detected by the Function.
    Dsr_Trn_Pending[21]          - (RO) Transactions Pending
                                     When Set, this bit indicates that the Function has issued Non-Posted Requests that have not been completed.
                                     A Function reports this bit cleared only when all outstanding Non-Posted Requests have completed or have been terminated by the Completion Timeout mechanism.
                                     This bit must also be cleared upon the completion of an FLR.
    RSVD1[31..22]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_RSVD1_MASK 0xFFC00000u                // RSVD1[31..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_RSVD1_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Trn_Pending_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Trn_Pending_MASK 0x00200000u                // Dsr_Trn_Pending[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Trn_Pending_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Aux_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Aux_Det_MASK 0x00100000u                // Dsr_Aux_Det[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Aux_Det_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Ur_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Ur_Det_MASK 0x00080000u                // Dsr_Ur_Det[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Ur_Det_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Fat_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Fat_Det_MASK 0x00040000u                // Dsr_Fat_Det[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Fat_Det_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Nfat_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Nfat_Det_MASK 0x00020000u                // Dsr_Nfat_Det[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Nfat_Det_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Cor_Det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Cor_Det_MASK 0x00010000u                // Dsr_Cor_Det[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dsr_Cor_Det_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Ep_Flr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Ep_Flr_MASK 0x00008000u                // Ep_Flr[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Ep_Flr_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Max_Read_Request_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Max_Read_Request_MASK 0x00007000u                // Dcr_Max_Read_Request[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Max_Read_Request_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_No_Snoop_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_No_Snoop_MASK 0x00000800u                // Dcr_No_Snoop[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_No_Snoop_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Aux_PM_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Aux_PM_MASK 0x00000400u                // Dcr_Aux_PM[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Aux_PM_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ph_Fun_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ph_Fun_MASK 0x00000200u                // Dcr_Ph_Fun[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ph_Fun_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ext_Tag_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ext_Tag_MASK 0x00000100u                // Dcr_Ext_Tag[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ext_Tag_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Max_Payload_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Max_Payload_MASK 0x000000E0u                // Dcr_Max_Payload[7..5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Max_Payload_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_RO_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_RO_MASK 0x00000010u                // Dcr_RO[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_RO_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ur_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ur_Rpt_MASK 0x00000008u                // Dcr_Ur_Rpt[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Ur_Rpt_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Fat_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Fat_Rpt_MASK 0x00000004u                // Dcr_Fat_Rpt[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Fat_Rpt_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Nfat_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Nfat_Rpt_MASK 0x00000002u                // Dcr_Nfat_Rpt[1]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Nfat_Rpt_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Cor_Rpt_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Cor_Rpt_MASK 0x00000001u                // Dcr_Cor_Rpt[0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV_CTL_STS_2_Dcr_Cor_Rpt_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK_CAP_2 (0x74041000 + 0x0001008Cu)---

    Lcr_Max_Speed[3..0]          - (RO) Max Link Speed
                                     This field indicates the maximum Link speed of the associated Port.
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the maximum Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: 2.5GT
                                     - 0010b: 5GT
                                     - 0011b: 8GT
                                     - 0100b: 16GT
                                     - 0101b: Reserved
                                     - 0110b: Reserved
                                     - 0111b: Reserved
                                     All other encodings are reserved.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions
    Lcr_Max_Width[9..4]          - (RO) Maximum Link Width
                                     This field indicates the maximum Link width (xN - corresponding to N Lanes) implemented by the component. This value is permitted to exceed the number of Lanes routed to the slot (Downstream Port), adapter connector (Upstream Port), or in the case of component-to-component connections, the actual wired connection width.
                                     
                                     Defined encodings are:
                                     - 00 0000b: Reserved
                                     - 00 0001b: x1
                                     - 00 0010b: x2
                                     - 00 0100b: x4
                                     - 00 1000b: x8
                                     - 00 1100b: x12
                                     - 01 0000b: x16
                                     - 10 0000b: x32
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_Aspm_Sup[11..10]         - (RO) ASPM Support
                                     This field indicates the level of ASPM supported on the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00b: No ASPM Support
                                     - 01b: L0s Supported
                                     - 10b: L1 Supported
                                     - 11b: L0s and L1 Supported
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_L0s_Exit_Lat[14..12]     - (RO) L0s Exit Latency
                                     This field indicates the L0s exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from L0s to L0.
                                     
                                     Defined encodings are:
                                     - 000b: Less than 64 ns
                                     - 001b: 64 ns to less than 128 ns
                                     - 010b: 128 ns to less than 256 ns
                                     - 011b: 256 ns to less than 512 ns
                                     - 100b: 512 ns to less than 1 us
                                     - 101b: 1 us to less than 2 us
                                     - 110b: 2 us-4 us
                                     - 111b: More than 4 us
                                     Note that exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_L1_Exit_Lat[17..15]      - (RO) L1 Exit Latency
                                     This field indicates the L1 exit latency for the given PCI Express Link. The value reported indicates the length of time this Port requires to complete transition from ASPM L1 to L0.
                                     If ASPM L1 is not supported, the value is undefined.
                                     
                                     Defined encodings are:
                                     - 000b: Less than 1us
                                     - 001b: 1 us to less than 2 us
                                     - 010b: 2 us to less than 4 us
                                     - 011b: 4 us to less than 8 us
                                     - 100b: 8 us to less than 16 us
                                     - 101b: 16 us to less than 32 us
                                     - 110b: 32 us-64 us
                                     - 111b: More than 64 us
                                     Note that exit latencies may be influenced by PCI Express reference clock configuration depending upon whether a component uses a common or separate reference clock.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr_Clock_PM_Cap[18]         - (RO) Clock Power Management
                                     For Upstream Ports, a value of 1b in this bit indicates that the component tolerates the removal of any reference clock(s) via the clock request (CLKREQ#) mechanism when the Link is in the L1 and L2L3 Ready Link states.
                                     A value of 0b indicates the component does not have this capability and that reference clock(s) must not be removed in these Link states.
                                     This Capability is applicable only in form factors that support clock request (CLKREQ#) capability.
                                     For a multi-Function device associated with an Upstream Port, each Function indicates its capability independently. Power Management configuration software must only permit reference clock removal if all Functions of the multi-Function device indicate a 1b in this bit.
                                     For ARI Devices, all Functions must indicate the same value in this bit.
    Lcr_Sup_Down_Rpt_Cap[19]     - (RO) Surprise Down Error Reporting Capable
                                     For a Downstream Port, this bit must be Set if the component supports the optional capability of detecting and reporting a Surprise Down error condition.
                                     
                                     For Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.
    Lcr_Dll_Rpt_Cap[20]          - (RO) Data Link Layer Link Active Reporting Capable
                                     For a Downstream Port, this bit must be hardwired to 1b if the component supports the optional capability of reporting the DL_Active state of the Data Link Control and Management State Machine.
                                     For Upstream Ports and components that do not support this optional capability, this bit must be hardwired to 0b.
    Lcr_Lbw_Cap[21]              - (RO) Link Bandwidth Notification Capability
                                     A value of 1b indicates support for the Link Bandwidth Notification status and interrupt mechanisms.
                                     This capability is required for all Root Ports and Switch Downstream Ports supporting Links wider than x1 and/or multiple Link speeds.
                                     This field is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
    Lcr_Aspm_Com[22]             - (RO) ASPM Optionally Compliance
                                     This bit must be set to 1b in all Functions. Components implemented against certain earlier versions of this specification will have this bit set to 0b.
                                     Software is permitted to use the value of this bit to help determine whether to enable ASPM or whether to run ASPM compliance tests.
    RESERVED23[23]               - (RO) Reserved bits
    Lcr_Port_Num[31..24]         - (RO) Port Number
                                     This field indicates the PCI Express Port number for the given PCI Express Link.
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Port_Num_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Port_Num_MASK 0xFF000000u                // Lcr_Port_Num[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Port_Num_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Aspm_Com_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Aspm_Com_MASK 0x00400000u                // Lcr_Aspm_Com[22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Aspm_Com_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Lbw_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Lbw_Cap_MASK 0x00200000u                // Lcr_Lbw_Cap[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Lbw_Cap_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Dll_Rpt_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Dll_Rpt_Cap_MASK 0x00100000u                // Lcr_Dll_Rpt_Cap[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Dll_Rpt_Cap_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Sup_Down_Rpt_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Sup_Down_Rpt_Cap_MASK 0x00080000u                // Lcr_Sup_Down_Rpt_Cap[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Sup_Down_Rpt_Cap_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Clock_PM_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Clock_PM_Cap_MASK 0x00040000u                // Lcr_Clock_PM_Cap[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Clock_PM_Cap_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_L1_Exit_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_L1_Exit_Lat_MASK 0x00038000u                // Lcr_L1_Exit_Lat[17..15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_L1_Exit_Lat_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_L0s_Exit_Lat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_L0s_Exit_Lat_MASK 0x00007000u                // Lcr_L0s_Exit_Lat[14..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_L0s_Exit_Lat_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Aspm_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Aspm_Sup_MASK 0x00000C00u                // Lcr_Aspm_Sup[11..10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Aspm_Sup_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Max_Width_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Max_Width_MASK 0x000003F0u                // Lcr_Max_Width[9..4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Max_Width_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Max_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Max_Speed_MASK 0x0000000Fu                // Lcr_Max_Speed[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CAP_2_Lcr_Max_Speed_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK_CTL_STS_2 (0x74041000 + 0x00010090u)---

    Lcr_Aspm_Ctl[1..0]           - (RW) ASPM Control
                                     This field controls the level of ASPM enabled on the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00b: Disabled
                                     - 01b: L0s Entry Enabled
                                     - 10b: L1 Entry Enabled
                                     - 11b: L0s and L1 Entry Enabled
                                     
                                     Note: L0s Entry Enabled enables the Transmitter to enter L0s.
                                     If L0s is supported, the Receiver must be capable of entering L0s even when the Transmitter is disabled from entering L0s (00b or 10b).
                                     ASPM L1 must be enabled by software in the Upstream component on a Link prior to enabling ASPM L1 in the Downstream component on that Link.
                                     When disabling ASPM L1, software must disable ASPM L1 in the Downstream component on a Link prior to disabling ASPM L1 in the
                                     Upstream component on that Link. ASPM L1 must only be enabled on the Downstream component if both components on a Link support ASPM L1.
                                     
                                     For multi-Function devices (including ARI Devices), it is recommended that software program the same value for this field in all Functions. For non-ARI multi-Function devices, only capabilities enabled in all Functions are enabled for the component as a whole.
                                     
                                     Default value of this field is 00b unless otherwise required by a particular form factor.
    RSVD1[2]                     - (RO) Reserved
    Lcr_Rcb[3]                   - (RW) RCB
                                     Optionally Set by configuration software to indicate the RCB value of the Root Port Upstream from the Endpoint or Bridge.
                                     
                                     Defined encodings are:
                                     - 0b: 64 byte
                                     - 1b: 128 byte
                                     Configuration software must only Set this bit if the Root Port Upstream from the Endpoint or Bridge reports an RCB value of 128 bytes (a value of 1b in the Read Completion Boundary bit).
                                     
                                     Default value of this bit is 0b.
                                     Functions that do not implement this feature must hardwire the bit to 0b
    link_dis[4]                  - (RO) Link Disable
                                     This bit disables the Link by directing the LTSSM to the Disabled state when Set;
                                     this bit is Reserved on Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream
                                     Ports of Switches.
                                     Writes to this bit are immediately reflected in the value read from the bit, regardless of actual Link state.
                                     After clearing this bit, software must honor timing requirements defined in PCIe Spec. with respect to the first Configuration Read following a Conventional Reset.
                                     Default value of this bit is 0b.
    retrain_link[5]              - (RO) Link Retrain
                                     A write of 1b to this bit initiates Link retraining by directing the Physical Layer LTSSM to the Recovery state. If the LTSSM is already in Recovery or Configuration, re-entering Recovery is permitted but not required. Reads of this bit always return 0b.
                                     It is permitted to write 1b to this bit while simultaneously writing modified values to other fields in this register. If the LTSSM is not already in Recovery or Configuration, the resulting Link training must use the modified values. If the LTSSM is already in Recovery or Configuration, the modified values are not required to affect the Link training that's already in progress.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     This bit always returns 0b when read.
    Lcr_Com_clock[6]             - (RW) Common Clock Configuration
                                     When Set, this bit indicates that this component and the component at the opposite end of this Link are operating with a distributed common reference clock.
                                     
                                     A value of 0b indicates that this component and the component at the opposite end of this Link are operating with asynchronous reference clock.
                                     
                                     For non-ARI multi-Function devices, software must program the same value for this bit in all Functions. If not all Functions are Set, then the component must as a whole assume that its reference clock is not common with the Upstream component.
                                     
                                     Components utilize this common clock configuration information to report the correct L0s and L1 Exit Latencies.
                                     
                                     After changing the value in this bit in both components on a Link, software must trigger the Link to retrain by writing a 1b to the Retrain Link bit of the Downstream Port.
                                     
                                     Default value of this bit is 0b.
    Lcr_Ext_Sync[7]              - (RW) Extended Synch
                                     When Set, this bit forces the transmission of additional Ordered Sets when exiting the L0s state and when in the Recovery state.
                                     This mode provides external devices (e.g., logic analyzers) monitoring the Link time to achieve bit and Symbol lock before the Link enters the L0 state and resumes communication.
                                     
                                     For multi-Function devices if any Function has this bit Set, then the component must transmit the additional Ordered Sets when exiting L0s or when in Recovery.
                                     
                                     Default value for this bit is 0b.
    Lcr_Clock_PM[8]              - (RW) Enable Clock Power Management
                                     Applicable only for Upstream Ports and with form factors that support a Clock
                                     Request (CLKREQ#) mechanism, this bit operates as follows:
                                     - 0b: Clock power management is disabled and device must hold CLKREQ# signal low.
                                     - 1b: When this bit is Set, the device is permitted to use CLKREQ# signal to power manage Link clock according to protocol defined in appropriate form factor specification.
                                     
                                     For a non-ARI multi-Function device, power-management configuration software must only Set this bit if all Functions of the multi-Function device indicate a 1b in the Clock Power Management bit of the Link Capabilities register. The component is permitted to use the CLKREQ# signal to power manage Link clock only if this bit is Set for all Functions.
                                     
                                     Downstream Ports and components that do not support Clock Power Management (as indicated by a 0b value in the Clock Power Management bit of the Link Capabilities register) must hardwire this bit to 0b.
                                     
                                     Default value of this bit is 0b, unless specified otherwise by the form factor specification.
    hw_auto_width_dis[9]         - (RW) Hardware Autonomous Width Disable
                                     When Set, this bit disables hardware from changing the Link width for reasons other than attempting to correct unreliable Link operation by reducing Link width.
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RW, and only Function 0 controls the component Link behavior. In all other Functions of that device, this bit is of type RsvdP.
    lnk_bdw_mng_en[10]           - (RO) Link Bandwidth Management Interrupt Enable
                                     When Set, this bit enables the generation of an interrupt to indicate that the Link Bandwidth Management Status bit has been Set.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    lnk_auto_bdw_en[11]          - (RO) Link Autonomous Bandwidth Interrupt Enable
                                     When Set, this bit enables the generation of an interrupt to indicate that the Link Autonomous Bandwidth Status bit has been Set.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
                                     Functions that do not implement the Link Bandwidth Notification Capability must hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    RSVD2[13..12]                - (RO) Reserved
    drs_signaling_ctrl[15..14]   - (RO) DRS Signaling Control - Indicates the mechanism used to report reception of a DRS message. Must be
                                     implemented for Downstream Ports with the DRS Supported bit Set in the Link Capabilities 2 Register.
                                     Encodings are:
                                     00b: DRS not Reported: If DRS Supported is Set, receiving a DRS Message will set DRS Message
                                     Received in the Link Status 2 Register but will otherwise have no effect
                                     01b: DRS Interrupt Enabled: If the DRS Message Received bit in the Link Status 2 Register transitions
                                     from 0 to 1, and either MSI or MSI-X is enabled, an MSI or MSI-X interrupt is generated
                                     using the vector in Interrupt Message Number (Section 7.5.3.2 )
                                     10b: DRS to FRS Signaling Enabled: If the DRS Message Received bit in the Link Status 2 Register
                                     transitions from 0 to 1, the Port must send an FRS Message Upstream with the FRS
                                     Reason field set to DRS Message Received.
                                     Behavior is undefined if this field is set to 10b and the FRS Supported bit in the Device Capabilities 2
                                     Register is Clear.
                                     Behavior is undefined if this field is set to 11b.
                                     Downstream Ports with the DRS Supported bit Clear in the Link Capabilities 2 Register must hardwire
                                     this field to 00b.
                                     This field is Reserved for Upstream
    Lsr_Link_Speed[19..16]       - (RO) Current Link Speed
                                     This field indicates the negotiated Link speed of the given PCI Express Link.
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the current Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: 2.5GT
                                     - 0010b: 5GT
                                     - 0011b: 8GT
                                     - 0100b: 16GT
                                     - 0101b: Reserved
                                     - 0110b: Reserved
                                     - 0111b: Reserved
                                     
                                     All other encodings are Reserved.
                                     The value in this field is undefined when the Link is not up.
    Lsr_Link_Width[25..20]       - (RO) Negotiated Link Width
                                     This field indicates the negotiated width of the given PCI Express Link.
                                     
                                     Defined encodings are:
                                     - 00 0001b: x1
                                     - 00 0010b: x2
                                     - 00 0100b: x4
                                     - 00 1000b: x8
                                     - 00 1100b: x12
                                     - 01 0000b: x16
                                     - 10 0000b: x32
                                     All other encodings are Reserved. The value in this field is undefined when the Link is not up.
    Undefined[26]                - (RO) Undefined
    Link_Training[27]            - (RO) Link Training
                                     This read-only bit indicates that the Physical Layer LTSSM is in the Configuration or Recovery state, or that 1b was written to the Retrain Link bit but Link training has not yet begun. Hardware clears this bit when the LTSSM exits the Configuration/Recovery state.
                                     This bit is not applicable and Reserved for Endpoints, PCI Express to PCI/PCI-X bridges, and Upstream Ports of Switches.
    Lsr_Slot_Clock[28]           - (RO) Slot Clock Configuration
                                     This bit indicates that the component uses the same physical reference clock that the platform provides on the connector.
                                     If the device uses an independent clock irrespective of the presence of a reference clock on the connector, this bit must be clear.
                                     
                                     For a multi-Function device, each Function must report the same value for this bit.
    Lsr_Dll_Act[29]              - (RO) Data Link Layer Lin Active
                                     This bit indicates the status of the Data Link Control and Management State Machine. It returns a 1b to indicate the DL_Active state, 0b otherwise.
                                     
                                     This bit must be implemented if the Data Link Layer Link Active Reporting Capable bit is 1b. Otherwise, this bit must be hardwired to 0b.
    lnk_bdw_mng_sts[30]          - (W1C) Link Bandwidth Management Status
                                     This bit is Set by hardware to indicate that either of the following has occurred without the Port transitioning through DL_Down status:
                                     A Link retraining has completed following a write of 1b to the Retrain Link bit.
                                     Note: This bit is Set following any write of 1b to the Retrain Link bit, including when the Link is in the process of retraining for some other reason.
                                     Hardware has changed Link speed or width to attempt to correct unreliable Link operation, either through an LTSSM timeout or a higher level process.
                                     This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was not indicated as an autonomous change.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.
    lnk_auto_bdw_sts[31]         - (W1C) Link Autonomous Bandwidth Status
                                     This bit is Set by hardware to indicate that hardware has autonomously changed Link speed or width, without the Port transitioning through DL_Down status, for reasons other than to attempt to correct unreliable Link operation.
                                     This bit must be set if the Physical Layer reports a speed or width change was initiated by the Downstream component that was indicated as an autonomous change.
                                     This bit is not applicable and is Reserved for Endpoints, PCI Express-to-PCI/PCI-X bridges, and Upstream Ports of Switches.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_auto_bdw_sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_auto_bdw_sts_MASK 0x80000000u                // lnk_auto_bdw_sts[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_auto_bdw_sts_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_bdw_mng_sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_bdw_mng_sts_MASK 0x40000000u                // lnk_bdw_mng_sts[30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_bdw_mng_sts_SHFT 30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Dll_Act_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Dll_Act_MASK 0x20000000u                // Lsr_Dll_Act[29]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Dll_Act_SHFT 29u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Slot_Clock_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Slot_Clock_MASK 0x10000000u                // Lsr_Slot_Clock[28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Slot_Clock_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Link_Training_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Link_Training_MASK 0x08000000u                // Link_Training[27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Link_Training_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Undefined_MASK 0x04000000u                // Undefined[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Undefined_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Link_Width_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Link_Width_MASK 0x03F00000u                // Lsr_Link_Width[25..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Link_Width_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Link_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Link_Speed_MASK 0x000F0000u                // Lsr_Link_Speed[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lsr_Link_Speed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_drs_signaling_ctrl_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_drs_signaling_ctrl_MASK 0x0000C000u                // drs_signaling_ctrl[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_drs_signaling_ctrl_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_RSVD2_MASK 0x00003000u                // RSVD2[13..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_RSVD2_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_auto_bdw_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_auto_bdw_en_MASK 0x00000800u                // lnk_auto_bdw_en[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_auto_bdw_en_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_bdw_mng_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_bdw_mng_en_MASK 0x00000400u                // lnk_bdw_mng_en[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_lnk_bdw_mng_en_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_hw_auto_width_dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_hw_auto_width_dis_MASK 0x00000200u                // hw_auto_width_dis[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_hw_auto_width_dis_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Clock_PM_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Clock_PM_MASK 0x00000100u                // Lcr_Clock_PM[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Clock_PM_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Ext_Sync_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Ext_Sync_MASK 0x00000080u                // Lcr_Ext_Sync[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Ext_Sync_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Com_clock_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Com_clock_MASK 0x00000040u                // Lcr_Com_clock[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Com_clock_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_retrain_link_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_retrain_link_MASK 0x00000020u                // retrain_link[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_retrain_link_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_link_dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_link_dis_MASK 0x00000010u                // link_dis[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_link_dis_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Rcb_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Rcb_MASK 0x00000008u                // Lcr_Rcb[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Rcb_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_RSVD1_MASK 0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_RSVD1_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Aspm_Ctl_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Aspm_Ctl_MASK 0x00000003u                // Lcr_Aspm_Ctl[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK_CTL_STS_2_Lcr_Aspm_Ctl_SHFT 0u

/* =====================================================================================

  ---PCIE_SLOT_CAP_2 (0x74041000 + 0x00010094u)---

    PCIE_SLOT_CAP[31..0]         - (RO) Slot Capabilities Register
                                     The Slot Capabilities register identifies PCI Express slot specific capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_2_PCIE_SLOT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_2_PCIE_SLOT_CAP_MASK 0xFFFFFFFFu                // PCIE_SLOT_CAP[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CAP_2_PCIE_SLOT_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_SLOT_CTR_2 (0x74041000 + 0x00010098u)---

    Attention_Button_Pressed_En[0] - (RO) Attention Button Pressed Enable
                                     When Set to 1b, this bit enables software notification on an attention button pressed event
    Power_Fault_Detected_En[1]   - (RO) Power Fault Detected Enable
                                     When Set, this bit enables software notification on a power fault event
    MRL_Sensor_Changed_En[2]     - (RO) MRL Sensor Changed Enable
                                     When Set, this bit enables software notification on a MRL sensor changed event
    Presence_Detect_Changed_En[3] - (RO) Presence Detect Changed Enable
                                     When Set, this bit enables software notification on a presence detect changed event
    Command_Completed_Interrupt_En[4] - (RO) Command Completed Interrupt Enable
                                     If Command Completed notification is supported (if the No Command Completed Support bit in the Slot Capabilities register is 0b), when Set, this bit enables software notification when a hot-plug command is completed by the Hot-Plug Controller
    HotPlug_Interrupt_En[5]      - (RO) Hot-Plug Interrupt Enable
                                     When Set, this bit enables generation of an interrupt on enabled hot-plug events
    Attention_Indicator_Ctr[7..6] - (RO) Attention Indicator Control
                                     If an Attention Indicator is implemented, writes to this field set the Attention Indicator to the written state.
    Power_Indicator_Ctr[9..8]    - (RO) Power Indicator Control
                                     If a Power Indicator is implemented, writes to this field set the Power Indicator to the written state. Reads of this field must reflect the value from the latest write, even if the corresponding hot-plug command is not complete, unless software issues a write without waiting, if required to, for the previous command to complete in which case the read value is undefined.
                                     Defined encodings are:
                                     00b Reserved
                                     01b On
                                     10b Blink
                                     11b Off
                                     Note: The default value of this field must be one of the non-Reserved values. If the Power Indicator Present bit in the Slot Capabilities register is 0b, this bit is permitted to be read-only with a value of 00b.
    Power_Controller_Control[10] - (RO) Power Controller Control
                                     The defined encodings are 0b Power On 1b Power Off
    Electromechanical_Interlock_Control[11] - (RO) Electromechanical Interlock Control
                                     If an Electromechanical Interlock is implemented, a write of 1b to this bit causes the state of the interlock to toggle. A write of 0b to this bit has no effect. A read of this bit always returns a 0b.
    DLL_State_Changed_En[12]     - (RO) Data Link Layer State Changed Enable
                                     If the Data Link Layer Link Active Reporting capability is 1b, this bit enables software notification when Data Link Layer Link Active bit is changed
    RSVD1[15..13]                - (RO) Reserved
    Attention_Button_Pressed[16] - (RO) Attention Button Pressed
                                     If an Attention Button is implemented, this bit is Set when the attention button is pressed. If an Attention Button is not supported, this bit must not be Set.
    Power_Fault_Detected[17]     - (RO) Power Fault Detected
                                     When Set, this bit enables software notification on a power fault event
    MRL_Sensor_Changed[18]       - (RO) MRL Sensor Changed
                                     When Set, this bit enables software notification on a MRL sensor changed event
    Presence_Detect_Changed[19]  - (RO) Presence Detect Changed
                                     When Set, this bit enables software notification on a presence detect changed event
    Command_Completed_Interrupt[20] - (RO) Command Completed
                                     If Command Completed notification is supported (if the No Command Completed Support bit in the Slot Capabilities register is 0b), when Set, this bit enables software notification when a hot-plug command is completed by the Hot-Plug Controller
    MRL_Sensor_State[21]         - (RO) MRL Sensor Changed
                                     If an MRL sensor is implemented, this bit is Set when a MRL Sensor state change is detected. If an MRL sensor is not implemented, this bit must not be Set.
    Presence_Detect_State[22]    - (RO) Presence Detect Changed
                                     This bit is set when the value reported in the Presence Detect State bit is changed.
    Electromechanical_Interlock_Status[23] - (RO) Electromechanical Interlock Status
                                     If an Electromechanical Interlock is implemented, this bit indicates the status of the Electromechanical Interlock.
                                     Defined encodings are:
                                     0b Electromechanical Interlock Disengaged
                                     1b Electromechanical Interlock Engaged
    DLL_State_Changed[24]        - (W1C) Data Link Layer State Changed
                                     This bit is Set when the value reported in the Data Link Layer Link Active bit of the Link Status register is changed.
                                     In response to a Data Link Layer State Changed event, software must read the Data Link Layer Link Active bit of the Link Status register to determine if the Link is active before initiating configuration cycles to the hot plugged device.
    RSVD2[31..25]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_RSVD2_MASK        0xFE000000u                // RSVD2[31..25]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_RSVD2_SHFT        25u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_DLL_State_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_DLL_State_Changed_MASK 0x01000000u                // DLL_State_Changed[24]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_DLL_State_Changed_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Electromechanical_Interlock_Status_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Electromechanical_Interlock_Status_MASK 0x00800000u                // Electromechanical_Interlock_Status[23]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Electromechanical_Interlock_Status_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_State_MASK 0x00400000u                // Presence_Detect_State[22]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_State_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_State_MASK 0x00200000u                // MRL_Sensor_State[21]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_State_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Command_Completed_Interrupt_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Command_Completed_Interrupt_MASK 0x00100000u                // Command_Completed_Interrupt[20]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Command_Completed_Interrupt_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_Changed_MASK 0x00080000u                // Presence_Detect_Changed[19]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_Changed_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_Changed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_Changed_MASK 0x00040000u                // MRL_Sensor_Changed[18]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_Changed_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Fault_Detected_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Fault_Detected_MASK 0x00020000u                // Power_Fault_Detected[17]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Fault_Detected_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Button_Pressed_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Button_Pressed_MASK 0x00010000u                // Attention_Button_Pressed[16]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Button_Pressed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_RSVD1_MASK        0x0000E000u                // RSVD1[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_RSVD1_SHFT        13u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_DLL_State_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_DLL_State_Changed_En_MASK 0x00001000u                // DLL_State_Changed_En[12]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_DLL_State_Changed_En_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Electromechanical_Interlock_Control_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Electromechanical_Interlock_Control_MASK 0x00000800u                // Electromechanical_Interlock_Control[11]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Electromechanical_Interlock_Control_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Controller_Control_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Controller_Control_MASK 0x00000400u                // Power_Controller_Control[10]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Controller_Control_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Indicator_Ctr_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Indicator_Ctr_MASK 0x00000300u                // Power_Indicator_Ctr[9..8]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Indicator_Ctr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Indicator_Ctr_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Indicator_Ctr_MASK 0x000000C0u                // Attention_Indicator_Ctr[7..6]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Indicator_Ctr_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_HotPlug_Interrupt_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_HotPlug_Interrupt_En_MASK 0x00000020u                // HotPlug_Interrupt_En[5]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_HotPlug_Interrupt_En_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Command_Completed_Interrupt_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Command_Completed_Interrupt_En_MASK 0x00000010u                // Command_Completed_Interrupt_En[4]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Command_Completed_Interrupt_En_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_Changed_En_MASK 0x00000008u                // Presence_Detect_Changed_En[3]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Presence_Detect_Changed_En_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_Changed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_Changed_En_MASK 0x00000004u                // MRL_Sensor_Changed_En[2]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_MRL_Sensor_Changed_En_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Fault_Detected_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Fault_Detected_En_MASK 0x00000002u                // Power_Fault_Detected_En[1]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Power_Fault_Detected_En_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Button_Pressed_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Button_Pressed_En_MASK 0x00000001u                // Attention_Button_Pressed_En[0]
#define PCIE_MAC_CONF_COMMON_PCIE_SLOT_CTR_2_Attention_Button_Pressed_En_SHFT 0u

/* =====================================================================================

  ---PCIE_ROOT_CONTROL_2 (0x74041000 + 0x0001009Cu)---

    serr_cor_en[0]               - (RO) System Error on Correctable Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a correctable error (ERR_COR) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    serr_non_en[1]               - (RO) System Error on Non-Fatal Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a Non-fatal error (ERR_NONFATAL) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    serr_fat_en[2]               - (RO) System Error on Fatal Error Enable
                                     If Set, this bit indicates that a System Error should be generated if a Fatal error (ERR_FATAL) is reported by any of the devices in the hierarchy associated with this Root Port, or by the Root Port itself.
                                     The mechanism for signaling a System Error to the system is system specific.
                                     Root Complex Event Collectors provide support for the above described functionality for Root Complex Integrated Endpoints.
    pme_int_en[3]                - (RO) PME Interrupt Enable
                                     When Set, this bit enables PME interrupt generation upon receipt of a PME Message as reflected in the PME Status bit.
                                     A PME interrupt is also generated if the PME Status bit is Set when this bit is changed from Clear to Set
    crs_en[4]                    - (RO) CRS Software Visibility Enable
                                     When Set, this bit enables the Root Port to return Configuration Request Retry Status (CRS) Completion Status to software
                                     Root Ports that do not implement this capability must hardwire this bit to 0b.
    RSVD1[15..5]                 - (RO) Reserved
    root_crs[16]                 - (RO) CRS Software Visibility
                                     When Set, this bit indicates that the Root Port is capable of returning CRS (Configuration Request Retry Status) Completion Status to software
    RSVD2[31..17]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_RSVD2_ADDR    PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_RSVD2_MASK    0xFFFE0000u                // RSVD2[31..17]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_RSVD2_SHFT    17u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_root_crs_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_root_crs_MASK 0x00010000u                // root_crs[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_root_crs_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_RSVD1_MASK    0x0000FFE0u                // RSVD1[15..5]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_RSVD1_SHFT    5u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_crs_en_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_crs_en_MASK   0x00000010u                // crs_en[4]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_crs_en_SHFT   4u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_pme_int_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_pme_int_en_MASK 0x00000008u                // pme_int_en[3]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_pme_int_en_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_fat_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_fat_en_MASK 0x00000004u                // serr_fat_en[2]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_fat_en_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_non_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_non_en_MASK 0x00000002u                // serr_non_en[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_non_en_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_cor_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_cor_en_MASK 0x00000001u                // serr_cor_en[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_CONTROL_2_serr_cor_en_SHFT 0u

/* =====================================================================================

  ---PCIE_ROOT_STATUS_2 (0x74041000 + 0x000100A0u)---

    pme_req_id[15..0]            - (RO) PME Request ID
                                     This field indicates the PCI Requester ID of the last PME Requester. This field is only valid when the PME Status bit is Set.
    pme_status[16]               - (W1C) PME Status
                                     This bit indicates that PME was asserted by the PME Requester indicated in the PME Requester ID field. Subsequent PMEs are kept pending until the status register is cleared by software by writing a 1b.
    pme_pending[17]              - (RO) PME Pending
                                     This bit indicates that another PME is pending when the PME Status bit is Set. When the PME Status bit is cleared by software; the PME is delivered by hardware by setting the PME Status bit again and updating the PME Requester ID field appropriately. The PME Pending bit is cleared by hardware if no more PMEs are pending.
    RSVD1[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_RSVD1_MASK     0xFFFC0000u                // RSVD1[31..18]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_RSVD1_SHFT     18u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_pending_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_pending_MASK 0x00020000u                // pme_pending[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_pending_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_status_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_status_MASK 0x00010000u                // pme_status[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_status_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_req_id_ADDR PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_req_id_MASK 0x0000FFFFu                // pme_req_id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ROOT_STATUS_2_pme_req_id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV2_CAP_2 (0x74041000 + 0x000100A4u)---

    Dcr2_Cpl_To_Range_Sup[3..0]  - (RO) Completion Timeout Ranges Supported
                                     This field indicates device Function support for the optional Completion Timeout programmability mechanism. This mechanism allows system software to modify the Completion Timeout value.
                                     
                                     Four time value ranges are defined:
                                     - Range A: 50 us to 10 ms
                                     - Range B: 10 ms to 250 ms
                                     - Range C: 250 ms to 4 s
                                     - Range D: 4 s to 64 s
                                     Bits are set according to the table below to show timeout value ranges supported.
                                     
                                     - 0000b: Completion Timeout programming not supported - the Function must implement a
                                     timeout value in the range 50 us to 50 ms.
                                     - 0001b: Range A
                                     - 0010b: Range B
                                     - 0011b: Ranges A and B
                                     - 0110b: Ranges B and C
                                     - 0111b: Ranges A, B, and C
                                     - 1110b: Ranges B, C, and D
                                     - 1111b: Ranges A, B, C, and D
                                     All other values are Reserved.
                                     
                                     It is strongly recommended that the Completion Timeout mechanism not expire in less than 10 ms.
    Dcr2_Cpl_To_Dis_Sup[4]       - (RO) Completion Timeout Disable Supported
                                     A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
    ARI_Forwarding_Support[5]    - (RO) ARI Forwarding Supported
                                     A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
                                     This mechanism is optional for Root Ports.
                                     For all other Functions this field is Reserved and must be hardwired to 0b.
    AtomicOp_Routing_Support[6]  - (RO) AtomicOp Routing Supported
                                     Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability.
    AtomicOp_32b_Completer_Support[7] - (RO) 32-bit AtomicOp Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    AtomicOp_64b_Completer_Support[8] - (RO) 64-bit AtomicOp Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    CAS_128b_Completer_Support[9] - (RO) 128-bit CAS Completer Supported
                                     Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability.
    No_RO_enabled_PR_PR_Passing[10] - (RO) No RO-enabled PR-PR Passing
                                     If this bit is Set, the routing element never carries out the passing permitted.
                                     This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
                                     For all other functions, this bit must be 0b.
    Dcr2_LTR_Sup[11]             - (RO) LTR Mechanism Supported
                                     A value of 1b indicates support for the optional LTR (Latency Tolerance Reporting) mechanism
    TPH_COMPLETER_SUP[13..12]    - (RO) TPH Completer Supported
                                     Value indicates Completer support for TPH or Extended TPH. Applicable only to Root Ports and Endpoints. For all other Functions, this field is Reserved.
                                     Defined Encodings are:
                                     00b TPH and Extended TPH Completer not supported.
                                     01b TPH Completer supported; Extended TPH Completer not supported.
                                     10b Reserved.
                                     11b Both TPH and Extended TPH Completer supported.
    LN_SYS_CLS[15..14]           - (RO) LN System CLS
                                     Applicable only to Root Ports and RCRBs; must be 00b for all other Function types. This field indicates if the Root Port or RCRB supports LN protocol as an LN Completer, and if so, what cacheline size is in effect.
                                     Encodings are:
                                     00b LN Completer either not supported or not in effect
                                     01b LN Completer with 64-byte cachelines in effect
                                     10b LN Completer with 128-byte cachelines in effect
                                     11b Reserved
    SUP_10B_TAG_CPL[16]          - (RO) 10-Bit Tag Completer Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not. See Section 2.2.6.2.
    SUP_10B_TAG_REQ[17]          - (RO) 10-Bit Tag Requester Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.
                                     This bit must not be Set if the 10-Bit Tag Completer Supported bit is Clear.
                                     If the Function is an RCiEP, this bit must be Clear if the RC does not support 10-Bit Tag Completer capability for Requests coming from this RCiEP.
                                     Note that 10-Bit Tag field generation must be enabled by the 10-Bit Tag Requester Enable bit in the Device Control 2 register of the Requester Function before 10-Bit Tags can be generated by the Requester. See Section 2.2.6.2.
    Dcr2_OBFF_Sup[19..18]        - (RO) OBFF (Optimized Buffer Flush Fill) Supported
                                     -00b: OBFF Not Supported
                                     -01b: OBFF supported using Message signaling only
                                     -10b: OBFF supported using WAKE# signaling only
                                     -11b: OBFF supported using WAKE# and Message signaling
    EXT_FMT_FIELD_SUP[20]        - (RO) Extended Fmt Field Supported
                                     If Set, the Function supports the 3-bit definition of the Fmt field. If Clear, the Function supports a 2-bit definition of the Fmt field. See Section 2.2.
                                     Must be Set for Functions that support End-End TLP Prefixes. All Functions in an Upstream Port must have the same value for this bit. Each Downstream Port of a component may have a different value for this bit.
                                     It is strongly recommended that Functions support the 3-bit definition of the Fmt field.
    END_END_TLP_PREFIX_SUP[21]   - (RO) End-End TLP Prefix Supported
                                     Indicates whether End-End TLP Prefix support is offered by a Function. Values are:
                                     0b No Support
                                     1b Support is provided to receive TLPs containing End-End TLP Prefixes.
                                     All Ports of a Switch must have the same value for this bit.
    MAX_END_END_TLP_PREFIX[23..22] - (RO) Max End-End TLP Prefixes
                                     Indicates the maximum number of End-End TLP Prefixes supported by this Function. See Section 2.2.10.2 for important details. Values are:
                                     01b 1 End-End TLP Prefix
                                     10b 2 End-End TLP Prefixes
                                     11b 3 End-End TLP Prefixes
                                     00b 4 End-End TLP Prefixes
                                     If End-End TLP Prefix Supported is Clear, this field is RsvdP.
                                     Different Root Ports that have the End-End TLP Prefix Supported bit Set are permitted to report different values for this field.
                                     For Switches where End-End TLP Prefix Supported is Set, this field must be 00b indicating support for up to four End-End TLP Prefixes.
    RSVD2[30..24]                - (RO) Reserved
    FRS_SUP[31]                  - (RO) FRS Supported
                                     When Set, indicates support for the optional Function Readiness Status (FRS) capability.
                                     Must be Set for all Functions that support generation or receipt capabilities of FRS Messages.
                                     Must not be Set by Switch Functions that do not generate FRS Messages on their own behalf.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_FRS_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_FRS_SUP_MASK 0x80000000u                // FRS_SUP[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_FRS_SUP_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_RSVD2_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_RSVD2_MASK   0x7F000000u                // RSVD2[30..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_RSVD2_SHFT   24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_MAX_END_END_TLP_PREFIX_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_MAX_END_END_TLP_PREFIX_MASK 0x00C00000u                // MAX_END_END_TLP_PREFIX[23..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_MAX_END_END_TLP_PREFIX_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_END_END_TLP_PREFIX_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_END_END_TLP_PREFIX_SUP_MASK 0x00200000u                // END_END_TLP_PREFIX_SUP[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_END_END_TLP_PREFIX_SUP_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_EXT_FMT_FIELD_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_EXT_FMT_FIELD_SUP_MASK 0x00100000u                // EXT_FMT_FIELD_SUP[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_EXT_FMT_FIELD_SUP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_OBFF_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_OBFF_Sup_MASK 0x000C0000u                // Dcr2_OBFF_Sup[19..18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_OBFF_Sup_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_SUP_10B_TAG_REQ_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_SUP_10B_TAG_REQ_MASK 0x00020000u                // SUP_10B_TAG_REQ[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_SUP_10B_TAG_REQ_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_SUP_10B_TAG_CPL_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_SUP_10B_TAG_CPL_MASK 0x00010000u                // SUP_10B_TAG_CPL[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_SUP_10B_TAG_CPL_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_LN_SYS_CLS_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_LN_SYS_CLS_MASK 0x0000C000u                // LN_SYS_CLS[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_LN_SYS_CLS_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_TPH_COMPLETER_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_TPH_COMPLETER_SUP_MASK 0x00003000u                // TPH_COMPLETER_SUP[13..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_TPH_COMPLETER_SUP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_LTR_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_LTR_Sup_MASK 0x00000800u                // Dcr2_LTR_Sup[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_LTR_Sup_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_No_RO_enabled_PR_PR_Passing_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_No_RO_enabled_PR_PR_Passing_MASK 0x00000400u                // No_RO_enabled_PR_PR_Passing[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_No_RO_enabled_PR_PR_Passing_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_CAS_128b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_CAS_128b_Completer_Support_MASK 0x00000200u                // CAS_128b_Completer_Support[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_CAS_128b_Completer_Support_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_64b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_64b_Completer_Support_MASK 0x00000100u                // AtomicOp_64b_Completer_Support[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_64b_Completer_Support_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_32b_Completer_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_32b_Completer_Support_MASK 0x00000080u                // AtomicOp_32b_Completer_Support[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_32b_Completer_Support_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_Routing_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_Routing_Support_MASK 0x00000040u                // AtomicOp_Routing_Support[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_AtomicOp_Routing_Support_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ARI_Forwarding_Support_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ARI_Forwarding_Support_MASK 0x00000020u                // ARI_Forwarding_Support[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ARI_Forwarding_Support_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_Cpl_To_Dis_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_Cpl_To_Dis_Sup_MASK 0x00000010u                // Dcr2_Cpl_To_Dis_Sup[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_Cpl_To_Dis_Sup_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_Cpl_To_Range_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_Cpl_To_Range_Sup_MASK 0x0000000Fu                // Dcr2_Cpl_To_Range_Sup[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CAP_2_Dcr2_Cpl_To_Range_Sup_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_DEV2_CTL_STS_2 (0x74041000 + 0x000100A8u)---

    Dcr2_Cpl_To[3..0]            - (RW) Completion Timeout Value
                                     In device Functions that support Completion Timeout programmability, this field allows system software to modify the Completion Timeout value.
                                     A Function that does not support this optional capability must hardwire this field to 0000b and is required to implement a timeout value in the range 50 us to 50 ms.
                                     Functions that support Completion Timeout programmability must support the values given below corresponding to the programmability ranges indicated in the Completion Timeout Ranges Supported field.
                                     
                                     Defined encodings:
                                     - 0000b: Default range: 50 us to 50 ms
                                     - 0001b: 50 us to 100 us
                                     - 0010b: 1 ms to 10 ms
                                     - 0101b: 16 ms to 55 ms
                                     - 0110b: 65 ms to 210 ms
                                     - 1001b: 260 ms to 900 ms
                                     - 1010b: 1 s to 3.5 s
                                     - 1101b: 4 s to 13 s
                                     - 1110b: 17 s to 64 s
                                     Values not defined above are Reserved.
                                     
                                     Software is permitted to change the value in this field at any time. For Requests already pending when the Completion Timeout Value is changed, hardware is permitted to use either the new or the old value for the outstanding Requests, and is permitted to base the start time for each Request either on when this value was changed or on when each request was issued.
                                     
                                     The default value for this field is 0000b.
    Dcr2_Cpl_to_Dis[4]           - (RW) Completion Timeout Disable
                                     When Set, this bit disables the Completion Timeout mechanism.
                                     
                                     This bit is required for all Functions that support the Completion Timeout Disable Capability. Functions that do not support this optional capability are permitted to hardwire this bit to 0b
                                     Software is permitted to Set or Clear this bit at any time. When Set, the Completion Timeout detection mechanism is disabled.
                                     If there are outstanding Requests when the bit is cleared, it is permitted but not required for hardware to apply the completion timeout mechanism to the outstanding Requests. If this is done, it is permitted to base the start time for each Request on either the time this bit was cleared or the time each Request was issued.
                                     
                                     The default value for this bit is 0b.
    ARI_Forwarding_En[5]         - (RO) ARI Forwarding Enable
                                     When set, the Downstream Port disables its traditional Device Number field being 0 enforcement when turning a Type 1 Configuration Request into a Type 0 Configuration Request, permitting access to Extended Functions
                                     in an ARI Device immediately below the Port.
                                     Must be hardwired to 0b if the ARI Forwarding Supported bit is 0b.
    AtomicOp_Requester_En[6]     - (RW) AtomicOp Requester Enable
                                     Applicable only to Endpoints and Root Ports; must be hardwired to 0b for other Function types. The Function is allowed to initiate AtomicOp Requests
                                     only if this bit and the Bus Master Enable bit in the Command register are both Set.
                                     This bit is required to be RW if the Endpoint or Root Port is capable of initiating AtomicOp Requests, but otherwise is permitted to be hardwired to 0b.
                                     This bit does not serve as a capability bit. This bit is permitted to be RW even if no AtomicOp Requester capabilities are supported by the Endpoint or Root Port.
    AtomicOp_Egress_Blocking[7]  - (RO) AtomicOp Egress Blocking
                                     Applicable and mandatory for Switch Upstream Ports, Switch Downstream Ports, and Root Ports that implement AtomicOp routing capability; otherwise must be hardwired to 0b.
                                     When this bit is Set, AtomicOp Requests that target going out this Egress Port must be blocked.
    IDO_Request_En[8]            - (RW) IDO Request Enable
                                     If this bit is Set, the Function is permitted to set the ID-Based Ordering (IDO) bit (Attr[2]) of
                                     Requests it initiates.
                                     Endpoints, including RC Integrated Endpoints, and Root Ports are permitted to implement this capability.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the IDO attribute in Requests.
    IDO_Completion_En[9]         - (RW) IDO Completion Enable
                                     If this bit is Set, the Function is permitted to set the ID-Based Ordering (IDO) bit (Attr[2]) of
                                     Completions it returns.
                                     Endpoints, including RC Integrated Endpoints, and Root Ports are permitted to implement this capability.
                                     A Function is permitted to hardwire this bit to 0b if it never sets the IDO attribute in Completions.
    Dcr2_LTR_Enable[10]          - (RW) LTR(Latency Tolerance Reporting) Mechanism Enable
                                     When Set to 1b, this bit enables upstream ports to send LTR messages and Downstream Ports to process LTR Messages.
                                     For a Multi-Function device associated with an Upstream Port of a device that implements LTR, the bit in Function 0 is RW, and only Function 0 controls link behavior of the component. In all other Functions of that device, this bit is Reserved.
                                     This bit is RO if LTR is not supported
    RESERVED11[11]               - (RO) Reserved bits
    dcr2_10btag_req_en[12]       - (RO) 10-Bit Tag Requester Enable.
                                     This bit, in combination with the Extended Tag Field Enable bit in the Device Control register, determines how many Tag field bits a Requester is permitted to use. When the 10-Bit Tag Requester Enable bit is Set, the Requester is permitted to use 10-Bit Tags. See Section 2.2.6.2 for complete details.
                                     If software changes the value of this bit while the Function has outstanding Non-Posted Requests, the result is undefined.
                                     Functions that do not implement 10-Bit Tag Requester capability are permitted to hardwire this bit to 0b.
                                     Default value of this bit is 0b.
    Dcr2_OBFF_Enable[14..13]     - (RO) OBFF (Optimized Buffer Flush Fill) Enable
                                     These two bits are RO if OBFF is not supported
    RSVD1[31..15]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_RSVD1_MASK 0xFFFF8000u                // RSVD1[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_RSVD1_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_OBFF_Enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_OBFF_Enable_MASK 0x00006000u                // Dcr2_OBFF_Enable[14..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_OBFF_Enable_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_dcr2_10btag_req_en_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_dcr2_10btag_req_en_MASK 0x00001000u                // dcr2_10btag_req_en[12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_dcr2_10btag_req_en_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_LTR_Enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_LTR_Enable_MASK 0x00000400u                // Dcr2_LTR_Enable[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_LTR_Enable_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_IDO_Completion_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_IDO_Completion_En_MASK 0x00000200u                // IDO_Completion_En[9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_IDO_Completion_En_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_IDO_Request_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_IDO_Request_En_MASK 0x00000100u                // IDO_Request_En[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_IDO_Request_En_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_AtomicOp_Egress_Blocking_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_AtomicOp_Egress_Blocking_MASK 0x00000080u                // AtomicOp_Egress_Blocking[7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_AtomicOp_Egress_Blocking_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_AtomicOp_Requester_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_AtomicOp_Requester_En_MASK 0x00000040u                // AtomicOp_Requester_En[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_AtomicOp_Requester_En_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ARI_Forwarding_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ARI_Forwarding_En_MASK 0x00000020u                // ARI_Forwarding_En[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ARI_Forwarding_En_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_Cpl_to_Dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_Cpl_to_Dis_MASK 0x00000010u                // Dcr2_Cpl_to_Dis[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_Cpl_to_Dis_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_Cpl_To_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_Cpl_To_MASK 0x0000000Fu                // Dcr2_Cpl_To[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_DEV2_CTL_STS_2_Dcr2_Cpl_To_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_LINK2_CAP_2 (0x74041000 + 0x000100ACu)---

    RSVD1[0]                     - (RO) Reserved
    Lcr2_Speed_Sup[7..1]         - (RO) Supported Link Speed Vector
                                     This field indicates the supported Link speed(s) of the associated Port. For each bit, a value of 1b indicates that the corresponding Link speed is supported; otherwise, the Link speed is not supported.
                                     
                                     Bit definitions within this field are:
                                     - Bit [0]: 2.5 GT/s
                                     - Bit [1]: 5.0 GT/s
                                     - Bit [2]: 8.0 GT/s
                                     - Bit [3]: 16.0 GT/s
                                     - Bits [6:4]: RsvdP
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr2_Cross_Sup[8]            - (RO) Crosslink Supported
                                     When set to 1b, this bit indicates that the associated Port supports crosslinks.
                                     
                                     When set to 0b on a Port that only supports Link speeds of 2.5 GTs or 5.0 GTs, this bit provides no information regarding the Ports level of crosslink support.
                                     It is recommended that this bit be Set in any Port that supports crosslinks even though doing so is only required for Ports that also support operating at 8.0 GTs or higher Link speeds.
                                     
                                     Note: Software should use this bit when referencing fields whose definition depends on whether or not the Port supports crosslinks.
                                     
                                     Multi-Function devices associated with an Upstream Port must report the same value in this field for all Functions.
    Lcr2_SRIS_Lower_SKP_OS_Gen_Speed[12..9] - (RO) Lower SKP OS Generation Supported Speeds Vector
                                     If this field is non-zero, it indicates that the
                                     Port, when operating at the indicated speed(s) supports SRIS and also supports software control of
                                     the SKP Ordered Set transmission scheduling rate.
                                     Bit definitions within this field are:
                                     Bit 0 : 2.5 GT/s
                                     Bit 1 : 5.0 GT/s
                                     Bit 2 : 8.0 GT/s
                                     Bit 3 : 16.0 GT/s
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit is not Set in the Supported
                                     Link Speeds Vector.
    RSVD2[15..13]                - (RO)  xxx 
    Lcr2_SRIS_Lower_SKP_OS_Rec_Speed[19..16] - (RO) Lower SKP OS Reception Supported Speeds Vector
                                     If this field is non-zero, it indicates that the
                                     Port, when operating at the indicated speed(s) supports SRIS and also supports receiving SKP OS at
                                     the rate defined for SRNS while running in SRIS.
                                     Bit definitions within this field are:
                                     Bit 0 : 2.5 GT/s
                                     Bit 1 : 5.0 GT/s
                                     Bit 2 : 8.0 GT/s
                                     Bit 3 : 16.0 GT/s
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
                                     Behavior is undefined if a bit is Set in this field and the corresponding bit is not Set in the Supported
                                     Link Speeds Vector.
    RSVD3[22..20]                - (RO)  xxx 
    Lcr2_Retimer_det_Sup[23]     - (RO) Retimer Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated Port
                                     supports detection and reporting of Retimer presence.
                                     This bit must be set to 1b in a Port when the Supported Link Speeds Vector of the Link Capabilities 2
                                     Register indicates support for a Link speed of 16.0 GT/s or higher.
                                     It is permitted to be set to 1b regardless of the supported Link speeds.
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
    Lcr2_2Retimer_det_Sup[24]    - (RO) Two Retimers Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated
                                     Port supports detection and reporting of two Retimers presence.
                                     This bit must be set to 1b in a Port when the Supported Link Speeds Vector of the Link Capabilities 2
                                     Register indicates support for a Link speed of 16.0 GT/s or higher.
                                     It is permitted to be set to 1b regardless of the supported Link speeds if the Retimer Presence Detect
                                     Supported bit is also set to 1b.
                                     Multi-Function Devices associated with an Upstream Port must report the same value in this field for
                                     all Functions.
    RSVD4[30..25]                - (RO) Reserved
    DRS_Sup[31]                  - (RO) DRS Supported - When Set, indicates support for the optional Device Readiness Status (DRS) capability.
                                     Must be Set in Downstream Ports that support DRS.
                                     Must be Set in Downstream Ports that support FRS.
                                     For Upstream Ports that support DRS, it is strongly recommended that this bit be Set in Function 0.
                                     For all other Functions associated with an Upstream Port, this bit must be Clear.142
                                     Must be Clear in Functions that are not associated with a Port.
                                     RsvdP in all other Functions.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_DRS_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_DRS_Sup_MASK 0x80000000u                // DRS_Sup[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_DRS_Sup_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD4_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD4_MASK  0x7E000000u                // RSVD4[30..25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD4_SHFT  25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_2Retimer_det_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_2Retimer_det_Sup_MASK 0x01000000u                // Lcr2_2Retimer_det_Sup[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_2Retimer_det_Sup_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Retimer_det_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Retimer_det_Sup_MASK 0x00800000u                // Lcr2_Retimer_det_Sup[23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Retimer_det_Sup_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD3_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD3_MASK  0x00700000u                // RSVD3[22..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD3_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_MASK 0x000F0000u                // Lcr2_SRIS_Lower_SKP_OS_Rec_Speed[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_SRIS_Lower_SKP_OS_Rec_Speed_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD2_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD2_MASK  0x0000E000u                // RSVD2[15..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD2_SHFT  13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_MASK 0x00001E00u                // Lcr2_SRIS_Lower_SKP_OS_Gen_Speed[12..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_SRIS_Lower_SKP_OS_Gen_Speed_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Cross_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Cross_Sup_MASK 0x00000100u                // Lcr2_Cross_Sup[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Cross_Sup_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Speed_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Speed_Sup_MASK 0x000000FEu                // Lcr2_Speed_Sup[7..1]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_Lcr2_Speed_Sup_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD1_ADDR  PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD1_MASK  0x00000001u                // RSVD1[0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CAP_2_RSVD1_SHFT  0u

/* =====================================================================================

  ---PCIE_CONF_LINK2_CTL_STS_2 (0x74041000 + 0x000100B0u)---

    Lcr2_Link_Speed[3..0]        - (RW) Target Link Speed
                                     The encoded value specifies a bit location in the Supported Link Speeds Vector (in the Link Capabilities 2 register) that corresponds to the desired target Link speed.
                                     
                                     Defined encodings are:
                                     - 0001b: Supported Link Speeds Vector field bit 0
                                     - 0010b: Supported Link Speeds Vector field bit 1
                                     - 0011b: Supported Link Speeds Vector field bit 2
                                     - 0100b: Supported Link Speeds Vector field bit 3
                                     - 0101b: Supported Link Speeds Vector field bit 4
                                     - 0110b: Supported Link Speeds Vector field bit 5
                                     - 0111b: Supported Link Speeds Vector field bit 6
                                     All other encodings are Reserved.
                                     
                                     If a value is written to this field that does not correspond to a supported speed (as indicated by the Supported Link Speeds Vector), the result is undefined.
                                     If either of the Enter Compliance or Enter Modified Compliance bits are implemented, then this field must also be implemented.
                                     The default value of this field is the highest Link speed supported by the component (as reported in the Max Link Speed field of the Link Capabilities register) unless the corresponding platform or form factor requires a different default value.
                                     
                                     For both Upstream and Downstream Ports, this field is used to set the target compliance mode speed when software is using the Enter Compliance bit to force a Link into compliance mode.
                                     For a Multi-Function device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this field is of type RsvdP.
                                     
                                     Components that support only the 2.5 GTs speed are permitted to hardwire this field to 0000b.
    Lcr2_Compliance[4]           - (RW) Enter Compliance
                                     Software is permitted to force a Link to enter Compliance mode at the speed indicated in the Target Link Speed field by setting this bit to 1b in both components on a Link and then initiating a hot reset on the Link.
                                     
                                     Default value of this bit following Fundamental Reset is 0b.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of
                                     that device, this bit is of type RsvdP.
    Lcr2_Hw_Auto_Dis[5]          - (RW) Hardware Autonomous Speed Disable
                                     When Set, this bit disables hardware from changing the Link speed for device specific reasons other than attempting to correct unreliable Link operation by reducing Link speed. Initial transition to the highest supported common link speed is not blocked by this bit.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b.
                                     
                                     Default value of this bit is 0b.
    Lcr2_Sel_Deemp[6]            - (RO) Reserved
    Lcr2_Tx_Margin[9..7]         - (RW) Transmit Margin
                                     This field controls the value of the non-deemphasized voltage level at the Transmitter pins. This field is reset to 000b on entry to the LTSSM Polling.Configuration sub-state.
                                     
                                     Encodings:
                                     - 000b: Normal operating range
                                     - 001b: 800~1200 mV for full swing and 400~700 mV for half-swing
                                     - 010b ~ (n-1) Values must be monotonic with a non-zero slope. The value of n must be greater than 3 and less than 7. At least two of these must be below the normal operating range of n: 200~400 mV for full-swing and 100~200 mV for half-swing
                                     - n ~ 111b: reserved
                                     For a Multi-Function device associated with an Upstream Port, the field in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this field is of type RsvdP.
                                     
                                     Default value of this field is 000b.
                                     
                                     This register is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this register only during debug or compliance testing. In all other cases, the system must ensure that this register is set to the default value.
    Lcr2_Mod_Compliance[10]      - (RW) Enter Modified Compliance
                                     When this bit is set to 1b, the device transmits Modified Compliance Pattern if the LTSSM enters Polling.Compliance sub-state.
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     Default value of this bit is 0b.
                                     
                                     This register is intended for debug, compliance testing purposes only. System firmware and software is allowed to modify this register only during debug or compliance testing. 
                                     In all other cases, the system must ensure that this register is set to the default value.
    Lcr2_Comp_Sos[11]            - (RW) Compliance SOS
                                     When set to 1b, the LTSSM is required to send SKP Ordered Sets periodically in between the (modified) compliance patterns.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     The default value of this bit is 0b.
    Lcr2_Comp_Preset[15..12]     - (RW) Compliance Preset De-emphasis
                                     This bit sets the de-emphasis level in Polling.Compliance state if the entry occurred due to the Enter Compliance bit being 1b.
                                     
                                     Encodings:
                                     - 1b: -3.5 dB
                                     - 0b: -6 dB
                                     When the Link is operating at 2.5 GTs, the setting of this bit has no effect. Components that support only 2.5 GTs speed are permitted to hardwire this bit to 0b.
                                     
                                     For a Multi-Function device associated with an Upstream Port, the bit in Function 0 is of type RWS, and only Function 0 controls the components Link behavior. In all other Functions of that device, this bit is of type RsvdP.
                                     
                                     The default value of this bit is 0b.
                                     
                                     This bit is intended for debug, compliance testing purposes. System firmware and software is allowed to modify this bit only during debug or compliance testing.
    Lsr2_Deemph[16]              - (RO) Current De-emphasis Level
                                     When the Link is operating at 5 GT/s speed, this bit reflects the level of de-emphasis.
                                     Encodings:
                                     - 1b -3.5 dB
                                     - 0b -6 dB
                                     The value in this bit is undefined when the Link is operating at 2.5 GT/s speed.
    Link2_Equ_Complete_8GT[17]   - (RO) Equalization 8.0 GT/s Complete
                                     When set to 1b, this bit indicates that the Transmitter Equalization procedure at the 8.0 GT/s data rate has completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase1_Success_8GT[18] - (RO) Equalization 8.0 GT/s Phase 1 Successful
                                     When set to 1b, this bit indicates that Phase 1 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase2_Success_8GT[19] - (RO) Equalization 8.0 GT/s Phase 2 Successful
                                     When set to 1b, this bit indicates that Phase 2 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Phase3_Success_8GT[20] - (RO) Equalization 8.0 GT/s Phase 3 Successful
                                     When set to 1b, this bit indicates that Phase 3 of the 8.0 GT/s Transmitter Equalization procedure has successfully completed. Details of the Transmitter Equalization process and when this bit needs to be set to 1b is provided.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    Link2_Equ_Req_8GT[21]        - (RO) Link Equalization Request
                                     This bit is Set by hardware to request the 8.0 GT/s Link equalization process to be performed on the Link.
                                     For Multi-Function Upstream Port, this bit must be implemented in Function 0 and RsvdZ in other Functions. Components that only support speeds below 8.0 GT/s are permitted to hardwire this bit to 0b.
                                     With the M-PCIe PHY, this feature is unused and this bit is hardwired to 0b.
    retimer_det[22]              - (RO) Retimer Presence Detected
                                     When set to 1b, this bit indicates that a Retimer was present during the most recent Link negotiation.
                                     The default value of this bit is 0b.
                                     This bit is required for Ports that have the Retimer Presence Detect Supported bit of the Link Capabilities 2 register set to 1b.
                                     Ports that have the Retimer Presence Detect Supported bit set to 0b are permitted to hardwire this bit to 0b.
                                     For Multi-Function Devices associated with an Upstream Port, this bit must be implemented in Function 0 and is RsvdZ in all other Functions.
    RSVD1[27..23]                - (RO) Reserved
    ds_component_presence[30..28] - (RO) Downstream Component Presence - This field indicates the presence and DRS status for the Downstream
                                     Component, if any, connected to the Link; defined values are:
                                     000b: Link Down - Presence Not Determined
                                     001b: Link Down - Component Not Present indicates the Downstream Port (DP) has determined
                                     that a Downstream Component is not present
                                     010b: Link Down - Component Present indicates the DP has determined that a Downstream
                                     Component is present, but the Data Link Layer is not active
                                     011b: Reserved
                                     100b: Link Up - Component Present indicates the DP has determined that a Downstream
                                     Component is present, but no DRS Message has been received since the Data Link Layer
                                     became active
                                     101b: Link Up - Component Present and DRS Received indicates the DP has received a DRS
                                     Message since the Data Link Layer became active
                                     110b: Reserved
                                     111b: Reserved
                                     Downstream Component Presence state must be determined by the logical “OR” of the Physical Layer
                                     in-band presence detect mechanism and, if present, any out-of-band presence detect mechanism
                                     implemented for the Link. If no out-of-band presence detect mechanism is implemented, then Downstream
                                     Component Presence state must be determined solely by the Physical Layer in-band presence
                                     detect mechanism.
                                     If the In-Band PD Disable bit in the Slot Control Register is Set, the Physical Layer in-band presence
                                     detect mechanism must always indicate that no component is present.
                                     Component Presence, Link Up, and DRS Received states indicated by this field must reflect their
                                     maskable states, which are controlled by the SFI PD State Mask, SFI DLL State Mask, or SFI DRS Mask
                                     bits in the SFI Control Register. See Section 7.9.23.3 .
                                     This field must be implemented in any Downstream Port where the DRS Supported bit is Set in the
                                     Link Capabilities 2 Register.
                                     This field is RsvdZ for all other Functions.
                                     Default value of this field is 000b.
    drs_msg_rcvd[31]             - (RO) DRS Message Received - This bit must be Set whenever the Port receives a DRS Message.
                                     This bit must be Cleared in DL_Down.
                                     This bit must be implemented in any Downstream Port where the DRS Supported bit is Set in the Link
                                     Capabilities 2 Register.
                                     This bit is RsvdZ for all other Functions.
                                     Default value of this bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_drs_msg_rcvd_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_drs_msg_rcvd_MASK 0x80000000u                // drs_msg_rcvd[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_drs_msg_rcvd_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ds_component_presence_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ds_component_presence_MASK 0x70000000u                // ds_component_presence[30..28]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ds_component_presence_SHFT 28u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_RSVD1_MASK 0x0F800000u                // RSVD1[27..23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_RSVD1_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_retimer_det_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_retimer_det_MASK 0x00400000u                // retimer_det[22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_retimer_det_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Req_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Req_8GT_MASK 0x00200000u                // Link2_Equ_Req_8GT[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Req_8GT_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase3_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase3_Success_8GT_MASK 0x00100000u                // Link2_Equ_Phase3_Success_8GT[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase3_Success_8GT_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase2_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase2_Success_8GT_MASK 0x00080000u                // Link2_Equ_Phase2_Success_8GT[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase2_Success_8GT_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase1_Success_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase1_Success_8GT_MASK 0x00040000u                // Link2_Equ_Phase1_Success_8GT[18]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Phase1_Success_8GT_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Complete_8GT_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Complete_8GT_MASK 0x00020000u                // Link2_Equ_Complete_8GT[17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Link2_Equ_Complete_8GT_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lsr2_Deemph_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lsr2_Deemph_MASK 0x00010000u                // Lsr2_Deemph[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lsr2_Deemph_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Comp_Preset_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Comp_Preset_MASK 0x0000F000u                // Lcr2_Comp_Preset[15..12]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Comp_Preset_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Comp_Sos_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Comp_Sos_MASK 0x00000800u                // Lcr2_Comp_Sos[11]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Comp_Sos_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Mod_Compliance_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Mod_Compliance_MASK 0x00000400u                // Lcr2_Mod_Compliance[10]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Mod_Compliance_SHFT 10u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Tx_Margin_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Tx_Margin_MASK 0x00000380u                // Lcr2_Tx_Margin[9..7]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Tx_Margin_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Sel_Deemp_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Sel_Deemp_MASK 0x00000040u                // Lcr2_Sel_Deemp[6]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Sel_Deemp_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Hw_Auto_Dis_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Hw_Auto_Dis_MASK 0x00000020u                // Lcr2_Hw_Auto_Dis[5]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Hw_Auto_Dis_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Compliance_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Compliance_MASK 0x00000010u                // Lcr2_Compliance[4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Compliance_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Link_Speed_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Link_Speed_MASK 0x0000000Fu                // Lcr2_Link_Speed[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_LINK2_CTL_STS_2_Lcr2_Link_Speed_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_SLOT_CAP_2 (0x74041000 + 0x000100B4u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_2_RSVD_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_2_RSVD_MASK    0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CAP_2_RSVD_SHFT    0u

/* =====================================================================================

  ---PCIE_CONF_SLOT_CTL_STS_2 (0x74041000 + 0x000100B8u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_2_RSVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_2_RSVD_MASK 0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_SLOT_CTL_STS_2_RSVD_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_0_2 (0x74041000 + 0x000100BCu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_2_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_2_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_0_2_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_1_2 (0x74041000 + 0x000100C0u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_2_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_2_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_1_2_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_2_2 (0x74041000 + 0x000100C4u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_2_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_2_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_2_2_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_3_2 (0x74041000 + 0x000100C8u)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_2_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_2_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_3_2_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_4_2 (0x74041000 + 0x000100CCu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_2_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_2_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_4_2_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_0_2 (0x74041000 + 0x000100D0u)---

    capability_id[7..0]          - (RO) Capability ID
                                     Indicates the MSI-X Capability structure. This field must return a Capability ID of 11h indicating that this is an MSI-X Capability structure.
    next_capability_pointer[15..8] - (RO) Next Capability Pointer
                                     This field contains the offset to the next PCI Capability structure or 00h if no other items exist in the linked list of Capabilities.
    msix_table_size[26..16]      - (RO) MSI-X Table Size
                                     System software reads this field to determine the MSI-X Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of 4.
    RSVD2[29..27]                - (RO) Reserved
    msix_function_mask[30]       - (RW) MSI-X Mask
                                     If Set, all of the vectors associated with the Function are masked, regardless of their per-vector Mask bit values.
                                     If Clear, each vector's Mask bit determines whether the vector is masked or not.
                                     Setting or Clearing the MSI-X Function Mask bit has no effect on the value of the per-vector Mask bits.
                                     Default value of this bit is 0b.
    msix_enable[31]              - (RW) MSI-X Enable
                                     If Set and the MSI Enable bit in the MSI Message Control register is Clear, the Function is permitted to use MSI-X to request service and is prohibited from using INTx interrupts (if implemented). System configuration software Sets this bit to enable MSI-X. A device driver is prohibited from writing this bit to mask a Function's service request.
                                     If Clear, the Function is prohibited from using MSI-X to request service.
                                     Default value of this bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_enable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_enable_MASK 0x80000000u                // msix_enable[31]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_enable_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_function_mask_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_function_mask_MASK 0x40000000u                // msix_function_mask[30]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_function_mask_SHFT 30u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_RSVD2_MASK 0x38000000u                // RSVD2[29..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_RSVD2_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_table_size_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_table_size_MASK 0x07FF0000u                // msix_table_size[26..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_msix_table_size_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_next_capability_pointer_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_next_capability_pointer_MASK 0x0000FF00u                // next_capability_pointer[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_next_capability_pointer_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_capability_id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_capability_id_MASK 0x000000FFu                // capability_id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_0_2_capability_id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_1_2 (0x74041000 + 0x000100D4u)---

    MsiX_Tab_Bir[2..0]           - (RO) Table BIR
                                     Indicates which one of a Function's Base Address registers, located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X Table into Memory Space.
                                     For a 64-bit Base Address register, the Table BIR indicates the lower DWORD. For Functions with Type 1 Configuration Space headers, BIR values 2 through 5 are also Reserved.
    MsiX_Tab_Off[31..3]          - (RO) Table Offset
                                     Used as an offset from the address contained by one of the Function's Base Address registers to point to the base of the MSI-X Table. The lower 3 Table BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_MsiX_Tab_Off_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_MsiX_Tab_Off_MASK 0xFFFFFFF8u                // MsiX_Tab_Off[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_MsiX_Tab_Off_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_MsiX_Tab_Bir_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_MsiX_Tab_Bir_MASK 0x00000007u                // MsiX_Tab_Bir[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_1_2_MsiX_Tab_Bir_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSIX_CAP_2_2 (0x74041000 + 0x000100D8u)---

    MsiX_Pba_Bir[2..0]           - (RO) PBA BIR
                                     Indicates which one of a Function's Base Address registers, located beginning at 10h in Configuration Space, or entry in the Enhanced Allocation capability with a matching BEI, is used to map the Function's MSI-X PBA into Memory Space.
                                     The PBA BIR value definitions are identical to those for the MSI-X Table BIR.
    MsiX_Pba_Off[31..3]          - (RO) PBA Offset
                                     Used as an offset from the address contained by one of the Function's Base Address registers to point to the base of the MSI-X PBA. The lower 3 PBA BIR bits are masked off (set to zero) by software to form a 32-bit QWORD-aligned offset.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_MsiX_Pba_Off_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_MsiX_Pba_Off_MASK 0xFFFFFFF8u                // MsiX_Pba_Off[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_MsiX_Pba_Off_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_MsiX_Pba_Bir_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_MsiX_Pba_Bir_MASK 0x00000007u                // MsiX_Pba_Bir[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSIX_CAP_2_2_MsiX_Pba_Bir_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_RSVD_5_2 (0x74041000 + 0x000100DCu)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_2_RSVD_ADDR      PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_2_RSVD_MASK      0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_RSVD_5_2_RSVD_SHFT      0u

/* =====================================================================================

  ---PCIE_CONF_MSI_CAP_2 (0x74041000 + 0x000100E0u)---

    Msi_Cap_Id[7..0]             - (RO) Capability ID
                                     The value of 05h in this field identifies the function as message signaled interrupt capable.
    Msi_Nx_Ptr[15..8]            - (RO) Next Pointer
                                     Pointer to the next item in the capabilities list.
    Msi_En[16]                   - (RW) MSI Enable
                                     If 1, the function is permitted to use MSI to request service and is prohibited from using its INTx# pin (if implemented). System configuration software sets this bit to enable MSI. A device driver is prohibited from writing this bit to mask a functions service request.
                                     If 0, the function is prohibited from using MSI to request service.
                                     
                                     This state after reset is 0 (MSI is disabled).
    Msi_Multi_Cap[19..17]        - (RO) Multiple Message Capable
                                     System software reads this field to determine the number of requested messages. The number of requested messages must be aligned to a power of two (if a function requires three messages, it requests four by initializing this field to 010b).
                                     
                                     The encoding is defined as:
                                     - 000b: 1 message requested
                                     - 001b: 2 messages requested
                                     - 010b: 4 message requested
                                     - 011b: 8 messages requested
                                     - 100b: 16 message requested
                                     - 101b: 32 messages requested
                                     - 110b: reserved
                                     - 111b: reserved
                                     
                                     (Please refer to PCIE_MAC_IREG 0x00A8[6:4])
    Msi_Multi_En[22..20]         - (RW) Multiple Message Enable
                                     System software writes to this field to indicate the number of allocated messages (equal to or less than the number of requested messages).
                                     The number of allocated messages is aligned to a power of two. If a function requests four messages (indicated by a Multiple Message Capable encoding of 010b), system software can allocate either four, two, or one message by writing a 010b, 001b, or 000b to this field, respectively. When MSI is enabled, a device will be allocated at least 1 message.
                                     
                                     The encoding is defined as:
                                     - 000b: 1 message allocated
                                     - 001b: 2 messages  allocated
                                     - 010b: 4 message  allocated
                                     - 011b: 8 messages  allocated
                                     - 100b: 16 message  allocated
                                     - 101b: 32 messages  allocated
                                     - 110b: reserved
                                     - 111b: reserved
                                     
                                     The state after reset is 000b.
    Msi_64b_En[23]               - (RO) 64-bit Address Capable
                                     0: The function is not capable of generating a 64-bit message address.
                                     1: The function is capable of generating a 64-bit message address.
    Per_Vector_Masking_Capable[24] - (RO) Per Vector Masking Capable
                                     0: The function does not support MSI per-vector masking.
                                     1: The function supports MSI per-vector masking.
                                     (Please refer to PCIE_MAC_IREG 0x00A8[7])
    Msi_Ext_Cap[25]              - (RO) Extended Message Data Capable
                                     0: The function does not support providing Extended Message Data.
                                     1: The function is capable of providing Extended Message Data.
                                     (Please refer to PCIE_MAC_IREG 0x00A8[27])
    Msi_Ext_En[26]               - (RO) Extended Message Data Enable
                                     0: The function is not enabled to provide Extended Message Data.
                                     1: The function is enabled to provide Extended Message Data.
                                     This bit must be read/write if the Extended Message Data Capable bit is 1; otherwise it must be hardwired to 0.
    RSVD1[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_RSVD1_ADDR    PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_RSVD1_MASK    0xF8000000u                // RSVD1[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_RSVD1_SHFT    27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Ext_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Ext_En_MASK 0x04000000u                // Msi_Ext_En[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Ext_En_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Ext_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Ext_Cap_MASK 0x02000000u                // Msi_Ext_Cap[25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Ext_Cap_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Per_Vector_Masking_Capable_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Per_Vector_Masking_Capable_MASK 0x01000000u                // Per_Vector_Masking_Capable[24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Per_Vector_Masking_Capable_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_64b_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_64b_En_MASK 0x00800000u                // Msi_64b_En[23]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_64b_En_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Multi_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Multi_En_MASK 0x00700000u                // Msi_Multi_En[22..20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Multi_En_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Multi_Cap_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Multi_Cap_MASK 0x000E0000u                // Msi_Multi_Cap[19..17]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Multi_Cap_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_En_ADDR   PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_En_MASK   0x00010000u                // Msi_En[16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_En_SHFT   16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Nx_Ptr_MASK 0x0000FF00u                // Msi_Nx_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Nx_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Cap_Id_MASK 0x000000FFu                // Msi_Cap_Id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_CAP_2_Msi_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_ADDR_L_2 (0x74041000 + 0x000100E4u)---

    RSVD1[1..0]                  - (RO) Reserved
    Msi_Addr_L[31..2]            - (RW) Message Address bit[31:2] for MSI.
                                     System-specified message address.
                                     If the Message Enable bit (bit 0 of the Message Control register) is set, the contents of this register specify the DWORD aligned address (AD[31::02]) for the MSI memory write transaction. AD[1::0] are driven to zero during the address phase.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_Msi_Addr_L_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_Msi_Addr_L_MASK 0xFFFFFFFCu                // Msi_Addr_L[31..2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_Msi_Addr_L_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_RSVD1_MASK 0x00000003u                // RSVD1[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_L_2_RSVD1_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_ADDR_H_2 (0x74041000 + 0x000100E8u)---

    Msi_Addr_H[31..0]            - (RW) Message Address bit[63:32] for MSI.
                                     System-specified message upper address.
                                     This register is optional and is implemented only if the device supports a 64-bit message address (bit 7 in Message Control register set). If the Message Enable bit (bit 0 of the Message Control register) is set, the contents of this register (if non-zero) specify the upper 32-bits of a 64-bit message address (AD[63::32]).
                                     If the contents of this register are zero, the device uses the 32 bit address specified by the message address register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_2_Msi_Addr_H_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_2_Msi_Addr_H_MASK 0xFFFFFFFFu                // Msi_Addr_H[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_ADDR_H_2_Msi_Addr_H_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_DATA_2 (0x74041000 + 0x000100ECu)---

    Msi_Data[15..0]              - (RW) Message Data for MSI.
                                     System-specified message.
                                     Each MSI function is allocated up to 32 unique messages.
                                     System architecture specifies the number of unique messages supported by the system. If the Message Enable bit (bit 0 of the Message Control register) is set, the message data is driven onto the lower word of the memory write transactions data phase.
    Msi_Ext_Data[31..16]         - (RO) Extended Message Data
                                     This register is optional. For the MSI Capability structures without Per-vector Masking, it must be implemented if the Extended Message Data Capable bit is Set; otherwise, it is outside the MSI Capability structure and undefined. For the MSI Capability structures with Per-vector Masking, it must be implemented if the Extended Message Data Capable bit is Set; otherwise, it is Reserved.
                                     If Extended Message Data Enable bit (bit 10 of the Message Control register) is set, are driven during the memory write transaction's data phase to the Extended Message Data field value; otherwise, AD[31::16] are driven to zero.
                                     If implemented, this field must be read/write.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_Msi_Ext_Data_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_Msi_Ext_Data_MASK 0xFFFF0000u                // Msi_Ext_Data[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_Msi_Ext_Data_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_Msi_Data_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_Msi_Data_MASK 0x0000FFFFu                // Msi_Data[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_DATA_2_Msi_Data_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_MASK_2 (0x74041000 + 0x000100F0u)---

    MSI_MASK[31..0]              - (RW) Mask Bits
                                     For each Mask bit that is Set, the Function is prohibited from sending the associated message.
                                     Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_2_MSI_MASK_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_2_MSI_MASK_MASK 0xFFFFFFFFu                // MSI_MASK[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_MASK_2_MSI_MASK_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_MSI_PENDING_2 (0x74041000 + 0x000100F4u)---

    MSI_PENDING[1..0]            - (RO) Pending Bits
                                     For each Pending bit that is Set, the Function has a pending associated message.
                                     Default is 0.
    MSI_PENDING_RSVD[31..2]      - (RO) Reserved Pending Bits for MSI (RO for PCIe RC W1C for backend)

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_MSI_PENDING_RSVD_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_MSI_PENDING_RSVD_MASK 0xFFFFFFFCu                // MSI_PENDING_RSVD[31..2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_MSI_PENDING_RSVD_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_MSI_PENDING_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_MSI_PENDING_MASK 0x00000003u                // MSI_PENDING[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_MSI_PENDING_2_MSI_PENDING_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_PM_CAP_2 (0x74041000 + 0x000100F8u)---

    Pmcsr_Cap_Id[7..0]           - (RO) Capability ID
                                     This field, when 01h identifies the linked list item as being the PCI Power Management registers.
    Pmcsr_Nx_Ptr[15..8]          - (RO) Next Pointer
                                     This field provides an offset into the functions PCI Configuration Space pointing to the location of next item in the functions capability list.
    Pmcsr_Version[18..16]        - (RO) Version
                                     A value of 011b indicates that this function complies with revision 1.2 of the PCI Power Management Interface Specification.
    Pmcsr_Pme_Clk[19]            - (RO) PME Clock
                                     When this bit is a 1, it indicates that the function relies on the presence of the PCI clock for PME# operation.
                                     When this bit is a 0, it indicates that no PCI clock is required for the function to generate PME#.
                                     Functions that do not support PME# generation in any state must return 0 for this field.
    RSVD1[20]                    - (RO) Reserved
    Pmcsr_Dsi[21]                - (RO) DSI
                                     The Device Specific Initialization bit indicates whether special initialization of this function is required (beyond the standard PCI configuration header) before the generic class device driver is able to use it.
                                     
                                     Note that this bit is not used by some operating systems.
                                     Microsoft Windows and Windows NT, for instance, do not use this bit to determine whether to use D3. Instead, they use the drivers capabilities to determine this.
                                     
                                     A 1 indicates that the function requires a device specific initialization sequence following transition to the D0 uninitialized state.
    Pmcsr_Aux_Current[24..22]    - (RO) AUX Current
                                     This 3 bit field reports the 3.3Vaux auxiliary current requirements for the PCI function.
                                     If the Data Register has been implemented by this function:
                                     - Reads of this field must return a value of 000b.
                                     - The Data Register takes precedence over this field for 3.3Vaux current requirement reporting.
                                     
                                     If PME# generation from D3cold is not supported by the function (PMC(15)=0), this field must return a value of 000b when read.
                                     
                                     For functions that support PME# from D3cold, and do not implement the Data Register, the following bit assignments apply :
                                     - 000b: self powered
                                     - 001b: Max aux current 55mA required
                                     - 010b: Max aux current 100mA required
                                     - 011b: Max aux current 160mA required
                                     - 100b: Max aux current 220mA required
                                     - 101b: Max aux current 270mA required
                                     - 110b: Max aux current 320mA required
                                     - 111b: Max aux current 375mA required
    Pmcsr_D1_Sup[25]             - (RO) D1 Support
                                     If this bit is a 1, this function supports the D1 Power Management State.
                                     Functions that do not support D1 must always return a value of 0 for this bit
    Pmcsr_D2_Sup[26]             - (RO) D2 Support
                                     If this bit is a 1, this function supports the D2 Power Management State.
                                     Functions that do not support D2 must always return a value of 0 for this bit.
    Pmcsr_Pme_Sup[31..27]        - (RO) PME Support
                                     This 5-bit field indicates the power states in which the function may assert PME#. A value of 0b for any bit indicates that the function is not capable of asserting the PME# signal while in that power state.
                                     
                                     - X XXX1b: PME# can be asserted from D0
                                     - X XX1Xb: PME# can be asserted from D1
                                     - X X1XXb: PME# can be asserted from D2
                                     - X 1XXXb: PME# can be asserted from D3hot
                                     - 1 XXXXb: PME# can be asserted from D3cold

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Pme_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Pme_Sup_MASK 0xF8000000u                // Pmcsr_Pme_Sup[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Pme_Sup_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_D2_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_D2_Sup_MASK 0x04000000u                // Pmcsr_D2_Sup[26]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_D2_Sup_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_D1_Sup_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_D1_Sup_MASK 0x02000000u                // Pmcsr_D1_Sup[25]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_D1_Sup_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Aux_Current_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Aux_Current_MASK 0x01C00000u                // Pmcsr_Aux_Current[24..22]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Aux_Current_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Dsi_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Dsi_MASK 0x00200000u                // Pmcsr_Dsi[21]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Dsi_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_RSVD1_ADDR     PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_RSVD1_MASK     0x00100000u                // RSVD1[20]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_RSVD1_SHFT     20u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Pme_Clk_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Pme_Clk_MASK 0x00080000u                // Pmcsr_Pme_Clk[19]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Pme_Clk_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Version_MASK 0x00070000u                // Pmcsr_Version[18..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Nx_Ptr_MASK 0x0000FF00u                // Pmcsr_Nx_Ptr[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Nx_Ptr_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Cap_Id_MASK 0x000000FFu                // Pmcsr_Cap_Id[7..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CAP_2_Pmcsr_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_CONF_PM_CTL_STS_2 (0x74041000 + 0x000100FCu)---

    Pmcsr_Pwr_State[1..0]        - (RW) Power State
                                     This 2-bit field is used both to determine the current power state of a function and to set the function into a new power state. The definition of the field values is given below.
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot
                                     
                                     If software attempts to write an unsupported, optional state to this field, the write operation must complete normally on the bus; however, the data is discarded and no state change occurs.
    RSVD1[2]                     - (RO) Reserved
    Pmcsr_No_Soft_Rst[3]         - (RO) No Soft Reset
                                     When set to 1, this bit indicates that devices transitioning from D3hot to D0 because of PowerState commands do not perform an internal reset.
                                     Configuration Context is preserved. Upon transition from the D3hot to the D0 Initialized state, no additional operating system intervention is required to preserve Configuration Context beyond writing the PowerState bits.
                                     
                                     When clear to zero, devices do perform an internal reset upon transitioning from D3hot to D0 via software control of the PowerState bits. Configuration Context is lost when performing the soft reset. Upon transition from the D3hot to the D0 state, full reinitialization sequence is needed to return the device to D0 Initialized.
                                     
                                     Regardless of this bit, devices that transition from D3hot to D0 by a system or bus segment reset will return to the device state D0 Uninitialized with only PME context preserved if PME is supported and enabled.
    RSVD2[7..4]                  - (RO) Reserved
    Pmcsr_Pme_En[8]              - (RW) PME Enable
                                     A 1 enables the function to assert PME#.
                                     When 0, PME# assertion is disabled.
                                     This bit defaults to 0 if the function does not support PME# generation from D3cold.
                                     
                                     If the function supports PME# from D3cold, then this bit is sticky and must be explicitly cleared by the operating system each time it is initially loaded.
                                     Functions that do not support PME# generation from any D-state (i.e., PMC(15:11) = 00000b), may hardwire this bit to be read-only always returning a 0 when read by system software.
    Pmcsr_Data_Sel[12..9]        - (RO) Data Select
                                     This 4-bit field is used to select which data is to be reported through the Data register and Data_Scale field.
                                     This field is a required component of the Data register (offset 7) and must be implemented if the Data register is implemented.
    Pmcsr_Data_Scale[14..13]     - (RO) Data Scale
                                     This 2-bit read-only field indicates the scaling factor to be used when interpreting the value of the Data register. The value and meaning of this field will vary depending on which data value has been selected by the Data_Select field.
                                     This field is a required component of the Data register (offset 7) and must be implemented if the Data register is implemented.
    Pmcsr_Pme_Sts[15]            - (W1C) PME Status
                                     This bit is set when the function would normally assert the PME# signal independent of the state of the PME_En bit.
                                     
                                     Writing a 1 to this bit will clear it and cause the function to stop asserting a PME# (if enabled). Writing a 0 has no effect.
                                     This bit defaults to 0 if the function does not support PME# generation from D3cold.
                                     
                                     If the function supports PME# from D3cold, then this bit is sticky and must be explicitly cleared by the operating system each time the operating system is initially loaded.
    RSVD3[23..16]                - (RO) Reserved
    Pm_Dat[31..24]               - (RO) PME Data
                                     This register is used to report the state dependent data requested by the Data_Select field. The value of this register is scaled by the value reported by the Data_Scale field.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pm_Dat_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pm_Dat_MASK 0xFF000000u                // Pm_Dat[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pm_Dat_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD3_MASK 0x00FF0000u                // RSVD3[23..16]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD3_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pme_Sts_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pme_Sts_MASK 0x00008000u                // Pmcsr_Pme_Sts[15]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pme_Sts_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Data_Scale_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Data_Scale_MASK 0x00006000u                // Pmcsr_Data_Scale[14..13]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Data_Scale_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Data_Sel_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Data_Sel_MASK 0x00001E00u                // Pmcsr_Data_Sel[12..9]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Data_Sel_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pme_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pme_En_MASK 0x00000100u                // Pmcsr_Pme_En[8]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pme_En_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD2_MASK 0x000000F0u                // RSVD2[7..4]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD2_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_No_Soft_Rst_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_No_Soft_Rst_MASK 0x00000008u                // Pmcsr_No_Soft_Rst[3]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_No_Soft_Rst_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD1_MASK 0x00000004u                // RSVD1[2]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_RSVD1_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pwr_State_ADDR PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pwr_State_MASK 0x00000003u                // Pmcsr_Pwr_State[1..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CONF_PM_CTL_STS_2_Pmcsr_Pwr_State_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_CONF_VENDOR_CAP_2 (0x74041000 + 0x00010100u)---

    Ves_Cap_Id[15..0]            - (RO) Capability ID
                                     Extended Capability ID for the Vendor-Specific Capability is 000Bh.
    Ves_Cap_Version[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    Ves_Nx_Ptr[31..20]           - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Nx_Ptr_MASK 0xFFF00000u                // Ves_Nx_Ptr[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Nx_Ptr_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Cap_Version_MASK 0x000F0000u                // Ves_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Cap_Id_MASK 0x0000FFFFu                // Ves_Cap_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_CAP_2_Ves_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_CONF_VENDOR_HDR_2 (0x74041000 + 0x00010104u)---

    Ves_Id[15..0]                - (RO) VSEC ID
                                     This field is a vendor-defined ID number that indicates the nature and format of the VSEC structure.
                                     Software must qualify the Vendor ID before interpreting this field.
    Ves_Rev[19..16]              - (RO) VSEC Version
                                     This field is a vendor-defined version number that indicates the version of the VSEC structure.
                                     Software must qualify the Vendor ID and VSEC ID before interpreting this field.
    Ves_Len[31..20]              - (RO) VSEC(Vendor-Specific Extended Capability) Length
                                     This field indicates the number of bytes in the entire VSEC structure, including the PCI Express Extended Capability header, the Vendor-Specific header, and the Vendor-Specific Registers.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Len_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Len_MASK 0xFFF00000u                // Ves_Len[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Len_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Rev_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Rev_MASK 0x000F0000u                // Ves_Rev[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Rev_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Id_MASK 0x0000FFFFu                // Ves_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_CONF_VENDOR_HDR_2_Ves_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_ATS_CAP1_2 (0x74041000 + 0x00010120u)---

    ATS_CAP_ID[15..0]            - (RO) ATS Extended Capability ID
                                     Indicates the ATS Extended Capability structure. This field must return a Capability ID of 000Fh indicating that this is an ATS Extended Capability structure.
    ATS_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    ATS_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_NEXT_CAP_MASK 0xFFF00000u                // ATS_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_CAP_VER_MASK  0x000F0000u                // ATS_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_CAP_ID_MASK   0x0000FFFFu                // ATS_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP1_2_ATS_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ATS_CAP2_2 (0x74041000 + 0x00010124u)---

    ATS_invalidate_queuedepth[4..0] - (RO) Invalidate Queue Depth
                                     The number of Invalidate Requests that the Function can accept before putting backpressure on the Upstream connection. If 0 0000b, the Function can accept 32 Invalidate Requests.
    ATS_page_aligned_req[5]      - (RO) Page Aligned Request
                                     If Set, indicates the Untranslated Address is always aligned to a 4096 byte boundary. Setting this field is recommended. This field permits software to distinguish between implementations compatible with this specification and those compatible with an earlier version of this specification in which a Requester was permitted to supply anything in bits [11:2].
    ATS_invalidate_supported[6]  - (RO) Global Invalidate Supported
                                     If Set, the Function supports Invalidation Requests that have the Global Invalidate bit Set. If Clear, the Function ignores the Global Invalidate bit in all Invalidate Requests (see Section 10.3.8).
                                     This bit is 0b if the Function does not support the PASID TLP Prefix.
    RSVD1[15..7]                 - (RO) Reserved
    ATS_stu[20..16]              - (RO) Smallest Translation Unit (STU)
                                     This value indicates to the Function the minimum number of 4096-byte blocks that is indicated in a Translation Completions or Invalidate Requests. This is a power of 2 multiplier and the number of blocks is 2STU. A value of 0 0000b indicates one block and a value of 1 1111b indicates 231 blocks (or 8 TB total)
                                     Default value is 0 0000b.
    RSVD2[30..21]                - (RO) Reserved
    ATS_en[31]                   - (RO) Enable (E)
                                     When Set, the Function is enabled to cache translations.
                                     Behavior is undefined if this bit is Set and the value of the PASID Enable, Execute Requested Enable, or Privileged Mode Requested bits are changed.
                                     Default value is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_en_ADDR       PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_en_MASK       0x80000000u                // ATS_en[31]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_en_SHFT       31u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_RSVD2_MASK        0x7FE00000u                // RSVD2[30..21]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_RSVD2_SHFT        21u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_stu_ADDR      PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_stu_MASK      0x001F0000u                // ATS_stu[20..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_stu_SHFT      16u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_RSVD1_MASK        0x0000FF80u                // RSVD1[15..7]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_RSVD1_SHFT        7u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_invalidate_supported_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_invalidate_supported_MASK 0x00000040u                // ATS_invalidate_supported[6]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_invalidate_supported_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_page_aligned_req_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_page_aligned_req_MASK 0x00000020u                // ATS_page_aligned_req[5]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_page_aligned_req_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_invalidate_queuedepth_ADDR PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_invalidate_queuedepth_MASK 0x0000001Fu                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ATS_CAP2_2_ATS_invalidate_queuedepth_SHFT 0u

/* =====================================================================================

  ---PCIE_ARI_CAP1_2 (0x74041000 + 0x00010128u)---

    ARI_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCISIG defined ID number that indicates the nature and format of the extended capability.
                                     PCI Express Extended Capability ID for the ARI Capability is 000Eh.This field is a PCI-SIG defined ID number that indicates the nature and format of the extended capability.
    ARI_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the capability structure present.
                                     Must be 1h for this version of the specification.
    ARI_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_NEXT_CAP_MASK 0xFFF00000u                // ARI_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_CAP_VER_MASK  0x000F0000u                // ARI_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_CAP_ID_MASK   0x0000FFFFu                // ARI_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP1_2_ARI_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ARI_CAP2_2 (0x74041000 + 0x0001012Cu)---

    MFVC_Func_Grp_CAP[0]         - (RO) Applicable only for Function 0; must be 0b for all other Functions. If 1b, indicates that the ARI Device supports Function Group level arbitration via its Multi-Function Virtual Channel (MFVC) Capability structure.
    ACS_Func_GrP_CAP[1]          - (RO) Applicable only for Function 0; must be 0b for all other Functions. If 1b, indicates that the ARI Device supports Function Group level granularity for ACS P2P Egress Control via its ACS Capability structures.
    RSVD1[7..2]                  - (RO) Reserved
    NEXT_FUNC_NUM[15..8]         - (RO) This field indicates the Function Number of the next higher numbered Function in the Device, or 00h if there are no higher numbered Functions. Function 0 starts this linked list of Functions.
    MFVC_Func_Grp_En[16]         - (RO) Applicable only for Function 0; must be hardwired to 0b for all other Functions. When set, the ARI Device must interpret entries in its Function Arbitration Table as Function Group Numbers rather than Function Numbers.
    ACS_Func_Grp_En[17]          - (RO) Applicable only for Function 0; must be hardwired to 0b for all other Functions. When set, each Function in the ARI Device must associate bits within its Egress Control Vector with Function Group Numbers rather than Function Numbers.
    RSVD2[23..18]                - (RO) Reserved
    Func_Grp[31..24]             - (RO) Assigns a Function Group Number to this Function.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_Func_Grp_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_Func_Grp_MASK     0xFF000000u                // Func_Grp[31..24]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_Func_Grp_SHFT     24u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_RSVD2_MASK        0x00FC0000u                // RSVD2[23..18]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_RSVD2_SHFT        18u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ACS_Func_Grp_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ACS_Func_Grp_En_MASK 0x00020000u                // ACS_Func_Grp_En[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ACS_Func_Grp_En_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_MFVC_Func_Grp_En_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_MFVC_Func_Grp_En_MASK 0x00010000u                // MFVC_Func_Grp_En[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_MFVC_Func_Grp_En_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_NEXT_FUNC_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_NEXT_FUNC_NUM_MASK 0x0000FF00u                // NEXT_FUNC_NUM[15..8]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_NEXT_FUNC_NUM_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_RSVD1_MASK        0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ACS_Func_GrP_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ACS_Func_GrP_CAP_MASK 0x00000002u                // ACS_Func_GrP_CAP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ACS_Func_GrP_CAP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_MFVC_Func_Grp_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_MFVC_Func_Grp_CAP_MASK 0x00000001u                // MFVC_Func_Grp_CAP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ARI_CAP2_2_MFVC_Func_Grp_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PRI_CAP1_2 (0x74041000 + 0x00010130u)---

    PRI_CAP_ID[15..0]            - (RO) Page Request Extended Capability ID
                                     Indicates that the associated extended capability structure is a Page Request Extended Capability. This field must return a Capability ID of 0013h.
    PRI_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
    PRI_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     The offset to the next PCI Extended Capability structure or 000h if no other items exist in the linked list of capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_NEXT_CAP_MASK 0xFFF00000u                // PRI_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_CAP_VER_MASK  0x000F0000u                // PRI_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_CAP_ID_MASK   0x0000FFFFu                // PRI_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP1_2_PRI_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_PRI_CAP2_2 (0x74041000 + 0x00010134u)---

    PRI_EN[0]                    - (RO) Enable (E)
                                     This field, when set, indicates that the Page Request Interface is allowed to make page requests. If this field is Clear, the Page Request Interface is not allowed to issue page requests. If both this field and the Stopped field are Clear, then the Page Request Interface will not issue new page requests, but has outstanding page requests that have been transmitted or are queued for transmission. When the Page Request Interface is transitioned from not-Enabled to Enabled, its status flags (Stopped, Response Failure, and Unexpected Response flags) are cleared. Enabling a Page Request Interface that has not successfully Stopped has indeterminate results.
                                     Default value is 0b.
    PRI_RST[1]                   - (RO) Reset (R)
                                     When the Enable field is clear, or is being cleared in the same register update that sets this field, writing a 1b to this field, clears the associated implementation dependent page request credit counter and pending request state for the associated Page Request Interface. No action is initiated if this field is written to 0b or if this field is written with any value while the Enable field is Set. Reads of this field return 0b.
    RSVD1[15..2]                 - (RO) Reserved
    PRI_RF[16]                   - (RO) Response Failure (RF)
                                     This field, when Set, indicates that the Function has received a PRG Response Message indicating a Response Failure. The Function expects no further responses from the host (any received are ignored). This field is Set by the Function and Cleared when a one is written to the field.
                                     For SR-IOV, this field is Set in the PF if any associated Function (PF or VF) receives a PRG Response Message indicating Response Failure.
                                     Default value is 0b.
    PRI_UPRGI[17]                - (RO) Unexpected Page Request Group Index (UPRGI)
                                     This field, when Set, indicates that the Function has received a PRG Response Message containing a PRG index that has no matching request. This field is Set by the Function and cleared when a one is written to the field.
                                     For SR-IOV, this field is Set in the PF if any associated Function (PF or VF) receives a PRG Response Message that does has no matching request.
                                     Default value is 0b.
    RSVD2[23..18]                - (RO) Reserved
    PRI_STOPPED[24]              - (RO) Stopped (S)
                                     When this field is Set, the associated page request interface has stopped issuing additional page requests and that all previously issued Page Requests have completed. When this field is Clear the associated page request interface either has not stopped or has stopped issuing new Page Requests but has outstanding Page Requests. This field is only meaningful if Enable is Clear. If Enable is Set, this field is undefined.
                                     When the Enable field is Cleared, after having been previously Set, the interface transitions to the stopping state and Clears this field. After all page requests currently outstanding at the Function(s) have completed, this field is Set and the interface enters the disabled state. If there were no outstanding page requests, this field may be Set immediately when Enable is Cleared. Resetting the interface will cause an immediate transition to the disabled state. While in the stopping state, receipt of a Response Failure message will result in the immediate transition to the disabled state (Setting this field).
                                     For SR-IOV, this field is Set only when all associated Functions (PF and VFs) have stopped issuing page requests.
                                     Default value is 1b.
    RSVD3[30..25]                - (RO) Reserved
    PRI_RESP_PASID_REQUIRED[31]  - (RO) PRG Response PASID Required
                                     If Set, the Function expects a PASID TLP Prefix on PRG Response Messages when the corresponding Page Requests had a PASID TLP Prefix. If Clear, the Function does not expect PASID TLP Prefixes on any PRG Response Message.
                                     Function behavior is undefined if this bit is Clear and the Function receives a PRG Response Message with a PASID TLP Prefix.
                                     Function behavior is undefined if this bit is Set and the Function receives a PRG Response Message with no PASID TLP Prefix when the corresponding Page Requests had a PASID TLP Prefix.
                                     This bit is RsvdZ if the Function does not support the PASID TLP Prefix.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RESP_PASID_REQUIRED_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RESP_PASID_REQUIRED_MASK 0x80000000u                // PRI_RESP_PASID_REQUIRED[31]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RESP_PASID_REQUIRED_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD3_MASK        0x7E000000u                // RSVD3[30..25]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD3_SHFT        25u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_STOPPED_ADDR  PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_STOPPED_MASK  0x01000000u                // PRI_STOPPED[24]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_STOPPED_SHFT  24u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD2_MASK        0x00FC0000u                // RSVD2[23..18]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD2_SHFT        18u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_UPRGI_ADDR    PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_UPRGI_MASK    0x00020000u                // PRI_UPRGI[17]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_UPRGI_SHFT    17u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RF_ADDR       PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RF_MASK       0x00010000u                // PRI_RF[16]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RF_SHFT       16u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD1_MASK        0x0000FFFCu                // RSVD1[15..2]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_RSVD1_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RST_ADDR      PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RST_MASK      0x00000002u                // PRI_RST[1]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_RST_SHFT      1u
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_EN_ADDR       PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_EN_MASK       0x00000001u                // PRI_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP2_2_PRI_EN_SHFT       0u

/* =====================================================================================

  ---PCIE_PRI_CAP3_2 (0x74041000 + 0x00010138u)---

    PRI_OUT_PAGE_REQ_CAP[31..0]  - (RO) outstanding page request Capability
                                     This register contains the number of outstanding page request messages the associated Page Request Interface physically supports. This is the upper limit on the number of pages that can be usefully allocated to the Page Request Interface.
                                     This register is Read Only.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_2_PRI_OUT_PAGE_REQ_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_2_PRI_OUT_PAGE_REQ_CAP_MASK 0xFFFFFFFFu                // PRI_OUT_PAGE_REQ_CAP[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP3_2_PRI_OUT_PAGE_REQ_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_PRI_CAP4_2 (0x74041000 + 0x0001013Cu)---

    PRI_OPRA[31..0]              - (RO) outstanding page request allocation
                                     This register contains the number of outstanding page request messages the associated Page Request Interface is allowed to issue (have outstanding at any given instance).
                                     This register is Read/Write. Behavior is undefined if this register is changed while the Enable flag is set. Behavior is undefined if this register is written with a value larger than Outstanding Page Request Capacity. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_2_PRI_OPRA_ADDR     PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_2_PRI_OPRA_MASK     0xFFFFFFFFu                // PRI_OPRA[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_PRI_CAP4_2_PRI_OPRA_SHFT     0u

/* =====================================================================================

  ---PCIE_MCAST_CAP1_2 (0x74041000 + 0x00010180u)---

    MC_CAP_ID[15..0]             - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the Multicast Capability is 0012h.
    MC_CAP_VER[19..16]           - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    MC_NEXT_CAP[31..20]          - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_NEXT_CAP_MASK 0xFFF00000u                // MC_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_CAP_VER_MASK 0x000F0000u                // MC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_CAP_ID_ADDR  PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_CAP_ID_MASK  0x0000FFFFu                // MC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP1_2_MC_CAP_ID_SHFT  0u

/* =====================================================================================

  ---PCIE_MCAST_CAP2_2 (0x74041000 + 0x00010184u)---

    MC_MAX_GRP[5..0]             - (RO) MC Maximum Group
                                     Value indicates the maximum number of Multicast Groups that the component supports, encoded as M-1. A value of 00h indicates that one Multicast Group is supported.
    RSVD1[7..6]                  - (RO) Reserved
    MC_WIN_SIZE[13..8]           - (RO) MC Window Size Requested
                                     In Endpoints, the log2 of the Multicast Window size requested. RsvdP in Switch and Root Ports.
    RSVD2[14]                    - (RO) Reserved
    MC_ECRC_REGEN_SUP[15]        - (RO) MC ECRC Regeneration Supported
                                     If Set, indicates that ECRC regeneration is supported.
                                     This bit must not be Set unless the Function supports Advanced Error Reporting, and the ECRC Check Capable bit in the Advanced Error Capabilities and Control register is also Set. However, if ECRC regeneration is supported, its operation is not contingent upon the setting of the ECRC Check Enable bit in the Advanced Error Capabilities and Control register. This bit is applicable to Switch and Root Ports and is RsvdP in all other Functions.
    MC_NUM_GRP[21..16]           - (RO) MC Number Group
                                     Value indicates the number of Multicast Groups configured for use, encoded as N-1. The default value of 00 0000b indicates that one Multicast Group is configured for use. Behavior is undefined if value exceeds MC_Max_Group. This parameter indirectly defines the upper limit of the Multicast address range. This field is ignored if MC_Enable is Clear. Default value is 00 0000b.
    RSVD3[30..22]                - (RO) Reserved
    MC_En[31]                    - (RO) MC Enable
                                     When Set, the Multicast mechanism is enabled for the component. Default value is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_En_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_En_MASK      0x80000000u                // MC_En[31]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_En_SHFT      31u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD3_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD3_MASK      0x7FC00000u                // RSVD3[30..22]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD3_SHFT      22u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_NUM_GRP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_NUM_GRP_MASK 0x003F0000u                // MC_NUM_GRP[21..16]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_NUM_GRP_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_ECRC_REGEN_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_ECRC_REGEN_SUP_MASK 0x00008000u                // MC_ECRC_REGEN_SUP[15]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_ECRC_REGEN_SUP_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD2_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD2_MASK      0x00004000u                // RSVD2[14]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD2_SHFT      14u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_WIN_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_WIN_SIZE_MASK 0x00003F00u                // MC_WIN_SIZE[13..8]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_WIN_SIZE_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD1_MASK      0x000000C0u                // RSVD1[7..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_RSVD1_SHFT      6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_MAX_GRP_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_MAX_GRP_MASK 0x0000003Fu                // MC_MAX_GRP[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP2_2_MC_MAX_GRP_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP3_2 (0x74041000 + 0x00010188u)---

    MC_Index_pos[5..0]           - (RO) MC Index Position
                                     The location of the LSB of the Multicast Group number within the address. Behavior is undefined if this value is less than 12 and MC_Enable is Set. Default is 0.
    RSVD1[11..6]                 - (RO) Reserved
    MC_Addr_lsb[31..12]          - (RO) MC Base Address Lsb
                                     The base address of the Multicast address range. The behavior is undefined if MC_Enable is Set and bits in this field corresponding to address bits that contain the Multicast Group number or address bits less than MC_Index_Position are non-zero. Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_MC_Addr_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_MC_Addr_lsb_MASK 0xFFFFF000u                // MC_Addr_lsb[31..12]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_MC_Addr_lsb_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_RSVD1_MASK      0x00000FC0u                // RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_RSVD1_SHFT      6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_MC_Index_pos_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_MC_Index_pos_MASK 0x0000003Fu                // MC_Index_pos[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP3_2_MC_Index_pos_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP4_2 (0x74041000 + 0x0001018Cu)---

    MC_Addr_msb[31..0]           - (RO) MC Base Address Msb
                                     The base address of the Multicast address range. The behavior is undefined if MC_Enable is Set and bits in this field corresponding to address bits that contain the Multicast Group number or address bits less than MC_Index_Position are non-zero. Default is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_2_MC_Addr_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_2_MC_Addr_msb_MASK 0xFFFFFFFFu                // MC_Addr_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP4_2_MC_Addr_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP5_2 (0x74041000 + 0x00010190u)---

    MC_Rcv_lsb[31..0]            - (RO) MC Receive Lsb
                                     For each bit that's Set, this Function gets a copy of any Multicast TLPs for the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_2_MC_Rcv_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_2_MC_Rcv_lsb_MASK 0xFFFFFFFFu                // MC_Rcv_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP5_2_MC_Rcv_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP6_2 (0x74041000 + 0x00010194u)---

    MC_Rcv_msb[31..0]            - (RO) MC Receive Msb
                                     For each bit that's Set, this Function gets a copy of any Multicast TLPs for the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_2_MC_Rcv_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_2_MC_Rcv_msb_MASK 0xFFFFFFFFu                // MC_Rcv_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP6_2_MC_Rcv_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP7_2 (0x74041000 + 0x00010198u)---

    MC_BLK_ALL_lsb[31..0]        - (RO) MC Block All Lsb
                                     For each bit that is Set, this Function is blocked from sending TLPs to the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_2_MC_BLK_ALL_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_2_MC_BLK_ALL_lsb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP7_2_MC_BLK_ALL_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP8_2 (0x74041000 + 0x0001019Cu)---

    MC_BLK_ALL_msb[31..0]        - (RO) MC Block All_Msb
                                     For each bit that is Set, this Function is blocked from sending TLPs to the associated Multicast Group. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_2_MC_BLK_ALL_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_2_MC_BLK_ALL_msb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP8_2_MC_BLK_ALL_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP9_2 (0x74041000 + 0x000101A0u)---

    MC_BLK_ALL_UNT_lsb[31..0]    - (RO) MC Block Untranslated Lsb
                                     For each bit that is Set, this Function is blocked from sending TLPs containing Untranslated Addresses to the associated MCG. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_2_MC_BLK_ALL_UNT_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_2_MC_BLK_ALL_UNT_lsb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_UNT_lsb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP9_2_MC_BLK_ALL_UNT_lsb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP10_2 (0x74041000 + 0x000101A4u)---

    MC_BLK_ALL_UNT_msb[31..0]    - (RO) MC Block Untranslated Msb
                                     For each bit that is Set, this Function is blocked from sending TLPs containing Untranslated Addresses to the associated MCG. Bits above MC_Num_Group are ignored by hardware. Default value of each bit is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_2_MC_BLK_ALL_UNT_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_2_MC_BLK_ALL_UNT_msb_MASK 0xFFFFFFFFu                // MC_BLK_ALL_UNT_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP10_2_MC_BLK_ALL_UNT_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP11_2 (0x74041000 + 0x000101A8u)---

    MC_overlay_size[5..0]        - (RO) MC Overlay Size
                                     If 6 or greater, specifies the size in bytes of the overlay aperture as a power of 2. If less than 6, disables the overlay mechanism. Default value is 00 0000b.
    MC_overlay_bar_lsb[31..6]    - (RO) MC Overlay BAR Lsb
                                     Specifies the base address of the window onto which MC TLPs passing through this Function will be overlaid. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_MC_overlay_bar_lsb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_MC_overlay_bar_lsb_MASK 0xFFFFFFC0u                // MC_overlay_bar_lsb[31..6]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_MC_overlay_bar_lsb_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_MC_overlay_size_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_MC_overlay_size_MASK 0x0000003Fu                // MC_overlay_size[5..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP11_2_MC_overlay_size_SHFT 0u

/* =====================================================================================

  ---PCIE_MCAST_CAP12_2 (0x74041000 + 0x000101ACu)---

    MC_overlay_bar_msb[31..0]    - (RO) MC Overlay BAR Msb
                                     Specifies the base address of the window onto which MC TLPs passing through this Function will be overlaid. Default value is 0.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_2_MC_overlay_bar_msb_ADDR PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_2_MC_overlay_bar_msb_MASK 0xFFFFFFFFu                // MC_overlay_bar_msb[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_MCAST_CAP12_2_MC_overlay_bar_msb_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP1_2 (0x74041000 + 0x000101B0u)---

    TPHR_CAP_ID[15..0]           - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     PCI Express Extended Capability ID for the TPH Requester Capability is 0017h.
    TPHR_CAP_VER[19..16]         - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    TPHR_NEXT_CAP[31..20]        - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Extended Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_NEXT_CAP_MASK 0xFFF00000u                // TPHR_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_CAP_VER_MASK 0x000F0000u                // TPHR_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_CAP_ID_MASK 0x0000FFFFu                // TPHR_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP1_2_TPHR_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP2_2 (0x74041000 + 0x000101B4u)---

    TPHR_NOST_MODE_SUP[0]        - (RO) No ST Mode Supported
                                     If set indicates that the Function supports the No ST Mode of operation.
                                     This mode is required to be supported by all Functions that implement this Capability structure. This bit must have a value of 1b.
    TPHR_INT_VECTOR_MODE_SUP[1]  - (RO) Interrupt Vector Mode Supported
                                     If set indicates that the Function supports the Interrupt Vector Mode of operation.
    TPHR_DEV_SPECIFIC_MODE_SUP[2] - (RO) Device Specific Mode Supported
                                     If set indicates that the Function supports the Device Specific Mode of operation.
    RSVD1[7..3]                  - (RO) Reserved
    TPHR_EXTREQ_SUP[8]           - (RO) Extended TPH Requester Supported
                                     If Set indicates that the Function is capable of generating Requests with a TPH TLP Prefix.
    TPHR_ST_TABLE_LOC[10..9]     - (RO) ST Table Location
                                     Value indicates if and where the ST Table is located.
                                     Defined Encodings are:
                                     00b: ST Table is not present.
                                     01b: ST Table is located in the TPH Requester Capability structure.
                                     10b: ST Table is located in the MSI-X Table (see Section 7.7).
                                     11b: Reserved
                                     A Function that only supports the No ST Mode of operation must have a value of 00b in this field.
                                     A Function may report a value of 10b only if it implements an MSI-X Capability.
    RSVD3[15..11]                - (RO) Reserved
    TPHR_ST_TABLE_SIZE[26..16]   - (RO) ST Table Size
                                     Value indicates the maximum number of ST Table entries the Function may use. Software reads this field to determine the ST Table Size N, which is encoded as N-1. For example, a returned value of 000 0000 0011b indicates a table size of four entries.
                                     There is an upper limit of 64 entries when the ST Table is located in the TPH Requester Capability structure.
                                     When the ST Table is located in the MSI-X Table, this value is limited by the size of the MSI-X Table.
                                     This field is only applicable for Functions that implement an ST Table as indicated by the ST Table Location field. Otherwise, the value in this field is undefined.
    RSVD4[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD4_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD4_MASK       0xF8000000u                // RSVD4[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD4_SHFT       27u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_ST_TABLE_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_ST_TABLE_SIZE_MASK 0x07FF0000u                // TPHR_ST_TABLE_SIZE[26..16]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_ST_TABLE_SIZE_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD3_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD3_MASK       0x0000F800u                // RSVD3[15..11]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD3_SHFT       11u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_ST_TABLE_LOC_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_ST_TABLE_LOC_MASK 0x00000600u                // TPHR_ST_TABLE_LOC[10..9]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_ST_TABLE_LOC_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_EXTREQ_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_EXTREQ_SUP_MASK 0x00000100u                // TPHR_EXTREQ_SUP[8]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_EXTREQ_SUP_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD1_MASK       0x000000F8u                // RSVD1[7..3]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_DEV_SPECIFIC_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_DEV_SPECIFIC_MODE_SUP_MASK 0x00000004u                // TPHR_DEV_SPECIFIC_MODE_SUP[2]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_DEV_SPECIFIC_MODE_SUP_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_INT_VECTOR_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_INT_VECTOR_MODE_SUP_MASK 0x00000002u                // TPHR_INT_VECTOR_MODE_SUP[1]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_INT_VECTOR_MODE_SUP_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_NOST_MODE_SUP_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_NOST_MODE_SUP_MASK 0x00000001u                // TPHR_NOST_MODE_SUP[0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP2_2_TPHR_NOST_MODE_SUP_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP3_2 (0x74041000 + 0x000101B8u)---

    st_mode_sel[2..0]            - (RO) ST Mode Select
                                     Selects the ST Mode of operation.
                                     Defined encodings are:
                                     000b: No ST Mode
                                     001b: Interrupt Vector Mode
                                     010b: Device Specific Mode
                                     all other encodings: reserved for future use
                                     Functions that support only the No ST Mode of operation must hardwire this field to 000b.
                                     Function operation is undefined if software enables a mode of operation that does not correspond to a mode supported by the Function.
                                     The default value of this field is 000b.
    RSVD1[7..3]                  - (RO) Reserved
    tphr_en[9..8]                - (RO) TPH Requester Enable
                                     Controls the ability to issue Request TLPs using either TPH or Extended TPH.
                                     Defined encodings are:
                                     00b: Function operating as a Requester is not permitted to issue Requests with TPH or Extended TPH.
                                     01b: Function operating as a Requester is permitted to issue Requests with TPH and is not permitted to issue Requests with Extended TPH.
                                     10b: Reserved.
                                     11b: Function operating as a Requester is permitted to issue Requests with TPH and Extended TPH.
                                     Functions that advertise that they do not support Extended TPH are permitted to hardwire bit 9 of this field to 0b.
                                     The default value of this field is 00b.
    RSVD2[31..10]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_RSVD2_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_RSVD2_MASK       0xFFFFFC00u                // RSVD2[31..10]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_RSVD2_SHFT       10u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_tphr_en_ADDR     PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_tphr_en_MASK     0x00000300u                // tphr_en[9..8]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_tphr_en_SHFT     8u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_RSVD1_MASK       0x000000F8u                // RSVD1[7..3]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_RSVD1_SHFT       3u
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_st_mode_sel_ADDR PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_st_mode_sel_MASK 0x00000007u                // st_mode_sel[2..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP3_2_st_mode_sel_SHFT 0u

/* =====================================================================================

  ---PCIE_TPHR_CAP4_2 (0x74041000 + 0x000101BCu)---

    RSVD[31..0]                  - (RO) No Implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_2_RSVD_ADDR        PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_2_RSVD_MASK        0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_TPHR_CAP4_2_RSVD_SHFT        0u

/* =====================================================================================

  ---PCIE_ACS_CAP1_2 (0x74041000 + 0x000101C0u)---

    ACS_CAP_ID[15..0]            - (RO) ACS Capability ID
    ACS_CAP_VER[19..16]          - (RO) ACS Capability Version
    ACS_NEXT_CAP[31..20]         - (RO) Next Capability Offset

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_NEXT_CAP_MASK 0xFFF00000u                // ACS_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_CAP_VER_MASK  0x000F0000u                // ACS_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_CAP_ID_MASK   0x0000FFFFu                // ACS_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP1_2_ACS_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_ACS_CAP2_2 (0x74041000 + 0x000101C4u)---

    ACS_V[0]                     - (RO) ACS Source Validation (V)
                                     Required for Root Ports and Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Source Validation.
    ACS_B[1]                     - (RO) ACS Translation Blocking (B)
                                     Required for Root Ports and Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Translation Blocking.
    ACS_R[2]                     - (RO) ACS P2P Request Redirect (R)
                                     Required for Root Ports that support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Request Redirect.
    ACS_C[3]                     - (RO) ACS P2P Completion Redirect (C)
                                     Required for all Functions that support ACS P2P Request Redirect; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Completion Redirect.
    ACS_U[4]                     - (RO) ACS Upstream Forwarding (U)
                                     Required for Root Ports if the RC supports Redirected Request Validation; required for Switch Downstream Ports; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Upstream Forwarding.
    ACS_E[5]                     - (RO) ACS P2P Egress Control (E)
                                     Optional for Root Ports, Switch Downstream Ports, and Multi-Function Device Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS P2P Egress Control.
    ACS_T[6]                     - (RO) ACS Direct Translated P2P (T)
                                     Required for Root Ports that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Root Ports; required for Switch Downstream Ports; required for Multi-Function Device Functions that support Address Translation Services (ATS) and also support peer-to-peer traffic with other Functions; must be hardwired to 0b otherwise. If 1b, indicates that the component implements ACS Direct Translated P2P.
    RSVD1[7]                     - (RO) Reserved
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_RSVD1_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_RSVD1_MASK        0x00000080u                // RSVD1[7]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_RSVD1_SHFT        7u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_T_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_T_MASK        0x00000040u                // ACS_T[6]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_T_SHFT        6u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_E_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_E_MASK        0x00000020u                // ACS_E[5]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_E_SHFT        5u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_U_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_U_MASK        0x00000010u                // ACS_U[4]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_U_SHFT        4u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_C_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_C_MASK        0x00000008u                // ACS_C[3]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_C_SHFT        3u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_R_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_R_MASK        0x00000004u                // ACS_R[2]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_R_SHFT        2u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_B_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_B_MASK        0x00000002u                // ACS_B[1]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_B_SHFT        1u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_V_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_V_MASK        0x00000001u                // ACS_V[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP2_2_ACS_V_SHFT        0u

/* =====================================================================================

  ---PCIE_ACS_CAP3_2 (0x74041000 + 0x000101C8u)---

    RESERVED0[7..0]              - (RO) Reserved bits
    ACS_VEC_SIZE[13..8]          - (RO) Egress Control Vector Size
                                     Encodings 01h-FFh directly indicate the number of applicable bits in the Egress Control Vector; the encoding 00h indicates 256 bits.
                                     If the ACS P2P Egress Control (E) bit is 0b, the value of the size field is undefined, and the Egress Control Vector register is not required to be present.
    RSVD2[15..14]                - (RO) Reserved
    ACS_V_EN[16]                 - (RO) ACS Source Validation Enable (V)
                                     When Set, the component validates the Bus Number from the Requester ID of Upstream Requests against the secondary/subordinate Bus Numbers.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Source Validation functionality is not implemented.
    ACS_B_EN[17]                 - (RO) ACS Translation Blocking Enable (B)
                                     When Set, the component blocks all Upstream Memory Requests whose Address Translation (AT) field is not set to the default value.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Translation Blocking functionality is not implemented.
    ACS_R_EN[18]                 - (RO) ACS P2P Request Redirect Enable (R)
                                     In conjunction with ACS P2P Egress Control and ACS Direct Translated P2P mechanisms, determines when the component redirects peer-to-peer Requests Upstream (see Section 6.12.3). Note that with Downstream Ports, this bit only applies to Upstream Requests arriving at the Downstream Port, and whose normal routing targets a different Downstream Port.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Request Redirect functionality is not implemented.
    ACS_C_EN[19]                 - (RO) ACS P2P Completion Redirect Enable (C)
                                     Determines when the component redirects peer-to-peer Completions Upstream; applicable only to Completions130 whose Relaxed Ordering Attribute is clear.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Completion Redirect functionality is not implemented.
    ACS_U_EN[20]                 - (RO) ACS Upstream Forwarding Enable (U)
                                     When Set, the component forwards Upstream any Request or Completion TLPs it receives that were redirected Upstream by a component lower in the hierarchy. Note that this bit only applies to Upstream TLPs arriving at a Downstream Port, and whose normal routing targets the same Downstream Port.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Upstream Forwarding functionality is not implemented.
    ACS_E_EN[21]                 - (RO) ACS P2P Egress Control Enable (E)
                                     In conjunction with the Egress Control Vector plus the ACS P2P Request Redirect and ACS Direct Translated P2P mechanisms, determines when to allow, disallow, or redirect peer-to-peer Requests.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS P2P Egress Control functionality is not implemented.
    ACS_T_EN[22]                 - (RO) ACS Direct Translated P2P Enable (T)
                                     When Set, overrides the ACS P2P Request Redirect and ACS P2P Egress Control mechanisms with peer-to-peer Memory Requests whose Address Translation (AT) field indicates a Translated address.
                                     This bit is ignored if ACS Translation Blocking Enable (B) is 1b.
                                     Default value of this bit is 0b. Must be hardwired to 0b if the ACS Direct Translated P2P functionality is not implemented.
    RSVD3[31..23]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_RSVD3_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_RSVD3_MASK        0xFF800000u                // RSVD3[31..23]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_RSVD3_SHFT        23u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_T_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_T_EN_MASK     0x00400000u                // ACS_T_EN[22]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_T_EN_SHFT     22u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_E_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_E_EN_MASK     0x00200000u                // ACS_E_EN[21]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_E_EN_SHFT     21u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_U_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_U_EN_MASK     0x00100000u                // ACS_U_EN[20]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_U_EN_SHFT     20u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_C_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_C_EN_MASK     0x00080000u                // ACS_C_EN[19]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_C_EN_SHFT     19u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_R_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_R_EN_MASK     0x00040000u                // ACS_R_EN[18]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_R_EN_SHFT     18u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_B_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_B_EN_MASK     0x00020000u                // ACS_B_EN[17]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_B_EN_SHFT     17u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_V_EN_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_V_EN_MASK     0x00010000u                // ACS_V_EN[16]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_V_EN_SHFT     16u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_RSVD2_ADDR        PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_RSVD2_MASK        0x0000C000u                // RSVD2[15..14]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_RSVD2_SHFT        14u
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_VEC_SIZE_ADDR PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_VEC_SIZE_MASK 0x00003F00u                // ACS_VEC_SIZE[13..8]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP3_2_ACS_VEC_SIZE_SHFT 8u

/* =====================================================================================

  ---PCIE_ACS_CAP4_2 (0x74041000 + 0x000101CCu)---

    RSVD[31..0]                  - (RO) No Implement

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_2_RSVD_ADDR         PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_2_RSVD_MASK         0xFFFFFFFFu                // RSVD[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ACS_CAP4_2_RSVD_SHFT         0u

/* =====================================================================================

  ---PCIF_DLF_CAP1_2 (0x74041000 + 0x000101E0u)---

    DLF_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID.
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for Data Link Feature is 0025h
    DLF_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    DLF_NEXT_CAP[31..20]         - (RO) Next Capability Offset.
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.
                                     The bottom 2 bits of this offset are Reserved and must be implemented as 00b although software must mask them to allow for future uses of these bits.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_NEXT_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_NEXT_CAP_MASK 0xFFF00000u                // DLF_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_NEXT_CAP_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_CAP_VER_ADDR  PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_CAP_VER_MASK  0x000F0000u                // DLF_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_CAP_VER_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_CAP_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_CAP_ID_MASK   0x0000FFFFu                // DLF_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP1_2_DLF_CAP_ID_SHFT   0u

/* =====================================================================================

  ---PCIF_DLF_CAP2_2 (0x74041000 + 0x000101E4u)---

    DLF_SUP[22..0]               - (RO) Local Data Link Feature Supported.
                                     This field contains the Feature Supported value used when this Port sends a Data Link Feature DLLP (see Figure 3-12). Defined features are:
                                     Bit 0 : Local Scaled Flow Control Supported
                                     This bit indicates that this Port supports the Scaled Flow Control Feature (see Section 3.4.2).
                                     Bits 22:1 RsvdP
                                     Bits associated with features that this Port is capable of supporting are HwInit, defaulting to 1b.
                                     Other bits in this field are RsvdP.
    RESERVED23[30..23]           - (RO) Reserved bits
    DLF_EXCHG_EN[31]             - (RO) Data Link Feature Exchange Enable.
                                     If Set, this bit indicates that this Port will enter the DL_Feature negotiation state (see Section 3.2.1). Default is 1b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_DLF_EXCHG_EN_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_DLF_EXCHG_EN_MASK 0x80000000u                // DLF_EXCHG_EN[31]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_DLF_EXCHG_EN_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_DLF_SUP_ADDR      PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_DLF_SUP_MASK      0x007FFFFFu                // DLF_SUP[22..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP2_2_DLF_SUP_SHFT      0u

/* =====================================================================================

  ---PCIF_DLF_CAP3_2 (0x74041000 + 0x000101E8u)---

    RMT_DLF_SUP[22..0]           - (RO) Remote Data Link Feature Supported.
                                     These bits indicate that the Remote Port supports the corresponding Data Link Feature. These bits capture all information from the Feature Supported field of the Data Link Feature DLLP even when this Port doesn't support the corresponding feature.
                                     This field is Cleared on entry to state DL_Inactive (see Section 3.2.1).
                                     Features currently defined are:
                                     Bit 0 : Remote Scaled Flow Control Supported
                                     This bit indicates that the Remote Port supports the Scaled Flow Control Feature (see Section 3.4.2).
                                     Bits 22:1 : Undefined
                                     Default is 00 0000h
    RESERVED23[30..23]           - (RO) Reserved bits
    RMT_DLF_SUP_VALID[31]        - (RO) Remote Data Link Feature Supported Valid.
                                     This bit indicates that the Port has received a Data Link Feature DLLP in state DL_Feature (see Section 3.2.1) and that the Remote Data Link Feature Supported field is meaningful. This bit is Cleared on entry to state DL_Inactive (see Section 3.2.1).
                                     Default is 0b.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_RMT_DLF_SUP_VALID_ADDR PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_RMT_DLF_SUP_VALID_MASK 0x80000000u                // RMT_DLF_SUP_VALID[31]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_RMT_DLF_SUP_VALID_SHFT 31u
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_RMT_DLF_SUP_ADDR  PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_RMT_DLF_SUP_MASK  0x007FFFFFu                // RMT_DLF_SUP[22..0]
#define PCIE_MAC_CONF_COMMON_PCIF_DLF_CAP3_2_RMT_DLF_SUP_SHFT  0u

/* =====================================================================================

  ---PCIE_AER_CAP_2 (0x74041000 + 0x00010200u)---

    AER_CAP_ID[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability. The Extended Capability ID for the Advanced Error Reporting Capability is 0001h.
    AER_CAP_VER[19..16]          - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present. Must be 1h for this version of the specification.
    AER_NEXT_CAP[31..20]         - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_NEXT_CAP_ADDR  PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_NEXT_CAP_MASK  0xFFF00000u                // AER_NEXT_CAP[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_NEXT_CAP_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_CAP_VER_ADDR   PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_CAP_VER_MASK   0x000F0000u                // AER_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_CAP_VER_SHFT   16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_CAP_ID_ADDR    PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_CAP_ID_MASK    0x0000FFFFu                // AER_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAP_2_AER_CAP_ID_SHFT    0u

/* =====================================================================================

  ---PCIE_AER_UNC_STATUS_2 (0x74041000 + 0x00010204u)---

    AER_UNC_Undefined[3..0]      - (RO) Undefined
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNC_DLPE[4]              - (W1C) Data Link Protocol Error Status
                                     This bit set to one indicates that a Data Link Protocol Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_SDES[5]              - (RO) Surprise Down Error Status
                                     This bit set to one indicates that a Surprise Down Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD1[11..6]         - (RO) Reserved
    AER_UNC_PTLP[12]             - (W1C) Poisoned TLP Status
                                     This bit set to one indicates that a Poisoned TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_FCPE[13]             - (W1C) Flow Control Protocol Error Status
                                     This bit set to one indicates that a Flow Control Protocol Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_CT[14]               - (W1C) Completion Timeout Status
                                     This bit set to one indicates that a Completion Timeout was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_CA[15]               - (W1C) Completer Abort Status
                                     This bit set to one indicates that a Completer Abort was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_UnC[16]              - (W1C) Unexpected Completion Status
                                     This bit set to one indicates that an Unexpected Completion was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD2[17]            - (RO) Reserved
    AER_UNC_MTLP[18]             - (W1C) Malformed TLP Status
                                     This bit set to one indicates that a Malformed TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_ECRC[19]             - (RO) ECRC Error Status
                                     This bit set to one indicates that an ECRC Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_URE[20]              - (W1C) Unsupported Request Error Status
                                     This bit set to one indicates that a Poisoned TLP was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_ACSVIOLATION[21]    - (RO) ACS violation Error Status
                                     This bit set to one indicates that an ACS violation Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_INTERNAL[22]        - (W1C) Internal Error Status
                                     This bit set to one indicates that an Internal Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_MCBLK[23]           - (RO) MC Block Error Status
                                     This bit set to one indicates that a MC Block Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_ATOEGRESSBLK[24]    - (RO) AtomicOp Egress Blocked Status
                                     This bit set to one indicates that an AtomicOp Egress Blocked was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_EEPFXBLK[25]        - (RO) TLP Prefix Blocked Error Status
                                     This bit set to one indicates that a TLP Prefix Blocked Error was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNCM_POIS_TLP_EGBLK[26]  - (RO) Poisoned TLP Egress Blocked Status
                                     This bit set to one indicates that a Poisoned TLP Egress Blocked was detected; software may clear an error status by writing a 1b to the respective bit.
    AER_UNC_RSVD3[31..27]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD3_MASK 0xF8000000u                // AER_UNC_RSVD3[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD3_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCM_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_EEPFXBLK_MASK 0x02000000u                // AER_UNCM_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCM_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_MCBLK_MASK 0x00800000u                // AER_UNCM_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_INTERNAL_MASK 0x00400000u                // AER_UNCM_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_ACSVIOLATION_MASK 0x00200000u                // AER_UNCM_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNCM_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_URE_MASK 0x00100000u                // AER_UNC_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_ECRC_MASK 0x00080000u                // AER_UNC_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_MTLP_MASK 0x00040000u                // AER_UNC_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD2_MASK 0x00020000u                // AER_UNC_RSVD2[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD2_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_UnC_MASK 0x00010000u                // AER_UNC_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_CA_MASK 0x00008000u                // AER_UNC_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_CT_MASK 0x00004000u                // AER_UNC_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_FCPE_MASK 0x00002000u                // AER_UNC_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_PTLP_MASK 0x00001000u                // AER_UNC_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD1_MASK 0x00000FC0u                // AER_UNC_RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_RSVD1_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_SDES_MASK 0x00000020u                // AER_UNC_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_DLPE_MASK 0x00000010u                // AER_UNC_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_Undefined_MASK 0x0000000Fu                // AER_UNC_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_STATUS_2_AER_UNC_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_UNC_MASK_2 (0x74041000 + 0x00010208u)---

    AER_UNCM_Undefined[3..0]     - (RO) Undefined  Mask
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNCM_DLPE[4]             - (RW) Data Link Protocol Error Mask
                                     There is a mask bit per error bit of the Data Link Protocol Error Status register.
    AER_UNCM_SDES[5]             - (RO) Surprise Down Error Mask
                                     There is a mask bit per error bit of the Surprise Down Error Status register. (Endpoint : RO)
    RESERVED6[11..6]             - (RO) Reserved bits
    AER_UNCM_PTLP[12]            - (RW) Poisoned TLP Mask
                                     There is a mask bit per error bit of the Poisoned TLP Status register.
    AER_UNCM_FCPE[13]            - (RW) Flow Control Protocol Error Mask
                                     There is a mask bit per error bit of the Flow Control Protocol Error Status register.
    AER_UNCM_CT[14]              - (RW) Completion Timeout Mask
                                     There is a mask bit per error bit of the Surprise Down Error Status register.
    AER_UNCM_CA[15]              - (RW) Completer Abort Mask
                                     There is a mask bit per error bit of the Completer Abort Status register.
    AER_UNCM_UnC[16]             - (RW) Unexpected Completion Mask
                                     There is a mask bit per error bit of the Unexpected Completion Status register.
    AER_UNCM_RcvOvf[17]          - (RW) Receiver Overflow Mask
                                     There is a mask bit per error bit of the Receiver Overflow Status register.
    AER_UNCM_MTLP[18]            - (RW) Malformed TLP Mask
                                     There is a mask bit per error bit of the Malformed TLP Status register.
    AER_UNCM_ECRC[19]            - (RW) ECRC Error Mask
                                     There is a mask bit per error bit of the ECRC Error Status register.
    AER_UNCM_URE[20]             - (RW) Unsupported Request Error Mask
                                     There is a mask bit per error bit of the Unsupported Request Error Status register.
    AER_UNCM_ACSVIOLATION[21]    - (RO) ACS violation Error Mask
                                     There is a mask bit per error bit of the ACS violation Error Status register.
    AER_UNCM_INTERNAL[22]        - (RW) Internal Error Mask
                                     There is a mask bit per error bit of the Internal Error Status register.
    AER_UNCM_MCBLK[23]           - (RO) MC Block Error Mask
                                     There is a mask bit per error bit of the MC Block Error Status register.
    AER_UNCM_ATOEGRESSBLK[24]    - (RO) AtomicOp Egress Blocked Mask
                                     There is a mask bit per error bit of the AtomicOp Egress Blocked Status register.
    AER_UNCM_EEPFXBLK[25]        - (RO) TLP Prefix Blocked Error Mask
                                     There is a mask bit per error bit of the TLP Prefix Blocked Error Status register.
    AER_UNCM_POIS_TLP_EGBLK[26]  - (RO) Poisoned TLP Egress Blocked Mask
                                     There is a mask bit per error bit of the Poisoned TLP Egress Blocked Status register.
    AER_UNCM_RSVD2[31..27]       - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_RSVD2_MASK 0xF8000000u                // AER_UNCM_RSVD2[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_RSVD2_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCM_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_EEPFXBLK_MASK 0x02000000u                // AER_UNCM_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCM_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_MCBLK_MASK 0x00800000u                // AER_UNCM_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_INTERNAL_MASK 0x00400000u                // AER_UNCM_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ACSVIOLATION_MASK 0x00200000u                // AER_UNCM_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_URE_MASK 0x00100000u                // AER_UNCM_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ECRC_MASK 0x00080000u                // AER_UNCM_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_MTLP_MASK 0x00040000u                // AER_UNCM_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_RcvOvf_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_RcvOvf_MASK 0x00020000u                // AER_UNCM_RcvOvf[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_RcvOvf_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_UnC_MASK 0x00010000u                // AER_UNCM_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_CA_MASK 0x00008000u                // AER_UNCM_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_CT_MASK 0x00004000u                // AER_UNCM_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_FCPE_MASK 0x00002000u                // AER_UNCM_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_PTLP_MASK 0x00001000u                // AER_UNCM_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_SDES_MASK 0x00000020u                // AER_UNCM_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_DLPE_MASK 0x00000010u                // AER_UNCM_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_Undefined_MASK 0x0000000Fu                // AER_UNCM_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_MASK_2_AER_UNCM_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_UNC_SEVERITY_2 (0x74041000 + 0x0001020Cu)---

    AER_UNCS_Undefined[3..0]     - (RO) Undefined  Severity
                                     The value read from this bit is undefined. In previous versions of this specification, this bit was used to indicate a Link Training Error. System software must ignore the value read from this bit. System software is permitted to write any value to this bit.
    AER_UNCS_DLPE[4]             - (RW) Data Link Protocol Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_SDES[5]             - (RO) Surprise Down Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    RSVD1[11..6]                 - (RO) Reserved
    AER_UNCS_PTLP[12]            - (RW) Poisoned TLP Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_FCPE[13]            - (RW) Flow Control Protocol Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_CT[14]              - (RW) Completion Timeout Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_CA[15]              - (RW) Completer Abort Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_UnC[16]             - (RW) Unexpected Completion Severity
                                     1: Reported as fatal error
                                     0: Reported as non-fatal error
    AER_UNCS_RcvOvf[17]          - (RW) Receiver Overflow Error Severity
                                     1: Reported as fatal error
                                     0: Reported as non-fatal error
    AER_UNCS_MTLP[18]            - (RW) Malformed TLP Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ECRC[19]            - (RW) ECRC Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_URE[20]             - (RW) Unsupported Request Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ACSVIOLATION[21]    - (RO) ACS violation Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_INTERNAL[22]        - (RW) Internal Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_MCBLK[23]           - (RO) MC Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_ATOEGRESSBLK[24]    - (RO) atoegress Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_EEPFXBLK[25]        - (RO) eepfx Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    AER_UNCS_POIS_TLP_EGBLK[26]  - (RO) Posioned TLP eg Block Error Severity
                                     0: Reported as non-fatal error
                                     1: Reported as fatal error
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_RSVD3_MASK 0xF8000000u                // RSVD3[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_RSVD3_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_POIS_TLP_EGBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_POIS_TLP_EGBLK_MASK 0x04000000u                // AER_UNCS_POIS_TLP_EGBLK[26]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_POIS_TLP_EGBLK_SHFT 26u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_EEPFXBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_EEPFXBLK_MASK 0x02000000u                // AER_UNCS_EEPFXBLK[25]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_EEPFXBLK_SHFT 25u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ATOEGRESSBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ATOEGRESSBLK_MASK 0x01000000u                // AER_UNCS_ATOEGRESSBLK[24]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ATOEGRESSBLK_SHFT 24u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_MCBLK_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_MCBLK_MASK 0x00800000u                // AER_UNCS_MCBLK[23]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_MCBLK_SHFT 23u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_INTERNAL_MASK 0x00400000u                // AER_UNCS_INTERNAL[22]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_INTERNAL_SHFT 22u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ACSVIOLATION_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ACSVIOLATION_MASK 0x00200000u                // AER_UNCS_ACSVIOLATION[21]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ACSVIOLATION_SHFT 21u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_URE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_URE_MASK 0x00100000u                // AER_UNCS_URE[20]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_URE_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ECRC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ECRC_MASK 0x00080000u                // AER_UNCS_ECRC[19]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_ECRC_SHFT 19u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_MTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_MTLP_MASK 0x00040000u                // AER_UNCS_MTLP[18]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_MTLP_SHFT 18u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_RcvOvf_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_RcvOvf_MASK 0x00020000u                // AER_UNCS_RcvOvf[17]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_RcvOvf_SHFT 17u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_UnC_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_UnC_MASK 0x00010000u                // AER_UNCS_UnC[16]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_UnC_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_CA_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_CA_MASK 0x00008000u                // AER_UNCS_CA[15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_CA_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_CT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_CT_MASK 0x00004000u                // AER_UNCS_CT[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_CT_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_FCPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_FCPE_MASK 0x00002000u                // AER_UNCS_FCPE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_FCPE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_PTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_PTLP_MASK 0x00001000u                // AER_UNCS_PTLP[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_PTLP_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_RSVD1_MASK 0x00000FC0u                // RSVD1[11..6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_RSVD1_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_SDES_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_SDES_MASK 0x00000020u                // AER_UNCS_SDES[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_SDES_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_DLPE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_DLPE_MASK 0x00000010u                // AER_UNCS_DLPE[4]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_DLPE_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_Undefined_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_Undefined_MASK 0x0000000Fu                // AER_UNCS_Undefined[3..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_UNC_SEVERITY_2_AER_UNCS_Undefined_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CO_STATUS_2 (0x74041000 + 0x00010210u)---

    AER_CO_RE[0]                 - (W1C) Receiver Error Status
                                     This bit set to one indicates that a Receiver Error was detected; software may clear an error status by writing a 1b
    AER_CO_RSVD1[5..1]           - (RO) Reserved
    AER_CO_BTLP[6]               - (W1C) Bad TLP Status
                                     This bit set to one indicates that a Bad TLP was detected; software may clear an error status by writing a 1b.
    AER_CO_BDLLP[7]              - (W1C) Bad DLLP Status
                                     This bit set to one indicates that a Bad DLLP was detected; software may clear an error status by writing a 1b.
    AER_CO_RNR[8]                - (W1C) REPLAY_NUM Rollover Status
                                     This bit set to one indicates that a REPLAY_NUM Rollover was detected; software may clear an error status by writing a 1b.
    AER_CO_RSVD2[11..9]          - (RO) Reserved
    AER_CO_RTT[12]               - (W1C) Replay Timer Timeout Status
                                     This bit set to one indicates that a Replay Timer Timeout was detected; software may clear an error status by writing a 1b.
    AER_CO_ANFE[13]              - (W1C) Advisory Non-Fatal Error Status
                                     This bit set to one indicates that an Advisory Non-Fatal Error was detected; software may clear an error status by writing a 1b.
    AER_CO_INTERNAL[14]          - (W1C) Internal Non-Fatal Error Status
                                     This bit set to one indicates that an Internal Non-Fatal Error was detected; software may clear an error status by writing a 1b.
    AER_CO_RSVD3[31..15]         - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD3_MASK 0xFFFF8000u                // AER_CO_RSVD3[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD3_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_INTERNAL_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_INTERNAL_MASK 0x00004000u                // AER_CO_INTERNAL[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_INTERNAL_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_ANFE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_ANFE_MASK 0x00002000u                // AER_CO_ANFE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_ANFE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RTT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RTT_MASK 0x00001000u                // AER_CO_RTT[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RTT_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD2_MASK 0x00000E00u                // AER_CO_RSVD2[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD2_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RNR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RNR_MASK 0x00000100u                // AER_CO_RNR[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RNR_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_BDLLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_BDLLP_MASK 0x00000080u                // AER_CO_BDLLP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_BDLLP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_BTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_BTLP_MASK 0x00000040u                // AER_CO_BTLP[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_BTLP_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD1_MASK 0x0000003Eu                // AER_CO_RSVD1[5..1]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RSVD1_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RE_MASK 0x00000001u                // AER_CO_RE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_STATUS_2_AER_CO_RE_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CO_MASK_2 (0x74041000 + 0x00010214u)---

    AER_COM_RE[0]                - (RW) Receiver Error Mask
                                     There is a mask bit per error bit of the Receiver Error Status register.
    AER_COM_RSVD1[5..1]          - (RO) Reserved
    AER_COM_BTLP[6]              - (RW) Bad TLP Mask
                                     There is a mask bit per error bit of the Bad TLP Status register.
    AER_COM_BDLLP[7]             - (RW) Bad DLLP Mask
                                     There is a mask bit per error bit of the Bad DLLP Status register.
    AER_COM_RNR[8]               - (RW) REPLAY_NUM Rollover Mask
                                     There is a mask bit per error bit of the REPLAY_NUM Rollover Status register.
    AER_COM_RSVD2[11..9]         - (RO) Reserved
    AER_COM_RTT[12]              - (RW) Replay Timer Timeout Mask
                                     There is a mask bit per error bit of the Replay Timer Timeout Status register.
    AER_COM_ANFE[13]             - (RW) Advisory Non-Fatal Error Mask
                                     There is a mask bit per error bit of the Advisory Non-Fatal Error Status register.
    AER_COM_INTERNAL_MSK_COR[14] - (RW) Internal Correctable Error Mask
                                     There is a mask bit per error bit of the Internal Correctable Error Status register.
    AER_COM_RSVD3[31..15]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD3_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD3_MASK 0xFFFF8000u                // AER_COM_RSVD3[31..15]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD3_SHFT 15u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_INTERNAL_MSK_COR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_INTERNAL_MSK_COR_MASK 0x00004000u                // AER_COM_INTERNAL_MSK_COR[14]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_INTERNAL_MSK_COR_SHFT 14u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_ANFE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_ANFE_MASK 0x00002000u                // AER_COM_ANFE[13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_ANFE_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RTT_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RTT_MASK 0x00001000u                // AER_COM_RTT[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RTT_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD2_MASK 0x00000E00u                // AER_COM_RSVD2[11..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD2_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RNR_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RNR_MASK 0x00000100u                // AER_COM_RNR[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RNR_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_BDLLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_BDLLP_MASK 0x00000080u                // AER_COM_BDLLP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_BDLLP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_BTLP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_BTLP_MASK 0x00000040u                // AER_COM_BTLP[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_BTLP_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD1_MASK 0x0000003Eu                // AER_COM_RSVD1[5..1]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RSVD1_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RE_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RE_MASK 0x00000001u                // AER_COM_RE[0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CO_MASK_2_AER_COM_RE_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_CAPCTL_2 (0x74041000 + 0x00010218u)---

    AER_CAP_FEP[4..0]            - (RO) First Error Pointer
                                     The First Error Pointer is a field that identifies the bit position of the first error reported in the Uncorrectable Error Status register
    AER_CAP_ECRC_CAP[5]          - (RO) ECRC Generation Capable
                                     If Set, this bit indicates that the Function is capable of generating
    AER_CAP_ECRC_EN[6]           - (RW) ECRC Generation Enable
                                     When Set, ECRC generation is enabled Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b. Default value of this bit is 0b.
    AER_CAP_ECRC_CK_CAP[7]       - (RO) ECRC Check Capable
                                     If Set, this bit indicates that the Function is capable of checking ECRC
    AER_CAP_ECRC_CK_EN[8]        - (RW) ECRC Check Enable
                                     When Set, ECRC checking is enabled. Functions that do not implement the associated mechanism are permitted to hardwire this bit to 0b. Default value of this bit is 0b.
    AER_CAP_RSVD1[10..9]         - (RO) Reserved
    AER_CAP_TLPPFX_LOG[11]       - (RO) TLP prefix log present
                                     If the VF implements Header Log Sharing, this bit is 0b when the Header Log contains all 1s due to an overflow condition.
    AER_CAP_COMP_LOG[12]         - (RO) Completion Timeout log
                                     If Set, this bit indicates that the Function is capable of recording header of TLP associated with error to AER_HDX_LOG.
                                     Please refer to internal register 0x00D8[0].
    AER_CAP_RSVD2[31..13]        - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_RSVD2_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_RSVD2_MASK 0xFFFFE000u                // AER_CAP_RSVD2[31..13]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_RSVD2_SHFT 13u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_COMP_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_COMP_LOG_MASK 0x00001000u                // AER_CAP_COMP_LOG[12]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_COMP_LOG_SHFT 12u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_TLPPFX_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_TLPPFX_LOG_MASK 0x00000800u                // AER_CAP_TLPPFX_LOG[11]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_TLPPFX_LOG_SHFT 11u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_RSVD1_MASK 0x00000600u                // AER_CAP_RSVD1[10..9]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_RSVD1_SHFT 9u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CK_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CK_EN_MASK 0x00000100u                // AER_CAP_ECRC_CK_EN[8]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CK_EN_SHFT 8u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CK_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CK_CAP_MASK 0x00000080u                // AER_CAP_ECRC_CK_CAP[7]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CK_CAP_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_EN_MASK 0x00000040u                // AER_CAP_ECRC_EN[6]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_EN_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CAP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CAP_MASK 0x00000020u                // AER_CAP_ECRC_CAP[5]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_ECRC_CAP_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_FEP_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_FEP_MASK 0x0000001Fu                // AER_CAP_FEP[4..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_CAPCTL_2_AER_CAP_FEP_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD0_LOG_2 (0x74041000 + 0x0001021Cu)---

    AER_HD0_LOG[31..0]           - (RO) Header Log Register  1st DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_2_AER_HD0_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_2_AER_HD0_LOG_MASK 0xFFFFFFFFu                // AER_HD0_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD0_LOG_2_AER_HD0_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD1_LOG_2 (0x74041000 + 0x00010220u)---

    AER_HD1_LOG[31..0]           - (RO) Header Log Register 2nd DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_2_AER_HD1_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_2_AER_HD1_LOG_MASK 0xFFFFFFFFu                // AER_HD1_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD1_LOG_2_AER_HD1_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD2_LOG_2 (0x74041000 + 0x00010224u)---

    AER_HD2_LOG[31..0]           - (RO) Header Log Register 3rd DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_2_AER_HD2_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_2_AER_HD2_LOG_MASK 0xFFFFFFFFu                // AER_HD2_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD2_LOG_2_AER_HD2_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_HD3_LOG_2 (0x74041000 + 0x00010228u)---

    AER_HD3_LOG[31..0]           - (RO) Header Log Register 4th DW
                                     Record header of TLP associated with error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_2_AER_HD3_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_2_AER_HD3_LOG_MASK 0xFFFFFFFFu                // AER_HD3_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_HD3_LOG_2_AER_HD3_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_RP_CMD_REG_2 (0x74041000 + 0x0001022Cu)---

    COR_ERR_RPT_EN[0]            - (RO) Correctable Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a correctable error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port
    NFT_ERR_RPT_EN[1]            - (RO) Non-Fatal Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a Non-fatal error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port.
    FAT_ERR_RPT_EN[2]            - (RO) Fatal Error Reporting Enable
                                     When Set, this bit enables the generation of an interrupt when a Non-fatal error is reported by any of the Functions in the Hierarchy Domain associated with this Root Port.
    RSVD1[31..3]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_RSVD1_ADDR      PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_RSVD1_MASK      0xFFFFFFF8u                // RSVD1[31..3]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_RSVD1_SHFT      3u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_FAT_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_FAT_ERR_RPT_EN_MASK 0x00000004u                // FAT_ERR_RPT_EN[2]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_FAT_ERR_RPT_EN_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_NFT_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_NFT_ERR_RPT_EN_MASK 0x00000002u                // NFT_ERR_RPT_EN[1]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_NFT_ERR_RPT_EN_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_COR_ERR_RPT_EN_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_COR_ERR_RPT_EN_MASK 0x00000001u                // COR_ERR_RPT_EN[0]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_CMD_REG_2_COR_ERR_RPT_EN_SHFT 0u

/* =====================================================================================

  ---PCIE_RP_STS_REG_2 (0x74041000 + 0x00010230u)---

    COR_ERR_RX[0]                - (RO) ERR_COR Received
                                     Set when a Correctable error Message is received and this bit is not already Set.
    COR_ERR_MULT_RX[1]           - (RO) Multiple ERR_COR Received
                                     Set when a Correctable error Message is received and ERR_COR Received is already Set.
    UNC_ERR_RX[2]                - (RO) ERR_FATAL/NONFATAL Received
                                     Set when either a Fatal or a Non-fatal error Message is received and this bit is not already Set.
    UNC_ERR_MULT_RX[3]           - (RO) Multiple ERR_FATAL/NONFATAL Received
                                     Set when either a Fatal or a Non-fatal error is received and ERR_FATAL/NONFATAL Received is already Set.
    UNC_ERR_FIRST_FAT[4]         - (RO) First Uncorrectable Fatal
                                     Set when the first Uncorrectable error Message received is for a Fatal error.
    UNC_ERR_NON_FAT[5]           - (RO) Non-Fatal Error Messages Received
                                     Set when one or more Non-Fatal Uncorrectable error Messages have been received.
    UNC_ERR_FAT[6]               - (RO) Fatal Error Messages Received
                                     Set when one or more Fatal Uncorrectable error Messages have been received.
    UNC_ERR_RSVD1[26..7]         - (RO) Reserved
    AER_MSI_NUM[31..27]          - (RO) Advanced Error Interrupt Message Number
                                     This register indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_AER_MSI_NUM_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_AER_MSI_NUM_MASK 0xF8000000u                // AER_MSI_NUM[31..27]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_AER_MSI_NUM_SHFT 27u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_RSVD1_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_RSVD1_MASK 0x07FFFF80u                // UNC_ERR_RSVD1[26..7]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_RSVD1_SHFT 7u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_FAT_MASK 0x00000040u                // UNC_ERR_FAT[6]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_FAT_SHFT 6u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_NON_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_NON_FAT_MASK 0x00000020u                // UNC_ERR_NON_FAT[5]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_NON_FAT_SHFT 5u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_FIRST_FAT_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_FIRST_FAT_MASK 0x00000010u                // UNC_ERR_FIRST_FAT[4]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_FIRST_FAT_SHFT 4u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_MULT_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_MULT_RX_MASK 0x00000008u                // UNC_ERR_MULT_RX[3]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_MULT_RX_SHFT 3u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_RX_MASK 0x00000004u                // UNC_ERR_RX[2]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_UNC_ERR_RX_SHFT 2u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_COR_ERR_MULT_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_COR_ERR_MULT_RX_MASK 0x00000002u                // COR_ERR_MULT_RX[1]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_COR_ERR_MULT_RX_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_COR_ERR_RX_ADDR PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_COR_ERR_RX_MASK 0x00000001u                // COR_ERR_RX[0]
#define PCIE_MAC_CONF_COMMON_PCIE_RP_STS_REG_2_COR_ERR_RX_SHFT 0u

/* =====================================================================================

  ---ERR_SRC_ID_REG_2 (0x74041000 + 0x00010234u)---

    ERR_COR_SRC_ID[15..0]        - (RO) ERR_COR Source Identification
                                     Loaded with the Requester ID indicated in the received ERR_COR Message when the ERR_COR Received bit is not already set.
                                     Default value of this field is 0000h.
    ERR_FAT_NFAT_SRC_ID[31..16]  - (RO) ERR_FATAL/NONFATAL Source Identification
                                     Loaded with the Requester ID indicated in the received ERR_FATAL or ERR_NONFATAL Message when the ERR_FATAL/NONFATAL Received bit is not already set.
                                     Default value of this field is 0000h.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ERR_FAT_NFAT_SRC_ID_ADDR PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ERR_FAT_NFAT_SRC_ID_MASK 0xFFFF0000u                // ERR_FAT_NFAT_SRC_ID[31..16]
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ERR_FAT_NFAT_SRC_ID_SHFT 16u
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ERR_COR_SRC_ID_ADDR PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ADDR
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ERR_COR_SRC_ID_MASK 0x0000FFFFu                // ERR_COR_SRC_ID[15..0]
#define PCIE_MAC_CONF_COMMON_ERR_SRC_ID_REG_2_ERR_COR_SRC_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX0_LOG_2 (0x74041000 + 0x00010238u)---

    AER_PFX0_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_2_AER_PFX0_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_2_AER_PFX0_LOG_MASK 0xFFFFFFFFu                // AER_PFX0_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX0_LOG_2_AER_PFX0_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX1_LOG_2 (0x74041000 + 0x0001023Cu)---

    AER_PFX1_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_2_AER_PFX1_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_2_AER_PFX1_LOG_MASK 0xFFFFFFFFu                // AER_PFX1_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX1_LOG_2_AER_PFX1_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX2_LOG_2 (0x74041000 + 0x00010240u)---

    AER_PFX2_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_2_AER_PFX2_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_2_AER_PFX2_LOG_MASK 0xFFFFFFFFu                // AER_PFX2_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX2_LOG_2_AER_PFX2_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_AER_PFX3_LOG_2 (0x74041000 + 0x00010244u)---

    AER_PFX3_LOG[31..0]          - (RO) TLP Prefix Log Register
                                     The TLP Prefix Log register captures the End-End TLP Prefix(s) for the TLP corresponding to the detected error

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_2_AER_PFX3_LOG_ADDR PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_2_AER_PFX3_LOG_MASK 0xFFFFFFFFu                // AER_PFX3_LOG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_AER_PFX3_LOG_2_AER_PFX3_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP0_2 (0x74041000 + 0x000102D0u)---

    DVSEC_CAP_ID[15..0]          - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability.
                                     Extended Capability ID for the Designated Vendor-Specific Extended Capability is 0023h.
    DVSEC_CAP_VER[19..16]        - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present.
                                     Must be 1h for this version of the specification.
    DVSEC_NEXT_PTR[31..20]       - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.
                                     For Extended Capabilities implemented in Configuration Space, this offset is relative to the beginning of PCI-compatible Configuration Space and thus must always be either 000h (for terminating list of Capabilities) or greater than 0FFh.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_NEXT_PTR_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_NEXT_PTR_MASK 0xFFF00000u                // DVSEC_NEXT_PTR[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_NEXT_PTR_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_CAP_VER_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_CAP_VER_MASK 0x000F0000u                // DVSEC_CAP_VER[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_CAP_VER_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_CAP_ID_ADDR PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_CAP_ID_MASK 0x0000FFFFu                // DVSEC_CAP_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP0_2_DVSEC_CAP_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP1_2 (0x74041000 + 0x000102D4u)---

    DVSEC_VID[15..0]             - (RO) DVSEC Vendor ID
                                     This field is the Vendor ID associated with the vendor that defined the contents of this capability.
    DVSEC_REV[19..16]            - (RO) DVSEC Revision
                                     This field is a vendor-defined version number that indicates the version of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID and DVSEC ID before interpreting this field.
    DVSEC_LEN[31..20]            - (RO) DVSEC Length
                                     This field indicates the number of bytes in the entire DVSEC structure, including the PCI Express Extended Capability Header , the DVSEC Header 1, DVSEC Header 2, and DVSEC vendor-specific registers.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_LEN_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_LEN_MASK  0xFFF00000u                // DVSEC_LEN[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_LEN_SHFT  20u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_REV_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_REV_MASK  0x000F0000u                // DVSEC_REV[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_REV_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_VID_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_VID_MASK  0x0000FFFFu                // DVSEC_VID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP1_2_DVSEC_VID_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP2_2 (0x74041000 + 0x000102D8u)---

    DVSEC_ID[15..0]              - (RO) DVSEC ID
                                     This field is a vendor-defined ID that indicates the nature and format of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID before interpreting this field.
    DVSEC_REG[31..16]            - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_DVSEC_REG_MASK  0xFFFF0000u                // DVSEC_REG[31..16]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_DVSEC_REG_SHFT  16u
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_DVSEC_ID_ADDR   PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_DVSEC_ID_MASK   0x0000FFFFu                // DVSEC_ID[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP2_2_DVSEC_ID_SHFT   0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP3_2 (0x74041000 + 0x000102DCu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_2_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_2_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP3_2_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP4_2 (0x74041000 + 0x000102E0u)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_2_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_2_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP4_2_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_DVSEC_CAP5_2 (0x74041000 + 0x000102E4u)---

    DVSEC_REG[31..0]             - (RW) DVSEC Vendor-Specific Registers

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_2_DVSEC_REG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_2_DVSEC_REG_MASK  0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_DVSEC_CAP5_2_DVSEC_REG_SHFT  0u

/* =====================================================================================

  ---PCIE_EXT_DSN_CAP_2 (0x74041000 + 0x000102F0u)---

    DSN_Cap_Id[15..0]            - (RO) PCI Express Extended Capability ID
                                     This field is a PCI-SIG defined ID number that indicates the nature and format of the Extended Capability. Extended Capability ID for the Device Serial Number Capability is 0003h.
    DSN_Cap_Version[19..16]      - (RO) Capability Version
                                     This field is a PCI-SIG defined version number that indicates the version of the Capability structure present. Must be 1h for this version of the specification.
    DSN_Nx_Ptr[31..20]           - (RO) Next Capability Offset
                                     This field contains the offset to the next PCI Express Capability structure or 000h if no other items exist in the linked list of Capabilities.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Nx_Ptr_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Nx_Ptr_MASK 0xFFF00000u                // DSN_Nx_Ptr[31..20]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Nx_Ptr_SHFT 20u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Cap_Version_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Cap_Version_MASK 0x000F0000u                // DSN_Cap_Version[19..16]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Cap_Version_SHFT 16u
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Cap_Id_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Cap_Id_MASK 0x0000FFFFu                // DSN_Cap_Id[15..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_CAP_2_DSN_Cap_Id_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_DSN_NUB1_2 (0x74041000 + 0x000102F4u)---

    DSN_NUMBER_1ST[31..0]        - (RO) PCI Express Device Serial Number
                                     This field contains the IEEE defined 64 bit extended unique identifier . This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_2_DSN_NUMBER_1ST_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_2_DSN_NUMBER_1ST_MASK 0xFFFFFFFFu                // DSN_NUMBER_1ST[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB1_2_DSN_NUMBER_1ST_SHFT 0u

/* =====================================================================================

  ---PCIE_EXT_DSN_NUB2_2 (0x74041000 + 0x000102F8u)---

    DSN_NUMBER_2nd[31..0]        - (RO) PCI Express Device Serial Number
                                     This field contains the IEEE defined 64 bit extended unique identifier. This identifier includes a 24-bit company id value assigned by IEEE registration authority and a 40-bit extension identifier assigned by the manufacturer.

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_2_DSN_NUMBER_2nd_ADDR PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_2_DSN_NUMBER_2nd_MASK 0xFFFFFFFFu                // DSN_NUMBER_2nd[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_EXT_DSN_NUB2_2_DSN_NUMBER_2nd_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_STS_2 (0x74041000 + 0x00010480u)---

    PCIE_VENDOR_EINT_STS[31..0]  - (W1C) PCIe Vendor eint status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_2_PCIE_VENDOR_EINT_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_2_PCIE_VENDOR_EINT_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_STS_2_PCIE_VENDOR_EINT_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_SET_2 (0x74041000 + 0x00010484u)---

    PCIE_VENDOR_EINT_SET[31..0]  - (W1S) PCIe Vendor eint set

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_2_PCIE_VENDOR_EINT_SET_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_2_PCIE_VENDOR_EINT_SET_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_SET[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_SET_2_PCIE_VENDOR_EINT_SET_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_STS_0_2 (0x74041000 + 0x00010488u)---

    PCIE_VENDOR_STS[31..0]       - (RO) PCIe Vendor Status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_2_PCIE_VENDOR_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_2_PCIE_VENDOR_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_0_2_PCIE_VENDOR_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_STS_1_2 (0x74041000 + 0x0001048Cu)---

    PCIE_VENDOR_STS[31..0]       - (RO) PCIe Vendor Status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_2_PCIE_VENDOR_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_2_PCIE_VENDOR_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_STS_1_2_PCIE_VENDOR_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_0_2 (0x74041000 + 0x00010490u)---

    PCIE_CFG_RSV_0[31..0]        - (RW) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_2_PCIE_CFG_RSV_0_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_2_PCIE_CFG_RSV_0_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_0[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_0_2_PCIE_CFG_RSV_0_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_1_2 (0x74041000 + 0x00010494u)---

    PCIE_CFG_RSV_1[31..0]        - (RW) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_2_PCIE_CFG_RSV_1_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_2_PCIE_CFG_RSV_1_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_1[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_1_2_PCIE_CFG_RSV_1_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_RSV_2_2 (0x74041000 + 0x00010498u)---

    PCIE_CFG_RSV_2[31..0]        - (RO) PCIe Vendor Reserved Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_2_PCIE_CFG_RSV_2_ADDR PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_2_PCIE_CFG_RSV_2_MASK 0xFFFFFFFFu                // PCIE_CFG_RSV_2[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_CFG_RSV_2_2_PCIE_CFG_RSV_2_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_LOG_2 (0x74041000 + 0x0001049Cu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Set when receive unexpected CPL, Clear the error record including ERR_HEADER and ERR_LOG to all 0
    CPL_EXTRA_TIME[8..1]         - (RO) Record the extra time after completion timeout
    RSVD1[31..9]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_RSVD1_ADDR       PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_RSVD1_MASK       0xFFFFFE00u                // RSVD1[31..9]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_RSVD1_SHFT       9u
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_CPL_EXTRA_TIME_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_CPL_EXTRA_TIME_MASK 0x000001FEu                // CPL_EXTRA_TIME[8..1]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_CPL_EXTRA_TIME_SHFT 1u
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ERR_STS_ADDR     PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ERR_STS_MASK     0x00000001u                // ERR_STS[0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_LOG_2_ERR_STS_SHFT     0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER0_2 (0x74041000 + 0x000104A0u)---

    PCIE_ERROR_HEADER0[31..0]    - (RO) PCIe Error Header0 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_2_PCIE_ERROR_HEADER0_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_2_PCIE_ERROR_HEADER0_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER0[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER0_2_PCIE_ERROR_HEADER0_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER1_2 (0x74041000 + 0x000104A4u)---

    PCIE_ERROR_HEADER1[31..0]    - (RO) PCIe Error Header1 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_2_PCIE_ERROR_HEADER1_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_2_PCIE_ERROR_HEADER1_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER1[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER1_2_PCIE_ERROR_HEADER1_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER2_2 (0x74041000 + 0x000104A8u)---

    PCIE_ERROR_HEADER2[31..0]    - (RO) PCIe Error Header2 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_2_PCIE_ERROR_HEADER2_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_2_PCIE_ERROR_HEADER2_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER2[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER2_2_PCIE_ERROR_HEADER2_SHFT 0u

/* =====================================================================================

  ---PCIE_ERROR_HEADER3_2 (0x74041000 + 0x000104ACu)---

    PCIE_ERROR_HEADER3[31..0]    - (RO) PCIe Error Header3 Register

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_2_PCIE_ERROR_HEADER3_ADDR PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_2_PCIE_ERROR_HEADER3_MASK 0xFFFFFFFFu                // PCIE_ERROR_HEADER3[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_ERROR_HEADER3_2_PCIE_ERROR_HEADER3_SHFT 0u

/* =====================================================================================

  ---PCIE_WCR_CFG_2 (0x74041000 + 0x000104B0u)---

    PCIE_WCR_CFG[31..0]          - (RW) PCIe Vendor Whole Chip Reset Config

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_2_PCIE_WCR_CFG_ADDR  PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_2_PCIE_WCR_CFG_MASK  0xFFFFFFFFu                // PCIE_WCR_CFG[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_CFG_2_PCIE_WCR_CFG_SHFT  0u

/* =====================================================================================

  ---PCIE_WCR_RB_2 (0x74041000 + 0x000104B4u)---

    PCIE_WCR_RB[31..0]           - (RO) PCIe Vendor Whole Chip Reset Read Back

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_2_PCIE_WCR_RB_ADDR    PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_2_PCIE_WCR_RB_MASK    0xFFFFFFFFu                // PCIE_WCR_RB[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_WCR_RB_2_PCIE_WCR_RB_SHFT    0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_2_STS_2 (0x74041000 + 0x000104B8u)---

    PCIE_VENDOR_EINT_2_STS[31..0] - (W1C) PCIe Vendor eint 2 status

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_2_PCIE_VENDOR_EINT_2_STS_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_2_PCIE_VENDOR_EINT_2_STS_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_2_STS[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_STS_2_PCIE_VENDOR_EINT_2_STS_SHFT 0u

/* =====================================================================================

  ---PCIE_VENDOR_EINT_2_SET_2 (0x74041000 + 0x000104BCu)---

    PCIE_VENDOR_EINT_2_SET[31..0] - (W1S) PCIe Vendor eint 2 set

 =====================================================================================*/
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_2_PCIE_VENDOR_EINT_2_SET_ADDR PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_2_ADDR
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_2_PCIE_VENDOR_EINT_2_SET_MASK 0xFFFFFFFFu                // PCIE_VENDOR_EINT_2_SET[31..0]
#define PCIE_MAC_CONF_COMMON_PCIE_VENDOR_EINT_2_SET_2_PCIE_VENDOR_EINT_2_SET_SHFT 0u

#ifdef __cplusplus
}
#endif

#endif // __PCIE_MAC_CONF_COMMON_REGS_H__
