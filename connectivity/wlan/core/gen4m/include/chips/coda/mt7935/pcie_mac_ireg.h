/* SPDX-License-Identifier: BSD-2-Clause */
//[File]            : pcie_mac_ireg.h
//[Revision time]   : Thu Nov  9 10:11:22 2023
//[Description]     : This file is auto generated by CODA
//[Copyright]       : Copyright (C) 2023 Mediatek Incorportion. All rights reserved.

#ifndef __PCIE_MAC_IREG_REGS_H__
#define __PCIE_MAC_IREG_REGS_H__

#include "hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif


//****************************************************************************
//
//                     PCIE_MAC_IREG CR Definitions                     
//
//****************************************************************************

#define PCIE_MAC_IREG_BASE                                     0x74040000u

#define PCIE_MAC_IREG_BRIDGE_VER_ADDR                          (PCIE_MAC_IREG_BASE + 0x0000u) // 0000
#define PCIE_MAC_IREG_BRIDGE_BUS_ADDR                          (PCIE_MAC_IREG_BASE + 0x0004u) // 0004
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0008u) // 0008
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR               (PCIE_MAC_IREG_BASE + 0x000Cu) // 0000
#define PCIE_MAC_IREG_PCIE_IF_CONF_ADDR                        (PCIE_MAC_IREG_BASE + 0x0010u) // 000A
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR                     (PCIE_MAC_IREG_BASE + 0x0014u) // 000E
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0018u) // 0012
#define PCIE_MAC_IREG_HW_DATE_CODE_ADDR                        (PCIE_MAC_IREG_BASE + 0x001Cu) // 0000
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR                 (PCIE_MAC_IREG_BASE + 0x0020u) // 0014
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR                  (PCIE_MAC_IREG_BASE + 0x0024u) // 0018
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR                      (PCIE_MAC_IREG_BASE + 0x0028u) // 001C
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_ADDR                  (PCIE_MAC_IREG_BASE + 0x002Cu) // 0000
#define PCIE_MAC_IREG_AXI_MST0_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0030u) // 001E
#define PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0034u) // 0022
#define PCIE_MAC_IREG_AXI_MST1_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0038u) // 0026
#define PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x003Cu) // 0000
#define PCIE_MAC_IREG_AXI_MST2_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0040u) // 0028
#define PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0044u) // 002C
#define PCIE_MAC_IREG_AXI_MST3_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0048u) // 0030
#define PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x004Cu) // 0000
#define PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0050u) // 0032
#define PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0054u) // 0036
#define PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0058u) // 003A
#define PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x005Cu) // 0000
#define PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0060u) // 003C
#define PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0064u) // 0040
#define PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0068u) // 0044
#define PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x006Cu) // 0000
#define PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR                        (PCIE_MAC_IREG_BASE + 0x0070u) // 0046
#define PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR                        (PCIE_MAC_IREG_BASE + 0x0074u) // 004A
#define PCIE_MAC_IREG_SW_TEST_IN_ADDR                          (PCIE_MAC_IREG_BASE + 0x0078u) // 004E
#define PCIE_MAC_IREG_FPGA_SETTINGS_ADDR                       (PCIE_MAC_IREG_BASE + 0x007Cu) // 0000
#define PCIE_MAC_IREG_GEN_SETTINGS_ADDR                        (PCIE_MAC_IREG_BASE + 0x0080u) // 0050
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0084u) // 0054
#define PCIE_MAC_IREG_PCIE_PIPE_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x0088u) // 0058
#define PCIE_MAC_IREG_PCIE_PIPE_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x008Cu) // 0000
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0090u) // 005A
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0094u) // 005E
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x0098u) // 0062
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x009Cu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x00A0u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x00A4u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x00A8u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x00ACu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x00B0u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x00B4u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x00B8u) // 0000
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x00BCu) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR                        (PCIE_MAC_IREG_BASE + 0x00C0u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR                       (PCIE_MAC_IREG_BASE + 0x00C4u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR                       (PCIE_MAC_IREG_BASE + 0x00C8u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR                       (PCIE_MAC_IREG_BASE + 0x00CCu) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR                    (PCIE_MAC_IREG_BASE + 0x00D0u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR                        (PCIE_MAC_IREG_BASE + 0x00D4u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR                       (PCIE_MAC_IREG_BASE + 0x00D8u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR                       (PCIE_MAC_IREG_BASE + 0x00DCu) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR                       (PCIE_MAC_IREG_BASE + 0x00E0u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x00E4u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_01_1_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x00E8u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x00ECu) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_23_1_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x00F0u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x00F4u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_45_1_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x00F8u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x00FCu) // 0000
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x0100u) // 0064
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR                  (PCIE_MAC_IREG_BASE + 0x0104u) // 0068
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR                  (PCIE_MAC_IREG_BASE + 0x0108u) // 006C
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR                  (PCIE_MAC_IREG_BASE + 0x010Cu) // 0000
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR                  (PCIE_MAC_IREG_BASE + 0x0110u) // 006E
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR                (PCIE_MAC_IREG_BASE + 0x0114u) // 0072
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR                (PCIE_MAC_IREG_BASE + 0x0118u) // 0076
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR                (PCIE_MAC_IREG_BASE + 0x011Cu) // 0000
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0120u) // 0078
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0124u) // 007C
#define PCIE_MAC_IREG_PCIE_SRIOV_2_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0128u) // 0080
#define PCIE_MAC_IREG_PCIE_SRIOV_3_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x012Cu) // 0000
#define PCIE_MAC_IREG_PCIE_SRIOV_4_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0130u) // 0082
#define PCIE_MAC_IREG_PCIE_SRIOV_5_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0134u) // 0086
#define PCIE_MAC_IREG_PCIE_SRIOV_6_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0138u) // 008A
#define PCIE_MAC_IREG_PCIE_SRIOV_7_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x013Cu) // 0000
#define PCIE_MAC_IREG_PCIE_CFGNUM_ADDR                         (PCIE_MAC_IREG_BASE + 0x0140u) // 008C
#define PCIE_MAC_IREG_PCIE_BUSDEV_ADDR                         (PCIE_MAC_IREG_BASE + 0x0144u) // 0090
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR                       (PCIE_MAC_IREG_BASE + 0x0148u) // 0094
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR                    (PCIE_MAC_IREG_BASE + 0x014Cu) // 0000
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0150u) // 0096
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR                    (PCIE_MAC_IREG_BASE + 0x0154u) // 009A
#define PCIE_MAC_IREG_PCIE_PEX_DSN_ADDR                        (PCIE_MAC_IREG_BASE + 0x0158u) // 009E
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR                      (PCIE_MAC_IREG_BASE + 0x015Cu) // 0000
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR                 (PCIE_MAC_IREG_BASE + 0x0160u) // 00A0
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x0164u) // 00A4
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x0168u) // 00A8
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x016Cu) // 0000
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0170u) // 00AA
#define PCIE_MAC_IREG_PM_CONF_0_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x0174u) // 00AE
#define PCIE_MAC_IREG_PM_CONF_1_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x0178u) // 00B2
#define PCIE_MAC_IREG_PM_CONF_2_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x017Cu) // 0000
#define PCIE_MAC_IREG_IMASK_LOCAL_ADDR                         (PCIE_MAC_IREG_BASE + 0x0180u) // 00B4
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR                       (PCIE_MAC_IREG_BASE + 0x0184u) // 00B8
#define PCIE_MAC_IREG_IMASK_HOST_0_ADDR                        (PCIE_MAC_IREG_BASE + 0x0188u) // 00BC
#define PCIE_MAC_IREG_ISTATUS_HOST_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x018Cu) // 0000
#define PCIE_MAC_IREG_RC_MSI_EN_ADDR                           (PCIE_MAC_IREG_BASE + 0x0190u) // 00BE
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR               (PCIE_MAC_IREG_BASE + 0x0194u) // 00C2
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0198u) // 00C6
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x019Cu) // 0000
#define PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR                      (PCIE_MAC_IREG_BASE + 0x01A0u) // 0000
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x01A4u) // 0000
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR                    (PCIE_MAC_IREG_BASE + 0x01A8u) // 0000
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR                  (PCIE_MAC_IREG_BASE + 0x01ACu) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA0_ADDR                        (PCIE_MAC_IREG_BASE + 0x01B0u) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA1_ADDR                        (PCIE_MAC_IREG_BASE + 0x01B4u) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA2_ADDR                        (PCIE_MAC_IREG_BASE + 0x01B8u) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA3_ADDR                        (PCIE_MAC_IREG_BASE + 0x01BCu) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA4_ADDR                        (PCIE_MAC_IREG_BASE + 0x01C0u) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA5_ADDR                        (PCIE_MAC_IREG_BASE + 0x01C4u) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA6_ADDR                        (PCIE_MAC_IREG_BASE + 0x01C8u) // 0000
#define PCIE_MAC_IREG_ISTATUS_DMA7_ADDR                        (PCIE_MAC_IREG_BASE + 0x01CCu) // 0000
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ADDR                 (PCIE_MAC_IREG_BASE + 0x01D0u) // 0000
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR                 (PCIE_MAC_IREG_BASE + 0x01D4u) // 0000
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ADDR                  (PCIE_MAC_IREG_BASE + 0x01D8u) // 0000
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ADDR                  (PCIE_MAC_IREG_BASE + 0x01DCu) // 0000
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ADDR                  (PCIE_MAC_IREG_BASE + 0x01E0u) // 0000
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ADDR                  (PCIE_MAC_IREG_BASE + 0x01E4u) // 0000
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ADDR                  (PCIE_MAC_IREG_BASE + 0x01E8u) // 0000
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ADDR                  (PCIE_MAC_IREG_BASE + 0x01ECu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_SET_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x01F0u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_CLR_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x01F4u) // 0000
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x01F8u) // 0000
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x01FCu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ADDR                   (PCIE_MAC_IREG_BASE + 0x0200u) // 00C8
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ADDR                   (PCIE_MAC_IREG_BASE + 0x0204u) // 00CC
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ADDR                   (PCIE_MAC_IREG_BASE + 0x0208u) // 00D0
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ADDR                   (PCIE_MAC_IREG_BASE + 0x020Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ADDR                   (PCIE_MAC_IREG_BASE + 0x0210u) // 00D2
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ADDR                   (PCIE_MAC_IREG_BASE + 0x0214u) // 00D6
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ADDR                   (PCIE_MAC_IREG_BASE + 0x0218u) // 00DA
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ADDR                   (PCIE_MAC_IREG_BASE + 0x021Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ADDR                   (PCIE_MAC_IREG_BASE + 0x0220u) // 00DC
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ADDR                   (PCIE_MAC_IREG_BASE + 0x0224u) // 00E0
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ADDR                   (PCIE_MAC_IREG_BASE + 0x0228u) // 00E4
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ADDR                   (PCIE_MAC_IREG_BASE + 0x022Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ADDR                   (PCIE_MAC_IREG_BASE + 0x0230u) // 00E6
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ADDR                   (PCIE_MAC_IREG_BASE + 0x0234u) // 00EA
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ADDR                   (PCIE_MAC_IREG_BASE + 0x0238u) // 00EE
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ADDR                   (PCIE_MAC_IREG_BASE + 0x023Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ADDR                   (PCIE_MAC_IREG_BASE + 0x0240u) // 00F0
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ADDR                   (PCIE_MAC_IREG_BASE + 0x0244u) // 00F4
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ADDR                   (PCIE_MAC_IREG_BASE + 0x0248u) // 00F8
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ADDR                   (PCIE_MAC_IREG_BASE + 0x024Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ADDR                   (PCIE_MAC_IREG_BASE + 0x0250u) // 00FA
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ADDR                   (PCIE_MAC_IREG_BASE + 0x0254u) // 00FE
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ADDR                   (PCIE_MAC_IREG_BASE + 0x0258u) // 0102
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ADDR                   (PCIE_MAC_IREG_BASE + 0x025Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ADDR                   (PCIE_MAC_IREG_BASE + 0x0260u) // 0104
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ADDR                   (PCIE_MAC_IREG_BASE + 0x0264u) // 0108
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ADDR                   (PCIE_MAC_IREG_BASE + 0x0268u) // 010C
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ADDR                   (PCIE_MAC_IREG_BASE + 0x026Cu) // 0000
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ADDR                   (PCIE_MAC_IREG_BASE + 0x0270u) // 010E
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ADDR                   (PCIE_MAC_IREG_BASE + 0x0274u) // 0112
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ADDR                   (PCIE_MAC_IREG_BASE + 0x0278u) // 0116
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ADDR                   (PCIE_MAC_IREG_BASE + 0x027Cu) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR                  (PCIE_MAC_IREG_BASE + 0x0280u) // 0118
#define PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR                  (PCIE_MAC_IREG_BASE + 0x0284u) // 011C
#define PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR                  (PCIE_MAC_IREG_BASE + 0x0288u) // 0120
#define PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR                  (PCIE_MAC_IREG_BASE + 0x028Cu) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR                  (PCIE_MAC_IREG_BASE + 0x0290u) // 0122
#define PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR                  (PCIE_MAC_IREG_BASE + 0x0294u) // 0126
#define PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR                  (PCIE_MAC_IREG_BASE + 0x0298u) // 012A
#define PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR                  (PCIE_MAC_IREG_BASE + 0x029Cu) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR                  (PCIE_MAC_IREG_BASE + 0x02A0u) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR                  (PCIE_MAC_IREG_BASE + 0x02A4u) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR                 (PCIE_MAC_IREG_BASE + 0x02A8u) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR                 (PCIE_MAC_IREG_BASE + 0x02ACu) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR                 (PCIE_MAC_IREG_BASE + 0x02B0u) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR                 (PCIE_MAC_IREG_BASE + 0x02B4u) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR                 (PCIE_MAC_IREG_BASE + 0x02B8u) // 0000
#define PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR                 (PCIE_MAC_IREG_BASE + 0x02BCu) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES0_ADDR                     (PCIE_MAC_IREG_BASE + 0x02C0u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES1_ADDR                     (PCIE_MAC_IREG_BASE + 0x02C4u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES2_ADDR                     (PCIE_MAC_IREG_BASE + 0x02C8u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES3_ADDR                     (PCIE_MAC_IREG_BASE + 0x02CCu) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES4_ADDR                     (PCIE_MAC_IREG_BASE + 0x02D0u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES5_ADDR                     (PCIE_MAC_IREG_BASE + 0x02D4u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES6_ADDR                     (PCIE_MAC_IREG_BASE + 0x02D8u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES7_ADDR                     (PCIE_MAC_IREG_BASE + 0x02DCu) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES8_ADDR                     (PCIE_MAC_IREG_BASE + 0x02E0u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES9_ADDR                     (PCIE_MAC_IREG_BASE + 0x02E4u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES10_ADDR                    (PCIE_MAC_IREG_BASE + 0x02E8u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES11_ADDR                    (PCIE_MAC_IREG_BASE + 0x02ECu) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES12_ADDR                    (PCIE_MAC_IREG_BASE + 0x02F0u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES13_ADDR                    (PCIE_MAC_IREG_BASE + 0x02F4u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES14_ADDR                    (PCIE_MAC_IREG_BASE + 0x02F8u) // 0000
#define PCIE_MAC_IREG_PRIORITY_RULES15_ADDR                    (PCIE_MAC_IREG_BASE + 0x02FCu) // 0000
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR                     (PCIE_MAC_IREG_BASE + 0x0300u) // 012C
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR                 (PCIE_MAC_IREG_BASE + 0x0304u) // 0130
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_ADDR                  (PCIE_MAC_IREG_BASE + 0x0308u) // 0134
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_ADDR                  (PCIE_MAC_IREG_BASE + 0x030Cu) // 0000
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_ADDR             (PCIE_MAC_IREG_BASE + 0x0310u) // 0136
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1S_ADDR         (PCIE_MAC_IREG_BASE + 0x0314u) // 013A
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1C_ADDR         (PCIE_MAC_IREG_BASE + 0x0318u) // 013E
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR                 (PCIE_MAC_IREG_BASE + 0x031Cu) // 0000
#define PCIE_MAC_IREG_ORDRULES_DIS_ADDR                        (PCIE_MAC_IREG_BASE + 0x0320u) // 0140
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_ADDR                    (PCIE_MAC_IREG_BASE + 0x0324u) // 0144
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_ADDR                     (PCIE_MAC_IREG_BASE + 0x0328u) // 0148
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_ADDR                    (PCIE_MAC_IREG_BASE + 0x032Cu) // 0000
#define PCIE_MAC_IREG_ECO_SPACE_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x0330u) // 014A
#define PCIE_MAC_IREG_ECO_SPACE_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x0334u) // 014E
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR                  (PCIE_MAC_IREG_BASE + 0x0338u) // 0152
#define PCIE_MAC_IREG_PHYMAC_CFG_ADDR                          (PCIE_MAC_IREG_BASE + 0x033Cu) // 0000
#define PCIE_MAC_IREG_WCPL_TIMEOUT_ADDR                        (PCIE_MAC_IREG_BASE + 0x0340u) // 0154
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ADDR                     (PCIE_MAC_IREG_BASE + 0x0344u) // 0158
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR                      (PCIE_MAC_IREG_BASE + 0x0348u) // 015C
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x034Cu) // 0000
#define PCIE_MAC_IREG_PCIE_LMR_0_ADDR                          (PCIE_MAC_IREG_BASE + 0x0350u) // 015E
#define PCIE_MAC_IREG_PCIE_LMR_1_ADDR                          (PCIE_MAC_IREG_BASE + 0x0354u) // 0162
#define PCIE_MAC_IREG_PCIE_LMR_2_ADDR                          (PCIE_MAC_IREG_BASE + 0x0358u) // 0166
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR                     (PCIE_MAC_IREG_BASE + 0x035Cu) // 0000
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR               (PCIE_MAC_IREG_BASE + 0x0360u) // 0168
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR               (PCIE_MAC_IREG_BASE + 0x0364u) // 016C
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR              (PCIE_MAC_IREG_BASE + 0x0368u) // 0170
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR             (PCIE_MAC_IREG_BASE + 0x036Cu) // 0000
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_ADDR             (PCIE_MAC_IREG_BASE + 0x0370u) // 0172
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_ADDR             (PCIE_MAC_IREG_BASE + 0x0374u) // 0176
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_ADDR             (PCIE_MAC_IREG_BASE + 0x0378u) // 017A
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_ADDR             (PCIE_MAC_IREG_BASE + 0x037Cu) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x0380u) // 017C
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x0384u) // 0180
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x0388u) // 0184
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x038Cu) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x0390u) // 0186
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x0394u) // 018A
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x0398u) // 018E
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x039Cu) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x03A0u) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x03A4u) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x03A8u) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x03ACu) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x03B0u) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x03B4u) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x03B8u) // 0000
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x03BCu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_ADDR                   (PCIE_MAC_IREG_BASE + 0x03C0u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x03C4u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x03C8u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x03CCu) // 0000
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR                  (PCIE_MAC_IREG_BASE + 0x03D0u) // 0000
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR                 (PCIE_MAC_IREG_BASE + 0x03D4u) // 0000
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR                 (PCIE_MAC_IREG_BASE + 0x03D8u) // 0000
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR                 (PCIE_MAC_IREG_BASE + 0x03DCu) // 0000
#define PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR                      (PCIE_MAC_IREG_BASE + 0x03E0u) // 0000
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ADDR                    (PCIE_MAC_IREG_BASE + 0x03E4u) // 0000
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_ADDR                     (PCIE_MAC_IREG_BASE + 0x03E8u) // 0000
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_ADDR                     (PCIE_MAC_IREG_BASE + 0x03ECu) // 0000
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_ADDR           (PCIE_MAC_IREG_BASE + 0x03F0u) // 0000
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR           (PCIE_MAC_IREG_BASE + 0x03F4u) // 0000
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_ADDR           (PCIE_MAC_IREG_BASE + 0x03F8u) // 0000
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_ADDR           (PCIE_MAC_IREG_BASE + 0x03FCu) // 0000
#define PCIE_MAC_IREG_DMA0_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0400u) // 0190
#define PCIE_MAC_IREG_DMA0_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0404u) // 0194
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0408u) // 0198
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x040Cu) // 0000
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0410u) // 019A
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0414u) // 019E
#define PCIE_MAC_IREG_DMA0_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0418u) // 01A2
#define PCIE_MAC_IREG_DMA0_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x041Cu) // 0000
#define PCIE_MAC_IREG_DMA0_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0420u) // 01A4
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0424u) // 01A8
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0428u) // 01AC
#define PCIE_MAC_IREG_DMA1_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0440u) // 01B8
#define PCIE_MAC_IREG_DMA1_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0444u) // 01BC
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0448u) // 01C0
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x044Cu) // 0000
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0450u) // 01C2
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0454u) // 01C6
#define PCIE_MAC_IREG_DMA1_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0458u) // 01CA
#define PCIE_MAC_IREG_DMA1_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x045Cu) // 0000
#define PCIE_MAC_IREG_DMA1_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0460u) // 01CC
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0464u) // 01D0
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0468u) // 01D4
#define PCIE_MAC_IREG_DMA2_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0480u) // 01E0
#define PCIE_MAC_IREG_DMA2_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0484u) // 01E4
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0488u) // 01E8
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x048Cu) // 0000
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0490u) // 01EA
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0494u) // 01EE
#define PCIE_MAC_IREG_DMA2_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0498u) // 01F2
#define PCIE_MAC_IREG_DMA2_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x049Cu) // 0000
#define PCIE_MAC_IREG_DMA2_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x04A0u) // 0000
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x04A4u) // 0000
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x04A8u) // 0000
#define PCIE_MAC_IREG_DMA3_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x04C0u) // 0000
#define PCIE_MAC_IREG_DMA3_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x04C4u) // 0000
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x04C8u) // 0000
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x04CCu) // 0000
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x04D0u) // 0000
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x04D4u) // 0000
#define PCIE_MAC_IREG_DMA3_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x04D8u) // 0000
#define PCIE_MAC_IREG_DMA3_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x04DCu) // 0000
#define PCIE_MAC_IREG_DMA3_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x04E0u) // 0000
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x04E4u) // 0000
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x04E8u) // 0000
#define PCIE_MAC_IREG_DMA4_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0500u) // 01F4
#define PCIE_MAC_IREG_DMA4_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0504u) // 01F8
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0508u) // 01FC
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x050Cu) // 0000
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0510u) // 01FE
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0514u) // 0202
#define PCIE_MAC_IREG_DMA4_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0518u) // 0206
#define PCIE_MAC_IREG_DMA4_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x051Cu) // 0000
#define PCIE_MAC_IREG_DMA4_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0520u) // 0208
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0524u) // 020C
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0528u) // 0210
#define PCIE_MAC_IREG_DMA5_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0540u) // 021C
#define PCIE_MAC_IREG_DMA5_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0544u) // 0220
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0548u) // 0224
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x054Cu) // 0000
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0550u) // 0226
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0554u) // 022A
#define PCIE_MAC_IREG_DMA5_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0558u) // 022E
#define PCIE_MAC_IREG_DMA5_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x055Cu) // 0000
#define PCIE_MAC_IREG_DMA5_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0560u) // 0230
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0564u) // 0234
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0568u) // 0238
#define PCIE_MAC_IREG_DMA6_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0580u) // 0244
#define PCIE_MAC_IREG_DMA6_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0584u) // 0248
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0588u) // 024C
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x058Cu) // 0000
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0590u) // 024E
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0594u) // 0252
#define PCIE_MAC_IREG_DMA6_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0598u) // 0256
#define PCIE_MAC_IREG_DMA6_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x059Cu) // 0000
#define PCIE_MAC_IREG_DMA6_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x05A0u) // 0000
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x05A4u) // 0000
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x05A8u) // 0000
#define PCIE_MAC_IREG_DMA7_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x05C0u) // 0000
#define PCIE_MAC_IREG_DMA7_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x05C4u) // 0000
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x05C8u) // 0000
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x05CCu) // 0000
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x05D0u) // 0000
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x05D4u) // 0000
#define PCIE_MAC_IREG_DMA7_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x05D8u) // 0000
#define PCIE_MAC_IREG_DMA7_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x05DCu) // 0000
#define PCIE_MAC_IREG_DMA7_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x05E0u) // 0000
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x05E4u) // 0000
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x05E8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0600u) // 0258
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0604u) // 025C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0608u) // 0260
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x060Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0610u) // 0262
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0618u) // 026A
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x061Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0620u) // 026C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0624u) // 0270
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0628u) // 0274
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x062Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0630u) // 0276
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0638u) // 027E
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x063Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0640u) // 0280
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0644u) // 0284
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0648u) // 0288
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x064Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0650u) // 028A
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0658u) // 0292
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x065Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0660u) // 0294
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0664u) // 0298
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0668u) // 029C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x066Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0670u) // 029E
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0678u) // 02A6
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x067Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0680u) // 02A8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0684u) // 02AC
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0688u) // 02B0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x068Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0690u) // 02B2
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0698u) // 02BA
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x069Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x06A0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x06A4u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06A8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06ACu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x06B0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06B8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06BCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x06C0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x06C4u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06C8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06CCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x06D0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06D8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06DCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x06E0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x06E4u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06E8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06ECu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x06F0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06F8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06FCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0700u) // 02BC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0704u) // 02C0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0708u) // 02C4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x070Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0710u) // 02C6
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0718u) // 02CE
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x071Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0720u) // 02D0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0724u) // 02D4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0728u) // 02D8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x072Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0730u) // 02DA
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0738u) // 02E2
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x073Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0740u) // 02E4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0744u) // 02E8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0748u) // 02EC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x074Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0750u) // 02EE
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0758u) // 02F6
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x075Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0760u) // 02F8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0764u) // 02FC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0768u) // 0300
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x076Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0770u) // 0302
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0778u) // 030A
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x077Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0780u) // 030C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0784u) // 0310
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0788u) // 0314
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x078Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0790u) // 0316
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0798u) // 031E
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x079Cu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x07A0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x07A4u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07A8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07ACu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x07B0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07B8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07BCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x07C0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x07C4u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07C8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07CCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x07D0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07D8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07DCu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x07E0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x07E4u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07E8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07ECu) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x07F0u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07F8u) // 0000
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07FCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0800u) // 0320
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0804u) // 0324
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0808u) // 0328
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x080Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0810u) // 032A
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0818u) // 0332
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x081Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0820u) // 0334
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0824u) // 0338
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0828u) // 033C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x082Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0830u) // 033E
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0838u) // 0346
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x083Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0840u) // 0348
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0844u) // 034C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0848u) // 0350
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x084Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0850u) // 0352
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0858u) // 035A
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x085Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0860u) // 035C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0864u) // 0360
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0868u) // 0364
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x086Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0870u) // 0366
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0878u) // 036E
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x087Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0880u) // 0370
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0884u) // 0374
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0888u) // 0378
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x088Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0890u) // 037A
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0898u) // 0382
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x089Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x08A0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x08A4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08A8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08ACu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x08B0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08B8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08BCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x08C0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x08C4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08C8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08CCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x08D0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08D8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08DCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x08E0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x08E4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08E8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08ECu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x08F0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08F8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08FCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0900u) // 0384
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0904u) // 0388
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0908u) // 038C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x090Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0910u) // 038E
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0918u) // 0396
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x091Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0920u) // 0398
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0924u) // 039C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0928u) // 03A0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x092Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0930u) // 03A2
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0938u) // 03AA
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x093Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0940u) // 03AC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0944u) // 03B0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0948u) // 03B4
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x094Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0950u) // 03B6
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0958u) // 03BE
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x095Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0960u) // 03C0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0964u) // 03C4
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0968u) // 03C8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x096Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0970u) // 03CA
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0978u) // 03D2
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x097Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0980u) // 03D4
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0984u) // 03D8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0988u) // 03DC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x098Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0990u) // 03DE
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0998u) // 03E6
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x099Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x09A0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x09A4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09A8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09ACu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x09B0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09B8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09BCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x09C0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x09C4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09C8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09CCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x09D0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09D8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09DCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x09E0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x09E4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09E8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09ECu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x09F0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09F8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09FCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A00u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A04u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A08u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A0Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A10u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A18u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A1Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A20u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A24u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A28u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A2Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A30u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A38u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A3Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A40u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A44u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A48u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A4Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A50u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A58u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A5Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A60u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A64u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A68u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A6Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A70u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A78u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A7Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A80u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A84u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A88u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A8Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A90u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A98u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A9Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0AA0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0AA4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AA8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AACu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0AB0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AB8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0ABCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0AC0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0AC4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AC8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0ACCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0AD0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AD8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0ADCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0AE0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0AE4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AE8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AECu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0AF0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AF8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AFCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B00u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B04u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B08u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B0Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B10u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B18u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B1Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B20u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B24u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B28u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B2Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B30u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B38u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B3Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B40u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B44u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B48u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B4Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B50u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B58u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B5Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B60u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B64u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B68u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B6Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B70u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B78u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B7Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B80u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B84u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B88u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B8Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B90u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B98u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B9Cu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0BA0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0BA4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BA8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BACu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0BB0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BB8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BBCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0BC0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0BC4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BC8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BCCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0BD0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BD8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BDCu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0BE0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0BE4u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BE8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BECu) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0BF0u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BF8u) // 0000
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BFCu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C00u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C04u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F0_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C08u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C0Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C10u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C14u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F1_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C18u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F1_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C1Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C20u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C24u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F2_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C28u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F2_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C2Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C30u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C34u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F3_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C38u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F3_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C3Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C40u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C44u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F4_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C48u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F4_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C4Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C50u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C54u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F5_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C58u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F5_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C5Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C60u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C64u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F6_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C68u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F6_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C6Cu) // 0000
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C70u) // 0000
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C74u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_F7_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C78u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F7_ADDR                   (PCIE_MAC_IREG_BASE + 0x0C7Cu) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C80u) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C84u) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C88u) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C8Cu) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C90u) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C94u) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C98u) // 0000
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C9Cu) // 0000
#define PCIE_MAC_IREG_PCIE_VC_CAP_ADDR                         (PCIE_MAC_IREG_BASE + 0x0CA0u) // 0000
#define PCIE_MAC_IREG_PCIE_VC_CAP2_ADDR                        (PCIE_MAC_IREG_BASE + 0x0CA4u) // 0000
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CA8u) // 0000
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CACu) // 0000
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CB0u) // 0000
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CB4u) // 0000
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CB8u) // 0000
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CBCu) // 0000
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CC0u) // 0000
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CC4u) // 0000
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CC8u) // 0000
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CCCu) // 0000
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CD0u) // 0000
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CD4u) // 0000
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CD8u) // 0000
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CDCu) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_ADDR             (PCIE_MAC_IREG_BASE + 0x0CE0u) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_ADDR             (PCIE_MAC_IREG_BASE + 0x0CE4u) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_ADDR             (PCIE_MAC_IREG_BASE + 0x0CE8u) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_ADDR             (PCIE_MAC_IREG_BASE + 0x0CECu) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_ADDR             (PCIE_MAC_IREG_BASE + 0x0CF0u) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_ADDR             (PCIE_MAC_IREG_BASE + 0x0CF4u) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_ADDR             (PCIE_MAC_IREG_BASE + 0x0CF8u) // 0000
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_ADDR             (PCIE_MAC_IREG_BASE + 0x0CFCu) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D00u) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D04u) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D08u) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D0Cu) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D10u) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D14u) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D18u) // 0000
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D1Cu) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR            (PCIE_MAC_IREG_BASE + 0x0D20u) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0D24u) // 0000
#define PCIE_MAC_IREG_PCIE_RESOURCE_STATUS_ADDR                (PCIE_MAC_IREG_BASE + 0x0D28u) // 0000
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D2Cu) // 0000
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x0D30u) // 0000
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x0D34u) // 0000
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_ADDR              (PCIE_MAC_IREG_BASE + 0x0D38u) // 0000
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR              (PCIE_MAC_IREG_BASE + 0x0D3Cu) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D40u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D44u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D48u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D4Cu) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D50u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D54u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D58u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D5Cu) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D60u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D64u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR                (PCIE_MAC_IREG_BASE + 0x0D68u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR                (PCIE_MAC_IREG_BASE + 0x0D6Cu) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR                (PCIE_MAC_IREG_BASE + 0x0D70u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR                (PCIE_MAC_IREG_BASE + 0x0D74u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR                (PCIE_MAC_IREG_BASE + 0x0D78u) // 0000
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR                (PCIE_MAC_IREG_BASE + 0x0D7Cu) // 0000
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_0_ADDR              (PCIE_MAC_IREG_BASE + 0x0D80u) // 0000
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_1_ADDR              (PCIE_MAC_IREG_BASE + 0x0D84u) // 0000
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_2_ADDR              (PCIE_MAC_IREG_BASE + 0x0D88u) // 0000
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_3_ADDR              (PCIE_MAC_IREG_BASE + 0x0D8Cu) // 0000
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_4_ADDR              (PCIE_MAC_IREG_BASE + 0x0D90u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D94u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1S_ADDR              (PCIE_MAC_IREG_BASE + 0x0D98u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1C_ADDR              (PCIE_MAC_IREG_BASE + 0x0D9Cu) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DA0u) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DA4u) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DA8u) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_3_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DACu) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_4_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DB0u) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_5_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DB4u) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_6_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DB8u) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_7_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DBCu) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DC0u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F1_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DC4u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F2_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DC8u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F3_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DCCu) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F4_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DD0u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F5_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DD4u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F6_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DD8u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F7_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DDCu) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DE0u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F1_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DE4u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F2_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DE8u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F3_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DECu) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F4_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DF0u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F5_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DF4u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F6_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DF8u) // 0000
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F7_ADDR                   (PCIE_MAC_IREG_BASE + 0x0DFCu) // 0000
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E00u) // 0000
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E04u) // 0000
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ADDR                       (PCIE_MAC_IREG_BASE + 0x0E08u) // 0000
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E10u) // 0000
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E14u) // 0000
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ADDR                       (PCIE_MAC_IREG_BASE + 0x0E18u) // 0000
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E20u) // 0000
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E24u) // 0000
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ADDR                       (PCIE_MAC_IREG_BASE + 0x0E28u) // 0000
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E30u) // 0000
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E34u) // 0000
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ADDR                       (PCIE_MAC_IREG_BASE + 0x0E38u) // 0000
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E40u) // 0000
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0E44u) // 0000
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR                       (PCIE_MAC_IREG_BASE + 0x0E48u) // 0000
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_0_ADDR               (PCIE_MAC_IREG_BASE + 0x0E50u) // 0000
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_0_ADDR               (PCIE_MAC_IREG_BASE + 0x0E54u) // 0000
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_1_ADDR               (PCIE_MAC_IREG_BASE + 0x0E58u) // 0000
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_1_ADDR               (PCIE_MAC_IREG_BASE + 0x0E5Cu) // 0000
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_0_ADDR               (PCIE_MAC_IREG_BASE + 0x0E60u) // 0000
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_1_ADDR               (PCIE_MAC_IREG_BASE + 0x0E64u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0E68u) // 0000
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0E6Cu) // 0000
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_ADDR           (PCIE_MAC_IREG_BASE + 0x0E70u) // 0000
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_ADDR          (PCIE_MAC_IREG_BASE + 0x0E74u) // 0000
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_ADDR           (PCIE_MAC_IREG_BASE + 0x0E78u) // 0000
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_ADDR           (PCIE_MAC_IREG_BASE + 0x0E7Cu) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x0E80u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x0E84u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x0E88u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x0E8Cu) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x0F00u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x0F04u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x0F08u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x0F0Cu) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0F80u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0F84u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0F88u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x0F8Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_0_ADDR        (PCIE_MAC_IREG_BASE + 0x3000u) // 0BB8
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_0_ADDR        (PCIE_MAC_IREG_BASE + 0x3004u) // 0BBC
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_0_ADDR        (PCIE_MAC_IREG_BASE + 0x3008u) // 0BC0
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_0_ADDR        (PCIE_MAC_IREG_BASE + 0x300Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_0_ADDR        (PCIE_MAC_IREG_BASE + 0x3080u) // 0C08
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_0_ADDR        (PCIE_MAC_IREG_BASE + 0x3084u) // 0C0C
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_0_ADDR        (PCIE_MAC_IREG_BASE + 0x3088u) // 0C10
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_0_ADDR        (PCIE_MAC_IREG_BASE + 0x308Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_0_ADDR            (PCIE_MAC_IREG_BASE + 0x3100u) // 0C1C
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_0_ADDR            (PCIE_MAC_IREG_BASE + 0x3104u) // 0C20
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_0_ADDR            (PCIE_MAC_IREG_BASE + 0x3108u) // 0C24
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_0_ADDR            (PCIE_MAC_IREG_BASE + 0x310Cu) // 0000
#define PCIE_MAC_IREG_FLR_STATUS_PF_ADDR                       (PCIE_MAC_IREG_BASE + 0x31C0u) // 0000
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x31C4u) // 0000
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x31C8u) // 0000
#define PCIE_MAC_IREG_MASTER_BUS_EN_TGL_STATUS_PF_ADDR         (PCIE_MAC_IREG_BASE + 0x31CCu) // 0000
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_ADDR                    (PCIE_MAC_IREG_BASE + 0x31D0u) // 0000
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_EN_ADDR                 (PCIE_MAC_IREG_BASE + 0x31D4u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F0_ADDR                     (PCIE_MAC_IREG_BASE + 0x31E0u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F1_ADDR                     (PCIE_MAC_IREG_BASE + 0x31E4u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F2_ADDR                     (PCIE_MAC_IREG_BASE + 0x31E8u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F3_ADDR                     (PCIE_MAC_IREG_BASE + 0x31ECu) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F4_ADDR                     (PCIE_MAC_IREG_BASE + 0x31F0u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F5_ADDR                     (PCIE_MAC_IREG_BASE + 0x31F4u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F6_ADDR                     (PCIE_MAC_IREG_BASE + 0x31F8u) // 0000
#define PCIE_MAC_IREG_ISTATUS2_MSI_F7_ADDR                     (PCIE_MAC_IREG_BASE + 0x31FCu) // 0000
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x03200u) // 0C80
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x03204u) // 0C84
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x03208u) // 0C88
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x0320Cu) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_ADDR    (PCIE_MAC_IREG_BASE + 0x3210u) // 0C8A
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_ADDR    (PCIE_MAC_IREG_BASE + 0x3214u) // 0C8E
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_ADDR    (PCIE_MAC_IREG_BASE + 0x3218u) // 0C92
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_ADDR    (PCIE_MAC_IREG_BASE + 0x321Cu) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_ADDR    (PCIE_MAC_IREG_BASE + 0x3220u) // 0C94
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_ADDR    (PCIE_MAC_IREG_BASE + 0x3224u) // 0C98
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_ADDR    (PCIE_MAC_IREG_BASE + 0x3228u) // 0C9C
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_ADDR    (PCIE_MAC_IREG_BASE + 0x322Cu) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x3230u) // 0C9E
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x3234u) // 0CA2
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x3238u) // 0CA6
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x323Cu) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x3240u) // 0CA8
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_ADDR (PCIE_MAC_IREG_BASE + 0x3244u) // 0CAC
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x3248u) // 0CB0
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_ADDR (PCIE_MAC_IREG_BASE + 0x324Cu) // 0000
#define PCIE_MAC_IREG_PCIE_L10_LATENCY_WATER_MARK_ADDR         (PCIE_MAC_IREG_BASE + 0x3380u) // 0D34
#define PCIE_MAC_IREG_PCIE_L11_LATENCY_WATER_MARK_ADDR         (PCIE_MAC_IREG_BASE + 0x3384u) // 0D38
#define PCIE_MAC_IREG_PCIE_L12_LATENCY_WATER_MARK_ADDR         (PCIE_MAC_IREG_BASE + 0x3388u) // 0D3C
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_ADDR (PCIE_MAC_IREG_BASE + 0x338Cu) // 0000
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_ADDR (PCIE_MAC_IREG_BASE + 0x3390u) // 0D3E
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_ADDR (PCIE_MAC_IREG_BASE + 0x3394u) // 0D42
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_ADDR (PCIE_MAC_IREG_BASE + 0x3398u) // 0D46
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR (PCIE_MAC_IREG_BASE + 0x33ACu) // 0000
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR (PCIE_MAC_IREG_BASE + 0x33B0u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_ADDR            (PCIE_MAC_IREG_BASE + 0x3400u) // 0D48
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_ADDR           (PCIE_MAC_IREG_BASE + 0x3404u) // 0D4C
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x3408u) // 0D50
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x340Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x3410u) // 0D52
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_ADDR            (PCIE_MAC_IREG_BASE + 0x3414u) // 0D56
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_STATE_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x3418u) // 0D5A
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_STATE_CNT_ADDR        (PCIE_MAC_IREG_BASE + 0x341Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L0_ENTRY_CNT_ADDR            (PCIE_MAC_IREG_BASE + 0x3420u) // 0D5C
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_ENTRY_CNT_ADDR           (PCIE_MAC_IREG_BASE + 0x3424u) // 0D60
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_ENTRY_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x3428u) // 0D64
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_ENTRY_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x342Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_ENTRY_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x3430u) // 0D66
#define PCIE_MAC_IREG_PWR_PROFILE_L2_ENTRY_CNT_ADDR            (PCIE_MAC_IREG_BASE + 0x3434u) // 0D6A
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_ENTRY_CNT_ADDR          (PCIE_MAC_IREG_BASE + 0x3438u) // 0D6E
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_ENTRY_CNT_ADDR        (PCIE_MAC_IREG_BASE + 0x343Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_ADDR                 (PCIE_MAC_IREG_BASE + 0x3440u) // 0D70
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_ADDR      (PCIE_MAC_IREG_BASE + 0x3444u) // 0D74
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_STATE_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x3448u) // 0D78
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_STATE_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x344Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_STATE_CNT_ADDR   (PCIE_MAC_IREG_BASE + 0x3450u) // 0D7A
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_STATE_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x3454u) // 0D7E
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_STATE_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x3458u) // 0D82
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_ENTRY_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x345Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_ENTRY_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x3460u) // 0D84
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_ENTRY_CNT_ADDR   (PCIE_MAC_IREG_BASE + 0x3464u) // 0D88
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_ENTRY_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x3468u) // 0D8C
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_ENTRY_CNT_ADDR (PCIE_MAC_IREG_BASE + 0x346Cu) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3490_ADDR            (PCIE_MAC_IREG_BASE + 0x3490u) // 0DA2
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3494_ADDR            (PCIE_MAC_IREG_BASE + 0x3494u) // 0DA6
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3498_ADDR            (PCIE_MAC_IREG_BASE + 0x3498u) // 0DAA
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_349C_ADDR            (PCIE_MAC_IREG_BASE + 0x349Cu) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A0_ADDR            (PCIE_MAC_IREG_BASE + 0x34A0u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A4_ADDR            (PCIE_MAC_IREG_BASE + 0x34A4u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A8_ADDR            (PCIE_MAC_IREG_BASE + 0x34A8u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34AC_ADDR            (PCIE_MAC_IREG_BASE + 0x34ACu) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B0_ADDR            (PCIE_MAC_IREG_BASE + 0x34B0u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B4_ADDR            (PCIE_MAC_IREG_BASE + 0x34B4u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B8_ADDR            (PCIE_MAC_IREG_BASE + 0x34B8u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34BC_ADDR            (PCIE_MAC_IREG_BASE + 0x34BCu) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C0_ADDR            (PCIE_MAC_IREG_BASE + 0x34C0u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C4_ADDR            (PCIE_MAC_IREG_BASE + 0x34C4u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C8_ADDR            (PCIE_MAC_IREG_BASE + 0x34C8u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34CC_ADDR            (PCIE_MAC_IREG_BASE + 0x34CCu) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D0_ADDR            (PCIE_MAC_IREG_BASE + 0x34D0u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D4_ADDR            (PCIE_MAC_IREG_BASE + 0x34D4u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D8_ADDR            (PCIE_MAC_IREG_BASE + 0x34D8u) // 0000
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34DC_ADDR            (PCIE_MAC_IREG_BASE + 0x34DCu) // 0000
#define PCIE_MAC_IREG_DVSEC_CAP_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x34ECu) // 0000
#define PCIE_MAC_IREG_DVSEC_CAP_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x34F0u) // 0000
#define PCIE_MAC_IREG_DVSEC_CAP_2_ADDR                         (PCIE_MAC_IREG_BASE + 0x34F4u) // 0000
#define PCIE_MAC_IREG_DVSEC_CAP_3_ADDR                         (PCIE_MAC_IREG_BASE + 0x34F8u) // 0000
#define PCIE_MAC_IREG_DVSEC_CAP_4_ADDR                         (PCIE_MAC_IREG_BASE + 0x34FCu) // 0000
#define PCIE_MAC_IREG_INTERRUPT_SENT0_ADDR                     (PCIE_MAC_IREG_BASE + 0x3500u) // 0DAC
#define PCIE_MAC_IREG_INTERRUPT_SENT1_ADDR                     (PCIE_MAC_IREG_BASE + 0x3504u) // 0DB0
#define PCIE_MAC_IREG_INTERRUPT_SENT2_ADDR                     (PCIE_MAC_IREG_BASE + 0x3508u) // 0DB4
#define PCIE_MAC_IREG_INTERRUPT_SENT3_ADDR                     (PCIE_MAC_IREG_BASE + 0x350Cu) // 0000
#define PCIE_MAC_IREG_INTERRUPT_SENT4_ADDR                     (PCIE_MAC_IREG_BASE + 0x3510u) // 0DB6
#define PCIE_MAC_IREG_INTERRUPT_SENT5_ADDR                     (PCIE_MAC_IREG_BASE + 0x3514u) // 0DBA
#define PCIE_MAC_IREG_INTERRUPT_SENT6_ADDR                     (PCIE_MAC_IREG_BASE + 0x3518u) // 0DBE
#define PCIE_MAC_IREG_INTERRUPT_SENT7_ADDR                     (PCIE_MAC_IREG_BASE + 0x351Cu) // 0000
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_ADDR        (PCIE_MAC_IREG_BASE + 0x3520u) // 0DC0
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_2_ADDR        (PCIE_MAC_IREG_BASE + 0x3524u) // 0DC4
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_3_ADDR        (PCIE_MAC_IREG_BASE + 0x3528u) // 0DC8
#define PCIE_MAC_IREG_HW_VDM_CTL_ADDR                          (PCIE_MAC_IREG_BASE + 0x3530u) // 0DCA
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ADDR                        (PCIE_MAC_IREG_BASE + 0x3534u) // 0DCE
#define PCIE_MAC_IREG_HW_VDM_MSG_DIS_ADDR                      (PCIE_MAC_IREG_BASE + 0x3538u) // 0DD2
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR                      (PCIE_MAC_IREG_BASE + 0x353Cu) // 0000
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_0_ADDR            (PCIE_MAC_IREG_BASE + 0x3540u) // 0DD4
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_0_ADDR            (PCIE_MAC_IREG_BASE + 0x3544u) // 0DD8
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_0_ADDR           (PCIE_MAC_IREG_BASE + 0x3548u) // 0DDC
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_0_ADDR           (PCIE_MAC_IREG_BASE + 0x354Cu) // 0000
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR                 (PCIE_MAC_IREG_BASE + 0x3550u) // 0DDE
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_ADDR           (PCIE_MAC_IREG_BASE + 0x3554u) // 0DE2
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR                     (PCIE_MAC_IREG_BASE + 0x3558u) // 0DE6
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_0_ADDR            (PCIE_MAC_IREG_BASE + 0x355Cu) // 0000
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_1_ADDR            (PCIE_MAC_IREG_BASE + 0x3560u) // 0DE8
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_2_ADDR            (PCIE_MAC_IREG_BASE + 0x3564u) // 0DEC
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_3_ADDR            (PCIE_MAC_IREG_BASE + 0x3568u) // 0DF0
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_4_ADDR            (PCIE_MAC_IREG_BASE + 0x356Cu) // 0000
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_5_ADDR            (PCIE_MAC_IREG_BASE + 0x3570u) // 0DF2
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_6_ADDR            (PCIE_MAC_IREG_BASE + 0x3574u) // 0DF6
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_7_ADDR            (PCIE_MAC_IREG_BASE + 0x3578u) // 0DFA
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_ADDR (PCIE_MAC_IREG_BASE + 0x357Cu) // 0000
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_ADDR (PCIE_MAC_IREG_BASE + 0x3580u) // 0DFC
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_ADDR                   (PCIE_MAC_IREG_BASE + 0x3584u) // 0E00
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR                     (PCIE_MAC_IREG_BASE + 0x3588u) // 0E04
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_ADDR     (PCIE_MAC_IREG_BASE + 0x358Cu) // 0000
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3590u) // 0E06
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_1_ADDR         (PCIE_MAC_IREG_BASE + 0x3594u) // 0E0A
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_2_ADDR         (PCIE_MAC_IREG_BASE + 0x3598u) // 0E0E
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_3_ADDR         (PCIE_MAC_IREG_BASE + 0x359Cu) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_0_ADDR         (PCIE_MAC_IREG_BASE + 0x35A0u) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_1_ADDR         (PCIE_MAC_IREG_BASE + 0x35A4u) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_2_ADDR         (PCIE_MAC_IREG_BASE + 0x35A8u) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_3_ADDR         (PCIE_MAC_IREG_BASE + 0x35ACu) // 0000
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_0_ADDR         (PCIE_MAC_IREG_BASE + 0x35B0u) // 0000
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_1_ADDR         (PCIE_MAC_IREG_BASE + 0x35B4u) // 0000
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_2_ADDR         (PCIE_MAC_IREG_BASE + 0x35B8u) // 0000
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_3_ADDR         (PCIE_MAC_IREG_BASE + 0x35BCu) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_0_ADDR         (PCIE_MAC_IREG_BASE + 0x35C0u) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_1_ADDR         (PCIE_MAC_IREG_BASE + 0x35C4u) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_2_ADDR         (PCIE_MAC_IREG_BASE + 0x35C8u) // 0000
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_3_ADDR         (PCIE_MAC_IREG_BASE + 0x35CCu) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x35E0u) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x35E4u) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x35E8u) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_3_ADDR                   (PCIE_MAC_IREG_BASE + 0x35ECu) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_4_ADDR                   (PCIE_MAC_IREG_BASE + 0x35F0u) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_5_ADDR                   (PCIE_MAC_IREG_BASE + 0x35F4u) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_6_ADDR                   (PCIE_MAC_IREG_BASE + 0x35F8u) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_7_ADDR                   (PCIE_MAC_IREG_BASE + 0x35FCu) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_0_ADDR                   (PCIE_MAC_IREG_BASE + 0x3600u) // 0E10
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x3604u) // 0E14
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x3608u) // 0E18
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_ADDR                   (PCIE_MAC_IREG_BASE + 0x360Cu) // 0000
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR                   (PCIE_MAC_IREG_BASE + 0x3610u) // 0E1A
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_5_ADDR                   (PCIE_MAC_IREG_BASE + 0x3614u) // 0E1E
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_6_ADDR                   (PCIE_MAC_IREG_BASE + 0x3618u) // 0E22
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_7_ADDR                   (PCIE_MAC_IREG_BASE + 0x361Cu) // 0000
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ADDR               (PCIE_MAC_IREG_BASE + 0x3620u) // 0E24
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_ADDR           (PCIE_MAC_IREG_BASE + 0x3624u) // 0E28
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_ADDR                  (PCIE_MAC_IREG_BASE + 0x3628u) // 0E2C
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ADDR               (PCIE_MAC_IREG_BASE + 0x362Cu) // 0000
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_ADDR           (PCIE_MAC_IREG_BASE + 0x3630u) // 0E2E
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_ADDR                  (PCIE_MAC_IREG_BASE + 0x3634u) // 0E32
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_ADDR                  (PCIE_MAC_IREG_BASE + 0x3638u) // 0E36
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3800u) // 0ED8
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x3804u) // 0EDC
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x3808u) // 0EE0
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x380Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x3810u) // 0EE2
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x3814u) // 0EE6
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x3818u) // 0EEA
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_LSB_ADDR   (PCIE_MAC_IREG_BASE + 0x381Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_MSB_ADDR   (PCIE_MAC_IREG_BASE + 0x3820u) // 0EEC
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x3824u) // 0EF0
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_MSB_ADDR (PCIE_MAC_IREG_BASE + 0x3828u) // 0EF4
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x382Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3830u) // 0EF6
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3834u) // 0EFA
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3838u) // 0EFE
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_LSB_ADDR         (PCIE_MAC_IREG_BASE + 0x383Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_MSB_ADDR         (PCIE_MAC_IREG_BASE + 0x3840u) // 0F00
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_LSB_ADDR        (PCIE_MAC_IREG_BASE + 0x3844u) // 0F04
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x3848u) // 0F08
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x384Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x3850u) // 0F0A
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x3854u) // 0F0E
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x3858u) // 0F12
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x385Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x3860u) // 0F14
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_LSB_ADDR         (PCIE_MAC_IREG_BASE + 0x3864u) // 0F18
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_MSB_ADDR         (PCIE_MAC_IREG_BASE + 0x3868u) // 0F1C
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_LSB_ADDR     (PCIE_MAC_IREG_BASE + 0x386Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_MSB_ADDR     (PCIE_MAC_IREG_BASE + 0x3870u) // 0F1E
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x3874u) // 0F22
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_MSB_ADDR (PCIE_MAC_IREG_BASE + 0x3878u) // 0F26
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x387Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3880u) // 0F28
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3884u) // 0F2C
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3888u) // 0F30
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x388Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_0_ADDR (PCIE_MAC_IREG_BASE + 0x3890u) // 0F32
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_0_ADDR       (PCIE_MAC_IREG_BASE + 0x3894u) // 0F36
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_0_ADDR       (PCIE_MAC_IREG_BASE + 0x3898u) // 0F3A
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_0_ADDR       (PCIE_MAC_IREG_BASE + 0x389Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_0_ADDR       (PCIE_MAC_IREG_BASE + 0x38A0u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_LSB_ADDR          (PCIE_MAC_IREG_BASE + 0x38A4u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_MSB_ADDR          (PCIE_MAC_IREG_BASE + 0x38A8u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_LSB_ADDR         (PCIE_MAC_IREG_BASE + 0x38ACu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_MSB_ADDR         (PCIE_MAC_IREG_BASE + 0x38B0u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_LSB_ADDR          (PCIE_MAC_IREG_BASE + 0x38B4u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_MSB_ADDR          (PCIE_MAC_IREG_BASE + 0x38B8u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_LSB_ADDR         (PCIE_MAC_IREG_BASE + 0x38BCu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_MSB_ADDR         (PCIE_MAC_IREG_BASE + 0x38C0u) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_0_ADDR               (PCIE_MAC_IREG_BASE + 0x38C4u) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_1_ADDR               (PCIE_MAC_IREG_BASE + 0x38C8u) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_2_ADDR               (PCIE_MAC_IREG_BASE + 0x38CCu) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_3_ADDR               (PCIE_MAC_IREG_BASE + 0x38D0u) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_4_ADDR               (PCIE_MAC_IREG_BASE + 0x38D4u) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_5_ADDR               (PCIE_MAC_IREG_BASE + 0x38D8u) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_6_ADDR               (PCIE_MAC_IREG_BASE + 0x38DCu) // 0000
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_7_ADDR               (PCIE_MAC_IREG_BASE + 0x38F0u) // 0000
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_ADDR        (PCIE_MAC_IREG_BASE + 0x3900u) // 0F3C
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_TIMEOUT_ADDR      (PCIE_MAC_IREG_BASE + 0x3904u) // 0F40
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_LATEST_ADDR       (PCIE_MAC_IREG_BASE + 0x3908u) // 0F44
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MIN_ADDR          (PCIE_MAC_IREG_BASE + 0x390Cu) // 0000
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MAX_ADDR          (PCIE_MAC_IREG_BASE + 0x3910u) // 0F46
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_LATEST_ADDR       (PCIE_MAC_IREG_BASE + 0x3914u) // 0F4A
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MIN_ADDR          (PCIE_MAC_IREG_BASE + 0x3918u) // 0F4E
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MAX_ADDR          (PCIE_MAC_IREG_BASE + 0x391Cu) // 0000
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_LATEST_ADDR       (PCIE_MAC_IREG_BASE + 0x3920u) // 0F50
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MIN_ADDR          (PCIE_MAC_IREG_BASE + 0x3924u) // 0F54
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MAX_ADDR          (PCIE_MAC_IREG_BASE + 0x3928u) // 0F58
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_0_ADDR  (PCIE_MAC_IREG_BASE + 0x392Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3930u) // 0F5A
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_LATEST_NUM_ADDR (PCIE_MAC_IREG_BASE + 0x393Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3940u) // 0F64
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3944u) // 0F68
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3948u) // 0F6C
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x394Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3950u) // 0F6E
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3954u) // 0F72
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3958u) // 0F76
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x395Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3960u) // 0F78
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3964u) // 0F7C
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3968u) // 0F80
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x396Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3970u) // 0F82
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3974u) // 0F86
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3978u) // 0F8A
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x397Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3980u) // 0F8C
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3984u) // 0F90
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3988u) // 0F94
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x398Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3990u) // 0F96
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3994u) // 0F9A
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x3998u) // 0F9E
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x399Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39A0u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39A4u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39A8u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39ACu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39B0u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39B4u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_LSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39B8u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_MSB_ADDR  (PCIE_MAC_IREG_BASE + 0x39BCu) // 0000
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_ADDR              (PCIE_MAC_IREG_BASE + 0x39C0u) // 0000
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_0_ADDR     (PCIE_MAC_IREG_BASE + 0x39C4u) // 0000
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_0_ADDR     (PCIE_MAC_IREG_BASE + 0x39C8u) // 0000
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x39CCu) // 0000
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_MSB_ADDR (PCIE_MAC_IREG_BASE + 0x39D0u) // 0000
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x39D4u) // 0000
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_MSB_ADDR (PCIE_MAC_IREG_BASE + 0x39D8u) // 0000
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_ADDR             (PCIE_MAC_IREG_BASE + 0x39DCu) // 0000
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_ADDR           (PCIE_MAC_IREG_BASE + 0x3A00u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A10u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A14u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A18u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A1Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A20u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A24u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A28u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A2Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A30u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_0_ADDR          (PCIE_MAC_IREG_BASE + 0x3A34u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A38u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A3Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A40u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A44u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A48u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A4Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A50u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A54u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A58u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A5Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A60u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A64u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A68u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A6Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A70u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A74u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A78u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A7Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A80u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A84u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A88u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_0_ADDR         (PCIE_MAC_IREG_BASE + 0x3A8Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4000u) // 0FA0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4004u) // 0FA4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4008u) // 0FA8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x400Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4010u) // 0FAA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4014u) // 0FAE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4018u) // 0FB2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x401Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4020u) // 0FB4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4024u) // 0FB8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4028u) // 0FBC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x402Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4030u) // 0FBE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4034u) // 0FC2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4038u) // 0FC6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x403Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4040u) // 0FC8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4044u) // 0FCC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4048u) // 0FD0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x404Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4050u) // 0FD2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4054u) // 0FD6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4058u) // 0FDA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x405Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4060u) // 0FDC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4064u) // 0FE0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4068u) // 0FE4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x406Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4070u) // 0FE6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4074u) // 0FEA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4078u) // 0FEE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x407Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4080u) // 0FF0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4084u) // 0FF4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4088u) // 0FF8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x408Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4090u) // 0FFA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4094u) // 0FFE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x4098u) // 1002
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x409Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_0_ADDR           (PCIE_MAC_IREG_BASE + 0x40FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4100u) // 1004
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4104u) // 1008
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4108u) // 100C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x410Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4110u) // 100E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4114u) // 1012
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4118u) // 1016
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x411Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4120u) // 1018
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4124u) // 101C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4128u) // 1020
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x412Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4130u) // 1022
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4134u) // 1026
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4138u) // 102A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x413Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4140u) // 102C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4144u) // 1030
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4148u) // 1034
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x414Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4150u) // 1036
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4154u) // 103A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4158u) // 103E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x415Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4160u) // 1040
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4164u) // 1044
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4168u) // 1048
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x416Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4170u) // 104A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4174u) // 104E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4178u) // 1052
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x417Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4180u) // 1054
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4184u) // 1058
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4188u) // 105C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x418Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4190u) // 105E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4194u) // 1062
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4198u) // 1066
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x419Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x41FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4200u) // 1068
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4204u) // 106C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4208u) // 1070
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x420Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4210u) // 1072
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4214u) // 1076
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4218u) // 107A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x421Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4220u) // 107C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4224u) // 1080
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4228u) // 1084
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x422Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4230u) // 1086
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4234u) // 108A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4238u) // 108E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x423Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4240u) // 1090
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4244u) // 1094
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4248u) // 1098
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x424Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4250u) // 109A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4254u) // 109E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4258u) // 10A2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x425Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4260u) // 10A4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4264u) // 10A8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4268u) // 10AC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x426Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4270u) // 10AE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4274u) // 10B2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4278u) // 10B6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x427Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4280u) // 10B8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4284u) // 10BC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4288u) // 10C0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x428Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4290u) // 10C2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4294u) // 10C6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4298u) // 10CA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x429Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x42FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4300u) // 10CC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4304u) // 10D0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4308u) // 10D4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x430Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4310u) // 10D6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4314u) // 10DA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4318u) // 10DE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x431Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4320u) // 10E0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4324u) // 10E4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4328u) // 10E8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x432Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4330u) // 10EA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4334u) // 10EE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4338u) // 10F2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x433Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4340u) // 10F4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4344u) // 10F8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4348u) // 10FC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x434Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4350u) // 10FE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4354u) // 1102
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4358u) // 1106
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x435Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4360u) // 1108
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4364u) // 110C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4368u) // 1110
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x436Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4370u) // 1112
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4374u) // 1116
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4378u) // 111A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x437Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4380u) // 111C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4384u) // 1120
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4388u) // 1124
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x438Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4390u) // 1126
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4394u) // 112A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4398u) // 112E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x439Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x43FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4400u) // 1130
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4404u) // 1134
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4408u) // 1138
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x440Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4410u) // 113A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4414u) // 113E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4418u) // 1142
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x441Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4420u) // 1144
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4424u) // 1148
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4428u) // 114C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x442Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4430u) // 114E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4434u) // 1152
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4438u) // 1156
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x443Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4440u) // 1158
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4444u) // 115C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4448u) // 1160
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x444Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4450u) // 1162
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4454u) // 1166
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4458u) // 116A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x445Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4460u) // 116C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4464u) // 1170
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4468u) // 1174
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x446Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4470u) // 1176
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4474u) // 117A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4478u) // 117E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x447Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4480u) // 1180
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4484u) // 1184
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4488u) // 1188
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x448Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4490u) // 118A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4494u) // 118E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4498u) // 1192
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x449Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x44FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4500u) // 1194
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4504u) // 1198
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4508u) // 119C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x450Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4510u) // 119E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4514u) // 11A2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4518u) // 11A6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x451Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4520u) // 11A8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4524u) // 11AC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4528u) // 11B0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x452Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4530u) // 11B2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4534u) // 11B6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4538u) // 11BA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x453Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4540u) // 11BC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4544u) // 11C0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4548u) // 11C4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x454Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4550u) // 11C6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4554u) // 11CA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4558u) // 11CE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x455Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4560u) // 11D0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4564u) // 11D4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4568u) // 11D8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x456Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4570u) // 11DA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4574u) // 11DE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4578u) // 11E2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x457Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4580u) // 11E4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4584u) // 11E8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4588u) // 11EC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x458Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4590u) // 11EE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4594u) // 11F2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4598u) // 11F6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x459Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x45FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4600u) // 11F8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4604u) // 11FC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4608u) // 1200
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x460Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4610u) // 1202
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4614u) // 1206
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4618u) // 120A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x461Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4620u) // 120C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4624u) // 1210
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4628u) // 1214
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x462Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4630u) // 1216
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4634u) // 121A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4638u) // 121E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x463Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4640u) // 1220
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4644u) // 1224
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4648u) // 1228
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x464Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4650u) // 122A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4654u) // 122E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4658u) // 1232
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x465Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4660u) // 1234
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4664u) // 1238
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4668u) // 123C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x466Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4670u) // 123E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4674u) // 1242
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4678u) // 1246
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x467Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4680u) // 1248
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4684u) // 124C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4688u) // 1250
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x468Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4690u) // 1252
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4694u) // 1256
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4698u) // 125A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x469Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x46FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4700u) // 125C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4704u) // 1260
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4708u) // 1264
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x470Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4710u) // 1266
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4714u) // 126A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4718u) // 126E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x471Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4720u) // 1270
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4724u) // 1274
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4728u) // 1278
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x472Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4730u) // 127A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4734u) // 127E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4738u) // 1282
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x473Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4740u) // 1284
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4744u) // 1288
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4748u) // 128C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x474Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4750u) // 128E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4754u) // 1292
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4758u) // 1296
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x475Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4760u) // 1298
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4764u) // 129C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4768u) // 12A0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x476Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4770u) // 12A2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4774u) // 12A6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4778u) // 12AA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x477Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4780u) // 12AC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4784u) // 12B0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4788u) // 12B4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x478Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4790u) // 12B6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4794u) // 12BA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x4798u) // 12BE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x479Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_0_ADDR          (PCIE_MAC_IREG_BASE + 0x47FCu) // 0000
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008084u) // 1F94
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x00008098u) // 1FA2
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x0000809Cu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000080A0u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x000080A4u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000080A8u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000080ACu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000080B0u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000080B4u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000080B8u) // 0000
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x000080BCu) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000080E4u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_01_1_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000080E8u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000080ECu) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_23_1_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000080F0u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000080F4u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_45_1_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000080F8u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x000080FCu) // 0000
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008120u) // 1FB8
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008124u) // 1FBC
#define PCIE_MAC_IREG_PCIE_SRIOV_2_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008128u) // 1FC0
#define PCIE_MAC_IREG_PCIE_SRIOV_3_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0000812Cu) // 0000
#define PCIE_MAC_IREG_PCIE_SRIOV_4_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008130u) // 1FC2
#define PCIE_MAC_IREG_PCIE_SRIOV_5_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008134u) // 1FC6
#define PCIE_MAC_IREG_PCIE_SRIOV_6_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008138u) // 1FCA
#define PCIE_MAC_IREG_PCIE_SRIOV_7_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0000813Cu) // 0000
#define PCIE_MAC_IREG_PM_CONF_0_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x00008174u) // 1FEE
#define PCIE_MAC_IREG_PM_CONF_1_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x00008178u) // 1FF2
#define PCIE_MAC_IREG_PM_CONF_2_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x0000817Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_1_ADDR                        (PCIE_MAC_IREG_BASE + 0x00008188u) // 1FFC
#define PCIE_MAC_IREG_ISTATUS_HOST_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0000818Cu) // 0000
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR               (PCIE_MAC_IREG_BASE + 0x00008194u) // 2002
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00008198u) // 2006
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x0000819Cu) // 0000
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x000081A4u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_SET_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000081F0u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_CLR_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x000081F4u) // 0000
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x000081F8u) // 0000
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x000081FCu) // 0000
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR                 (PCIE_MAC_IREG_BASE + 0x0000831Cu) // 0000
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x000083C4u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x000083C8u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x000083CCu) // 0000
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_ADDR                     (PCIE_MAC_IREG_BASE + 0x000083ECu) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x00008E80u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x00008E84u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x00008E88u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x00008E8Cu) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x00008F00u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x00008F04u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x00008F08u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x00008F0Cu) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x00008F80u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x00008F84u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x00008F88u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_1_ADDR                   (PCIE_MAC_IREG_BASE + 0x00008F8Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B000u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B004u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B008u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B00Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B080u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B084u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B088u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_1_ADDR        (PCIE_MAC_IREG_BASE + 0x0000B08Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0000B100u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0000B104u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0000B108u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0000B10Cu) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B230u) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B234u) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B238u) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B23Cu) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B240u) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B244u) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B248u) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B24Cu) // 0000
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B394u) // 0000
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B398u) // 0000
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0000B540u) // 0000
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0000B544u) // 0000
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000B548u) // 0000
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000B54Cu) // 0000
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR                 (PCIE_MAC_IREG_BASE + 0x0000B550u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B82Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B830u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B834u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B838u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B87Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B880u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B884u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B888u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B88Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_1_ADDR (PCIE_MAC_IREG_BASE + 0x0000B890u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_1_ADDR       (PCIE_MAC_IREG_BASE + 0x0000B894u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_1_ADDR       (PCIE_MAC_IREG_BASE + 0x0000B898u) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_1_ADDR       (PCIE_MAC_IREG_BASE + 0x0000B89Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_1_ADDR       (PCIE_MAC_IREG_BASE + 0x0000B8A0u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_1_ADDR  (PCIE_MAC_IREG_BASE + 0x0000B92Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000B930u) // 0000
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_ADDR              (PCIE_MAC_IREG_BASE + 0x0000B9C0u) // 0000
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_1_ADDR     (PCIE_MAC_IREG_BASE + 0x0000B9C4u) // 0000
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_1_ADDR     (PCIE_MAC_IREG_BASE + 0x0000B9C8u) // 0000
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_ADDR             (PCIE_MAC_IREG_BASE + 0x0000B9DCu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA10u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA14u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA18u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA1Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA20u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA24u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA28u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA2Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA30u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000BA34u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA38u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA3Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA40u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA44u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA48u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA4Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA50u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA54u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA58u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA5Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA60u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA64u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA68u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA6Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA70u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA74u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA78u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA7Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA80u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA84u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA88u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_1_ADDR         (PCIE_MAC_IREG_BASE + 0x0000BA8Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C000u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C004u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C008u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C00Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C010u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C014u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C018u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C01Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C020u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C024u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C028u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C02Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C030u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C034u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C038u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C03Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C040u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C044u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C048u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C04Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C050u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C054u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C058u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C05Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C060u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C064u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C068u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C06Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C070u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C074u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C078u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C07Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C080u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C084u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C088u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C08Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C090u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C094u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C098u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C09Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_1_ADDR           (PCIE_MAC_IREG_BASE + 0x0000C0FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C100u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C104u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C108u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C10Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C110u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C114u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C118u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C11Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C120u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C124u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C128u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C12Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C130u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C134u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C138u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C13Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C140u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C144u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C148u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C14Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C150u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C154u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C158u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C15Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C160u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C164u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C168u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C16Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C170u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C174u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C178u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C17Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C180u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C184u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C188u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C18Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C190u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C194u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C198u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C19Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C1FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C200u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C204u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C208u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C20Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C210u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C214u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C218u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C21Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C220u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C224u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C228u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C22Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C230u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C234u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C238u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C23Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C240u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C244u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C248u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C24Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C250u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C254u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C258u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C25Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C260u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C264u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C268u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C26Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C270u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C274u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C278u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C27Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C280u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C284u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C288u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C28Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C290u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C294u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C298u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C29Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C2FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C300u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C304u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C308u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C30Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C310u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C314u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C318u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C31Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C320u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C324u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C328u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C32Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C330u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C334u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C338u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C33Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C340u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C344u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C348u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C34Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C350u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C354u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C358u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C35Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C360u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C364u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C368u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C36Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C370u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C374u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C378u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C37Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C380u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C384u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C388u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C38Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C390u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C394u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C398u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C39Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C3FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C400u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C404u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C408u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C40Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C410u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C414u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C418u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C41Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C420u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C424u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C428u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C42Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C430u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C434u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C438u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C43Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C440u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C444u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C448u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C44Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C450u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C454u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C458u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C45Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C460u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C464u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C468u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C46Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C470u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C474u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C478u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C47Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C480u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C484u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C488u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C48Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C490u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C494u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C498u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C49Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C4FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C500u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C504u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C508u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C50Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C510u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C514u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C518u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C51Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C520u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C524u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C528u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C52Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C530u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C534u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C538u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C53Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C540u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C544u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C548u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C54Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C550u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C554u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C558u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C55Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C560u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C564u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C568u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C56Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C570u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C574u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C578u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C57Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C580u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C584u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C588u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C58Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C590u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C594u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C598u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C59Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C5FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C600u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C604u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C608u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C60Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C610u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C614u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C618u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C61Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C620u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C624u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C628u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C62Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C630u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C634u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C638u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C63Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C640u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C644u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C648u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C64Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C650u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C654u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C658u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C65Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C660u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C664u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C668u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C66Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C670u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C674u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C678u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C67Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C680u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C684u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C688u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C68Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C690u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C694u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C698u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C69Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C6FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C700u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C704u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C708u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C70Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C710u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C714u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C718u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C71Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C720u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C724u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C728u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C72Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C730u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C734u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C738u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C73Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C740u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C744u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C748u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C74Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C750u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C754u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C758u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C75Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C760u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C764u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C768u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C76Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C770u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C774u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C778u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C77Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C780u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C784u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C788u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C78Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C790u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C794u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C798u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C79Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_1_ADDR          (PCIE_MAC_IREG_BASE + 0x0000C7FCu) // 0000
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010084u) // 2764
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x00010098u) // 2772
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x0001009Cu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000100A0u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x000100A4u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000100A8u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000100ACu) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000100B0u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000100B4u) // 0000
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000100B8u) // 0000
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x000100BCu) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000100E4u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_01_1_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000100E8u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000100ECu) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_23_1_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000100F0u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000100F4u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_45_1_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000100F8u) // 0000
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x000100FCu) // 0000
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010120u) // 2788
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010124u) // 278C
#define PCIE_MAC_IREG_PCIE_SRIOV_2_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010128u) // 2790
#define PCIE_MAC_IREG_PCIE_SRIOV_3_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x0001012Cu) // 0000
#define PCIE_MAC_IREG_PCIE_SRIOV_4_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010130u) // 2792
#define PCIE_MAC_IREG_PCIE_SRIOV_5_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010134u) // 2796
#define PCIE_MAC_IREG_PCIE_SRIOV_6_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010138u) // 279A
#define PCIE_MAC_IREG_PCIE_SRIOV_7_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x0001013Cu) // 0000
#define PCIE_MAC_IREG_PM_CONF_0_2_ADDR                         (PCIE_MAC_IREG_BASE + 0x00010174u) // 27BE
#define PCIE_MAC_IREG_PM_CONF_1_2_ADDR                         (PCIE_MAC_IREG_BASE + 0x00010178u) // 27C2
#define PCIE_MAC_IREG_PM_CONF_2_2_ADDR                         (PCIE_MAC_IREG_BASE + 0x0001017Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_2_ADDR                        (PCIE_MAC_IREG_BASE + 0x00010188u) // 27CC
#define PCIE_MAC_IREG_ISTATUS_HOST_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x0001018Cu) // 0000
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR               (PCIE_MAC_IREG_BASE + 0x00010194u) // 27D2
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00010198u) // 27D6
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x0001019Cu) // 0000
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x000101A4u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_SET_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000101F0u) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_CLR_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x000101F4u) // 0000
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x000101F8u) // 0000
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x000101FCu) // 0000
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR                 (PCIE_MAC_IREG_BASE + 0x0001031Cu) // 0000
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x000103C4u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x000103C8u) // 0000
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x000103CCu) // 0000
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_ADDR                     (PCIE_MAC_IREG_BASE + 0x000103ECu) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00010E80u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00010E84u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00010E88u) // 0000
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00010E8Cu) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00010F00u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00010F04u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00010F08u) // 0000
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00010F0Cu) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x00010F80u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x00010F84u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x00010F88u) // 0000
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_2_ADDR                   (PCIE_MAC_IREG_BASE + 0x00010F8Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_2_ADDR        (PCIE_MAC_IREG_BASE + 0x00013000u) // 32C8
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_2_ADDR        (PCIE_MAC_IREG_BASE + 0x00013004u) // 32CC
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_2_ADDR        (PCIE_MAC_IREG_BASE + 0x00013008u) // 32D0
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_2_ADDR        (PCIE_MAC_IREG_BASE + 0x0001300Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_2_ADDR        (PCIE_MAC_IREG_BASE + 0x00013080u) // 3318
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_2_ADDR        (PCIE_MAC_IREG_BASE + 0x00013084u) // 331C
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_2_ADDR        (PCIE_MAC_IREG_BASE + 0x00013088u) // 3320
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_2_ADDR        (PCIE_MAC_IREG_BASE + 0x0001308Cu) // 0000
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_2_ADDR            (PCIE_MAC_IREG_BASE + 0x00013100u) // 332C
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_2_ADDR            (PCIE_MAC_IREG_BASE + 0x00013104u) // 3330
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_2_ADDR            (PCIE_MAC_IREG_BASE + 0x00013108u) // 3334
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_2_ADDR            (PCIE_MAC_IREG_BASE + 0x0001310Cu) // 0000
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013230u) // 33AE
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013234u) // 33B2
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013238u) // 33B6
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x0001323Cu) // 0000
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013240u) // 33B8
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013244u) // 33BC
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013248u) // 33C0
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_ADDR (PCIE_MAC_IREG_BASE + 0x0001324Cu) // 0000
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013394u) // 3452
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013398u) // 3456
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_2_ADDR            (PCIE_MAC_IREG_BASE + 0x00013540u) // 34E4
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_2_ADDR            (PCIE_MAC_IREG_BASE + 0x00013544u) // 34E8
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00013548u) // 34EC
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001354Cu) // 0000
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR                 (PCIE_MAC_IREG_BASE + 0x00013550u) // 34EE
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x0001382Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013830u) // 3606
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013834u) // 360A
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013838u) // 360E
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x0001387Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013880u) // 3638
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013884u) // 363C
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013888u) // 3640
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x0001388Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_2_ADDR (PCIE_MAC_IREG_BASE + 0x00013890u) // 3642
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_2_ADDR       (PCIE_MAC_IREG_BASE + 0x00013894u) // 3646
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_2_ADDR       (PCIE_MAC_IREG_BASE + 0x00013898u) // 364A
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_2_ADDR       (PCIE_MAC_IREG_BASE + 0x0001389Cu) // 0000
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_2_ADDR       (PCIE_MAC_IREG_BASE + 0x000138A0u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_2_ADDR  (PCIE_MAC_IREG_BASE + 0x0001392Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013930u) // 366A
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_ADDR              (PCIE_MAC_IREG_BASE + 0x000139C0u) // 0000
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_2_ADDR     (PCIE_MAC_IREG_BASE + 0x000139C4u) // 0000
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_2_ADDR     (PCIE_MAC_IREG_BASE + 0x000139C8u) // 0000
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_ADDR             (PCIE_MAC_IREG_BASE + 0x000139DCu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A10u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A14u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A18u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A1Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A20u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A24u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A28u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A2Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A30u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00013A34u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A38u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A3Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A40u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A44u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A48u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A4Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A50u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A54u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A58u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A5Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A60u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A64u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A68u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A6Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A70u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A74u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A78u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A7Cu) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A80u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A84u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A88u) // 0000
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_2_ADDR         (PCIE_MAC_IREG_BASE + 0x00013A8Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014000u) // 36B0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014004u) // 36B4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014008u) // 36B8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001400Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014010u) // 36BA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014014u) // 36BE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014018u) // 36C2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001401Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014020u) // 36C4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014024u) // 36C8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014028u) // 36CC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001402Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014030u) // 36CE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014034u) // 36D2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014038u) // 36D6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001403Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014040u) // 36D8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014044u) // 36DC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014048u) // 36E0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001404Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014050u) // 36E2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014054u) // 36E6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014058u) // 36EA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001405Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014060u) // 36EC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014064u) // 36F0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014068u) // 36F4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001406Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014070u) // 36F6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014074u) // 36FA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014078u) // 36FE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001407Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014080u) // 3700
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014084u) // 3704
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014088u) // 3708
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001408Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014090u) // 370A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014094u) // 370E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x00014098u) // 3712
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x0001409Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_2_ADDR           (PCIE_MAC_IREG_BASE + 0x000140FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014100u) // 3714
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014104u) // 3718
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014108u) // 371C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001410Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014110u) // 371E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014114u) // 3722
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014118u) // 3726
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001411Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014120u) // 3728
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014124u) // 372C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014128u) // 3730
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001412Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014130u) // 3732
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014134u) // 3736
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014138u) // 373A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001413Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014140u) // 373C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014144u) // 3740
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014148u) // 3744
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001414Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014150u) // 3746
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014154u) // 374A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014158u) // 374E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001415Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014160u) // 3750
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014164u) // 3754
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014168u) // 3758
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001416Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014170u) // 375A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014174u) // 375E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014178u) // 3762
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001417Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014180u) // 3764
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014184u) // 3768
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014188u) // 376C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001418Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014190u) // 376E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014194u) // 3772
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014198u) // 3776
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001419Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000141FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014200u) // 3778
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014204u) // 377C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014208u) // 3780
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001420Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014210u) // 3782
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014214u) // 3786
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014218u) // 378A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001421Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014220u) // 378C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014224u) // 3790
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014228u) // 3794
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001422Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014230u) // 3796
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014234u) // 379A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014238u) // 379E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001423Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014240u) // 37A0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014244u) // 37A4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014248u) // 37A8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001424Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014250u) // 37AA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014254u) // 37AE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014258u) // 37B2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001425Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014260u) // 37B4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014264u) // 37B8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014268u) // 37BC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001426Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014270u) // 37BE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014274u) // 37C2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014278u) // 37C6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001427Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014280u) // 37C8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014284u) // 37CC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014288u) // 37D0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001428Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014290u) // 37D2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014294u) // 37D6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014298u) // 37DA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001429Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000142FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014300u) // 37DC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014304u) // 37E0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014308u) // 37E4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001430Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014310u) // 37E6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014314u) // 37EA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014318u) // 37EE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001431Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014320u) // 37F0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014324u) // 37F4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014328u) // 37F8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001432Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014330u) // 37FA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014334u) // 37FE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014338u) // 3802
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001433Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014340u) // 3804
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014344u) // 3808
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014348u) // 380C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001434Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014350u) // 380E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014354u) // 3812
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014358u) // 3816
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001435Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014360u) // 3818
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014364u) // 381C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014368u) // 3820
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001436Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014370u) // 3822
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014374u) // 3826
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014378u) // 382A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001437Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014380u) // 382C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014384u) // 3830
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014388u) // 3834
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001438Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014390u) // 3836
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014394u) // 383A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014398u) // 383E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001439Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000143FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014400u) // 3840
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014404u) // 3844
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014408u) // 3848
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001440Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014410u) // 384A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014414u) // 384E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014418u) // 3852
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001441Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014420u) // 3854
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014424u) // 3858
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014428u) // 385C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001442Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014430u) // 385E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014434u) // 3862
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014438u) // 3866
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001443Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014440u) // 3868
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014444u) // 386C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014448u) // 3870
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001444Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014450u) // 3872
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014454u) // 3876
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014458u) // 387A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001445Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014460u) // 387C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014464u) // 3880
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014468u) // 3884
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001446Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014470u) // 3886
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014474u) // 388A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014478u) // 388E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001447Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014480u) // 3890
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014484u) // 3894
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014488u) // 3898
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001448Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014490u) // 389A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014494u) // 389E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014498u) // 38A2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001449Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000144FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014500u) // 38A4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014504u) // 38A8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014508u) // 38AC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001450Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014510u) // 38AE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014514u) // 38B2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014518u) // 38B6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001451Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014520u) // 38B8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014524u) // 38BC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014528u) // 38C0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001452Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014530u) // 38C2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014534u) // 38C6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014538u) // 38CA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001453Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014540u) // 38CC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014544u) // 38D0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014548u) // 38D4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001454Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014550u) // 38D6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014554u) // 38DA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014558u) // 38DE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001455Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014560u) // 38E0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014564u) // 38E4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014568u) // 38E8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001456Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014570u) // 38EA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014574u) // 38EE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014578u) // 38F2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001457Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014580u) // 38F4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014584u) // 38F8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014588u) // 38FC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001458Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014590u) // 38FE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014594u) // 3902
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014598u) // 3906
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001459Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000145FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014600u) // 3908
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014604u) // 390C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014608u) // 3910
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001460Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014610u) // 3912
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014614u) // 3916
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014618u) // 391A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001461Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014620u) // 391C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014624u) // 3920
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014628u) // 3924
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001462Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014630u) // 3926
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014634u) // 392A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014638u) // 392E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001463Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014640u) // 3930
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014644u) // 3934
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014648u) // 3938
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001464Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014650u) // 393A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014654u) // 393E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014658u) // 3942
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001465Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014660u) // 3944
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014664u) // 3948
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014668u) // 394C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001466Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014670u) // 394E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014674u) // 3952
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014678u) // 3956
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001467Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014680u) // 3958
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014684u) // 395C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014688u) // 3960
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001468Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014690u) // 3962
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014694u) // 3966
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014698u) // 396A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001469Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000146FCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014700u) // 396C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014704u) // 3970
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014708u) // 3974
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001470Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014710u) // 3976
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014714u) // 397A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014718u) // 397E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001471Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014720u) // 3980
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014724u) // 3984
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014728u) // 3988
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001472Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014730u) // 398A
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014734u) // 398E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014738u) // 3992
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001473Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014740u) // 3994
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014744u) // 3998
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014748u) // 399C
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001474Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014750u) // 399E
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014754u) // 39A2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014758u) // 39A6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001475Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014760u) // 39A8
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014764u) // 39AC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014768u) // 39B0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001476Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014770u) // 39B2
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014774u) // 39B6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014778u) // 39BA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001477Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014780u) // 39BC
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014784u) // 39C0
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014788u) // 39C4
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001478Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014790u) // 39C6
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014794u) // 39CA
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x00014798u) // 39CE
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x0001479Cu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147A0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147A4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147A8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147ACu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147B0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147B4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147B8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147BCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147C0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147C4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147C8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147CCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147D0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147D4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147D8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147DCu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147E0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147E4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147E8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147ECu) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147F0u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147F4u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147F8u) // 0000
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_2_ADDR          (PCIE_MAC_IREG_BASE + 0x000147FCu) // 0000




/* =====================================================================================

  ---BRIDGE_VER (0x74040000 + 0000hu)---

    VERSION[11..0]               - (RO) Provides the Bridge IP Core version; 
                                     for example, 0x123 indicates version 1.2.3 of the Core.
    PRODUCT_ID[23..12]           - (RO) Provides the Bridge IP Product ID, equal to 0x511
    DMA_NUM[27..24]              - (RO) Indicates the number of DMA Engines implemented in the Core. 
                                     Supported values are between 0x0 and 0x8.
    RSVD1[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_BRIDGE_VER_RSVD1_ADDR                    PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_RSVD1_MASK                    0xF0000000u                // RSVD1[31..28]
#define PCIE_MAC_IREG_BRIDGE_VER_RSVD1_SHFT                    28u
#define PCIE_MAC_IREG_BRIDGE_VER_DMA_NUM_ADDR                  PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_DMA_NUM_MASK                  0x0F000000u                // DMA_NUM[27..24]
#define PCIE_MAC_IREG_BRIDGE_VER_DMA_NUM_SHFT                  24u
#define PCIE_MAC_IREG_BRIDGE_VER_PRODUCT_ID_ADDR               PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_PRODUCT_ID_MASK               0x00FFF000u                // PRODUCT_ID[23..12]
#define PCIE_MAC_IREG_BRIDGE_VER_PRODUCT_ID_SHFT               12u
#define PCIE_MAC_IREG_BRIDGE_VER_VERSION_ADDR                  PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_VERSION_MASK                  0x00000FFFu                // VERSION[11..0]
#define PCIE_MAC_IREG_BRIDGE_VER_VERSION_SHFT                  0u

/* =====================================================================================

  ---BRIDGE_BUS (0x74040000 + 0004hu)---

    VERSION[11..0]               - (RO) Provides the Bridge Internal Bus version; 
                                     for example, 0x123 indicates version 1.2.3 of the Bus
    DATAPATH[15..12]             - (RO) Indicates the Bridge Internal Bus Data Path width:
                                     4'h5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) Number of outstanding read requests
                                     4'h8: 256 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) Number of outstanding write requests
                                     4'h8: 256 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) Provides the maximum Payload of the Bridge Internal Bus
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) Provides the maximum Read Request Size of the Bridge Internal Bus
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXRREQSIZE_ADDR              PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXRREQSIZE_MASK              0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXRREQSIZE_SHFT              28u
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXPAYLOAD_ADDR               PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXPAYLOAD_MASK               0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXPAYLOAD_SHFT               24u
#define PCIE_MAC_IREG_BRIDGE_BUS_WR_OUTREQ_N_ADDR              PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_WR_OUTREQ_N_MASK              0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_BRIDGE_BUS_WR_OUTREQ_N_SHFT              20u
#define PCIE_MAC_IREG_BRIDGE_BUS_RD_OUTREQ_N_ADDR              PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_RD_OUTREQ_N_MASK              0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_BRIDGE_BUS_RD_OUTREQ_N_SHFT              16u
#define PCIE_MAC_IREG_BRIDGE_BUS_DATAPATH_ADDR                 PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_DATAPATH_MASK                 0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_BRIDGE_BUS_DATAPATH_SHFT                 12u
#define PCIE_MAC_IREG_BRIDGE_BUS_VERSION_ADDR                  PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_VERSION_MASK                  0x00000FFFu                // VERSION[11..0]
#define PCIE_MAC_IREG_BRIDGE_BUS_VERSION_SHFT                  0u

/* =====================================================================================

  ---BRIDGE_IMPL_IF (0x74040000 + 0008hu)---

    PCIE_BAR01_IMPL[0]           - (RO) PCIe Interface Internal register is implemented
    PCIE_BAR23_IMPL[1]           - (RO) PCIe Interface Window 0 is implemented
    PCIE_BAR45_IMPL[2]           - (RO) PCIe Interface Window 1 is implemented
    PCIE_CFG_IMPL[3]             - (RO) PCIe Configuration Interface is implemented
    AXI_MSTL_IMPL[4]             - (RO) AXI4-Lite Master Interface is implemented
    AXI_SLVL_IMPL[5]             - (RO) AXI4-Lite Slave Interface is implemented
    AXI_MSTD_IMPL[6]             - (RO) AXI4 Master Descriptor Interface is implemented
    RSVD1[7]                     - (RO) Reserved
    AXI_MST0_IMPL[8]             - (RO) AXI4 Master 0 Interface is implemented
    AXI_SLV0_IMPL[9]             - (RO) AXI4 Slave 0 Interface is implemented
    AXI_MST1_IMPL[10]            - (RO) AXI4 Master 1 Interface is implemented
    AXI_SLV1_IMPL[11]            - (RO) AXI4 Slave 1 Interface is implemented
    AXI_MST2_IMPL[12]            - (RO) AXI4 Master 2 Interface is implemented
    AXI_SLV2_IMPL[13]            - (RO) AXI4 Slave 2 Interface is implemented
    AXI_MST3_IMPL[14]            - (RO) AXI4 Master 3 Interface is implemented
    AXI_SLV3_IMPL[15]            - (RO) AXI4 Slave 3 Interface is implemented
    AXI_STRO0_IMPL[16]           - (RO) AXI4 Stream Out 0 Interface is implemented
    AXI_STRI0_IMPL[17]           - (RO) AXI4 Stream In 0 Interface is implemented
    AXI_STRO1_IMPL[18]           - (RO) AXI4 Stream Out 1 Interface is implemented
    AXI_STRI1_IMPL[19]           - (RO) AXI4 Stream In 1 Interface is implemented
    AXI_STRO2_IMPL[20]           - (RO) AXI4 Stream Out 2 Interface is implemented
    AXI_STRI2_IMPL[21]           - (RO) AXI4 Stream In 2 Interface is implemented
    AXI_STRO3_IMPL[22]           - (RO) AXI4 Stream Out 3 Interface is implemented
    AXI_STRI3_IMPL[23]           - (RO) AXI4 Stream In 3 Interface is implemented
    RSVD2[31..24]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD2_ADDR                PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD2_MASK                0xFF000000u                // RSVD2[31..24]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD2_SHFT                24u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI3_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI3_IMPL_MASK       0x00800000u                // AXI_STRI3_IMPL[23]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI3_IMPL_SHFT       23u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO3_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO3_IMPL_MASK       0x00400000u                // AXI_STRO3_IMPL[22]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO3_IMPL_SHFT       22u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI2_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI2_IMPL_MASK       0x00200000u                // AXI_STRI2_IMPL[21]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI2_IMPL_SHFT       21u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO2_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO2_IMPL_MASK       0x00100000u                // AXI_STRO2_IMPL[20]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO2_IMPL_SHFT       20u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI1_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI1_IMPL_MASK       0x00080000u                // AXI_STRI1_IMPL[19]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI1_IMPL_SHFT       19u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO1_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO1_IMPL_MASK       0x00040000u                // AXI_STRO1_IMPL[18]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO1_IMPL_SHFT       18u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI0_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI0_IMPL_MASK       0x00020000u                // AXI_STRI0_IMPL[17]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI0_IMPL_SHFT       17u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO0_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO0_IMPL_MASK       0x00010000u                // AXI_STRO0_IMPL[16]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO0_IMPL_SHFT       16u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV3_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV3_IMPL_MASK        0x00008000u                // AXI_SLV3_IMPL[15]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV3_IMPL_SHFT        15u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST3_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST3_IMPL_MASK        0x00004000u                // AXI_MST3_IMPL[14]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST3_IMPL_SHFT        14u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV2_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV2_IMPL_MASK        0x00002000u                // AXI_SLV2_IMPL[13]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV2_IMPL_SHFT        13u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST2_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST2_IMPL_MASK        0x00001000u                // AXI_MST2_IMPL[12]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST2_IMPL_SHFT        12u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV1_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV1_IMPL_MASK        0x00000800u                // AXI_SLV1_IMPL[11]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV1_IMPL_SHFT        11u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST1_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST1_IMPL_MASK        0x00000400u                // AXI_MST1_IMPL[10]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST1_IMPL_SHFT        10u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV0_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV0_IMPL_MASK        0x00000200u                // AXI_SLV0_IMPL[9]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV0_IMPL_SHFT        9u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST0_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST0_IMPL_MASK        0x00000100u                // AXI_MST0_IMPL[8]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST0_IMPL_SHFT        8u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD1_ADDR                PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD1_MASK                0x00000080u                // RSVD1[7]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD1_SHFT                7u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTD_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTD_IMPL_MASK        0x00000040u                // AXI_MSTD_IMPL[6]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTD_IMPL_SHFT        6u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLVL_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLVL_IMPL_MASK        0x00000020u                // AXI_SLVL_IMPL[5]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLVL_IMPL_SHFT        5u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTL_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTL_IMPL_MASK        0x00000010u                // AXI_MSTL_IMPL[4]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTL_IMPL_SHFT        4u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_CFG_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_CFG_IMPL_MASK        0x00000008u                // PCIE_CFG_IMPL[3]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_CFG_IMPL_SHFT        3u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR45_IMPL_ADDR      PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR45_IMPL_MASK      0x00000004u                // PCIE_BAR45_IMPL[2]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR45_IMPL_SHFT      2u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR23_IMPL_ADDR      PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR23_IMPL_MASK      0x00000002u                // PCIE_BAR23_IMPL[1]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR23_IMPL_SHFT      1u
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR01_IMPL_ADDR      PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR01_IMPL_MASK      0x00000001u                // PCIE_BAR01_IMPL[0]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_BAR01_IMPL_SHFT      0u

/* =====================================================================================

  ---PCIE_MAC_I2C_INCLUDED (0x74040000 + 000Chu)---

    pcie_i2c_sda_out[0]          - (RW) PCIe I2C SDA output value
    pcie_i2c_sda_oen[1]          - (RW) PCIe I2C SDA output enable (low active)
                                     0: output
                                     1: input
    pcie_i2c_scl_out[2]          - (RW) PCIe I2C SCL output value
    pcie_i2c_scl_oen[3]          - (RW) PCIe I2C SCL output enable (low active)
                                     0: output
                                     1: input
    RSVD1[15..4]                 - (RW) Reserved
    pe2_fpga_i2c_sda_in_0[16]    - (RO) PCIe I2C SDA input value
    pe2_fpga_i2c_scl_in_0[17]    - (RO) PCIe I2C SCL input value
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD2_ADDR         PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD2_MASK         0xFFFC0000u                // RSVD2[31..18]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD2_SHFT         18u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_scl_in_0_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_scl_in_0_MASK 0x00020000u                // pe2_fpga_i2c_scl_in_0[17]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_scl_in_0_SHFT 17u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_sda_in_0_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_sda_in_0_MASK 0x00010000u                // pe2_fpga_i2c_sda_in_0[16]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_sda_in_0_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD1_ADDR         PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD1_MASK         0x0000FFF0u                // RSVD1[15..4]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD1_SHFT         4u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_oen_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_oen_MASK 0x00000008u                // pcie_i2c_scl_oen[3]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_oen_SHFT 3u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_out_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_out_MASK 0x00000004u                // pcie_i2c_scl_out[2]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_out_SHFT 2u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_oen_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_oen_MASK 0x00000002u                // pcie_i2c_sda_oen[1]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_oen_SHFT 1u
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_out_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_out_MASK 0x00000001u                // pcie_i2c_sda_out[0]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_out_SHFT 0u

/* =====================================================================================

  ---PCIE_IF_CONF (0x74040000 + 0010hu)---

    VERSION[11..0]               - (RO) Provides the PCI Express Controller Core version; 
                                     for example,0x123 indicates version 1.2.3 of the Core
    IF_ID[15..12]                - (RO) Provides the ID used to target this interface: 0. 
                                     This ID is used to specify the TRSL_ID fields of the DMA Engines and Address Translation registers
    B2P_MRD_OUTREQ_N[19..16]     - (RO) Number of outstanding read requests the Bridge can issue to the PCIe domain
                                     0: 1 outstanding request
                                     1: 1-2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    P2B_MRD_OUTREQ_N[23..20]     - (RO) Number of outstanding read requests from the PCIe domain the Bridge can handle simultaneously
                                     0: 1 outstanding request
                                     1: 1-2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) Provides the maximum Payload of the PCIe Interface
                                     0: 128 Bytes
                                     1: 256 Bytes
                                     2: 512 Bytes
                                     3: 1024 Bytes
                                     4: 2048 Bytes
                                     5: 4096 Bytes
    MAXRREQSIZE[31..28]          - (RO) Provides the maximum Read Request Size of the PCIe Interface
                                     0: 128 Bytes
                                     1: 256 Bytes
                                     2: 512 Bytes
                                     3: 1024 Bytes
                                     4: 2048 Bytes
                                     5: 4096 Bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXRREQSIZE_ADDR            PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXRREQSIZE_MASK            0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXRREQSIZE_SHFT            28u
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXPAYLOAD_ADDR             PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXPAYLOAD_MASK             0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXPAYLOAD_SHFT             24u
#define PCIE_MAC_IREG_PCIE_IF_CONF_P2B_MRD_OUTREQ_N_ADDR       PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_P2B_MRD_OUTREQ_N_MASK       0x00F00000u                // P2B_MRD_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_PCIE_IF_CONF_P2B_MRD_OUTREQ_N_SHFT       20u
#define PCIE_MAC_IREG_PCIE_IF_CONF_B2P_MRD_OUTREQ_N_ADDR       PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_B2P_MRD_OUTREQ_N_MASK       0x000F0000u                // B2P_MRD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_PCIE_IF_CONF_B2P_MRD_OUTREQ_N_SHFT       16u
#define PCIE_MAC_IREG_PCIE_IF_CONF_IF_ID_ADDR                  PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_IF_ID_MASK                  0x0000F000u                // IF_ID[15..12]
#define PCIE_MAC_IREG_PCIE_IF_CONF_IF_ID_SHFT                  12u
#define PCIE_MAC_IREG_PCIE_IF_CONF_VERSION_ADDR                PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_VERSION_MASK                0x00000FFFu                // VERSION[11..0]
#define PCIE_MAC_IREG_PCIE_IF_CONF_VERSION_SHFT                0u

/* =====================================================================================

  ---PCIE_BASIC_CONF (0x74040000 + 0014hu)---

    LINK_WIDTH[7..0]             - (RO) Advertises the supported link width:
                                     Bit 0: x1 configuration is supported. (This bit is always asserted.)
                                     Bit 1: x2 configuration is supported
                                     Bit 2: x4 configuration is supported
                                     Bit 3: x8 configuration is supported
                                     Bit 4: x16 configuration is supported
                                     Bit 5: x32 configuration is supported
                                     Bit 7-6: reserved
    LINK_SPEED[15..8]            - (RO) Advertises the supported link speed:
                                     Bit 8: 2.5 GT link speed is supported
                                     Bit 9: 5.0 GT link speed is supported
                                     Bit 10: 8.0 GT link speed is supported
                                     Bit 11: 16.0 GT link speed is supported
                                     Bits 15-12: reserved
    FUNC_NUM[19..16]             - (RO) Advertises the number of functions implemented in the Core. 
                                     Supported values are between 0x1 and 0x8. Other values are reserved.
    VC_NUM[23..20]               - (RO) Advertises the number of Virtual Channels implemented in the Core. 
                                     The only supported value is 0x1; other values are reserved.
    COMPL[27..24]                - (RO) Advertises the Core compliance to PCI Express 3.1 specification. 
                                     The only supported value is 0x3; other values arereserved.
    TYPE[31..28]                 - (RO) advertises the PCI Express Core type. 
                                     Supported values are:
                                     4'h0: Native Endpoint
                                     4'h1: Rootport
                                     Other values are reserved.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_TYPE_ADDR                PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_TYPE_MASK                0xF0000000u                // TYPE[31..28]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_TYPE_SHFT                28u
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_COMPL_ADDR               PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_COMPL_MASK               0x0F000000u                // COMPL[27..24]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_COMPL_SHFT               24u
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_VC_NUM_ADDR              PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_VC_NUM_MASK              0x00F00000u                // VC_NUM[23..20]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_VC_NUM_SHFT              20u
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_FUNC_NUM_ADDR            PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_FUNC_NUM_MASK            0x000F0000u                // FUNC_NUM[19..16]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_FUNC_NUM_SHFT            16u
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_SPEED_ADDR          PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_SPEED_MASK          0x0000FF00u                // LINK_SPEED[15..8]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_SPEED_SHFT          8u
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_WIDTH_ADDR          PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_WIDTH_MASK          0x000000FFu                // LINK_WIDTH[7..0]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_WIDTH_SHFT          0u

/* =====================================================================================

  ---PCIE_BASIC_STATUS (0x74040000 + 0018hu)---

    NEG_LINK_WIDTH[4..0]         - (RO) reports the negotiated link width of the PCIe link. 
                                     Supported values are:
                                     01: x1 link width
                                     02: x2 link width
                                     04: x4 link width
                                     08: x8 link width
                                     10: x16 link width
    RSVD1[7..5]                  - (RO) Reserved
    NEG_LINK_SPEED[11..8]        - (RO) reports the negotiated link speed of the PCIe link. 
                                     Supported values are:
                                     1: 2.5 GTs link speed
                                     2: 5.0 GTs link speed
                                     3: 8.0 GTs link speed
                                     4: 16.0 GTs link speed
    RSVD2[23..12]                - (RO) Reserved
    NEG_MAXPAYLOAD[26..24]       - (RO) reports the negotiated maximum Payload of the PCIe link.
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD3[27]                    - (RO) Reserved
    NEG_MAXRREQSIZE[30..28]      - (RO) reports the negotiated maximum Read Request Size of the PCIe link
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD4[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD4_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD4_MASK             0x80000000u                // RSVD4[31]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD4_SHFT             31u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXRREQSIZE_ADDR   PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXRREQSIZE_MASK   0x70000000u                // NEG_MAXRREQSIZE[30..28]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXRREQSIZE_SHFT   28u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD3_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD3_MASK             0x08000000u                // RSVD3[27]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD3_SHFT             27u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXPAYLOAD_ADDR    PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXPAYLOAD_MASK    0x07000000u                // NEG_MAXPAYLOAD[26..24]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXPAYLOAD_SHFT    24u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD2_MASK             0x00FFF000u                // RSVD2[23..12]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD2_SHFT             12u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_SPEED_ADDR    PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_SPEED_MASK    0x00000F00u                // NEG_LINK_SPEED[11..8]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_SPEED_SHFT    8u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD1_MASK             0x000000E0u                // RSVD1[7..5]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD1_SHFT             5u
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_WIDTH_ADDR    PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_WIDTH_MASK    0x0000001Fu                // NEG_LINK_WIDTH[4..0]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_WIDTH_SHFT    0u

/* =====================================================================================

  ---HW_DATE_CODE (0x74040000 + 001Chu)---

    DATE_code[31..0]             - (RO) Hareware release DATE_CODE.
                                     Format : yymm_ddhh

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_DATE_CODE_DATE_code_ADDR              PCIE_MAC_IREG_HW_DATE_CODE_ADDR
#define PCIE_MAC_IREG_HW_DATE_CODE_DATE_code_MASK              0xFFFFFFFFu                // DATE_code[31..0]
#define PCIE_MAC_IREG_HW_DATE_CODE_DATE_code_SHFT              0u

/* =====================================================================================

  ---PCIE_REF_CLOCK_FREQ (0x74040000 + 0020hu)---

    PCIE_ref_clock_freq[21..0]   - (RW) PCIE reference clock frequency for internal timer.
                                     For example :
                                     22'd1 : 1MHz.
                                     22'd26 : 26MHz
    PCIE_ref_clock_freq_en[22]   - (RW) PCIE reference clock frequency enable for internal timer
    RSVD1[31..23]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_RSVD1_ADDR           PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_RSVD1_MASK           0xFF800000u                // RSVD1[31..23]
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_RSVD1_SHFT           23u
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_en_ADDR PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_en_MASK 0x00400000u                // PCIE_ref_clock_freq_en[22]
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_en_SHFT 22u
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_ADDR PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_MASK 0x003FFFFFu                // PCIE_ref_clock_freq[21..0]
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_SHFT 0u

/* =====================================================================================

  ---PCIE_TL_CLOCK_FREQ (0x74040000 + 0024hu)---

    PCIE_tl_clock_freq[21..0]    - (RW) PCIE transaction layer clock frequency.
                                     For example : 
                                     22'd63 : 63MHz.
                                     22'd250 : 250MHz
    PCIE_tl_clock_freq_en[22]    - (RW) PCIE transaction layer clock frequency enable
    RSVD1[31..23]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_RSVD1_MASK            0xFF800000u                // RSVD1[31..23]
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_RSVD1_SHFT            23u
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_en_ADDR PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_en_MASK 0x00400000u                // PCIE_tl_clock_freq_en[22]
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_en_SHFT 22u
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_ADDR PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_MASK 0x003FFFFFu                // PCIE_tl_clock_freq[21..0]
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_SHFT 0u

/* =====================================================================================

  ---TL_PM_BWCHANGE (0x74040000 + 0028hu)---

    cfg_direct_lwchange[3..0]    - (RW) Allowed link widths when directed to change link width
                                     4'd0 : 1 lane
                                     4'd1 : 2 lane
                                     ..
                                     4'd15 : 16 lane
                                     
                                     Note: requested link widths must be different from current link widths
    req_lwchange[4]              - (RW) Link width change request
                                     The application can request a link width change while LTSSM is in either the L0 or L0s state.
                                     Set to detect link width change request, clear when complete or if L2 entry started.
                                     
                                     Note : Link width up-configuration (changing the link width to a higher link width than in initial link training) is only possible if both link partners support up-configuration.
    cfg_direct_lspeed[6..5]      - (RW) Allowed link speed when directed to change link speed
                                     0: Gen1
                                     1: Gen2
                                     2: Gen3
                                     3: Gen4
                                     
                                     Note: requested link speed must be different from current link speed and less than target link speed in link control register 2.
    req_lschange[7]              - (RW) Link speed change request
                                     The application can request a link speed change while LTSSM is in either the L0 or L0s state.
                                     Set to detect link speed change request, clear when complete or if L2 entry started.
                                     
                                     Note:
                                     The application should not request a speed change to a speed for which equalization was not performed successfully (this can be checked using the Equalization Phase 3 Successful Configuration bit).
    cfg_direct_lsreport[8]       - (RW) Allow link speed support field in TS1 can be reported from cfg_direct_lspeed
                                     0: disable
                                     1: enable
    bypass_ls_active_detect[9]   - (RW) Bypass register for active speed capability at detect state
    lschange_req_l1ss_exit_dis[10] - (RW) Disable link speed change request link exit L1ss
                                     0: enable, speed change will request link exit L1ss
                                     1: disable, speed change will not request link exit L1ss
    lwchange_req_l1ss_exit_dis[11] - (RW) Disable link width change request link exit L1ss
                                     0: enable, width change will request link exit L1ss
                                     1: disable, width change will not request link exit L1ss
    RESERVED12[31..12]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_lwchange_req_l1ss_exit_dis_ADDR PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_lwchange_req_l1ss_exit_dis_MASK 0x00000800u                // lwchange_req_l1ss_exit_dis[11]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_lwchange_req_l1ss_exit_dis_SHFT 11u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_lschange_req_l1ss_exit_dis_ADDR PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_lschange_req_l1ss_exit_dis_MASK 0x00000400u                // lschange_req_l1ss_exit_dis[10]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_lschange_req_l1ss_exit_dis_SHFT 10u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_bypass_ls_active_detect_ADDR PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_bypass_ls_active_detect_MASK 0x00000200u                // bypass_ls_active_detect[9]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_bypass_ls_active_detect_SHFT 9u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lsreport_ADDR  PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lsreport_MASK  0x00000100u                // cfg_direct_lsreport[8]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lsreport_SHFT  8u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_req_lschange_ADDR         PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_req_lschange_MASK         0x00000080u                // req_lschange[7]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_req_lschange_SHFT         7u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lspeed_ADDR    PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lspeed_MASK    0x00000060u                // cfg_direct_lspeed[6..5]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lspeed_SHFT    5u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_req_lwchange_ADDR         PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_req_lwchange_MASK         0x00000010u                // req_lwchange[4]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_req_lwchange_SHFT         4u
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lwchange_ADDR  PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lwchange_MASK  0x0000000Fu                // cfg_direct_lwchange[3..0]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lwchange_SHFT  0u

/* =====================================================================================

  ---PCIE_DEBUG_MONITOR (0x74040000 + 002Chu)---

    PCIE_debug_monitor[31..0]    - (RO) PCIE debug monitor.
                                     After setting debug select register, debug signal can be latched in the register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_PCIE_debug_monitor_ADDR PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_PCIE_debug_monitor_MASK 0xFFFFFFFFu                // PCIE_debug_monitor[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_PCIE_debug_monitor_SHFT 0u

/* =====================================================================================

  ---AXI_MST0_CONF (0x74040000 + 0030hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 4.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_MST0_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST0_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_MST0_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST0_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_MST0_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST0_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_MST0_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST0_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_SLV0_CONF (0x74040000 + 0034hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     3: AXI4 Slave
                                     7: AXI3 Slave
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 4.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_MST1_CONF (0x74040000 + 0038hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 5.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_MST1_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST1_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_MST1_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST1_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_MST1_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST1_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_MST1_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST1_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_SLV1_CONF (0x74040000 + 003Chu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     3: AXI4 Slave
                                     7: AXI3 Slave
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 5.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_MST2_CONF (0x74040000 + 0040hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 6.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_MST2_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST2_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_MST2_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST2_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_MST2_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST2_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_MST2_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST2_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_SLV2_CONF (0x74040000 + 0044hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     3: AXI4 Slave
                                     7: AXI3 Slave
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 6.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_MST3_CONF (0x74040000 + 0048hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 7.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_MST3_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST3_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_MST3_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST3_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_MST3_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST3_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_MST3_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST3_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_SLV3_CONF (0x74040000 + 004Chu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     3: AXI4 Slave
                                     7: AXI3 Slave
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 7.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 3-4 outstanding requests
                                     3: 5-8 outstanding requests
                                     4: 9-16 outstanding requests
                                     5: 17-32 outstanding requests
                                     6: 33-64 outstanding requests
                                     7: 65-128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXRREQSIZE_MASK           0xF0000000u                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXRREQSIZE_SHFT           28u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXPAYLOAD_MASK            0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXPAYLOAD_SHFT            24u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_WR_OUTREQ_N_MASK           0x00F00000u                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_WR_OUTREQ_N_SHFT           20u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_RD_OUTREQ_N_MASK           0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_RD_OUTREQ_N_SHFT           16u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_DATAPATH_MASK              0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_DATAPATH_SHFT              12u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_CLK_DOM_MASK               0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_CLK_DOM_SHFT               8u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_ID_MASK                 0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_ID_SHFT                 4u
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_TYPE_MASK               0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_TYPE_SHFT               0u

/* =====================================================================================

  ---AXI_STRO0_CONF (0x74040000 + 0050hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     4: AXI4 Stream Out
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 8.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RSVD0[19..16]                - (RO) Reserved
    RSVD1[23..20]                - (RO) Reserved
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD2_ADDR                PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD2_MASK                0xF0000000u                // RSVD2[31..28]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD2_SHFT                28u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXPAYLOAD_MASK           0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXPAYLOAD_SHFT           24u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD1_ADDR                PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD1_MASK                0x00F00000u                // RSVD1[23..20]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD1_SHFT                20u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD0_ADDR                PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD0_MASK                0x000F0000u                // RSVD0[19..16]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RSVD0_SHFT                16u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRI0_CONF (0x74040000 + 0054hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     5: AXI4 Stream IN
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 8.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) Number of outstanding read requests from the Bridge (from DMA engines or through Address Translation) that the AXI4 Stream In Interface can handle simultaneously
    TIDDEST_N[23..20]            - (RO) Number of TID/TDEST combinations that the AXI4 Stream In Interface can handle simultaneously
    LENGTH_SUPPORT[27..24]       - (RO) Provides the packet length supported by the AXI Stream In Interface:
                                     0: all Stream In length are supported
                                     1: length is a multiple of 4 bytes
                                     2: length is a multiple of 8 bytes
                                     3: length is a multiple of the Bridge Internal Bus Data Path width
    RREQSIZE_SUPPORT[31..28]     - (RO) Provides the read request size from the Bridge (from DMA engines or through Address Translation) supported by the AXI Stream In Interface:
                                     0: all Stream In read request size are supported
                                     1: read request size is a multiple of 4 bytes
                                     2: read request size is a multiple of 8 bytes
                                     3: read request size is a multiple of the Bridge Internal Bus Data Path width.

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RREQSIZE_SUPPORT_ADDR     PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RREQSIZE_SUPPORT_MASK     0xF0000000u                // RREQSIZE_SUPPORT[31..28]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RREQSIZE_SUPPORT_SHFT     28u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_LENGTH_SUPPORT_ADDR       PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_LENGTH_SUPPORT_MASK       0x0F000000u                // LENGTH_SUPPORT[27..24]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_LENGTH_SUPPORT_SHFT       24u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_TIDDEST_N_ADDR            PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_TIDDEST_N_MASK            0x00F00000u                // TIDDEST_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_TIDDEST_N_SHFT            20u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RD_OUTREQ_N_MASK          0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RD_OUTREQ_N_SHFT          16u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRO1_CONF (0x74040000 + 0058hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     4: AXI4 Stream Out
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 9.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RSVD0[19..16]                - (RO) Reserved
    RSVD1[23..20]                - (RO) Reserved
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD2_ADDR                PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD2_MASK                0xF0000000u                // RSVD2[31..28]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD2_SHFT                28u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXPAYLOAD_MASK           0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXPAYLOAD_SHFT           24u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD1_ADDR                PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD1_MASK                0x00F00000u                // RSVD1[23..20]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD1_SHFT                20u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD0_ADDR                PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD0_MASK                0x000F0000u                // RSVD0[19..16]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RSVD0_SHFT                16u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRI1_CONF (0x74040000 + 005Chu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     5: AXI4 Stream IN
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: 9.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) Number of outstanding read requests from the Bridge (from DMA engines or through Address Translation) that the AXI4 Stream In Interface can handle simultaneously
    TIDDEST_N[23..20]            - (RO) Number of TID/TDEST combinations that the AXI4 Stream In Interface can handle simultaneously
    LENGTH_SUPPORT[27..24]       - (RO) Provides the packet length supported by the AXI Stream In Interface:
                                     0: all Stream In length are supported
                                     1: length is a multiple of 4 bytes
                                     2: length is a multiple of 8 bytes
                                     3: length is a multiple of the Bridge Internal Bus Data Path width
    RREQSIZE_SUPPORT[31..28]     - (RO) Provides the read request size from the Bridge (from DMA engines or through Address Translation) supported by the AXI Stream In Interface:
                                     0: all Stream In read request size are supported
                                     1: read request size is a multiple of 4 bytes
                                     2: read request size is a multiple of 8 bytes
                                     3: read request size is a multiple of the Bridge Internal Bus Data Path width.

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RREQSIZE_SUPPORT_ADDR     PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RREQSIZE_SUPPORT_MASK     0xF0000000u                // RREQSIZE_SUPPORT[31..28]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RREQSIZE_SUPPORT_SHFT     28u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_LENGTH_SUPPORT_ADDR       PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_LENGTH_SUPPORT_MASK       0x0F000000u                // LENGTH_SUPPORT[27..24]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_LENGTH_SUPPORT_SHFT       24u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_TIDDEST_N_ADDR            PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_TIDDEST_N_MASK            0x00F00000u                // TIDDEST_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_TIDDEST_N_SHFT            20u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RD_OUTREQ_N_MASK          0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RD_OUTREQ_N_SHFT          16u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRO2_CONF (0x74040000 + 0060hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     4: AXI4 Stream Out
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: a.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RSVD0[19..16]                - (RO) Reserved
    RSVD1[23..20]                - (RO) Reserved
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD2_ADDR                PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD2_MASK                0xF0000000u                // RSVD2[31..28]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD2_SHFT                28u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXPAYLOAD_MASK           0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXPAYLOAD_SHFT           24u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD1_ADDR                PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD1_MASK                0x00F00000u                // RSVD1[23..20]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD1_SHFT                20u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD0_ADDR                PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD0_MASK                0x000F0000u                // RSVD0[19..16]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RSVD0_SHFT                16u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRI2_CONF (0x74040000 + 0064hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     5: AXI4 Stream IN
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: a.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) Number of outstanding read requests from the Bridge (from DMA engines or through Address Translation) that the AXI4 Stream In Interface can handle simultaneously
    TIDDEST_N[23..20]            - (RO) Number of TID/TDEST combinations that the AXI4 Stream In Interface can handle simultaneously
    LENGTH_SUPPORT[27..24]       - (RO) Provides the packet length supported by the AXI Stream In Interface:
                                     0: all Stream In length are supported
                                     1: length is a multiple of 4 bytes
                                     2: length is a multiple of 8 bytes
                                     3: length is a multiple of the Bridge Internal Bus Data Path width
    RREQSIZE_SUPPORT[31..28]     - (RO) Provides the read request size from the Bridge (from DMA engines or through Address Translation) supported by the AXI Stream In Interface:
                                     0: all Stream In read request size are supported
                                     1: read request size is a multiple of 4 bytes
                                     2: read request size is a multiple of 8 bytes
                                     3: read request size is a multiple of the Bridge Internal Bus Data Path width.

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RREQSIZE_SUPPORT_ADDR     PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RREQSIZE_SUPPORT_MASK     0xF0000000u                // RREQSIZE_SUPPORT[31..28]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RREQSIZE_SUPPORT_SHFT     28u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_LENGTH_SUPPORT_ADDR       PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_LENGTH_SUPPORT_MASK       0x0F000000u                // LENGTH_SUPPORT[27..24]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_LENGTH_SUPPORT_SHFT       24u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_TIDDEST_N_ADDR            PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_TIDDEST_N_MASK            0x00F00000u                // TIDDEST_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_TIDDEST_N_SHFT            20u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RD_OUTREQ_N_MASK          0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RD_OUTREQ_N_SHFT          16u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRO3_CONF (0x74040000 + 0068hu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     4: AXI4 Stream Out
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: b.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RSVD0[19..16]                - (RO) Reserved
    RSVD1[23..20]                - (RO) Reserved
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD2_ADDR                PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD2_MASK                0xF0000000u                // RSVD2[31..28]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD2_SHFT                28u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXPAYLOAD_MASK           0x0F000000u                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXPAYLOAD_SHFT           24u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD1_ADDR                PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD1_MASK                0x00F00000u                // RSVD1[23..20]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD1_SHFT                20u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD0_ADDR                PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD0_MASK                0x000F0000u                // RSVD0[19..16]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RSVD0_SHFT                16u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---AXI_STRI3_CONF (0x74040000 + 006Chu)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     5: AXI4 Stream IN
    IF_ID[7..4]                  - (RO) Provides the ID used to target this interface: b.
                                     This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) Number of outstanding read requests from the Bridge (from DMA engines or through Address Translation) that the AXI4 Stream In Interface can handle simultaneously
    TIDDEST_N[23..20]            - (RO) Number of TID/TDEST combinations that the AXI4 Stream In Interface can handle simultaneously
    LENGTH_SUPPORT[27..24]       - (RO) Provides the packet length supported by the AXI Stream In Interface:
                                     0: all Stream In length are supported
                                     1: length is a multiple of 4 bytes
                                     2: length is a multiple of 8 bytes
                                     3: length is a multiple of the Bridge Internal Bus Data Path width
    RREQSIZE_SUPPORT[31..28]     - (RO) Provides the read request size from the Bridge (from DMA engines or through Address Translation) supported by the AXI Stream In Interface:
                                     0: all Stream In read request size are supported
                                     1: read request size is a multiple of 4 bytes
                                     2: read request size is a multiple of 8 bytes
                                     3: read request size is a multiple of the Bridge Internal Bus Data Path width.

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RREQSIZE_SUPPORT_ADDR     PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RREQSIZE_SUPPORT_MASK     0xF0000000u                // RREQSIZE_SUPPORT[31..28]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RREQSIZE_SUPPORT_SHFT     28u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_LENGTH_SUPPORT_ADDR       PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_LENGTH_SUPPORT_MASK       0x0F000000u                // LENGTH_SUPPORT[27..24]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_LENGTH_SUPPORT_SHFT       24u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_TIDDEST_N_ADDR            PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_TIDDEST_N_MASK            0x00F00000u                // TIDDEST_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_TIDDEST_N_SHFT            20u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RD_OUTREQ_N_MASK          0x000F0000u                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RD_OUTREQ_N_SHFT          16u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_DATAPATH_MASK             0x0000F000u                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_DATAPATH_SHFT             12u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_CLK_DOM_MASK              0x00000F00u                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_CLK_DOM_SHFT              8u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_ID_MASK                0x000000F0u                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_ID_SHFT                4u
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_TYPE_MASK              0x0000000Fu                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_TYPE_SHFT              0u

/* =====================================================================================

  ---SW_MAC_CTR_0 (0x74040000 + 0070hu)---

    INFER_EI_SEL[0]              - (RW) Infer elecidle condition in Recovery.Speed or Loopback.Active slave mode
                                     0 : check special order set such as TS1, TS2, EIEOS, SKIP in Recovery.Speed and check SKIP in Loopback.Active slave mode of 2.5G speed.
                                     1 : in addition to check order set, also check rxelecidle in Recovery.Speed and Loopback.Active slave mode of 2.5G pseed.
    UP_DIS_AUTO_SPEED_CHG[1]     - (RW) 0: Eable UP auto change speed to highest speed
                                     1: Disable UP auto change speed to highest speed
    LPK_ENTER_SEL[2]             - (RW) Directed to transition from Loopback.Entry to Loopback.Active at 8.0 GT or higher
                                     0: Next state is Loopback.Active if two consecutive TS1s are received on all active Lanes.
                                     1: Next state is Loopback.Active if directed to this state.
    RXDATAVALID_BEHV_SEL[3]      - (RW) For 64bit PIPE mode, rxdatavalid behavior may be different in MTK PHY or 3rd party.
                                     0 : For MTK PHY, when rxdatavalid go low, invalid data may be in different cycle =>  in high 32 bit of current cycle and in low 32 bit of next cycle. 
                                     1 : when rxdatavalid go low, invalid data is in same cycle => in 64 bit rxdata in current cycle.
    RXSTS_OK_UPDATE[4]           - (RW) RxChecking vector reporting for ltssm
                                     0: RxChecking vector records on each lane when required condition was met
                                     1: RxChecking vector updates according to the received training sequence
    L1_REQ_P2_DELAY[5]           - (RW) change power state to P2 during L1.Entry
                                     0: do not wait
                                     1: wait 1us
    POL_ACT_RXEI_DET[6]          - (RW) LTSSM move from Polling.Active to Polling.Configuration after a 24 ms timeout and
                                     0: Any Lane received eight consecutive training sequences
                                     1: Any Lane received eight consecutive training sequences, and At least a predetermined set of Lanes have detected an exit from Electrical Idle
    RXLANE_INFO_SEL[7]           - (RW) Select rxlane_info source in rxlane
                                     0 : from dbg_rxlane_info register
                                     1 : from dbg_data FIFO.
    RXLANE_INFO_DBG_CNT[11..8]   - (RW) If rxlane_info source is from dbg_data FIFO.
                                     The register is used for FIFO Read Pointer.
    STAY_EQ0_TIMER[15..12]       - (RW) The minimum time value for upstream port must stay in EQ phase 0.
                                     For other platform (Unit 1us).
                                     For FPGA VC709 (Unit 100us)
    LMR_STOP_SEL[16]             - (RW) Stop Lane Margin Behavior Selection.
                                     0 : when error count exceed error count limit, hardware will stop lane margin automatically.
                                     1 : when error count exceed error count limit, hardware will not stop lane margin and need software to execute STOP command.
    LPBK_CHG_RATE_SEL[17]        - (RW) Change rate timing at Loopback.Entry State
                                     0 : change rate once enter loopback.entry and EIOS is sent.
                                     1 : change rate once enter loopback.entry and EIOS is sent and received.
    LMR_SPEED_SUPPORT[18]        - (RW) Lane Margin Link Speed Supported
                                     0: Lane margin is supported by PCIe Links operating at 16.0 GTs only.
                                     1: Lane margin is supported by PCIe Links operating at 2.5 GTs, 5.0 GTs, 8.0 GT/s, and 16.0 GTs.
    SEND_NAK_BEHV_SEL[19]        - (RW) When link want to enter Recovery state and receiving a incomplete TLP, the register can determine if MAC will send NAK to the TLP.
                                     When two TLP reveiving at same cycle and TLP0 is bad and TLP1 is good (maybe the TLP is replay TLP), the register can determine if MAC send ACK or NAK.
                                     0 : Send NAK to incomplete TLP and Send ACK to later TLP if the later TLP is ok.
                                     1 : Don't Send NAK to the incomplete TLP and Send NAK to later TLP event the later TLP is ok. ( ACKD_Sequence advance to the sequence number of later TLP)
    INJECT_ERR_PERIODIC[20]      - (RW) Simulation Test Mode
                                     Control Register to enter recovery by initiating a framing error periodic
                                     0: disable
                                     1: enable
                                     This register only can be cleared by Software.
    NAK_LAST_TLP_RECOV[21]       - (RW) Optional register to determine if MAC will send NAK to last TLP when the data path clear condition happened and enter Recovery.
                                     0: Still check the CRC and will send ACK if the CRC of last TLP is correct.
                                     1: Don't check CRC in last TLP and must send NAK to the last TLP.
    REQ_FRAMING_ERR[22]          - (RW) Control Register to enter recovery by initiating a framing error
                                     0: disable
                                     1: enable
                                     MAC will insert a framing error then the register has a zero to one toggle.
    LPK_EXIT_DIS[23]             - (RW) Force DUT stay in Loopback.Active even receive 4 consecutive EIOS.
                                     0 : MAC can exit loopback.active after receiving 4 consecutive EIOS.
                                     1 : MAC can't exit loopback.active even receiving 4 consecutive EIOS.
    L1_PSEUDO_EIOS_DIS[24]       - (RW) When L1 handshake completed but without receiving EIOS or detecting RX elecidle, MAC will wait 100us and timeout to enter L1 State.
                                     0 : Enable
                                     1 : Disable
    LPK_EXIT_SEL_G1[25]          - (RW) Loopback state exit at the 2.5GT/s data rate and is valid only when bit 27 is set to 0
                                     0: if 4 consecutive EIOS are received on any lane
                                     1: if an EIOS is received on any lane or elecidle idle is detected or inferred on any lane
    DN_DIS_AUTO_SPEED_CHG[26]    - (RW) 0: Eable DN auto change speed to highest speed
                                     1: Disable DN auto change speed to highest speed
    LPK_EXIT_SEL[27]             - (RW) MAC will exit Loopback.Active state
                                     0: if 4 consecutive EIOS are received on any lane at 5.0GT/s or above data rate
                                     1: if an EIOS is received on any lane at any data rate
    LPK_TS1_LINK_PAD[28]         - (RW) Transmit TS1 with Link/PAD at Loopback.Entry
                                     0: Loopback master transmit TS1s with the Loopback bit asserted, and selected Link numbers and Lane numbers.
                                     1: Loopback master transmit TS1s with the Loopback bit asserted, and selected Link numbers and sets Lane numbers to PAD.
    RATE_CHANGE_BEFORE_L1P2[29]  - (RW) 0 : disable rate change to 2.5G before enter L1 P2 state.
                                     1 : Enable rate change to 2.5G before enter L1 P2 state
    DN_AUTO_SPEED_CHG_G2[30]     - (RW) Eable DN auto change speed if tending to run 5GT (for JBERT)
                                     0: change speed to 5GT when the Link is in DL_Active state
                                     1: change speed to 5GT automatically, and block DLLP transmission
    FORCE_RX_DETECT_STS[31]      - (RW) Force Receiver Detection Result Record
                                     0: Receiver Detection Result Record will be set if rxstatus is equaled to 3'b011 at Detect.Active
                                     1: Receiver Detection Result Record will be set at Detect.Active

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FORCE_RX_DETECT_STS_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FORCE_RX_DETECT_STS_MASK    0x80000000u                // FORCE_RX_DETECT_STS[31]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FORCE_RX_DETECT_STS_SHFT    31u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_AUTO_SPEED_CHG_G2_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_AUTO_SPEED_CHG_G2_MASK   0x40000000u                // DN_AUTO_SPEED_CHG_G2[30]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_AUTO_SPEED_CHG_G2_SHFT   30u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RATE_CHANGE_BEFORE_L1P2_ADDR PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RATE_CHANGE_BEFORE_L1P2_MASK 0x20000000u                // RATE_CHANGE_BEFORE_L1P2[29]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RATE_CHANGE_BEFORE_L1P2_SHFT 29u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_TS1_LINK_PAD_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_TS1_LINK_PAD_MASK       0x10000000u                // LPK_TS1_LINK_PAD[28]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_TS1_LINK_PAD_SHFT       28u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_ADDR           PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_MASK           0x08000000u                // LPK_EXIT_SEL[27]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_SHFT           27u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_DIS_AUTO_SPEED_CHG_ADDR  PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_DIS_AUTO_SPEED_CHG_MASK  0x04000000u                // DN_DIS_AUTO_SPEED_CHG[26]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_DIS_AUTO_SPEED_CHG_SHFT  26u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_G1_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_G1_MASK        0x02000000u                // LPK_EXIT_SEL_G1[25]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_G1_SHFT        25u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_PSEUDO_EIOS_DIS_ADDR     PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_PSEUDO_EIOS_DIS_MASK     0x01000000u                // L1_PSEUDO_EIOS_DIS[24]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_PSEUDO_EIOS_DIS_SHFT     24u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_DIS_ADDR           PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_DIS_MASK           0x00800000u                // LPK_EXIT_DIS[23]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_DIS_SHFT           23u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_REQ_FRAMING_ERR_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_REQ_FRAMING_ERR_MASK        0x00400000u                // REQ_FRAMING_ERR[22]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_REQ_FRAMING_ERR_SHFT        22u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_NAK_LAST_TLP_RECOV_ADDR     PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_NAK_LAST_TLP_RECOV_MASK     0x00200000u                // NAK_LAST_TLP_RECOV[21]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_NAK_LAST_TLP_RECOV_SHFT     21u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_INJECT_ERR_PERIODIC_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_INJECT_ERR_PERIODIC_MASK    0x00100000u                // INJECT_ERR_PERIODIC[20]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_INJECT_ERR_PERIODIC_SHFT    20u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_SEND_NAK_BEHV_SEL_ADDR      PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_SEND_NAK_BEHV_SEL_MASK      0x00080000u                // SEND_NAK_BEHV_SEL[19]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_SEND_NAK_BEHV_SEL_SHFT      19u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LMR_SPEED_SUPPORT_ADDR      PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LMR_SPEED_SUPPORT_MASK      0x00040000u                // LMR_SPEED_SUPPORT[18]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LMR_SPEED_SUPPORT_SHFT      18u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPBK_CHG_RATE_SEL_ADDR      PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPBK_CHG_RATE_SEL_MASK      0x00020000u                // LPBK_CHG_RATE_SEL[17]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPBK_CHG_RATE_SEL_SHFT      17u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LMR_STOP_SEL_ADDR           PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LMR_STOP_SEL_MASK           0x00010000u                // LMR_STOP_SEL[16]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LMR_STOP_SEL_SHFT           16u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_STAY_EQ0_TIMER_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_STAY_EQ0_TIMER_MASK         0x0000F000u                // STAY_EQ0_TIMER[15..12]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_STAY_EQ0_TIMER_SHFT         12u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_DBG_CNT_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_DBG_CNT_MASK    0x00000F00u                // RXLANE_INFO_DBG_CNT[11..8]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_DBG_CNT_SHFT    8u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_SEL_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_SEL_MASK        0x00000080u                // RXLANE_INFO_SEL[7]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_SEL_SHFT        7u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_POL_ACT_RXEI_DET_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_POL_ACT_RXEI_DET_MASK       0x00000040u                // POL_ACT_RXEI_DET[6]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_POL_ACT_RXEI_DET_SHFT       6u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_REQ_P2_DELAY_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_REQ_P2_DELAY_MASK        0x00000020u                // L1_REQ_P2_DELAY[5]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_REQ_P2_DELAY_SHFT        5u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXSTS_OK_UPDATE_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXSTS_OK_UPDATE_MASK        0x00000010u                // RXSTS_OK_UPDATE[4]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXSTS_OK_UPDATE_SHFT        4u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXDATAVALID_BEHV_SEL_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXDATAVALID_BEHV_SEL_MASK   0x00000008u                // RXDATAVALID_BEHV_SEL[3]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXDATAVALID_BEHV_SEL_SHFT   3u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_ENTER_SEL_ADDR          PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_ENTER_SEL_MASK          0x00000004u                // LPK_ENTER_SEL[2]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_ENTER_SEL_SHFT          2u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_UP_DIS_AUTO_SPEED_CHG_ADDR  PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_UP_DIS_AUTO_SPEED_CHG_MASK  0x00000002u                // UP_DIS_AUTO_SPEED_CHG[1]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_UP_DIS_AUTO_SPEED_CHG_SHFT  1u
#define PCIE_MAC_IREG_SW_MAC_CTR_0_INFER_EI_SEL_ADDR           PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_INFER_EI_SEL_MASK           0x00000001u                // INFER_EI_SEL[0]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_INFER_EI_SEL_SHFT           0u

/* =====================================================================================

  ---SW_MAC_CTR_1 (0x74040000 + 0074hu)---

    DIS_FRAMING_ERR[7..0]        - (RW) Control Register to disable framing error checker. 
                                     If error happened, MAC will report in receiver error status of AER register.
                                     0 : Enable
                                     1 : Disable
                                     bit[0] : Detect STP framing error in 128b130b decode
                                     bit[1] : Check if EDB is complete in 128b130b decode
                                     bit[2] : Detect if a symbol is not part of a packet or a valid token is not idle data in 128b130b decode
                                     bit[3] : Detect unexpected EDS in 128b130b decode
                                     bit[4] : Detect if STP or SDP was found on inappropriate lane in 8b10b decode
                                     bit[5] : Check if SDP appear more than once per symbol time in 8b10b decode
                                     bit[6] : Check if STP appear more than once per symbol time in 8b10b decode
                                     bit[7] : Check if receiving DLLP without END symbol in 8b10b decode
    DIS_RXLANE_ERR[10..8]        - (RW) Control Register to disable error checker in rxlane module.  
                                     If error happened, MAC will report in receiver error status of AER register.
                                     0 : Enable
                                     1 : Disable
                                     bit[8] : Check if frame error happened in rxlane module
                                     bit[9] : Check if rxstatus error happened in rxlane module.
                                     bit[10] : Check if malform SKIP OS happened in rxlane module.
    CLR_ERR_LOG[11]              - (RW) Write one to clear all log information in rxlane and deskew module.
                                     0 : idle
                                     1 : Clear
    USP_BLOCK_DLLP[12]           - (RW) For upstream port.
                                     0 : Upstream port send DLLP before it receives a DLLP 
                                     1 : Upstream block DLLP transmission untik it receivers a DLLP
    BYPASS_SYS_CLK_RDY_RLOCK[13] - (RW) Ltssm will enters to Recovery.Equalization or Recovery.RcvrCfg from Recovery.RcvrLock when
                                     0: wait ltssm system clock ready
                                     1: do not wait ltssm system clock ready
    DNPORT_HOTRESET_2MS_TIMEOUT[14] - (RW) For Switch downstream port.
                                     0 : Downstream port exit hotreset state until software clear secondary bus reset bit . 
                                     1 : Downstream port exit HOTRESET state after 2ms timeout even if secodary bus reset bit equal to one.
    CANCEL_L1_GO_RECOV_DIS[15]   - (RW) If L1 handshake was successfully but link partner don't send EIOS instead of sending TS1, then
                                     0 : MAC cancelled L1 and enter Recovery.
                                     1 : MAC wait EIOS and still try to enter L1.
    BYPASS_PHYA_RDY_RLOCK[16]    - (RW) 0 : Need to wait PHY ready at Recovery.Lock and Recovery.Configure state if MAC has executed "SKIP EQ"
                                     1 : Do not wait PHY ready at Recovery.Lock and Recovery.Configure state if MAC has executed "SKIP EQ"
    BYPASS_PHYA_RDY_EQ[17]       - (RW) 0 : Need to wait PHY complete equalization (FOM) at Recovery.EQUAL state.
                                     1 : Do not wait PHY complete equalization (FOM) at Recovery.EQUAL state.
    DISABLE_EXIT_SEL[18]         - (RW) For upstream port 
                                     0 : When LTSSM in Disable state, exit Disable state to Detect state after 2ms timeout and rxelecidle is 0 at any lane
                                     1 : When LTSSM in Disable state, exit Disable state to Detect state after 2ms timeout.
    P2_ENTRY_WAIT_PHYSTATUS[19]  - (RW) 0 : Wait phystatus is 1 when powerdown entry P2 state.
                                     1 : Don't wait phystatus is 1 when powerdown entry P2 state.
    BYPASS_LINK_NUM_CHK[20]      - (RW) while Downstream Lanes transitions to Configuration.Linkwidth.Start, the next state is Configuration.Linkwidth.Accept if any Lanes first received
                                     0: at least one or more TS1 Ordered Sets with a Link and Lane number set to PAD
                                     1: at least one or more TS1 Ordered Sets with a Lane number set to PAD. In other words, MAC will bypass Link number check.
                                     This feature should be enabled in TX/RX loopback.
    EQ_DONE_BY_FOM[21]           - (RW) Equalization Adjustment can be done by FOM
                                     0: Equalization Adjustment can be done by receiving adjustment successful or failed
                                     1: Equalization Adjustment can be done by receiving adjustment finished or FOM rising
    DISABLE_TURNOFF_LANE[22]     - (RW) Turn off the lanes that did not be configured during Configuration.Complete
                                     0: The lanes that did not be configured will be turned off
                                     1: The lanes that did not be configured will not be turned off
    TXBUF_SRAM_MODE_SEL[23]      - (RW) 0 : Remove dummy read behavior at TXBUF read access.
                                     1 : Original PLDA MODE at TXBUF read access.
    hidden_aer[24]               - (RW) The register only can be used in TRANS layer.
                                     Hidden AER
                                     0: Enable AER
                                     1: Disable AER
    rxsram_mode[25]              - (RW) The register only can be used in TRANS layer.
                                     RX sram mode.
                                     0: can read/write one address at the same cycle.
                                     1: can not read/write one address at the same cycle.
    command_reg_behv_sel[26]     - (RW) The register only can be used in TRANS layer.
                                     Configuration Space command register definition.
                                     0 : Use MTK definition.
                                     1 : PLDA original definition.
    l1ss_en_behv_sel[27]         - (RW) The register only can be used in TRANS layer.
                                     Signal l1ss_en behavior selection.
                                     0 : l1ss_en will be 1 when any ASPM or PCIPM L11 or L12 enable is set.
                                     1 : l1ss_en will be 1 only when LTSSM enter ASPM L1 or PCI-PM L1 and corresponding L11 or L12 enable is set.
    switch_dn_l1pm_exit_affect_by_up[28] - (RW) The register only can be used in for SWITCH DN port.
                                     SWITCH DN port L1PM exit affect by UP port L1 exit.
                                     0 : SWITCH DN port will  stay in L1PM when UP port exit L1.
                                     1 : SWITCH DN port will  exit L1PM when UP port exit L1.
    rcv_pseudo_pm_dllp[29]       - (RW) The register only can be used in TRANS layer.
                                     Receive a pseudo power management DLLP packet for L1.2
                                     When asserted, this signal indicated the link has received a pseudo "PM_ACTIVE_STATE_REQUEST_L1" DLLP packet for RC mode or "PM_REQUEST_ACK" DLLP packet for EP mode
    RSVD_FOR_TRANS[30]           - (RW) TL_CLK Domain. The register only can be used in TRANS layer.
    lpmsm_l1_in1_retrain_en[31]  - (RW) The register only can be used in TRANS layer.
                                     LPMSM_L1_IN1 retrain enable
                                     When asserted and LPMSM in LPMSM_L1_IN1, LPMSM back to LPMSM_L0_IN if retrain event is occurred.

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_MAC_CTR_1_lpmsm_l1_in1_retrain_en_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_lpmsm_l1_in1_retrain_en_MASK 0x80000000u                // lpmsm_l1_in1_retrain_en[31]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_lpmsm_l1_in1_retrain_en_SHFT 31u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_RSVD_FOR_TRANS_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_RSVD_FOR_TRANS_MASK         0x40000000u                // RSVD_FOR_TRANS[30]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_RSVD_FOR_TRANS_SHFT         30u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rcv_pseudo_pm_dllp_ADDR     PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rcv_pseudo_pm_dllp_MASK     0x20000000u                // rcv_pseudo_pm_dllp[29]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rcv_pseudo_pm_dllp_SHFT     29u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_switch_dn_l1pm_exit_affect_by_up_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_switch_dn_l1pm_exit_affect_by_up_MASK 0x10000000u                // switch_dn_l1pm_exit_affect_by_up[28]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_switch_dn_l1pm_exit_affect_by_up_SHFT 28u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_l1ss_en_behv_sel_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_l1ss_en_behv_sel_MASK       0x08000000u                // l1ss_en_behv_sel[27]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_l1ss_en_behv_sel_SHFT       27u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_command_reg_behv_sel_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_command_reg_behv_sel_MASK   0x04000000u                // command_reg_behv_sel[26]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_command_reg_behv_sel_SHFT   26u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rxsram_mode_ADDR            PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rxsram_mode_MASK            0x02000000u                // rxsram_mode[25]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rxsram_mode_SHFT            25u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_hidden_aer_ADDR             PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_hidden_aer_MASK             0x01000000u                // hidden_aer[24]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_hidden_aer_SHFT             24u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_TXBUF_SRAM_MODE_SEL_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_TXBUF_SRAM_MODE_SEL_MASK    0x00800000u                // TXBUF_SRAM_MODE_SEL[23]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_TXBUF_SRAM_MODE_SEL_SHFT    23u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_TURNOFF_LANE_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_TURNOFF_LANE_MASK   0x00400000u                // DISABLE_TURNOFF_LANE[22]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_TURNOFF_LANE_SHFT   22u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_EQ_DONE_BY_FOM_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_EQ_DONE_BY_FOM_MASK         0x00200000u                // EQ_DONE_BY_FOM[21]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_EQ_DONE_BY_FOM_SHFT         21u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_LINK_NUM_CHK_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_LINK_NUM_CHK_MASK    0x00100000u                // BYPASS_LINK_NUM_CHK[20]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_LINK_NUM_CHK_SHFT    20u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_P2_ENTRY_WAIT_PHYSTATUS_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_P2_ENTRY_WAIT_PHYSTATUS_MASK 0x00080000u                // P2_ENTRY_WAIT_PHYSTATUS[19]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_P2_ENTRY_WAIT_PHYSTATUS_SHFT 19u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_EXIT_SEL_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_EXIT_SEL_MASK       0x00040000u                // DISABLE_EXIT_SEL[18]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_EXIT_SEL_SHFT       18u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_EQ_ADDR     PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_EQ_MASK     0x00020000u                // BYPASS_PHYA_RDY_EQ[17]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_EQ_SHFT     17u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_RLOCK_ADDR  PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_RLOCK_MASK  0x00010000u                // BYPASS_PHYA_RDY_RLOCK[16]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_RLOCK_SHFT  16u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CANCEL_L1_GO_RECOV_DIS_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CANCEL_L1_GO_RECOV_DIS_MASK 0x00008000u                // CANCEL_L1_GO_RECOV_DIS[15]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CANCEL_L1_GO_RECOV_DIS_SHFT 15u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DNPORT_HOTRESET_2MS_TIMEOUT_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DNPORT_HOTRESET_2MS_TIMEOUT_MASK 0x00004000u                // DNPORT_HOTRESET_2MS_TIMEOUT[14]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DNPORT_HOTRESET_2MS_TIMEOUT_SHFT 14u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_SYS_CLK_RDY_RLOCK_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_SYS_CLK_RDY_RLOCK_MASK 0x00002000u                // BYPASS_SYS_CLK_RDY_RLOCK[13]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_SYS_CLK_RDY_RLOCK_SHFT 13u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_USP_BLOCK_DLLP_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_USP_BLOCK_DLLP_MASK         0x00001000u                // USP_BLOCK_DLLP[12]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_USP_BLOCK_DLLP_SHFT         12u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CLR_ERR_LOG_ADDR            PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CLR_ERR_LOG_MASK            0x00000800u                // CLR_ERR_LOG[11]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CLR_ERR_LOG_SHFT            11u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_RXLANE_ERR_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_RXLANE_ERR_MASK         0x00000700u                // DIS_RXLANE_ERR[10..8]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_RXLANE_ERR_SHFT         8u
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_FRAMING_ERR_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_FRAMING_ERR_MASK        0x000000FFu                // DIS_FRAMING_ERR[7..0]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_FRAMING_ERR_SHFT        0u

/* =====================================================================================

  ---SW_TEST_IN (0x74040000 + 0078hu)---

    SIM_MODE[0]                  - (RW) Simulation Mode.
                                     Simulation mode is a special mode where some internal delays and parameters are adjusted in order to accelerate link training and to test certain features within a reasonable simulation time.
    DIS_LOW_POWER[1]             - (RW) Disable Low Power State Negotiation.
                                     When asserted, this signal disables all low power state negotiation, including L0s/L1.
    LOOPBACK_MASTER[2]           - (RW) Loopback master mode.
                                     Loopback Master: This signal must be set to 1 to direct the Link to loopback (in Master mode).
    enable_warning_assertion[3]  - (RW) 0 : Don't display warning message in simulation
                                     1 : Display warning message in simulation
    enable_information_assertion[4] - (RW) 0 : Don't display information message in simulation
                                     1 : Display information message in simulation
    IDLE_TO_RLOCK_SPEEDUP[5]     - (RW) Max number of Recovery.Idle to Recovery .RcvrLock transitions
                                     0: 255
                                     1: 7
    DIS_SCRAMB[6]                - (RW) Disable scrambling. 
                                     Gen1 Gen2 modes only.
    Set_compliance_receive[7]    - (RW) Set compliance receive bit in transmitted TS1 ordered set.
                                     This bit should be set before exiting Detect.Quite or Loopback.Entry
    set_full_speed_rxts[8]       - (RW) Set full speed when received the TS ordered set (for Gen4 T2R loopback test).
    Dis_POL_COMP[9]              - (RW) Disable entry in Polling.Compliance from Polling.active (does not apply if the TS1 compliance receive bit is set).
    FORCE_POL_COMP[10]           - (RW) Force entry in Polling.Compliance from Polling.active.
    FORCE_RXELECIDLE[11]         - (RW) Add inverter for pl_rxelecidle.
    rg_dma_mac_sleep_bypass[12]  - (RW) 0 : disable pextp_mac_sleep when dma process.
                                     1 : enable  pextp_mac_sleep when dma process.
    RSVD1[13]                    - (RW) Reserved
    DIS_PHYSTATUS_TO[14]         - (RW) PHY status timeout.
                                     A phystatus timeout mechanism to prevent from PHY don't response phystatus.
                                     0 : enable phystatus timeout.
                                     1 : disable phystatus timeout.
    RSVD3[17..15]                - (RW) Reserved
    en_tx_nullify_pkt_sent[18]   - (RW) Enables all nullified packets sent from the TX interface to be transmitted to the PCIe link
                                     (By default they are removed from the TX buffer automatically except when TX streaming is active)
    extend_sim_mode[19]          - (RW) Extended simulation mode.
                                     When simulating with a PHY model, simulation mode delays may not be long enough, especially for receiver detection and power/rate changes. 
                                     This typically causes unexpected timeouts to occur and can disrupt simulation. In this case, we recommend using extended simulation mode.
    en_warning_incorrect_dc[20]  - (RW) Enable warnings when incorrect DC balance symbols are received in training sets.
    dis_skp_parity_chk[21]       - (RW) Disable 128b130b SKP OS parity checking and reporting.
    EQ_PROBLEM_8GT[22]           - (RW) Equalization Problem 8.0 GT
                                     Set 1 to initiate an Equalization problem, and set the Link Equalization Request 8.0 GT bit in its Link Status 2 register to 1b.
    EQ_PROBLEM_16GT[23]          - (RW) Equalization Problem 16.0 GT
                                     Set 1 to initiate an Equalization problem, and set the Link Equalization Request 16.0 GT bit in its 16.0 GT Status register to 1b.
    en_tx_lcrc_err[24]           - (RW) For Test only. 
                                     Insert LCRC error in transmitted TLP.
                                     1 : enable.
                                     0 : disable.
    en_tx_ecrc_err[25]           - (RW) For Test only. 
                                     Insert ECRC error in transmitted TLP.
                                     1 : enable.
                                     0 : disable.
    en_tx_ep_wr[26]              - (RW) For Test only. 
                                     Insert EP error in transmitted MWr / IOWr/ CFGWr TLP.
                                     1 : enable.
                                     0 : disable.
    en_tx_ep_cpld[27]            - (RW) For Test only. 
                                     Insert EP error in transmitted Completion TLP.
                                     1 : enable.
                                     0 : disable.
    eq_inform[30..28]            - (RW) Those bit reserved for HW control.
                                     SW can't use the register.
    det_speedup[31]              - (RW) Minimum delay before speed change is considered done in Detect.Quiet
                                     0: 1ms (sim_mode=0), 7us (sim_mode=1)
                                     1: 0ms

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TEST_IN_det_speedup_ADDR              PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_det_speedup_MASK              0x80000000u                // det_speedup[31]
#define PCIE_MAC_IREG_SW_TEST_IN_det_speedup_SHFT              31u
#define PCIE_MAC_IREG_SW_TEST_IN_eq_inform_ADDR                PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_eq_inform_MASK                0x70000000u                // eq_inform[30..28]
#define PCIE_MAC_IREG_SW_TEST_IN_eq_inform_SHFT                28u
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_cpld_ADDR            PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_cpld_MASK            0x08000000u                // en_tx_ep_cpld[27]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_cpld_SHFT            27u
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_wr_ADDR              PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_wr_MASK              0x04000000u                // en_tx_ep_wr[26]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_wr_SHFT              26u
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ecrc_err_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ecrc_err_MASK           0x02000000u                // en_tx_ecrc_err[25]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ecrc_err_SHFT           25u
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_lcrc_err_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_lcrc_err_MASK           0x01000000u                // en_tx_lcrc_err[24]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_lcrc_err_SHFT           24u
#define PCIE_MAC_IREG_SW_TEST_IN_EQ_PROBLEM_16GT_ADDR          PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_EQ_PROBLEM_16GT_MASK          0x00800000u                // EQ_PROBLEM_16GT[23]
#define PCIE_MAC_IREG_SW_TEST_IN_EQ_PROBLEM_16GT_SHFT          23u
#define PCIE_MAC_IREG_SW_TEST_IN_EQ_PROBLEM_8GT_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_EQ_PROBLEM_8GT_MASK           0x00400000u                // EQ_PROBLEM_8GT[22]
#define PCIE_MAC_IREG_SW_TEST_IN_EQ_PROBLEM_8GT_SHFT           22u
#define PCIE_MAC_IREG_SW_TEST_IN_dis_skp_parity_chk_ADDR       PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_dis_skp_parity_chk_MASK       0x00200000u                // dis_skp_parity_chk[21]
#define PCIE_MAC_IREG_SW_TEST_IN_dis_skp_parity_chk_SHFT       21u
#define PCIE_MAC_IREG_SW_TEST_IN_en_warning_incorrect_dc_ADDR  PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_warning_incorrect_dc_MASK  0x00100000u                // en_warning_incorrect_dc[20]
#define PCIE_MAC_IREG_SW_TEST_IN_en_warning_incorrect_dc_SHFT  20u
#define PCIE_MAC_IREG_SW_TEST_IN_extend_sim_mode_ADDR          PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_extend_sim_mode_MASK          0x00080000u                // extend_sim_mode[19]
#define PCIE_MAC_IREG_SW_TEST_IN_extend_sim_mode_SHFT          19u
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_nullify_pkt_sent_ADDR   PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_nullify_pkt_sent_MASK   0x00040000u                // en_tx_nullify_pkt_sent[18]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_nullify_pkt_sent_SHFT   18u
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD3_ADDR                    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD3_MASK                    0x00038000u                // RSVD3[17..15]
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD3_SHFT                    15u
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_PHYSTATUS_TO_ADDR         PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_PHYSTATUS_TO_MASK         0x00004000u                // DIS_PHYSTATUS_TO[14]
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_PHYSTATUS_TO_SHFT         14u
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD1_ADDR                    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD1_MASK                    0x00002000u                // RSVD1[13]
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD1_SHFT                    13u
#define PCIE_MAC_IREG_SW_TEST_IN_rg_dma_mac_sleep_bypass_ADDR  PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_rg_dma_mac_sleep_bypass_MASK  0x00001000u                // rg_dma_mac_sleep_bypass[12]
#define PCIE_MAC_IREG_SW_TEST_IN_rg_dma_mac_sleep_bypass_SHFT  12u
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_RXELECIDLE_ADDR         PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_RXELECIDLE_MASK         0x00000800u                // FORCE_RXELECIDLE[11]
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_RXELECIDLE_SHFT         11u
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_POL_COMP_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_POL_COMP_MASK           0x00000400u                // FORCE_POL_COMP[10]
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_POL_COMP_SHFT           10u
#define PCIE_MAC_IREG_SW_TEST_IN_Dis_POL_COMP_ADDR             PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_Dis_POL_COMP_MASK             0x00000200u                // Dis_POL_COMP[9]
#define PCIE_MAC_IREG_SW_TEST_IN_Dis_POL_COMP_SHFT             9u
#define PCIE_MAC_IREG_SW_TEST_IN_set_full_speed_rxts_ADDR      PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_set_full_speed_rxts_MASK      0x00000100u                // set_full_speed_rxts[8]
#define PCIE_MAC_IREG_SW_TEST_IN_set_full_speed_rxts_SHFT      8u
#define PCIE_MAC_IREG_SW_TEST_IN_Set_compliance_receive_ADDR   PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_Set_compliance_receive_MASK   0x00000080u                // Set_compliance_receive[7]
#define PCIE_MAC_IREG_SW_TEST_IN_Set_compliance_receive_SHFT   7u
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_SCRAMB_ADDR               PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_SCRAMB_MASK               0x00000040u                // DIS_SCRAMB[6]
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_SCRAMB_SHFT               6u
#define PCIE_MAC_IREG_SW_TEST_IN_IDLE_TO_RLOCK_SPEEDUP_ADDR    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_IDLE_TO_RLOCK_SPEEDUP_MASK    0x00000020u                // IDLE_TO_RLOCK_SPEEDUP[5]
#define PCIE_MAC_IREG_SW_TEST_IN_IDLE_TO_RLOCK_SPEEDUP_SHFT    5u
#define PCIE_MAC_IREG_SW_TEST_IN_enable_information_assertion_ADDR PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_enable_information_assertion_MASK 0x00000010u                // enable_information_assertion[4]
#define PCIE_MAC_IREG_SW_TEST_IN_enable_information_assertion_SHFT 4u
#define PCIE_MAC_IREG_SW_TEST_IN_enable_warning_assertion_ADDR PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_enable_warning_assertion_MASK 0x00000008u                // enable_warning_assertion[3]
#define PCIE_MAC_IREG_SW_TEST_IN_enable_warning_assertion_SHFT 3u
#define PCIE_MAC_IREG_SW_TEST_IN_LOOPBACK_MASTER_ADDR          PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_LOOPBACK_MASTER_MASK          0x00000004u                // LOOPBACK_MASTER[2]
#define PCIE_MAC_IREG_SW_TEST_IN_LOOPBACK_MASTER_SHFT          2u
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_LOW_POWER_ADDR            PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_LOW_POWER_MASK            0x00000002u                // DIS_LOW_POWER[1]
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_LOW_POWER_SHFT            1u
#define PCIE_MAC_IREG_SW_TEST_IN_SIM_MODE_ADDR                 PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_SIM_MODE_MASK                 0x00000001u                // SIM_MODE[0]
#define PCIE_MAC_IREG_SW_TEST_IN_SIM_MODE_SHFT                 0u

/* =====================================================================================

  ---FPGA_SETTINGS (0x74040000 + 007Chu)---

    rxelecidle_sel_up0[0]        - (RW) For FPGA A60979.
                                     0 : select rxelecidle from PIPE.
                                     1 : select rxelecidle from PHY Probe Out.
    RSVD1[1]                     - (RW) Reserved
    rxelecidle_sel_dn2[2]        - (RW) For FPGA A60979.
                                     0 : select rxelecidle from PIPE.
                                     1 : select rxelecidle from PHY Probe Out.
    RSVD2[23..3]                 - (RW) Reserved
    clock_phase_select[26..24]   - (RW) 0: phase 0, 1: phase 60, 2: phase 120, 3: phase 180, 4: phase 240, 5: phase 300
    RSVD3[27]                    - (RW) Reserved
    fpga_dbg_select[31..28]      - (RW) Bit 0 : debug port [07:00]
                                     Bit 1 : debug port [15:08]
                                     Bit 2 : debug port [23:16]
                                     Bit 3 : debug port [31:24]
                                     0: debug port for EP
                                     1: debug port for Switch
                                     (It is FPGA COMBO only)

 =====================================================================================*/
#define PCIE_MAC_IREG_FPGA_SETTINGS_fpga_dbg_select_ADDR       PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_fpga_dbg_select_MASK       0xF0000000u                // fpga_dbg_select[31..28]
#define PCIE_MAC_IREG_FPGA_SETTINGS_fpga_dbg_select_SHFT       28u
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD3_ADDR                 PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD3_MASK                 0x08000000u                // RSVD3[27]
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD3_SHFT                 27u
#define PCIE_MAC_IREG_FPGA_SETTINGS_clock_phase_select_ADDR    PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_clock_phase_select_MASK    0x07000000u                // clock_phase_select[26..24]
#define PCIE_MAC_IREG_FPGA_SETTINGS_clock_phase_select_SHFT    24u
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD2_ADDR                 PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD2_MASK                 0x00FFFFF8u                // RSVD2[23..3]
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD2_SHFT                 3u
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_dn2_ADDR    PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_dn2_MASK    0x00000004u                // rxelecidle_sel_dn2[2]
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_dn2_SHFT    2u
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD1_ADDR                 PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD1_MASK                 0x00000002u                // RSVD1[1]
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD1_SHFT                 1u
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_up0_ADDR    PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_up0_MASK    0x00000001u                // rxelecidle_sel_up0[0]
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_up0_SHFT    0u

/* =====================================================================================

  ---GEN_SETTINGS (0x74040000 + 0080hu)---

    port_type[3..0]              - (RW) PCIe Port Type
                                     0000: Endpoint
                                     0001: Rootport
                                     others : reserved
    RSVD1[6..4]                  - (RW) Reserved
    Lane_reversal_supported[7]   - (RW) Lane reversal supported.
                                     1: supported.
                                     0: not supported.
    LinkWidths[11..8]            - (RW) supported Link widths
                                     Bit 8 = x2 supported
                                     Bit 9 = x4 supported
                                     Bit 10 = x8 supported
                                     Bit 11 = x16 supported
                                     You can use these bits to disable link width down configuration capability, or to force the PCIe device to use less lanes than are physically implemented. For example, if the Core is x8 and Bit 10 is 0b, lanes 7-4 are disabled.
    G2supported[12]              - (RW) Gen2 Speed Supported
                                     0: Gen2 speed is not supported
                                     1: Gen2 speed is supported
    G3supported[13]              - (RW) Gen3 Speed Supported
                                     0: Gen3 speed is not supported
                                     1: Gen3 speed is supported
    G4supported[14]              - (RW) Gen4 Speed Supported
                                     0: Gen4 speed is not supported
                                     1: Gen4 speed is supported
    RSVD2[16..15]                - (RW) Reserved
    PIE8_compatibility[17]       - (RW) Datapath PIE-8 compatibility mode. When set, the Core's PHY data interface conforms to the PIE-8 1.00 specification, which means that:
                                     1. the Core does not perform data scrambling/descrambling at 8.0 GT/s speed.
                                     2. RxDataK/TxDataK are used instead of RxDataValid/TxDataValid at 8.0 GT/s speed.
                                     3. RxStatus encoding differs from the PIPE specification.
    upconfigure_supp[18]         - (RW) Up-configure capable
                                     indicates that the Core supports link up configuration.
    TX_err_Nullify[19]           - (RW) Nullify TLP when TX ECC/parity error is detected.
    SRIS_mode[20]                - (RW) Indicates that the device is operating in SRIS mode.
    RSVD4[23..21]                - (RW) Reserved
    RSVD5[24]                    - (RW) Reserved
    disable_func[31..25]         - (RW) Mask Physical Functions.
                                     This setting make it possible to keep one or more functions' logic in reset so that they cannot be accessed and configured from PCIe bus or from application logic.
                                     bit[25] : for function1.
                                     bit[31] : for function7.

 =====================================================================================*/
#define PCIE_MAC_IREG_GEN_SETTINGS_disable_func_ADDR           PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_disable_func_MASK           0xFE000000u                // disable_func[31..25]
#define PCIE_MAC_IREG_GEN_SETTINGS_disable_func_SHFT           25u
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD5_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD5_MASK                  0x01000000u                // RSVD5[24]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD5_SHFT                  24u
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD4_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD4_MASK                  0x00E00000u                // RSVD4[23..21]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD4_SHFT                  21u
#define PCIE_MAC_IREG_GEN_SETTINGS_SRIS_mode_ADDR              PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_SRIS_mode_MASK              0x00100000u                // SRIS_mode[20]
#define PCIE_MAC_IREG_GEN_SETTINGS_SRIS_mode_SHFT              20u
#define PCIE_MAC_IREG_GEN_SETTINGS_TX_err_Nullify_ADDR         PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_TX_err_Nullify_MASK         0x00080000u                // TX_err_Nullify[19]
#define PCIE_MAC_IREG_GEN_SETTINGS_TX_err_Nullify_SHFT         19u
#define PCIE_MAC_IREG_GEN_SETTINGS_upconfigure_supp_ADDR       PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_upconfigure_supp_MASK       0x00040000u                // upconfigure_supp[18]
#define PCIE_MAC_IREG_GEN_SETTINGS_upconfigure_supp_SHFT       18u
#define PCIE_MAC_IREG_GEN_SETTINGS_PIE8_compatibility_ADDR     PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_PIE8_compatibility_MASK     0x00020000u                // PIE8_compatibility[17]
#define PCIE_MAC_IREG_GEN_SETTINGS_PIE8_compatibility_SHFT     17u
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD2_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD2_MASK                  0x00018000u                // RSVD2[16..15]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD2_SHFT                  15u
#define PCIE_MAC_IREG_GEN_SETTINGS_G4supported_ADDR            PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_G4supported_MASK            0x00004000u                // G4supported[14]
#define PCIE_MAC_IREG_GEN_SETTINGS_G4supported_SHFT            14u
#define PCIE_MAC_IREG_GEN_SETTINGS_G3supported_ADDR            PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_G3supported_MASK            0x00002000u                // G3supported[13]
#define PCIE_MAC_IREG_GEN_SETTINGS_G3supported_SHFT            13u
#define PCIE_MAC_IREG_GEN_SETTINGS_G2supported_ADDR            PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_G2supported_MASK            0x00001000u                // G2supported[12]
#define PCIE_MAC_IREG_GEN_SETTINGS_G2supported_SHFT            12u
#define PCIE_MAC_IREG_GEN_SETTINGS_LinkWidths_ADDR             PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_LinkWidths_MASK             0x00000F00u                // LinkWidths[11..8]
#define PCIE_MAC_IREG_GEN_SETTINGS_LinkWidths_SHFT             8u
#define PCIE_MAC_IREG_GEN_SETTINGS_Lane_reversal_supported_ADDR PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_Lane_reversal_supported_MASK 0x00000080u                // Lane_reversal_supported[7]
#define PCIE_MAC_IREG_GEN_SETTINGS_Lane_reversal_supported_SHFT 7u
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD1_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD1_MASK                  0x00000070u                // RSVD1[6..4]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD1_SHFT                  4u
#define PCIE_MAC_IREG_GEN_SETTINGS_port_type_ADDR              PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_port_type_MASK              0x0000000Fu                // port_type[3..0]
#define PCIE_MAC_IREG_GEN_SETTINGS_port_type_SHFT              0u

/* =====================================================================================

  ---PCIE_CFGCTRL_0 (0x74040000 + 0084hu)---

    Func_not_ready[0]            - (RW) Physical Function Configuration NOT Ready.
                                     If the local processor need more time to load PCIe configuration settings, it can assert this bit until all physical function configuration settings are properly set.
                                     0: Physical function configuration ready
                                     1: Physical function configuration not ready
                                     
                                     The register is per physical function register
    Virtual_Func_not_ready[1]    - (RW) Virtual function configuration not ready: if the local processor needs more time to load PCIe configuration settings, it can assert this bit until all virtual function configuration settings are properly set.
                                     The PCIe Core will reply to all virtual function configuration requests with Configuration Retry Status completions while this bit is asserted.
                                     
                                     The register is per physical function register
    Disable_LTSSM[2]             - (RW) this bit is deasserted (low) in normal conditions; however, it can be set to 1 at power-up to prevent LTSSM from exiting Detect.Quiet for as long as this register is asserted. 
                                     This is typically used to prevent LTSSM from moving to another state when the PHY or PIPE interface is not ready. This signal has no effect on LTSSM states other than Detect.Quiet.
    RSVD1[15..3]                 - (RO) Reserved
    Func_num[18..16]             - (RO) When several physical functions are implemented, it enables initializing the selected function PCIe configuration setting registers (0x0098 - 0x00BF, 0x00E0 - 0x00FF, 0x0120 - 0x013F). Otherwise this sub-field is reserved.
    RSVD2[23..19]                - (RO) Reserved
    Virtual_Channel_num[26..24]  - (RO) When several virtual channels are implemented, it enables initializing the selected virtual channel PCIe configuration setting registers (0x0090 - 0x0097). Otherwise this sub-field is reserved.
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD3_MASK                0xF8000000u                // RSVD3[31..27]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD3_SHFT                27u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Virtual_Channel_num_ADDR  PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Virtual_Channel_num_MASK  0x07000000u                // Virtual_Channel_num[26..24]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Virtual_Channel_num_SHFT  24u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD2_MASK                0x00F80000u                // RSVD2[23..19]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD2_SHFT                19u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Func_num_ADDR             PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Func_num_MASK             0x00070000u                // Func_num[18..16]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Func_num_SHFT             16u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD1_MASK                0x0000FFF8u                // RSVD1[15..3]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_RSVD1_SHFT                3u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Disable_LTSSM_ADDR        PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Disable_LTSSM_MASK        0x00000004u                // Disable_LTSSM[2]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Disable_LTSSM_SHFT        2u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Virtual_Func_not_ready_ADDR PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Virtual_Func_not_ready_MASK 0x00000002u                // Virtual_Func_not_ready[1]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Virtual_Func_not_ready_SHFT 1u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Func_not_ready_ADDR       PCIE_MAC_IREG_PCIE_CFGCTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Func_not_ready_MASK       0x00000001u                // Func_not_ready[0]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_0_Func_not_ready_SHFT       0u

/* =====================================================================================

  ---PCIE_PIPE_0 (0x74040000 + 0088hu)---

    dis_tx_tl_pipeline[0]        - (RO) Disable TX transaction layer pipeline
    dis_rx_tl_pipeline[1]        - (RO) Disable RX transaction layer pipeline
    RSVD1[16..2]                 - (RO) Reserved
    PIPE_input_sel[17]           - (RO) PIPE input signals are registered.
                                     0: not registered.
                                     1: registered
    tx_aligned_data_sel[18]      - (RO) Tx aligned data is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    DC_offset_calculation_sel[19] - (RO) DC offset calculation is pipelined.
                                     0: not pipelined.
                                     1: pipelined.
                                     When this bit is set, the TS1/TS2 DC symbol replacement logic is slightly modified to enable the logic to run at a much higher frequency. 
                                     In this case, however, it no longer conforms exactly to the PCI Express specifications.
    DeScrambled_Dat_sel[20]      - (RO) De-Scrambled Data and 128b/130b OS Detection signals are pipelined.
                                     0: pipelined.
                                     1: not pipelined
    RSVD2[27..21]                - (RO) Reserved
    DLLP_Insertion_dis[28]       - (RO) DLLP Insertion with TLP of atypical length is disabled.
                                     0 : enable
                                     1: disabled
    RSVD3[31..29]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD3_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD3_MASK                   0xE0000000u                // RSVD3[31..29]
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD3_SHFT                   29u
#define PCIE_MAC_IREG_PCIE_PIPE_0_DLLP_Insertion_dis_ADDR      PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_DLLP_Insertion_dis_MASK      0x10000000u                // DLLP_Insertion_dis[28]
#define PCIE_MAC_IREG_PCIE_PIPE_0_DLLP_Insertion_dis_SHFT      28u
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD2_MASK                   0x0FE00000u                // RSVD2[27..21]
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD2_SHFT                   21u
#define PCIE_MAC_IREG_PCIE_PIPE_0_DeScrambled_Dat_sel_ADDR     PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_DeScrambled_Dat_sel_MASK     0x00100000u                // DeScrambled_Dat_sel[20]
#define PCIE_MAC_IREG_PCIE_PIPE_0_DeScrambled_Dat_sel_SHFT     20u
#define PCIE_MAC_IREG_PCIE_PIPE_0_DC_offset_calculation_sel_ADDR PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_DC_offset_calculation_sel_MASK 0x00080000u                // DC_offset_calculation_sel[19]
#define PCIE_MAC_IREG_PCIE_PIPE_0_DC_offset_calculation_sel_SHFT 19u
#define PCIE_MAC_IREG_PCIE_PIPE_0_tx_aligned_data_sel_ADDR     PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_tx_aligned_data_sel_MASK     0x00040000u                // tx_aligned_data_sel[18]
#define PCIE_MAC_IREG_PCIE_PIPE_0_tx_aligned_data_sel_SHFT     18u
#define PCIE_MAC_IREG_PCIE_PIPE_0_PIPE_input_sel_ADDR          PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_PIPE_input_sel_MASK          0x00020000u                // PIPE_input_sel[17]
#define PCIE_MAC_IREG_PCIE_PIPE_0_PIPE_input_sel_SHFT          17u
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD1_MASK                   0x0001FFFCu                // RSVD1[16..2]
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD1_SHFT                   2u
#define PCIE_MAC_IREG_PCIE_PIPE_0_dis_rx_tl_pipeline_ADDR      PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_dis_rx_tl_pipeline_MASK      0x00000002u                // dis_rx_tl_pipeline[1]
#define PCIE_MAC_IREG_PCIE_PIPE_0_dis_rx_tl_pipeline_SHFT      1u
#define PCIE_MAC_IREG_PCIE_PIPE_0_dis_tx_tl_pipeline_ADDR      PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_dis_tx_tl_pipeline_MASK      0x00000001u                // dis_tx_tl_pipeline[0]
#define PCIE_MAC_IREG_PCIE_PIPE_0_dis_tx_tl_pipeline_SHFT      0u

/* =====================================================================================

  ---PCIE_PIPE_1 (0x74040000 + 008Chu)---

    DLLP_Sts_sel[0]              - (RO) DLLP Status StreamBus signals are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RSVD1[7..1]                  - (RO) Reserved
    TxLCRC_Dat_sel[8]            - (RO) TxLCRC Data Xor Computation is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    TxLCRC_Field_sel[9]          - (RO) TxLCRC Field Generation is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RxLCRC_Field_sel[10]         - (RO) RxLCRC Field Computation is pipelined.
                                     0: not pipelined.
                                     1: pipelined (for ECRC only)
    RESERVED11[21..11]           - (RO) Reserved bits
    RSVD2[23..22]                - (RO) Reserved
    RxTLP_sel[24]                - (RO) TLP decoder input data are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    SeqNumber_sel[25]            - (RO) SeqNumber and RxLCRC Data XOR Computation are pipelined.
                                     0: not pipelined. 
                                     1: pipelined
    RxLCRC_Results_sel[26]       - (RO) RxLCRC Results are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RxLCRC_DW_sel[27]            - (RO) RxLCRC DWord to check is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RxLCRC_Chk_sel[28]           - (RO) RxLCRC Checking Result is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    TLP_Dec_sel[29]              - (RO) TLP Decoding signals are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RSVD3[31..30]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD3_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD3_MASK                   0xC0000000u                // RSVD3[31..30]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD3_SHFT                   30u
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_Dec_sel_ADDR             PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_Dec_sel_MASK             0x20000000u                // TLP_Dec_sel[29]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_Dec_sel_SHFT             29u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Chk_sel_ADDR          PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Chk_sel_MASK          0x10000000u                // RxLCRC_Chk_sel[28]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Chk_sel_SHFT          28u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_DW_sel_ADDR           PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_DW_sel_MASK           0x08000000u                // RxLCRC_DW_sel[27]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_DW_sel_SHFT           27u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Results_sel_ADDR      PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Results_sel_MASK      0x04000000u                // RxLCRC_Results_sel[26]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Results_sel_SHFT      26u
#define PCIE_MAC_IREG_PCIE_PIPE_1_SeqNumber_sel_ADDR           PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_SeqNumber_sel_MASK           0x02000000u                // SeqNumber_sel[25]
#define PCIE_MAC_IREG_PCIE_PIPE_1_SeqNumber_sel_SHFT           25u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxTLP_sel_ADDR               PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxTLP_sel_MASK               0x01000000u                // RxTLP_sel[24]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxTLP_sel_SHFT               24u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD2_MASK                   0x00C00000u                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD2_SHFT                   22u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Field_sel_ADDR        PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Field_sel_MASK        0x00000400u                // RxLCRC_Field_sel[10]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Field_sel_SHFT        10u
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Field_sel_ADDR        PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Field_sel_MASK        0x00000200u                // TxLCRC_Field_sel[9]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Field_sel_SHFT        9u
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Dat_sel_ADDR          PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Dat_sel_MASK          0x00000100u                // TxLCRC_Dat_sel[8]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Dat_sel_SHFT          8u
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD1_MASK                   0x000000FEu                // RSVD1[7..1]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD1_SHFT                   1u
#define PCIE_MAC_IREG_PCIE_PIPE_1_DLLP_Sts_sel_ADDR            PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_DLLP_Sts_sel_MASK            0x00000001u                // DLLP_Sts_sel[0]
#define PCIE_MAC_IREG_PCIE_PIPE_1_DLLP_Sts_sel_SHFT            0u

/* =====================================================================================

  ---PCIE_VC_CRED0_L (0x74040000 + 0090hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC_CRED0_H (0x74040000 + 0094hu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_PCI_IDS_0_0 (0x74040000 + 0098hu)---

    VendorID[15..0]              - (RW) Vendor ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[15:0]
                                     
                                     The register is per physical function register
    DeviceID[31..16]             - (RW) Device ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[31:16]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_DeviceID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_DeviceID_MASK           0xFFFF0000u                // DeviceID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_DeviceID_SHFT           16u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_VendorID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_VendorID_MASK           0x0000FFFFu                // VendorID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_0_VendorID_SHFT           0u

/* =====================================================================================

  ---PCIE_PCI_IDS_1_0 (0x74040000 + 009Chu)---

    RevisionID[7..0]             - (RW) Revision ID
                                     Backdoor access to PCIe Configuration Space Header(+08h)[7:0]
                                     
                                     The register is per physical function register
    Classcode[31..8]             - (RW) Class Code
                                     Backdoor access to PCIe Configuration Space Header(+08h)[31:8]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_Classcode_ADDR          PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_Classcode_MASK          0xFFFFFF00u                // Classcode[31..8]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_Classcode_SHFT          8u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_RevisionID_ADDR         PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_RevisionID_MASK         0x000000FFu                // RevisionID[7..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_0_RevisionID_SHFT         0u

/* =====================================================================================

  ---PCIE_PCI_IDS_2_0 (0x74040000 + 00A0hu)---

    Sub_system_vendor_ID[15..0]  - (RW) Sub-system vendor ID
                                     Only apply for type0 function. 
                                     Backdoor access to PCIe Configuration Space Header(+2C)[15:0]
                                     
                                     The register is per physical function register
    Sub_system_device_ID[31..16] - (RW) Sub-system device ID
                                     Only apply for type0 function.
                                     Backdoor access to PCIe Configuration Space Header(+2C)[31:16]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_Sub_system_device_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_Sub_system_device_ID_MASK 0xFFFF0000u                // Sub_system_device_ID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_Sub_system_device_ID_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_Sub_system_vendor_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_Sub_system_vendor_ID_MASK 0x0000FFFFu                // Sub_system_vendor_ID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_0_Sub_system_vendor_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_LPM_0 (0x74040000 + 00A4hu)---

    RSVD1[15..0]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    Adtr_support[16]             - (RW) Address Translation Service support
                                     
                                     The register is per physical function register
    Page_Req_If_support[17]      - (RW) Page Request Interface support
                                     
                                     The register is per physical function register
    Impl_Mcast[18]               - (RO) Implement Multicast capability
                                     
                                     The register is per physical function register
    RSVD2[19]                    - (RO) Reserved
                                     
                                     The register is per physical function register
    PMEDataSupport[20]           - (RW) PME Data Support
                                     Backdoor access to Power Management Control/Status Register (0x10FC[14:9][31:24])
                                     0: not supported
                                     1: supported
                                     
                                     The register is per physical function register
    DSI[21]                      - (RW) DSI(Device Specific Initialization)
                                     Backdoor access to Power Management Capability Structure(+00h)[21]
                                     
                                     The register is per physical function register
    AuxiliaryCurrent[24..22]     - (RW) Auxiliary Current
                                     Backdoor access to Power Management Capability Structure(+00h)[24:22]
                                     
                                     The register is per physical function register
    D1Support[25]                - (RW) D1 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[25]
                                     
                                     The register is per physical function register
    D2Support[26]                - (RW) D2 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[26]
                                     
                                     The register is per physical function register
    PMEsupport[31..27]           - (RW) PME Support
                                     Backdoor access to Power Management Capability Structure(+00h)[31:27]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_PMEsupport_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_PMEsupport_MASK           0xF8000000u                // PMEsupport[31..27]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_PMEsupport_SHFT           27u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_D2Support_ADDR            PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_D2Support_MASK            0x04000000u                // D2Support[26]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_D2Support_SHFT            26u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_D1Support_ADDR            PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_D1Support_MASK            0x02000000u                // D1Support[25]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_D1Support_SHFT            25u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_AuxiliaryCurrent_ADDR     PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_AuxiliaryCurrent_MASK     0x01C00000u                // AuxiliaryCurrent[24..22]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_AuxiliaryCurrent_SHFT     22u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_DSI_ADDR                  PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_DSI_MASK                  0x00200000u                // DSI[21]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_DSI_SHFT                  21u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_PMEDataSupport_ADDR       PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_PMEDataSupport_MASK       0x00100000u                // PMEDataSupport[20]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_PMEDataSupport_SHFT       20u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_RSVD2_MASK                0x00080000u                // RSVD2[19]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_RSVD2_SHFT                19u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Impl_Mcast_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Impl_Mcast_MASK           0x00040000u                // Impl_Mcast[18]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Impl_Mcast_SHFT           18u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Page_Req_If_support_ADDR  PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Page_Req_If_support_MASK  0x00020000u                // Page_Req_If_support[17]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Page_Req_If_support_SHFT  17u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Adtr_support_ADDR         PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Adtr_support_MASK         0x00010000u                // Adtr_support[16]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_Adtr_support_SHFT         16u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_PCI_LPM_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_RSVD1_MASK                0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_0_RSVD1_SHFT                0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_0_0 (0x74040000 + 00A8hu)---

    InterruptPin[2..0]           - (RW) Interrupt Pin:
                                     - 000: None
                                     - 001: INTA
                                     - 010: INTB
                                     - 011: INTC
                                     - 100: INTD
                                     Otherwise reserved.
                                     
                                     The register is per physical function register
    msi_cap_dis[3]               - (RW) MSI capability disable.
                                     0 : enable.
                                     1 : disable.
                                     
                                     The register is per physical function register
    MSI_no[6..4]                 - (RW) Message Control. Multiple Message Capable
                                     - 000: 1 MSI requested
                                     - 001: 2 MSI requested
                                     - 010: 4 MSI requested
                                     - 011: 8 MSI requested
                                     - 100: 16 MSI requested
                                     - 101: 32 MSI requested
                                     Otherwise reserved.
                                     
                                     The register is per physical function register
    MSI_per_vector_support[7]    - (RW) MSI per-vector masking support
                                     
                                     The register is per physical function register
    MSI_ext_data[8]              - (RW) MSI Extended message data capability
                                     0: disable
                                     1: enable
                                     
                                     The register is per physical function register
    RESERVED9[15..9]             - (RO) Reserved bits
    MSIX_Table_size[26..16]      - (RW) MSIX Table size
                                     
                                     The register is per physical function register
    RSVD3[30..27]                - (RW) Reserved
                                     
                                     The register is per physical function register
    Impl_MSIX_capability[31]     - (RW) Implement MSI-X capability
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_Impl_MSIX_capability_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_Impl_MSIX_capability_MASK 0x80000000u                // Impl_MSIX_capability[31]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_Impl_MSIX_capability_SHFT 31u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_RSVD3_MASK              0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_RSVD3_SHFT              27u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSIX_Table_size_ADDR    PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSIX_Table_size_MASK    0x07FF0000u                // MSIX_Table_size[26..16]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSIX_Table_size_SHFT    16u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_ext_data_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_ext_data_MASK       0x00000100u                // MSI_ext_data[8]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_ext_data_SHFT       8u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_per_vector_support_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_per_vector_support_MASK 0x00000080u                // MSI_per_vector_support[7]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_per_vector_support_SHFT 7u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_no_ADDR             PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_no_MASK             0x00000070u                // MSI_no[6..4]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_MSI_no_SHFT             4u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_msi_cap_dis_ADDR        PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_msi_cap_dis_MASK        0x00000008u                // msi_cap_dis[3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_msi_cap_dis_SHFT        3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_InterruptPin_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_InterruptPin_MASK       0x00000007u                // InterruptPin[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_0_InterruptPin_SHFT       0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_1_0 (0x74040000 + 00AChu)---

    Table_BIR[2..0]              - (RW) Table BIR
                                     
                                     The register is per physical function register
    Table_offset[31..3]          - (RW) Table offset
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_Table_offset_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_Table_offset_MASK       0xFFFFFFF8u                // Table_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_Table_offset_SHFT       3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_Table_BIR_ADDR          PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_Table_BIR_MASK          0x00000007u                // Table_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_0_Table_BIR_SHFT          0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_2_0 (0x74040000 + 00B0hu)---

    PBA_BIR[2..0]                - (RW) PBA BIR
                                     
                                     The register is per physical function register
    PBA_offset[31..3]            - (RW) PBA offset
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_PBA_offset_ADDR         PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_PBA_offset_MASK         0xFFFFFFF8u                // PBA_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_PBA_offset_SHFT         3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_PBA_BIR_ADDR            PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_PBA_BIR_MASK            0x00000007u                // PBA_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_0_PBA_BIR_SHFT            0u

/* =====================================================================================

  ---PCIE_PCI_IOV_0_0 (0x74040000 + 00B4hu)---

    ATS_invalidate_queuedepth[4..0] - (RW) Maximum payload size. 
                                     Do not set the PCIe Maximum payload size to a value greater than the Bridge Maximum Payload size.
                                     
                                     The register is per physical function register
    ATS_page_aligned_req[5]      - (RW) reserved for phantom functions support
                                     
                                     The register is per physical function register
    TPH_NOST_MODE_SUP[6]         - (RW) THP NOST mode support
                                     
                                     The register is per physical function register
    RSVD1[15..7]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_Max_Grp[21..16]        - (RW) Multicast max group
                                     
                                     The register is per physical function register
    RSVD2[23..22]                - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_WIN_Size[29..24]       - (RW) Multicast window size
                                     
                                     The register is per physical function register
    RSVD3[30]                    - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_ECRC_REGEN_SUP[31]     - (RW) Multicast ECRC regen support
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_ECRC_REGEN_SUP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_ECRC_REGEN_SUP_MASK 0x80000000u                // MCAST_ECRC_REGEN_SUP[31]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_ECRC_REGEN_SUP_SHFT 31u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD3_MASK              0x40000000u                // RSVD3[30]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD3_SHFT              30u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_WIN_Size_ADDR     PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_WIN_Size_MASK     0x3F000000u                // MCAST_WIN_Size[29..24]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_WIN_Size_SHFT     24u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD2_MASK              0x00C00000u                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD2_SHFT              22u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_Max_Grp_ADDR      PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_Max_Grp_MASK      0x003F0000u                // MCAST_Max_Grp[21..16]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_MCAST_Max_Grp_SHFT      16u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD1_MASK              0x0000FF80u                // RSVD1[15..7]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_RSVD1_SHFT              7u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_TPH_NOST_MODE_SUP_ADDR  PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_TPH_NOST_MODE_SUP_MASK  0x00000040u                // TPH_NOST_MODE_SUP[6]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_TPH_NOST_MODE_SUP_SHFT  6u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ATS_page_aligned_req_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ATS_page_aligned_req_MASK 0x00000020u                // ATS_page_aligned_req[5]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ATS_page_aligned_req_SHFT 5u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ATS_invalidate_queuedepth_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ATS_invalidate_queuedepth_MASK 0x0000001Fu                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_0_ATS_invalidate_queuedepth_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_IOV_1_0 (0x74040000 + 00B8hu)---

    PRI_outstanding_page_REQ_CAP[19..0] - (RW) PRI outstanding page request capacity
                                     
                                     The register is per physical function register
    RSVD1[31..20]                - (RO) Reserved
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_RSVD1_MASK              0xFFF00000u                // RSVD1[31..20]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_RSVD1_SHFT              20u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_PRI_outstanding_page_REQ_CAP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_PRI_outstanding_page_REQ_CAP_MASK 0x000FFFFFu                // PRI_outstanding_page_REQ_CAP[19..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_0_PRI_outstanding_page_REQ_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_SW_TRIG_INT_0 (0x74040000 + 00BChu)---

    sw_trig_intr_host[31..0]     - (RW) Software trigger interrupt for Endpoint mode.
                                     Software can use the register to send Interrupt message via PCIe controller.
                                      If some bits of the register are set to 1, corresponding bits in ISTATUS_HOST (0x18C) are also be set and PCIe controller will send interrupt message to host.
                                     0: clear interrupt.
                                     1: send interrupt.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_0_sw_trig_intr_host_ADDR PCIE_MAC_IREG_PCIE_SW_TRIG_INT_0_ADDR
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_0_sw_trig_intr_host_MASK 0xFFFFFFFFu                // sw_trig_intr_host[31..0]
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_0_sw_trig_intr_host_SHFT 0u

/* =====================================================================================

  ---PCIE_PEX_DEV (0x74040000 + 00C0hu)---

    MAXPAYLOAD[2..0]             - (RW) Max Payload Size Setting
                                     Backdoor access to PCIe Capability structure(+04h)[2:0]
                                     -000b: Maximum 128 bytes supported
                                     -001b: Maximum 256 bytes supported
                                     -010b: Maximum 512 bytes supported
                                     Otherwise: Reserved
    DEV_PH_FUNC[4..3]            - (RO) Reserved for phantom functions support
    DEV_RSVD1[5]                 - (RO) Reserved
    L0s_accptable_latency[8..6]  - (RW) Endpoint L0s Acceptable Latency Setting
                                     For endpoint only. For RC it should be Reserved.
                                     Backdoor access to PCIe Capability structure(+04h)[8:6]
                                     - 000b: Maximum of 64ns
                                     - 001b: Maximum of 128ns
                                     - 010b: Maximum of 256ns
                                     - 011b: Maximum of 512ns
                                     - 100b: Maximum of 1us
                                     - 101b: Maximum of 2us
                                     - 110b: Maximum of 4us
                                     - 111b: No Limit
    L1_acceptable_latency[11..9] - (RW) Endpoint L1 Acceptable Latency Setting
                                     For endpoint only. For RC it should be Reserved.
                                     Backdoor access to PCIe Capability structure(+04h)[11:9]
                                     - 000b: Maximum of 1us
                                     - 001b: Maximum of 2us
                                     - 010b: Maximum of 4us
                                     - 011b: Maximum of 8us
                                     - 100b: Maximum of 16us
                                     - 101b: Maximum of 32us
                                     - 110b: Maximum of 64us
                                     - 111b: No Limit
    DEV_RSVD2[27..12]            - (RO) Reserved
    DEV_FLR_SUP[28]              - (RW) Function Level Reset Capability Setting
                                     Backdoor access to PCIe Capability structure(+04h)[28]
                                     - 0b: The Function does not support the optional Function Level Reset mechanism
                                     - 1b: The Function supports the optional Function Level Reset mechanism
                                     The settings in the other function always return whatever software programmed for each, but the capability is determined solely by the setting in Function 0.
    DEV_RSVD3[31..29]            - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD3_MASK              0xE0000000u                // DEV_RSVD3[31..29]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD3_SHFT              29u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_FLR_SUP_ADDR            PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_FLR_SUP_MASK            0x10000000u                // DEV_FLR_SUP[28]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_FLR_SUP_SHFT            28u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD2_MASK              0x0FFFF000u                // DEV_RSVD2[27..12]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD2_SHFT              12u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L1_acceptable_latency_ADDR  PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L1_acceptable_latency_MASK  0x00000E00u                // L1_acceptable_latency[11..9]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L1_acceptable_latency_SHFT  9u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L0s_accptable_latency_ADDR  PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L0s_accptable_latency_MASK  0x000001C0u                // L0s_accptable_latency[8..6]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L0s_accptable_latency_SHFT  6u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD1_MASK              0x00000020u                // DEV_RSVD1[5]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD1_SHFT              5u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_PH_FUNC_ADDR            PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_PH_FUNC_MASK            0x00000018u                // DEV_PH_FUNC[4..3]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_PH_FUNC_SHFT            3u
#define PCIE_MAC_IREG_PCIE_PEX_DEV_MAXPAYLOAD_ADDR             PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_MAXPAYLOAD_MASK             0x00000007u                // MAXPAYLOAD[2..0]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_MAXPAYLOAD_SHFT             0u

/* =====================================================================================

  ---PCIE_PEX_DEV2 (0x74040000 + 00C4hu)---

    Cpl_Timeout[3..0]            - (RW) Completion Timeout Ranges Supported:
                                     0000b Completion Timeout programming not supported
                                     0001b Range A
                                     0010b Range B
                                     0011b Ranges A and B
                                     0110b Ranges B and C
                                     0111b Ranges A, B, and C
                                     1110b Ranges B, C, and D
                                     1111b Ranges A, B, C, and D
                                     XpressRICH3-AXI chosen Completion Timeout Values are:
                                     In Default Range: fixed to 50 ms in hardware and 128 us in simulation
                                     In Range A: 64 us or 4ms
                                     In Range B: 32 ms or 128 ms
                                     In Range C: 512 ms or 2 sec
                                     In Range D: 8 sec or 32 sec
    Cpl_Timeout_Dis[4]           - (RW) Completion Timeout Disable Supported.
                                     0 : not supported.
                                     1 : supported.
    ARI_Forwarding_Support[5]    - (RW) A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
                                     This mechanism is optional for Root Ports.
                                     For all other Functions this field is Reserved and must be hardwired to 0b.
    AtomicOp_Routing_Support[6]  - (RO) Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. 
                                     This bit must be set to 1b if the Port supports this optional capability.
    AtomicOp_32b_Completer_Support[7] - (RO) Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. 
                                     Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    AtomicOp_64b_Completer_Support[8] - (RO) Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. 
                                     Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    CAS_128b_Completer_Support[9] - (RO) Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. 
                                     This bit must be set to 1b if the Function supports this optional capability.
    No_RO_enabled_PR_PR_Passing[10] - (RO) If this bit is Set, the routing element never carries out the passing permitted.
                                     This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. 
                                     This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. 
                                     All Ports on a Switch or RC must report the same value for this bit.
                                     For all other functions, this bit must be 0b.
    LTR_support[11]              - (RW) LTR (Latency Tolerance Reporting) Support
                                     Backdoor access to PCIe Capability structure(+24h)[11]
                                     0: LTR mechanism is not supported
                                     1: LTR mechanism is supported
    TPH_Completer_Supported[13..12] - (RO) TPH Completer Supported - Value indicates Completer support for TPH or Extended TPH. Applicable only to Root Ports and Endpoints. For all other Functions, this field is Reserved.
                                     Defined Encodings are :
                                     00 : TPH and Extended TPH Completer not supported.
                                     01 : TPH Completer supported; Extended TPH Completer not supported.
                                     10 : Reserved.
                                     11 : Both TPH and Extended TPH Completer supported.
    DEV2_DSN_SUP[14]             - (RW) DSN extended capability supported
                                     0 : not supported
                                     1 : supported
    DEV2_RSVD1[15]               - (RW) Reserved
    DEV_10B_TAG_CPL_SUP[16]      - (RW) 10-Bit Tag Completer Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Completer capability; 
                                     Otherwise, the Function does not.
    DEV_10B_TAG_REQ_SUP[17]      - (RW) 10-Bit Tag Requester Supported. 
                                     If this bit is Set, the Function supports 10-Bit Tag Requester capability; 
                                     Otherwise, the Function does not.
    DEV2_OBFF[19..18]            - (RW) OBFF Supported type.
                                     00 : no support.
                                     01 : message.
                                     10 : wake.
                                     11 : both.
    DEV2_DISABLE_IDO[20]         - (RO) Disable IDO Support
                                     the IDO Request Enable bit and IDO Completion Enable bit in the Device Control 2 Register are hardwired to 0 when the bit is set.
    DEV2_EEPFX_SUP[21]           - (RW) End-End TLP Prefix Supported
                                     Values are:
                                     0 : No Support
                                     1 : Support is provided to receive TLPs containing End-End TLP Prefixes.
    DEV2_EEPFX_MAX[23..22]       - (RW) Max End-End TLP Prefixes
                                     Indicates the maximum number of End-End TLP Prefixes supported by this Function.
                                     Values are:
                                     01 : 1 End-End TLP Prefix
                                     10 : 2 End-End TLP Prefixes
                                     11 : 3 End-End TLP Prefixes
                                     00 : 4 End-End TLP Prefixes
    DEV2_FRS_SUP[24]             - (RW) FRS Supported - When Set, indicates support for the optional Function Readiness Status (FRS) capability.
                                     Must be Set for all Functions that support generation or reception capabilities of FRS Messages.
                                     Must not be Set by Switch Functions that do not generate FRS Messages on their own behalf.
    DEV2_RSVD2[31..25]           - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD2_ADDR            PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD2_MASK            0xFE000000u                // DEV2_RSVD2[31..25]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD2_SHFT            25u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_FRS_SUP_ADDR          PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_FRS_SUP_MASK          0x01000000u                // DEV2_FRS_SUP[24]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_FRS_SUP_SHFT          24u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_MAX_ADDR        PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_MAX_MASK        0x00C00000u                // DEV2_EEPFX_MAX[23..22]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_MAX_SHFT        22u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_SUP_ADDR        PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_SUP_MASK        0x00200000u                // DEV2_EEPFX_SUP[21]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_SUP_SHFT        21u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DISABLE_IDO_ADDR      PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DISABLE_IDO_MASK      0x00100000u                // DEV2_DISABLE_IDO[20]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DISABLE_IDO_SHFT      20u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_OBFF_ADDR             PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_OBFF_MASK             0x000C0000u                // DEV2_OBFF[19..18]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_OBFF_SHFT             18u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_REQ_SUP_ADDR   PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_REQ_SUP_MASK   0x00020000u                // DEV_10B_TAG_REQ_SUP[17]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_REQ_SUP_SHFT   17u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_CPL_SUP_ADDR   PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_CPL_SUP_MASK   0x00010000u                // DEV_10B_TAG_CPL_SUP[16]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_CPL_SUP_SHFT   16u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD1_MASK            0x00008000u                // DEV2_RSVD1[15]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD1_SHFT            15u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DSN_SUP_ADDR          PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DSN_SUP_MASK          0x00004000u                // DEV2_DSN_SUP[14]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DSN_SUP_SHFT          14u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_TPH_Completer_Supported_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_TPH_Completer_Supported_MASK 0x00003000u                // TPH_Completer_Supported[13..12]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_TPH_Completer_Supported_SHFT 12u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LTR_support_ADDR           PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LTR_support_MASK           0x00000800u                // LTR_support[11]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LTR_support_SHFT           11u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_No_RO_enabled_PR_PR_Passing_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_No_RO_enabled_PR_PR_Passing_MASK 0x00000400u                // No_RO_enabled_PR_PR_Passing[10]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_No_RO_enabled_PR_PR_Passing_SHFT 10u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_CAS_128b_Completer_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_CAS_128b_Completer_Support_MASK 0x00000200u                // CAS_128b_Completer_Support[9]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_CAS_128b_Completer_Support_SHFT 9u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_64b_Completer_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_64b_Completer_Support_MASK 0x00000100u                // AtomicOp_64b_Completer_Support[8]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_64b_Completer_Support_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_32b_Completer_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_32b_Completer_Support_MASK 0x00000080u                // AtomicOp_32b_Completer_Support[7]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_32b_Completer_Support_SHFT 7u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_Routing_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_Routing_Support_MASK 0x00000040u                // AtomicOp_Routing_Support[6]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_Routing_Support_SHFT 6u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ARI_Forwarding_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ARI_Forwarding_Support_MASK 0x00000020u                // ARI_Forwarding_Support[5]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ARI_Forwarding_Support_SHFT 5u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_Dis_ADDR       PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_Dis_MASK       0x00000010u                // Cpl_Timeout_Dis[4]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_Dis_SHFT       4u
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_ADDR           PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_MASK           0x0000000Fu                // Cpl_Timeout[3..0]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_SHFT           0u

/* =====================================================================================

  ---PCIE_PEX_LINK (0x74040000 + 00C8hu)---

    Low_SKP_Gen[3..0]            - (RW) Lower SKP OS Generation Supported Speeds Vector
                                     If this field is non-zero, it indicates that the Port, when operating at the indicated speed(s) supports SRIS and also supports software control of the SKP Ordered Set transmission scheduling rate.
                                     Bit definitions within this field are:
                                     0 : 2.5 GT/s
                                     1 : 5.0 GT/s
                                     2 : 8.0 GT/s
                                     3 : 16.0 GT/s
    Low_SKP_Rcp[7..4]            - (RW) Lower SKP OS Reception Supported Speeds Vector
                                     If this field is non-zero, it indicates that the Port, when operating at the indicated speed(s) supports SRIS and also supports receiving SKP OS at the rate defined for SRNS while running in SRIS
                                     Bit definitions within this field are:
                                     0 : 2.5 GT/s
                                     1 : 5.0 GT/s
                                     2 : 8.0 GT/s
                                     3 : 16.0 GT/s
    LINK2_RETIMER_DET[8]         - (RW) Retimer Presence Detect Supported
                                     When set to 1b, this bit indicates that the associated Port supports detection and reporting of Retimer presence.
    LINK2_CROSSLINK[9]           - (RW) Crosslink Supported
                                     When set to 1b, this bit indicates that the associated Port supports crosslinks.
    ASPM_support[11..10]         - (RW) ASPM Support
                                     Backdoor access to PCIe Capability structure(+0Ch)[11:10]
                                     - 00b: No ASPM Support
                                     - 01b: L0s Supported
                                     - 10b: L1 Supported
                                     - 11b: L0s and L1 Supported
    L0s_exit_latency[14..12]     - (RW) L0s Exit Latency
                                     Backdoor access to PCIe Capability structure(+0Ch)[14:12]
                                     - 000b: Less than 64ns
                                     - 001b: 64ns to less than 128ns
                                     - 010b: 128ns to less than 256ns
                                     - 011b: 256ns to less than 512ns
                                     - 100b: 512ns to less than 1us
                                     - 101b: 1us to less than 2us
                                     - 110b: 2us to less than 4us
                                     - 111b: More than 4us
    L1_exit_latency[17..15]      - (RW) L1 Exit Latency
                                     Backdoor access to PCIe Capability structure(+0Ch)[17:15]
                                     - 000b: Less than 1us
                                     - 001b: 1us to less than 2us
                                     - 010b: 2us to less than 4us
                                     - 011b: 4us to less than 8us
                                     - 100b: 8us to less than 16us
                                     - 101b: 16us to less than 32us
                                     - 110b: 32us to less than 64us
                                     - 111b: More than 64us
    CLK_PWR_SUPPORT[18]          - (RW) Clock Power Management
                                     -0b: indicates that the component does not support L1P2 and that reference clock(s) must not be removed in these Link states
                                     -1b: indicates that the component support L1P2
                                     L1 PM Substates defines other semantics for the CLKREQ# signal, which are managed independently of Clock Power Management.
    DL_Surprise_down_report[19]  - (RW) Surprise Down Error Reporting Capable
                                     Backdoor access to PCIe Capability structure(+0Ch)[19]
    DL_act_report[20]            - (RW) DLL Active Reporting Capable Support
                                     Backdoor access to PCIe Capability structure(+0Ch)[20]
    Drs_supported[21]            - (RW) DRS Support
                                     Backdoor access to PCIe Capability structure(+0ACh)[31]
    RSVD2[23..22]                - (RW) Reserved
    PortNumber[31..24]           - (RW) Port Number
                                     Backdoor access to PCIe Capability structure(+0Ch)[31:24]

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_LINK_PortNumber_ADDR            PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_PortNumber_MASK            0xFF000000u                // PortNumber[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_PortNumber_SHFT            24u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_RSVD2_MASK                 0x00C00000u                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_RSVD2_SHFT                 22u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Drs_supported_ADDR         PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Drs_supported_MASK         0x00200000u                // Drs_supported[21]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Drs_supported_SHFT         21u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_act_report_ADDR         PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_act_report_MASK         0x00100000u                // DL_act_report[20]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_act_report_SHFT         20u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_Surprise_down_report_ADDR PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_Surprise_down_report_MASK 0x00080000u                // DL_Surprise_down_report[19]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_Surprise_down_report_SHFT 19u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_CLK_PWR_SUPPORT_ADDR       PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_CLK_PWR_SUPPORT_MASK       0x00040000u                // CLK_PWR_SUPPORT[18]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_CLK_PWR_SUPPORT_SHFT       18u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L1_exit_latency_ADDR       PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L1_exit_latency_MASK       0x00038000u                // L1_exit_latency[17..15]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L1_exit_latency_SHFT       15u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L0s_exit_latency_ADDR      PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L0s_exit_latency_MASK      0x00007000u                // L0s_exit_latency[14..12]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L0s_exit_latency_SHFT      12u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ASPM_support_ADDR          PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ASPM_support_MASK          0x00000C00u                // ASPM_support[11..10]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ASPM_support_SHFT          10u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_CROSSLINK_ADDR       PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_CROSSLINK_MASK       0x00000200u                // LINK2_CROSSLINK[9]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_CROSSLINK_SHFT       9u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_RETIMER_DET_ADDR     PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_RETIMER_DET_MASK     0x00000100u                // LINK2_RETIMER_DET[8]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_RETIMER_DET_SHFT     8u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Rcp_ADDR           PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Rcp_MASK           0x000000F0u                // Low_SKP_Rcp[7..4]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Rcp_SHFT           4u
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Gen_ADDR           PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Gen_MASK           0x0000000Fu                // Low_SKP_Gen[3..0]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Gen_SHFT           0u

/* =====================================================================================

  ---PCIE_PEX_SLOT (0x74040000 + 00CChu)---

    Attention_button_present[0]  - (RW) Attention button present
    Pwr_ctrl_present[1]          - (RW) Power controller present
    MRL_sensor_present[2]        - (RW) MRL sensor present
    Attention_indicator_present[3] - (RW) Attention indicator present
    Pwr_indicator_present[4]     - (RW) Power indicator present
    Hot_plug_surprise[5]         - (RW) Hot-plug surprise
    Hot_plug_capable[6]          - (RW) Hot-plug capable
    Slot_pwr_limit_val[14..7]    - (RW) Slot power limit value
    Slot_pwr_limit_scale[16..15] - (RW) Slot power limit scale
    Electromechanical_interlock_present[17] - (RW) Electromechanical interlock present
    No_command_complete_support[18] - (RW) No command complete support
    Physical_slot_num[31..19]    - (RW) Physical slot number

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Physical_slot_num_ADDR     PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Physical_slot_num_MASK     0xFFF80000u                // Physical_slot_num[31..19]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Physical_slot_num_SHFT     19u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_No_command_complete_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_No_command_complete_support_MASK 0x00040000u                // No_command_complete_support[18]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_No_command_complete_support_SHFT 18u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Electromechanical_interlock_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Electromechanical_interlock_present_MASK 0x00020000u                // Electromechanical_interlock_present[17]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Electromechanical_interlock_present_SHFT 17u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_scale_ADDR  PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_scale_MASK  0x00018000u                // Slot_pwr_limit_scale[16..15]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_scale_SHFT  15u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_val_ADDR    PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_val_MASK    0x00007F80u                // Slot_pwr_limit_val[14..7]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_val_SHFT    7u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_capable_ADDR      PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_capable_MASK      0x00000040u                // Hot_plug_capable[6]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_capable_SHFT      6u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_surprise_ADDR     PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_surprise_MASK     0x00000020u                // Hot_plug_surprise[5]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_surprise_SHFT     5u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_indicator_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_indicator_present_MASK 0x00000010u                // Pwr_indicator_present[4]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_indicator_present_SHFT 4u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_indicator_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_indicator_present_MASK 0x00000008u                // Attention_indicator_present[3]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_indicator_present_SHFT 3u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_MRL_sensor_present_ADDR    PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_MRL_sensor_present_MASK    0x00000004u                // MRL_sensor_present[2]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_MRL_sensor_present_SHFT    2u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_ctrl_present_ADDR      PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_ctrl_present_MASK      0x00000002u                // Pwr_ctrl_present[1]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_ctrl_present_SHFT      1u
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_button_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_button_present_MASK 0x00000001u                // Attention_button_present[0]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_button_present_SHFT 0u

/* =====================================================================================

  ---PCIE_PEX_ROOT_VC (0x74040000 + 00D0hu)---

    RP_CRS_SUP[0]                - (RW) When Set, this bit indicates that the Root Port is capable of returning Configuration Request Retry Status (CRS) Completion Status to software
    FRS_QUEUE_IMPL[1]            - (RO) FRS Queue impliment
    FRS_INT_MSG_NUM[6..2]        - (RW) FRS interrupt message number
                                     Backdoor access to PCIe Capability structure(+254h)[20:16]
    RP_EEPFX_FORWARD[7]          - (RO) Rootport supports forwarding of End-End TLP prefixes.
                                     0 : No support
                                     1 : Support
    RP_BUS_NUM[15..8]            - (RO) Bus number for BFM mode
    ACS_V[16]                    - (RW) ACS Source Validation supported
                                     0 : No support
                                     1 : Support
    ACS_B[17]                    - (RW) ACS Translation Blocking supported
                                     0 : No support
                                     1 : Support
    ACS_R[18]                    - (RW) ACS P2P Request Blocking supported
                                     0 : No support
                                     1 : Support
    ACS_C[19]                    - (RW) ACS P2P Completion Redirect supported
                                     0 : No support
                                     1 : Support
    ACS_U[20]                    - (RW) ACS Upstream Forwarding supported
                                     0 : No support
                                     1 : Support
    ACS_E[21]                    - (RW) ACS P2P Egress Control supported
                                     0 : No support
                                     1 : Support
    ACS_T[22]                    - (RW) ACS Direct Translated P2P supported
                                     0 : No support
                                     1 : Support
    ACS_RSVD[23]                 - (RW) reserved for ACS Capability
    ACS_VECSIZE[29..24]          - (RW) Egress Control Vector Size
                                     must be in the range 1 - 32 when ACS P2P Egress Control is supported; otherwise, value is 0.
    PTM_REQ_CAP[30]              - (RW) PTM Requester Capable
                                     Endpoints and Root Complex Integrated Endpoints are permitted to, and Switches supporting PTM must, set this bit to 1b to indicate they implement the PTM Requester role.
    PTM_RESP_CAP[31]             - (RO) PTM Responder Capable
                                     Root Ports and RCRB's are permitted to, and Switches supporting PTM must, set this bit to 1b to indicate they implement the PTM Responder role.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_RESP_CAP_ADDR       PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_RESP_CAP_MASK       0x80000000u                // PTM_RESP_CAP[31]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_RESP_CAP_SHFT       31u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_REQ_CAP_ADDR        PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_REQ_CAP_MASK        0x40000000u                // PTM_REQ_CAP[30]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_REQ_CAP_SHFT        30u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_VECSIZE_ADDR        PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_VECSIZE_MASK        0x3F000000u                // ACS_VECSIZE[29..24]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_VECSIZE_SHFT        24u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_RSVD_ADDR           PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_RSVD_MASK           0x00800000u                // ACS_RSVD[23]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_RSVD_SHFT           23u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_T_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_T_MASK              0x00400000u                // ACS_T[22]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_T_SHFT              22u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_E_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_E_MASK              0x00200000u                // ACS_E[21]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_E_SHFT              21u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_U_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_U_MASK              0x00100000u                // ACS_U[20]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_U_SHFT              20u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_C_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_C_MASK              0x00080000u                // ACS_C[19]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_C_SHFT              19u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_R_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_R_MASK              0x00040000u                // ACS_R[18]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_R_SHFT              18u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_B_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_B_MASK              0x00020000u                // ACS_B[17]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_B_SHFT              17u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_V_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_V_MASK              0x00010000u                // ACS_V[16]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_V_SHFT              16u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_BUS_NUM_ADDR         PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_BUS_NUM_MASK         0x0000FF00u                // RP_BUS_NUM[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_BUS_NUM_SHFT         8u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_EEPFX_FORWARD_ADDR   PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_EEPFX_FORWARD_MASK   0x00000080u                // RP_EEPFX_FORWARD[7]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_EEPFX_FORWARD_SHFT   7u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_FRS_INT_MSG_NUM_ADDR    PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_FRS_INT_MSG_NUM_MASK    0x0000007Cu                // FRS_INT_MSG_NUM[6..2]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_FRS_INT_MSG_NUM_SHFT    2u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_FRS_QUEUE_IMPL_ADDR     PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_FRS_QUEUE_IMPL_MASK     0x00000002u                // FRS_QUEUE_IMPL[1]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_FRS_QUEUE_IMPL_SHFT     1u
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_CRS_SUP_ADDR         PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_CRS_SUP_MASK         0x00000001u                // RP_CRS_SUP[0]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_CRS_SUP_SHFT         0u

/* =====================================================================================

  ---PCIE_PEX_SPC (0x74040000 + 00D4hu)---

    PTM_ROOT_CAP[0]              - (RW) PTM Root Capable
                                     Root Ports, RCRB's and Switches are permitted to set this bit to 1b, if they implement a PTM Time Source Role and are capable of serving as the PTM Root.
    PTM_EPTM_CAP[1]              - (RW) PTM ePTM Capable
                                     If Set, indicates that this device supports Enhanced Precision Time Management (ePTM).
                                     It is strongly recommended that this bit be Set in all PTM Devices.
    PTM_LOC_CLK_GRAN[9..2]       - (RW) Local Clock Granularity
                                     0000 0000b - Time Source does not implement a local clock. It simply propagates timing information obtained from further Upstream in the PTM Hierarchy when responding to PTM Request messages.
                                     0000 0001b - 1111 1110b: Indicates the period of this Time Source's local clock in ns.
                                     1111 1111b: Indicates the period of this Time Source's local clock is greater than 254 ns.
                                     If the PTM Root Select bit is Set, this local clock is used to provide PTM Master Time. 
                                     Otherwise, the Time Source uses this local clock to locally track PTM Master Time received from further Upstream within a PTM Hierarchy.
                                     This field is reserved for Functions that do not implement the PTM Time Source role.
    Vendor_defined_eepfx_support[10] - (RW) Vendor Defined End-End Prefix Supported
                                     1'b1: support vendor defined end-end prefix
                                     1'b0: not support vendor defined end-end prefix， UR will response if occurred a TLP with vendfor defined end-end prefix
    PTM_propation_delay_adaptation_CAP[11] - (RW) PTM Propagation Delay Adaptation Capable - When Set, this field indicates the Port supports the PTM Propagation Delay Adaptation Capability, controlled via the PTM Propagation Delay Adaptation Interpretation B bit in the Link Control register.
                                     For a Switch, when Set in the Upstream Port of the Switch, indicates that the Upstream Port and all Downstream Ports of the Switch support the PTM Propagation Delay Adaptation Capability, controlled per Port via the PTM Propagation Delay Adaptation Interpretation B bit in the Link Control register of each Port.
    Slot_Register_Implemented[12] - (RW) Slot Register Implemented
                                     Backdoor access to PCIe Capability structure(+00h)[24]
    Slot_clock_configuration[13] - (RW) Slot Clock Configuration
                                     0: Independent
                                     1: Using reference clock
    Link_de_emphasis[14]         - (RW) Link Selectable De-emphasis
                                     Backdoor access to PCIe  Capability structure(+10h)[6]
                                     1: -3.5 dB
                                     0: -6 dB
    RP_RCB[15]                   - (RW) Rootport RCB
                                     Backdoor access to PCIe Capability structure(+10h)[3]
    RP_DEV_NUM[20..16]           - (RW) Rootport Device Number
                                     Device Number for Rootport
    RESERVED21[30..21]           - (RO) Reserved bits
    AER_Implemented[31]          - (RW) AER Implemented
                                     0: AER NOT Implemented
                                     1: AER Implemented

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_SPC_AER_Implemented_ADDR        PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_AER_Implemented_MASK        0x80000000u                // AER_Implemented[31]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_AER_Implemented_SHFT        31u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_DEV_NUM_ADDR             PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_DEV_NUM_MASK             0x001F0000u                // RP_DEV_NUM[20..16]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_DEV_NUM_SHFT             16u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_RCB_ADDR                 PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_RCB_MASK                 0x00008000u                // RP_RCB[15]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_RCB_SHFT                 15u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Link_de_emphasis_ADDR       PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Link_de_emphasis_MASK       0x00004000u                // Link_de_emphasis[14]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Link_de_emphasis_SHFT       14u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_clock_configuration_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_clock_configuration_MASK 0x00002000u                // Slot_clock_configuration[13]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_clock_configuration_SHFT 13u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_Register_Implemented_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_Register_Implemented_MASK 0x00001000u                // Slot_Register_Implemented[12]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_Register_Implemented_SHFT 12u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_propation_delay_adaptation_CAP_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_propation_delay_adaptation_CAP_MASK 0x00000800u                // PTM_propation_delay_adaptation_CAP[11]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_propation_delay_adaptation_CAP_SHFT 11u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Vendor_defined_eepfx_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Vendor_defined_eepfx_support_MASK 0x00000400u                // Vendor_defined_eepfx_support[10]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Vendor_defined_eepfx_support_SHFT 10u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_LOC_CLK_GRAN_ADDR       PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_LOC_CLK_GRAN_MASK       0x000003FCu                // PTM_LOC_CLK_GRAN[9..2]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_LOC_CLK_GRAN_SHFT       2u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_EPTM_CAP_ADDR           PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_EPTM_CAP_MASK           0x00000002u                // PTM_EPTM_CAP[1]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_EPTM_CAP_SHFT           1u
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_ROOT_CAP_ADDR           PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_ROOT_CAP_MASK           0x00000001u                // PTM_ROOT_CAP[0]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_PTM_ROOT_CAP_SHFT           0u

/* =====================================================================================

  ---PCIE_PEX_SPC2 (0x74040000 + 00D8hu)---

    AER_comp_log_support[0]      - (RW) 0: AER_CAP_COMP_LOG NOT supported
                                     1: AER_CAP_COMP_LOG supported
    ECRC_generation_support[1]   - (RW) 0: ECRC generation NOT supported
                                     1: ECRC generation supported
    ECRC_checking_support[2]     - (RW) 0: ECRC checking NOT supported
                                     1: ECRC checking supported
    AER_MSI_msg_num[7..3]        - (RW) AER MSI message number
                                     This register indicates which MSI vector is used for the interrupt message generated in association with any of the status bits of this Capability.
                                     For MSI, the value in this register indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    PCIE_MSI_msg_num[12..8]      - (RW) PCI Express MSI message number
                                     This field indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.
                                     For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    RSVD2[15..13]                - (RO) Reserved
    ASPM_L0s_entry_delay[23..16] - (RW) ASPM L0s Entry Delay.
                                     This field indicated the L0s entry latency for the given PCIe Link (in step of 256ns)
    ASPM_L1_entry_delay[31..24]  - (RW) ASPM L1 Entry Delay.
                                     For Upstream Port only.
                                     This field indicated the L1 entry latency for the given PCIe Link  (in step of 256ns)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L1_entry_delay_ADDR   PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L1_entry_delay_MASK   0xFF000000u                // ASPM_L1_entry_delay[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L1_entry_delay_SHFT   24u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L0s_entry_delay_ADDR  PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L0s_entry_delay_MASK  0x00FF0000u                // ASPM_L0s_entry_delay[23..16]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L0s_entry_delay_SHFT  16u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD2_MASK                 0x0000E000u                // RSVD2[15..13]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD2_SHFT                 13u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_PCIE_MSI_msg_num_ADDR      PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_PCIE_MSI_msg_num_MASK      0x00001F00u                // PCIE_MSI_msg_num[12..8]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_PCIE_MSI_msg_num_SHFT      8u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_MSI_msg_num_ADDR       PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_MSI_msg_num_MASK       0x000000F8u                // AER_MSI_msg_num[7..3]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_MSI_msg_num_SHFT       3u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_checking_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_checking_support_MASK 0x00000004u                // ECRC_checking_support[2]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_checking_support_SHFT 2u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_generation_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_generation_support_MASK 0x00000002u                // ECRC_generation_support[1]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_generation_support_SHFT 1u
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_comp_log_support_ADDR  PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_comp_log_support_MASK  0x00000001u                // AER_comp_log_support[0]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_comp_log_support_SHFT  0u

/* =====================================================================================

  ---PCIE_PEX_NFTS (0x74040000 + 00DChu)---

    Gen1_FTS[7..0]               - (RW) Gen1 FTS
                                     Number of FTS at 2.5G
    Gen2_FTS[15..8]              - (RW) Gen2 FTS
                                     Number of FTS at 5G
    Gen3_FTS[23..16]             - (RW) Gen3 FTS
                                     Number of FTS at 8G
    Gen4_FTS[31..24]             - (RW) Gen4 FTS
                                     Number of FTS at 16G

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen4_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen4_FTS_MASK              0xFF000000u                // Gen4_FTS[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen4_FTS_SHFT              24u
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen3_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen3_FTS_MASK              0x00FF0000u                // Gen3_FTS[23..16]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen3_FTS_SHFT              16u
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen2_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen2_FTS_MASK              0x0000FF00u                // Gen2_FTS[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen2_FTS_SHFT              8u
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen1_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen1_FTS_MASK              0x000000FFu                // Gen1_FTS[7..0]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen1_FTS_SHFT              0u

/* =====================================================================================

  ---PCIE_PEX_L1SS (0x74040000 + 00E0hu)---

    PCI_PM_L12_supported[0]      - (RW) PCI-PM L1.2 supported
    PCI_PM_L11_supported[1]      - (RW) PCI-PM L1.1 supported
    ASPM_L12_supported[2]        - (RW) ASPM L1.2 supported
    ASPM_L11_supported[3]        - (RW) ASPM L1.1 supported
    L1SS_supported[4]            - (RW) L1 PM substates supported (the L1 PM substates capability is only implemented if this bit is set)
    T_POWEROFF_val[7..5]         - (RW) T_POWEROFF value in units of 256ns (000 = 256ns, 110 = 7*256ns)
    Port_common_mode_restore_time[15..8] - (RW) Port common mode restore time
    Port_T_POWER_ON_cale[17..16] - (RW) Port T_POWER_ON scale
    RSVD1[18]                    - (RO) Reserved
    Port_T_POWER_ON_val[23..19]  - (RW) Port T_POWER_ON value
    RSVD2[31..24]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD2_MASK                 0xFF000000u                // RSVD2[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD2_SHFT                 24u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_val_ADDR   PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_val_MASK   0x00F80000u                // Port_T_POWER_ON_val[23..19]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_val_SHFT   19u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD1_ADDR                 PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD1_MASK                 0x00040000u                // RSVD1[18]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD1_SHFT                 18u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_cale_ADDR  PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_cale_MASK  0x00030000u                // Port_T_POWER_ON_cale[17..16]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_cale_SHFT  16u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_common_mode_restore_time_ADDR PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_common_mode_restore_time_MASK 0x0000FF00u                // Port_common_mode_restore_time[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_common_mode_restore_time_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_T_POWEROFF_val_ADDR        PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_T_POWEROFF_val_MASK        0x000000E0u                // T_POWEROFF_val[7..5]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_T_POWEROFF_val_SHFT        5u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_L1SS_supported_ADDR        PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_L1SS_supported_MASK        0x00000010u                // L1SS_supported[4]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_L1SS_supported_SHFT        4u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L11_supported_ADDR    PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L11_supported_MASK    0x00000008u                // ASPM_L11_supported[3]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L11_supported_SHFT    3u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L12_supported_ADDR    PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L12_supported_MASK    0x00000004u                // ASPM_L12_supported[2]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L12_supported_SHFT    2u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L11_supported_ADDR  PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L11_supported_MASK  0x00000002u                // PCI_PM_L11_supported[1]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L11_supported_SHFT  1u
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L12_supported_ADDR  PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L12_supported_MASK  0x00000001u                // PCI_PM_L12_supported[0]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L12_supported_SHFT  0u

/* =====================================================================================

  ---PCIE_BAR_01_0_0 (0x74040000 + 00E4hu)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_01_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_01_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_01_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_0_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_01_1_0 (0x74040000 + 00E8hu)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 1 has same settings as BAR 0's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 0 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_1_0_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_01_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_1_0_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_01_1_0_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_23_0_0 (0x74040000 + 00EChu)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_23_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_23_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_23_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_0_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_23_1_0 (0x74040000 + 00F0hu)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 3 has same settings as BAR 2's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 2 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_1_0_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_23_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_1_0_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_23_1_0_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_45_0_0 (0x74040000 + 00F4hu)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_45_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_45_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_45_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_0_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_45_1_0 (0x74040000 + 00F8hu)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 5 has same settings as BAR 4's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 4 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_1_0_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_45_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_1_0_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_45_1_0_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_WIN_0 (0x74040000 + 00FChu)---

    IOWIN_IMPL[0]                - (RO) IO Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+1Ch)[15:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    IOWIN_32B[1]                 - (RO) IO Window 32-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+30h)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    PFWIN_IMPL[2]                - (RO) Prefetchable Memory Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+24h)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    PFWIN_64B[3]                 - (RO) Prefetchable Memory Window 64-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+28h)[31:0] & PCIe Configuration Space Header(+2C)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    RSVD1[10..4]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    EXP_ROM_SIZE[31..11]         - (RO) Reserved for Expansion ROM size mask
                                     Only for EP mode.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_EXP_ROM_SIZE_ADDR         PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_EXP_ROM_SIZE_MASK         0xFFFFF800u                // EXP_ROM_SIZE[31..11]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_EXP_ROM_SIZE_SHFT         11u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_RSVD1_MASK                0x000007F0u                // RSVD1[10..4]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_RSVD1_SHFT                4u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_PFWIN_64B_ADDR            PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_PFWIN_64B_MASK            0x00000008u                // PFWIN_64B[3]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_PFWIN_64B_SHFT            3u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_PFWIN_IMPL_ADDR           PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_PFWIN_IMPL_MASK           0x00000004u                // PFWIN_IMPL[2]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_PFWIN_IMPL_SHFT           2u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_IOWIN_32B_ADDR            PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_IOWIN_32B_MASK            0x00000002u                // IOWIN_32B[1]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_IOWIN_32B_SHFT            1u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_IOWIN_IMPL_ADDR           PCIE_MAC_IREG_PCIE_BAR_WIN_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_IOWIN_IMPL_MASK           0x00000001u                // IOWIN_IMPL[0]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_0_IOWIN_IMPL_SHFT           0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_0_1 (0x74040000 + 0100hu)---

    val_ln0_dn[6..0]             - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln0_up[14..8]            - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln1_dn[22..16]           - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln1_up[30..24]           - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD3_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD3_MASK            0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD3_SHFT            31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_up_MASK       0x7F000000u                // val_ln1_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_up_SHFT       24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD2_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD2_SHFT            23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_dn_MASK       0x007F0000u                // val_ln1_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_dn_SHFT       16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD1_MASK            0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD1_SHFT            15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_up_MASK       0x00007F00u                // val_ln0_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_up_SHFT       8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD_ADDR             PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD_MASK             0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_RSVD_SHFT             7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_dn_MASK       0x0000007Fu                // val_ln0_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_dn_SHFT       0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_2_3 (0x74040000 + 0104hu)---

    val_ln2_dn[6..0]             - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln2_up[14..8]            - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln3_dn[22..16]           - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln3_up[30..24]           - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD3_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD3_MASK            0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD3_SHFT            31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_up_MASK       0x7F000000u                // val_ln3_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_up_SHFT       24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD2_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD2_SHFT            23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_dn_MASK       0x007F0000u                // val_ln3_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_dn_SHFT       16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD1_MASK            0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD1_SHFT            15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_up_MASK       0x00007F00u                // val_ln2_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_up_SHFT       8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD_ADDR             PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD_MASK             0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_RSVD_SHFT             7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_dn_MASK       0x0000007Fu                // val_ln2_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_dn_SHFT       0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_4_5 (0x74040000 + 0108hu)---

    val_ln4_dn[6..0]             - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln4_up[14..8]            - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln5_dn[22..16]           - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln5_up[30..24]           - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD3_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD3_MASK            0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD3_SHFT            31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_up_MASK       0x7F000000u                // val_ln5_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_up_SHFT       24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD2_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD2_SHFT            23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_dn_MASK       0x007F0000u                // val_ln5_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_dn_SHFT       16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD1_MASK            0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD1_SHFT            15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_up_MASK       0x00007F00u                // val_ln4_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_up_SHFT       8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD_ADDR             PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD_MASK             0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_RSVD_SHFT             7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_dn_MASK       0x0000007Fu                // val_ln4_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_dn_SHFT       0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_6_7 (0x74040000 + 010Chu)---

    val_ln6_dn[6..0]             - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln6_up[14..8]            - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln7_dn[22..16]           - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln7_up[30..24]           - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD3_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD3_MASK            0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD3_SHFT            31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_up_MASK       0x7F000000u                // val_ln7_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_up_SHFT       24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD2_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD2_SHFT            23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_dn_MASK       0x007F0000u                // val_ln7_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_dn_SHFT       16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD1_MASK            0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD1_SHFT            15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_up_MASK       0x00007F00u                // val_ln6_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_up_SHFT       8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD_ADDR             PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD_MASK             0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_RSVD_SHFT             7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_dn_MASK       0x0000007Fu                // val_ln6_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_dn_SHFT       0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_8_9 (0x74040000 + 0110hu)---

    val_ln8_dn[6..0]             - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln8_up[14..8]            - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln9_dn[22..16]           - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln9_up[30..24]           - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD3_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD3_MASK            0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD3_SHFT            31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_up_MASK       0x7F000000u                // val_ln9_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_up_SHFT       24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD2_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD2_MASK            0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD2_SHFT            23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_dn_MASK       0x007F0000u                // val_ln9_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_dn_SHFT       16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD1_MASK            0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD1_SHFT            15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_up_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_up_MASK       0x00007F00u                // val_ln8_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_up_SHFT       8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD_ADDR             PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD_MASK             0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_RSVD_SHFT             7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_dn_ADDR       PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_dn_MASK       0x0000007Fu                // val_ln8_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_dn_SHFT       0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_10_11 (0x74040000 + 0114hu)---

    val_ln10_dn[6..0]            - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln10_up[14..8]           - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln11_dn[22..16]          - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln11_up[30..24]          - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD3_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD3_MASK          0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD3_SHFT          31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln11_up_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln11_up_MASK    0x7F000000u                // val_ln11_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln11_up_SHFT    24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD2_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD2_MASK          0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD2_SHFT          23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln11_dn_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln11_dn_MASK    0x007F0000u                // val_ln11_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln11_dn_SHFT    16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD1_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD1_MASK          0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD1_SHFT          15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln10_up_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln10_up_MASK    0x00007F00u                // val_ln10_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln10_up_SHFT    8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD_ADDR           PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD_MASK           0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_RSVD_SHFT           7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln10_dn_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln10_dn_MASK    0x0000007Fu                // val_ln10_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_ln10_dn_SHFT    0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_12_13 (0x74040000 + 0118hu)---

    val_ln12_dn[6..0]            - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln12_up[14..8]           - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln13_dn[22..16]          - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln13_up[30..24]          - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD3_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD3_MASK          0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD3_SHFT          31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln13_up_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln13_up_MASK    0x7F000000u                // val_ln13_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln13_up_SHFT    24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD2_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD2_MASK          0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD2_SHFT          23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln13_dn_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln13_dn_MASK    0x007F0000u                // val_ln13_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln13_dn_SHFT    16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD1_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD1_MASK          0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD1_SHFT          15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln12_up_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln12_up_MASK    0x00007F00u                // val_ln12_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln12_up_SHFT    8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD_ADDR           PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD_MASK           0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_RSVD_SHFT           7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln12_dn_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln12_dn_MASK    0x0000007Fu                // val_ln12_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_ln12_dn_SHFT    0u

/* =====================================================================================

  ---PCIE_EQ_PRESET_14_15 (0x74040000 + 011Chu)---

    val_ln14_dn[6..0]            - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD[7]                      - (RO) Reserved
    val_ln14_up[14..8]           - (RW) Per lane value are described below
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD1[15]                    - (RO) Reserved
    val_ln15_dn[22..16]          - (RW) Per lane value are described below
                                     Bit [19:16]: Downstream port transmitter preset
                                     Bit [22:20]: Downstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD2[23]                    - (RO) Reserved
    val_ln15_up[30..24]          - (RW) Per lane value are described below
                                     Bit [27:24]: Upstream port transmitter preset
                                     Bit [30:28]: Upstream port receiver preset hint
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
    RSVD3[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD3_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD3_MASK          0x80000000u                // RSVD3[31]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD3_SHFT          31u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln15_up_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln15_up_MASK    0x7F000000u                // val_ln15_up[30..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln15_up_SHFT    24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD2_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD2_MASK          0x00800000u                // RSVD2[23]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD2_SHFT          23u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln15_dn_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln15_dn_MASK    0x007F0000u                // val_ln15_dn[22..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln15_dn_SHFT    16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD1_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD1_MASK          0x00008000u                // RSVD1[15]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD1_SHFT          15u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln14_up_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln14_up_MASK    0x00007F00u                // val_ln14_up[14..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln14_up_SHFT    8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD_ADDR           PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD_MASK           0x00000080u                // RSVD[7]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_RSVD_SHFT           7u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln14_dn_ADDR    PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln14_dn_MASK    0x0000007Fu                // val_ln14_dn[6..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_ln14_dn_SHFT    0u

/* =====================================================================================

  ---PCIE_SRIOV_0_0 (0x74040000 + 0120hu)---

    VF_dev_ID[15..0]             - (RW) VF device ID
                                     
                                     The register is per physical function register
    VF_subsystem_dev_ID[31..16]  - (RW) VF subsystem device ID
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_VF_subsystem_dev_ID_ADDR  PCIE_MAC_IREG_PCIE_SRIOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_VF_subsystem_dev_ID_MASK  0xFFFF0000u                // VF_subsystem_dev_ID[31..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_VF_subsystem_dev_ID_SHFT  16u
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_VF_dev_ID_ADDR            PCIE_MAC_IREG_PCIE_SRIOV_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_VF_dev_ID_MASK            0x0000FFFFu                // VF_dev_ID[15..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_0_VF_dev_ID_SHFT            0u

/* =====================================================================================

  ---PCIE_SRIOV_1_0 (0x74040000 + 0124hu)---

    page_sizes_supported[11..0]  - (RW) Supported page sizes (Mandatory page sizes are always supported regardless of the values specified here.)
                                     
                                     The register is per physical function register
    RSVD0[13..12]                - (RW) reserved
                                     
                                     The register is per physical function register
    VF_10B_TAG[14]               - (RW) VF 10-bit tag requester supported
    APP_SPEC_EXT_CAP_IMPL[15]    - (RW) Application-specific extended capabilities implementation:
                                     0: application-specific extended capability is not implemented
                                     1: application-specific extended capabilities are implemented, and the first capability is located at offset 800h of the Configuration Space.
                                     
                                     The register is per physical function register
    FUNC_DEPENDENCY[23..16]      - (RW) Function dependency (This value must be equal to the function ID if there is no dependency.)
                                     
                                     The register is per physical function register
    APP_SPEC_CAP_IMPL[31..24]    - (RW) Application-specific capabilities implementation:
                                     00h: application-specific capability is not implemented.
                                     40-7Ch: application-specific capabilities are implemented, and the value set here indicates the offset of the first capability in the Configuration Space.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_APP_SPEC_CAP_IMPL_ADDR    PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_APP_SPEC_CAP_IMPL_MASK    0xFF000000u                // APP_SPEC_CAP_IMPL[31..24]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_APP_SPEC_CAP_IMPL_SHFT    24u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_FUNC_DEPENDENCY_ADDR      PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_FUNC_DEPENDENCY_MASK      0x00FF0000u                // FUNC_DEPENDENCY[23..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_FUNC_DEPENDENCY_SHFT      16u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_APP_SPEC_EXT_CAP_IMPL_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_APP_SPEC_EXT_CAP_IMPL_MASK 0x00008000u                // APP_SPEC_EXT_CAP_IMPL[15]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_APP_SPEC_EXT_CAP_IMPL_SHFT 15u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_VF_10B_TAG_ADDR           PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_VF_10B_TAG_MASK           0x00004000u                // VF_10B_TAG[14]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_VF_10B_TAG_SHFT           14u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_RSVD0_ADDR                PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_RSVD0_MASK                0x00003000u                // RSVD0[13..12]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_RSVD0_SHFT                12u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_page_sizes_supported_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_page_sizes_supported_MASK 0x00000FFFu                // page_sizes_supported[11..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_0_page_sizes_supported_SHFT 0u

/* =====================================================================================

  ---PCIE_SRIOV_2_0 (0x74040000 + 0128hu)---

    VF_BAR0[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_2_0_VF_BAR0_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_2_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_2_0_VF_BAR0_MASK              0xFFFFFFFFu                // VF_BAR0[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_2_0_VF_BAR0_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_3_0 (0x74040000 + 012Chu)---

    VF_BAR1[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_3_0_VF_BAR1_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_3_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_3_0_VF_BAR1_MASK              0xFFFFFFFFu                // VF_BAR1[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_3_0_VF_BAR1_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_4_0 (0x74040000 + 0130hu)---

    VF_BAR2[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_4_0_VF_BAR2_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_4_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_4_0_VF_BAR2_MASK              0xFFFFFFFFu                // VF_BAR2[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_4_0_VF_BAR2_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_5_0 (0x74040000 + 0134hu)---

    VF_BAR3[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_5_0_VF_BAR3_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_5_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_5_0_VF_BAR3_MASK              0xFFFFFFFFu                // VF_BAR3[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_5_0_VF_BAR3_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_6_0 (0x74040000 + 0138hu)---

    VF_BAR4[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_6_0_VF_BAR4_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_6_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_6_0_VF_BAR4_MASK              0xFFFFFFFFu                // VF_BAR4[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_6_0_VF_BAR4_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_7_0 (0x74040000 + 013Chu)---

    VF_BAR5[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_7_0_VF_BAR5_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_7_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_7_0_VF_BAR5_MASK              0xFFFFFFFFu                // VF_BAR5[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_7_0_VF_BAR5_SHFT              0u

/* =====================================================================================

  ---PCIE_CFGNUM (0x74040000 + 0140hu)---

    PCIE_FUNC_NO[2..0]           - (RW) Function Number
                                     Set function number in configuration TLP header
    PCIE_DEV_NO[7..3]            - (RO) Device Number
                                     Set device number in configuration TLP header
    PCIE_BUS_NO[15..8]           - (RO) Bus Number
                                     Set bus number in configuration TLP header
    PCIE_CFG_BYTE_EN[19..16]     - (RO) Configuration Byte Enable
                                     Set byte enable field in configuration TLP header
    PCIE_CFG_FORCE_BE[20]        - (RO) PCIe Configuration Force Byte Enable
                                     When asserted, the byte enable of the CFG read or write request is forced to the BYTE_EN field value, regardless of AXI strobes. 
                                     This may be required, for example, when targeting the R1C register, as there is no read strobe in the AXI protocol.
    RSVD1[23..21]                - (RO) Reserved
    PCIE_CFG_VFUNC_NO[30..24]    - (RW) For EP only.
                                     Virtual Function Number
                                     Access EP virtual function configuration space by backdoor
    RSVD2[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD2_MASK                   0x80000000u                // RSVD2[31]
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD2_SHFT                   31u
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_VFUNC_NO_ADDR       PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_VFUNC_NO_MASK       0x7F000000u                // PCIE_CFG_VFUNC_NO[30..24]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_VFUNC_NO_SHFT       24u
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD1_MASK                   0x00E00000u                // RSVD1[23..21]
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD1_SHFT                   21u
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_FORCE_BE_ADDR       PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_FORCE_BE_MASK       0x00100000u                // PCIE_CFG_FORCE_BE[20]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_FORCE_BE_SHFT       20u
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_BYTE_EN_ADDR        PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_BYTE_EN_MASK        0x000F0000u                // PCIE_CFG_BYTE_EN[19..16]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_BYTE_EN_SHFT        16u
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_BUS_NO_ADDR             PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_BUS_NO_MASK             0x0000FF00u                // PCIE_BUS_NO[15..8]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_BUS_NO_SHFT             8u
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_DEV_NO_ADDR             PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_DEV_NO_MASK             0x000000F8u                // PCIE_DEV_NO[7..3]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_DEV_NO_SHFT             3u
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_FUNC_NO_ADDR            PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_FUNC_NO_MASK            0x00000007u                // PCIE_FUNC_NO[2..0]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_FUNC_NO_SHFT            0u

/* =====================================================================================

  ---PCIE_BUSDEV (0x74040000 + 0144hu)---

    RSVD1[2..0]                  - (RO) Reserved
    PCIE_DEV_NO[7..3]            - (RO) Device Number: Reports bus and device numbers that have been assigned to the device.
    PCIE_BUS_NO[15..8]           - (RO) Bus Number: Reports bus and device numbers that have been assigned to the device.
    sw_busdev_capture_en[16]     - (RW) Enable bus number and device number capture from field SW_DEV_NO/SW_BUS_NO in this register, clear when captured done
    RSVD2[18..17]                - (RW) Reserved
    SW_DEV_NO[23..19]            - (RW) Device Number: sw config, should be equal to PCIE_DEV_NO when restore from D3 cold
    SW_BUS_NO[31..24]            - (RW) Bus Number: sw config, should be equal to  PCIE_BUS_NO when restore from D3 cold

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BUSDEV_SW_BUS_NO_ADDR               PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_SW_BUS_NO_MASK               0xFF000000u                // SW_BUS_NO[31..24]
#define PCIE_MAC_IREG_PCIE_BUSDEV_SW_BUS_NO_SHFT               24u
#define PCIE_MAC_IREG_PCIE_BUSDEV_SW_DEV_NO_ADDR               PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_SW_DEV_NO_MASK               0x00F80000u                // SW_DEV_NO[23..19]
#define PCIE_MAC_IREG_PCIE_BUSDEV_SW_DEV_NO_SHFT               19u
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD2_MASK                   0x00060000u                // RSVD2[18..17]
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD2_SHFT                   17u
#define PCIE_MAC_IREG_PCIE_BUSDEV_sw_busdev_capture_en_ADDR    PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_sw_busdev_capture_en_MASK    0x00010000u                // sw_busdev_capture_en[16]
#define PCIE_MAC_IREG_PCIE_BUSDEV_sw_busdev_capture_en_SHFT    16u
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_BUS_NO_ADDR             PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_BUS_NO_MASK             0x0000FF00u                // PCIE_BUS_NO[15..8]
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_BUS_NO_SHFT             8u
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_DEV_NO_ADDR             PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_DEV_NO_MASK             0x000000F8u                // PCIE_DEV_NO[7..3]
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_DEV_NO_SHFT             3u
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD1_MASK                   0x00000007u                // RSVD1[2..0]
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD1_SHFT                   0u

/* =====================================================================================

  ---PCIE_RST_CTRL (0x74040000 + 0148hu)---

    ResetMAC[0]                  - (RW) Reset MAC Only. (func0 only)
                                     0: Release Reset
                                     1: Reset
    ResetPHY[1]                  - (RW) Reset PHY Only. (func0 only)
                                     0: Release Reset
                                     1: Reset
    ResetBRG[2]                  - (RW) Reset Bridge Only. (func0 only)
                                     After set this bit, please wait 10ms and don't access PCIe.
                                     The bit will reset all AXI/AHB module but don't reset internal register in Bridge and clear by HW automatically.
                                     0: Release Reset
                                     1: Reset
    ResetPE[3]                   - (RW) For RC only. (func0 only)
                                     Reset on PCIe PAD signal PERST#
                                     0:  Release Reset, drive PERST# to high
                                     1: Reset, drive PERST# to low
    Dis_mprst_phyd[4]            - (RW) PERST# do not reset PCS layer (func0 only)
                                     0: PCIe PCS layer will be reset by PERST#
                                     1: PCIe PCS layer will not be reset by PERST#
    Dis_mprst_pl[5]              - (RW) PERST# do not reset PL layer (func0 only)
                                     0: PCIe physical layer will be reset by PERST#
                                     1: PCIe physical layer will not be reset by PERST#
    Dis_plrst_tl[6]              - (RW) plrst do not reset TL layer
                                     (If you want access configure space before PC bootup set 1)  (func0 only)
                                     0: Transaction layer will be reset when data link surprise down
                                     1: Transaction layer will not be reset when data link surprise down
    Dis_mprst_tl[7]              - (RW) PERST# do not reset TL layer
                                     (If you want access configure space before PC bootup set 1) (func0 only)
                                     0: transaction layer will be reset when PERST# assert
                                     1: transaction layer will not be reset when PERST# assert
    Dis_plrst_brg[8]             - (RW) plrst do not reset BRG layer (func0 only)
                                     0: bridge layer will be reset when data link surprise down
                                     1: bridge layer will not be reset when data link surprise down
    Dis_mprst_brg[9]             - (RW) PERST# rising do not reset BRG layer (func0 only)
                                     0: PCIe bridge layer will be reset at PERST# is low
                                     1: PCIe bridge layer will not be reset at PERST# is low
    Dis_mprst_reg[10]            - (RW) PERST# falling do not reset Internal register (func0 only)
                                     0: PCIe internal register will be reset at PERST# is low
                                     1: PCIe internal register will not be reset at PERST# is low
    Dis_mprst_cfg[11]            - (RW) PERST# falling do not reset configuration space (func0 only)
                                     0: PCIe configuration space will be reset at PERST# is low
                                     1: PCIe configuration space will not be reset at PERST# is low
    Dis_tl_pipe_rst_phy[12]      - (RW) When LTSSM enter Rxdetect state from other state, Transaction Layer will generate a Reset Event and the register can determine whether the Reset Event will reset PHY. (func0 only)
                                     0 : The Reset Event will generate PIPE Reset to reset PHY.
                                     1 : The Reset Event will not generate PIPE Reset to reset PHY.
    Dis_ltssm_return_to_det_mac_phy[13] - (RW) when Ltssm return to detect state. (func0 only)
                                     0: reset MAC and  PHY
                                     1: do not reset MAC and  PHY
    Dis_tl_pipe_rst_pl[14]       - (RW) tl_pipe_resetn Will Not Reset Physical Layer (func0 only)
                                     When LTSSM enter Rx.Detect state since timeout, Transaction layer will assert a "tl_pipe_resetn"
                                     0: The tl_pipe_resetn will reset Physical layer
                                     1: The tl_pipe_resetn will not reset Physical layer
    Dis_mprst_for_rc[15]         - (RW) PERST# reset RC control (func0 only)
                                     0: PERST# can reset RC itself
                                     1: PERST# can not reset RC itself
    Dis_ext_rst_brg[16]          - (RW) External Reset Control for Bridge Layer
                                     0 : external reset can reset Bridge Layer, except for internal register
                                     1 : external reset can't reset Bridge Layer
    Dis_ext_rst_axi[17]          - (RW) External Reset Control for AXI Interface
                                     0 : external reset can reset AXI Interface
                                     1 : external reset can't reset AXI Interface
    Dis_ext_rst_ahb_apb[18]      - (RW) External Reset Control for AHB/APB Interface
                                     0 : external reset can reset AHB/APB Interface
                                     1 : external reset can't reset AHB/APB Interface
    Dis_ext_rst_pcore[19]        - (RW) External Reset Control for PCIe Core
                                     0 : external reset can reset Transaction/DataLink/Physical layer, and Configuration space(EP only)
                                     1 : external reset can't reset Transaction/DataLink/Physical layer/Configuration space
    RSVD[31..20]                 - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RST_CTRL_RSVD_ADDR                  PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_RSVD_MASK                  0xFFF00000u                // RSVD[31..20]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_RSVD_SHFT                  20u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_pcore_ADDR     PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_pcore_MASK     0x00080000u                // Dis_ext_rst_pcore[19]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_pcore_SHFT     19u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_ahb_apb_ADDR   PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_ahb_apb_MASK   0x00040000u                // Dis_ext_rst_ahb_apb[18]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_ahb_apb_SHFT   18u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_axi_ADDR       PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_axi_MASK       0x00020000u                // Dis_ext_rst_axi[17]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_axi_SHFT       17u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_brg_ADDR       PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_brg_MASK       0x00010000u                // Dis_ext_rst_brg[16]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ext_rst_brg_SHFT       16u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_for_rc_ADDR      PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_for_rc_MASK      0x00008000u                // Dis_mprst_for_rc[15]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_for_rc_SHFT      15u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_pl_ADDR    PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_pl_MASK    0x00004000u                // Dis_tl_pipe_rst_pl[14]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_pl_SHFT    14u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ltssm_return_to_det_mac_phy_ADDR PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ltssm_return_to_det_mac_phy_MASK 0x00002000u                // Dis_ltssm_return_to_det_mac_phy[13]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ltssm_return_to_det_mac_phy_SHFT 13u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_phy_ADDR   PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_phy_MASK   0x00001000u                // Dis_tl_pipe_rst_phy[12]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_phy_SHFT   12u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_cfg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_cfg_MASK         0x00000800u                // Dis_mprst_cfg[11]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_cfg_SHFT         11u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_reg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_reg_MASK         0x00000400u                // Dis_mprst_reg[10]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_reg_SHFT         10u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_brg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_brg_MASK         0x00000200u                // Dis_mprst_brg[9]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_brg_SHFT         9u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_brg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_brg_MASK         0x00000100u                // Dis_plrst_brg[8]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_brg_SHFT         8u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_tl_ADDR          PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_tl_MASK          0x00000080u                // Dis_mprst_tl[7]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_tl_SHFT          7u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_tl_ADDR          PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_tl_MASK          0x00000040u                // Dis_plrst_tl[6]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_tl_SHFT          6u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_pl_ADDR          PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_pl_MASK          0x00000020u                // Dis_mprst_pl[5]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_pl_SHFT          5u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_phyd_ADDR        PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_phyd_MASK        0x00000010u                // Dis_mprst_phyd[4]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_phyd_SHFT        4u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPE_ADDR               PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPE_MASK               0x00000008u                // ResetPE[3]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPE_SHFT               3u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetBRG_ADDR              PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetBRG_MASK              0x00000004u                // ResetBRG[2]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetBRG_SHFT              2u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPHY_ADDR              PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPHY_MASK              0x00000002u                // ResetPHY[1]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPHY_SHFT              1u
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetMAC_ADDR              PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetMAC_MASK              0x00000001u                // ResetMAC[0]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetMAC_SHFT              0u

/* =====================================================================================

  ---PCIE_MISC_STATUS (0x74040000 + 014Chu)---

    LTR_MSG_RECEIVED[0]          - (W1C) PCIe received LTR message, please refer to 0x1A4
                                     0: PCIe did not receive LTR message
                                     1: PCIe received LTR message
    PCIE_MSG_RECEIVED[1]         - (W1C) PCIe received other message, please refer to 0xCE0-0xCFF
                                     0: PCIe did not receive other message
                                     1: PCIe received other message
    RSVD1[15..2]                 - (RO) Reserved
    pcie_linkdown_status[16]     - (W1C) PCIe linkdown status  (func0 only)
    RSVD2[31..17]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD2_MASK              0xFFFE0000u                // RSVD2[31..17]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD2_SHFT              17u
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_pcie_linkdown_status_ADDR PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_pcie_linkdown_status_MASK 0x00010000u                // pcie_linkdown_status[16]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_pcie_linkdown_status_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD1_MASK              0x0000FFFCu                // RSVD1[15..2]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD1_SHFT              2u
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_PCIE_MSG_RECEIVED_ADDR  PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_PCIE_MSG_RECEIVED_MASK  0x00000002u                // PCIE_MSG_RECEIVED[1]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_PCIE_MSG_RECEIVED_SHFT  1u
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_LTR_MSG_RECEIVED_ADDR   PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_LTR_MSG_RECEIVED_MASK   0x00000001u                // LTR_MSG_RECEIVED[0]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_LTR_MSG_RECEIVED_SHFT   0u

/* =====================================================================================

  ---PCIE_LTSSM_STATUS (0x74040000 + 0150hu)---

    LTSSM_DETECT[0]              - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered DETECT state after power-on-reset.
                                     0: PCIe LTSSM had not entered DETECT state after power-on-reset.
    LTSSM_POLLING[1]             - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered POLLING state after power-on-reset.
                                     0: PCIe LTSSM had not entered POLLING state after power-on-reset.
    LTSSM_CONFIGURATION[2]       - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered CONFIG state after power-on-reset.
                                     0: PCIe LTSSM had not entered CONFIG state after power-on-reset.
    LTSSM_RECOVERY[3]            - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered RECOVERY state after power-on-reset.
                                     0: PCIe LTSSM had not entered RECOVERY state after power-on-reset.
    LTSSM_L0[4]                  - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L0 state after power-on-reset.
                                     0: PCIe LTSSM had not entered L0 state after power-on-reset.
    LTSSM_L0S[5]                 - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L0s state after power-on-reset.
                                     0: PCIe LTSSM had not entered L0s state after power-on-reset.
    LTSSM_L1[6]                  - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L1 state after power-on-reset.
                                     0: PCIe LTSSM had not entered L1 state after power-on-reset.
    LTSSM_L2[7]                  - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L2 state after power-on-reset.
                                     0: PCIe LTSSM had not entered L2 state after power-on-reset.
    LTSSM_DISABLE[8]             - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered DISABLE state after power-on-reset.
                                     0: PCIe LTSSM had not entered DISABLE state after power-on-reset.
    LTSSM_LOOPBACK[9]            - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered LOOPBACK state after power-on-reset.
                                     0: PCIe LTSSM had not entered LOOPBACK state after power-on-reset.
    LTSSM_HOTRESET[10]           - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered HOTRST state after power-on-reset.
                                     0: PCIe LTSSM had not entered HOTRST state after power-on-reset.
    LinkUnstable[11]             - (W1C) PCIe Link Stability Monitor
                                     1: PCIe had entered un-expected RECOVERY state after power-on-reset.
                                     0: PCIe had not entered un-expected RECOVERY state after power-on-reset.
    L1PM_L11[12]                 - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L1.1 state after power-on-reset.
                                     0: PCIe LTSSM had not entered L1.1 state after power-on-reset.
    L1PM_L12[13]                 - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L1.2 state after power-on-reset.
                                     0: PCIe LTSSM had not entered L1.2 state after power-on-reset.
    LTSSM_RECOV_LOCK[14]         - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Lock state after power-on-reset.
                                     0: PCIe LTSSM had not entered Recovery.Lock state after power-on-reset.
    LTSSM_RECOV_EQUAL[15]        - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Equalization state after power-on-reset.
                                     0: PCIe LTSSM had not entered Recovery.Equalization state after power-on-reset.
    LTSSM_RECOV_SPEED[16]        - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Speed state after power-on-reset.
                                     0: PCIe LTSSM had not entered Recovery.Speed state after power-on-reset.
    LTSSM_RECOV_CFG[17]          - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Configuration state after power-on-reset.
                                     0: PCIe LTSSM had not entered Recovery.Configuration state after power-on-reset.
    RSVD1[23..18]                - (RO) Reserved
    LTSSM_state[28..24]          - (RO) Reflect Current LTSSM state
                                     00h: detect.quiet
                                     01h: detect.active
                                     02h: polling.active
                                     03h: polling.compliance
                                     04h: polling.configuration
                                     05h: config.linkwidthstart
                                     06h: config.linkwidthaccept
                                     07h: config.lanenumwait
                                     08h: config.lanenumaccept
                                     09h: config.complete
                                     0Ah: config.idle
                                     0Bh: recovery.receiverlock
                                     0Ch: recovery.equalization
                                     0Dh: recovery.speed
                                     0Eh: recovery.receiverconfig
                                     0Fh: recovery.idle
                                     10h: L0
                                     11h: L0s
                                     12h: L1.entry
                                     13h: L1.idle
                                     14h: L2.idle
                                     15h: L2.transmitwake
                                     16h: disable
                                     17h: loopback.entry
                                     18h: loopback.active
                                     19h: loopback.exit
                                     1Ah: hotreset
    RESERVED29[31..29]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_state_ADDR       PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_state_MASK       0x1F000000u                // LTSSM_state[28..24]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_state_SHFT       24u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_RSVD1_MASK             0x00FC0000u                // RSVD1[23..18]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_RSVD1_SHFT             18u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_CFG_ADDR   PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_CFG_MASK   0x00020000u                // LTSSM_RECOV_CFG[17]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_CFG_SHFT   17u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_SPEED_ADDR PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_SPEED_MASK 0x00010000u                // LTSSM_RECOV_SPEED[16]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_SPEED_SHFT 16u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_EQUAL_ADDR PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_EQUAL_MASK 0x00008000u                // LTSSM_RECOV_EQUAL[15]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_EQUAL_SHFT 15u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_LOCK_ADDR  PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_LOCK_MASK  0x00004000u                // LTSSM_RECOV_LOCK[14]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_LOCK_SHFT  14u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L12_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L12_MASK          0x00002000u                // L1PM_L12[13]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L12_SHFT          13u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L11_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L11_MASK          0x00001000u                // L1PM_L11[12]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L11_SHFT          12u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LinkUnstable_ADDR      PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LinkUnstable_MASK      0x00000800u                // LinkUnstable[11]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LinkUnstable_SHFT      11u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_HOTRESET_ADDR    PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_HOTRESET_MASK    0x00000400u                // LTSSM_HOTRESET[10]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_HOTRESET_SHFT    10u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_LOOPBACK_ADDR    PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_LOOPBACK_MASK    0x00000200u                // LTSSM_LOOPBACK[9]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_LOOPBACK_SHFT    9u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DISABLE_ADDR     PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DISABLE_MASK     0x00000100u                // LTSSM_DISABLE[8]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DISABLE_SHFT     8u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L2_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L2_MASK          0x00000080u                // LTSSM_L2[7]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L2_SHFT          7u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L1_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L1_MASK          0x00000040u                // LTSSM_L1[6]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L1_SHFT          6u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0S_ADDR         PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0S_MASK         0x00000020u                // LTSSM_L0S[5]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0S_SHFT         5u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0_MASK          0x00000010u                // LTSSM_L0[4]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0_SHFT          4u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOVERY_ADDR    PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOVERY_MASK    0x00000008u                // LTSSM_RECOVERY[3]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOVERY_SHFT    3u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_CONFIGURATION_ADDR PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_CONFIGURATION_MASK 0x00000004u                // LTSSM_CONFIGURATION[2]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_CONFIGURATION_SHFT 2u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_POLLING_ADDR     PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_POLLING_MASK     0x00000002u                // LTSSM_POLLING[1]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_POLLING_SHFT     1u
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DETECT_ADDR      PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DETECT_MASK      0x00000001u                // LTSSM_DETECT[0]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DETECT_SHFT      0u

/* =====================================================================================

  ---PCIE_LINK_STATUS (0x74040000 + 0154hu)---

    Low_power_status[3..0]       - (RO) Low-power state machine state
                                      0h: L0_RST (Initialization state)
                                      1h: L0 (Idle state)
                                      2h: ASPM_L1_IN0 (Prepare ASPM L1 entry step 1)
                                      3h: ASPM_L1_IN1 (Prepare ASPM L1 entry step 2)
                                      4h: ASPM_L1_OUT (Exit from ASPM L1 because of NAK)
                                      5h: L1_IN0 (Prepare L1 entry step 1)
                                      6h: L1_IN1 (Prepare L1 entry step 2)
                                      7h: L1 (L1 state)
                                      8h: L0_IN (Prepare L0 entry)
                                      9h: L0_IN_WAIT (Wait for L0 entry)
                                      Ah: L2L3_IN0 (Prepare L2/L3 entry step 1)
                                      Bh: L2L3_IN1 (Prepare L2/L3 entry step 2)
                                      Ch: L2L3 (L2/L3 state)
    pad_resetn_reset_num[7..4]   - (W1C) PAD_PRESETN number of reset
                                     The count indicate the number of PAD_PRESETN reset state happen number.
                                     Write one to bit[4] will clear the counter.
    DL_UP[8]                     - (RO) PCIe Data Link Layer state monitor
                                     1: Data link layer is operated normally
                                     0: Otherwise
    TLP_transmission_inhibited[9] - (RO) TLP Operation Monitor
                                     0: TLPs on transmission interface are operated normally
                                     1: TLPs on transmission interface are blocked by internal logic
                                     Block TLPs on TX interface when:
                                     - datalink is not active
                                     - all functions are in D1/D2/D3 and device is not a switch upstream
                                     - preparing to enter ASPM L1 or L1 (stop blocking once device is in L1 to allow wake-up)
                                     - preparing L2 entry or in L2
    DLLP_transmission_inhibited[10] - (RO) DLLP Operation Monitor
                                     0: DLLPs on transmission interface are operated normally
                                     1: DLLPs on transmission interface are blocked by internal logic
                                     Block Flow-control DLLPs on TX interface when:
                                     - enough credits are available and request ASPM L0s entry
                                     - preparing to enter ASPM L1 or L1 (stop blocking once device is in L1 to allow wake-up)
                                     - preparing L2 entry or in L2
    pcie_sys_clk_rdy[11]         - (RO) The status of system tl_clk and ref_clk for PCIe MAC
                                     0 : tl_clk and ref_clk from system is not ready.
                                     1 :  tl_clk and ref_clk from system is ready.
    pcie_xtal_clk_rdy[12]        - (RO) The status of system xtal clock for PCIe MAC
                                     0 : xtal clock from system is not ready.
                                     1 :  xtal clock from system is ready.
    RESERVED13[14..13]           - (RO) Reserved bits
    pcie_rst_notify[15]          - (RO) PCIe Reset Status.
                                     0 : PCIe Reset is done.
                                     1 : PCIe Reset is ongoing.
    req_recov[23..16]            - (W1C) Link Unstable Count 
                                     The count indicate the number MAC enter Recovery state due to Link Error such as flow control timeout, replay counter error, receiver error, framing error, etc.
                                     Write one to bit[16] will clear the counter.
    reptim_err[27..24]           - (W1C) Replay Timer Count
                                     The count indicate the number of replay timer expired.
                                     Write one to bit[24] will clear the counter.
    rx_nak_dllp[31..28]          - (W1C) Reciever NAK Count
                                     The count indicate the number of received NAK DLLP.
                                     Write one to bit[28] will clear the counter.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_rx_nak_dllp_ADDR        PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_rx_nak_dllp_MASK        0xF0000000u                // rx_nak_dllp[31..28]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_rx_nak_dllp_SHFT        28u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_reptim_err_ADDR         PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_reptim_err_MASK         0x0F000000u                // reptim_err[27..24]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_reptim_err_SHFT         24u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_req_recov_ADDR          PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_req_recov_MASK          0x00FF0000u                // req_recov[23..16]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_req_recov_SHFT          16u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_rst_notify_ADDR    PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_rst_notify_MASK    0x00008000u                // pcie_rst_notify[15]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_rst_notify_SHFT    15u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_xtal_clk_rdy_ADDR  PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_xtal_clk_rdy_MASK  0x00001000u                // pcie_xtal_clk_rdy[12]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_xtal_clk_rdy_SHFT  12u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_sys_clk_rdy_ADDR   PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_sys_clk_rdy_MASK   0x00000800u                // pcie_sys_clk_rdy[11]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_sys_clk_rdy_SHFT   11u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DLLP_transmission_inhibited_ADDR PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DLLP_transmission_inhibited_MASK 0x00000400u                // DLLP_transmission_inhibited[10]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DLLP_transmission_inhibited_SHFT 10u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_TLP_transmission_inhibited_ADDR PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_TLP_transmission_inhibited_MASK 0x00000200u                // TLP_transmission_inhibited[9]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_TLP_transmission_inhibited_SHFT 9u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DL_UP_ADDR              PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DL_UP_MASK              0x00000100u                // DL_UP[8]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DL_UP_SHFT              8u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pad_resetn_reset_num_ADDR PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pad_resetn_reset_num_MASK 0x000000F0u                // pad_resetn_reset_num[7..4]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pad_resetn_reset_num_SHFT 4u
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_Low_power_status_ADDR   PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_Low_power_status_MASK   0x0000000Fu                // Low_power_status[3..0]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_Low_power_status_SHFT   0u

/* =====================================================================================

  ---PCIE_PEX_DSN (0x74040000 + 0158hu)---

    PCIE_Dev_Serial_Number[31..0] - (RW) Device Serial Number Setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_DSN_PCIE_Dev_Serial_Number_ADDR PCIE_MAC_IREG_PCIE_PEX_DSN_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DSN_PCIE_Dev_Serial_Number_MASK 0xFFFFFFFFu                // PCIE_Dev_Serial_Number[31..0]
#define PCIE_MAC_IREG_PCIE_PEX_DSN_PCIE_Dev_Serial_Number_SHFT 0u

/* =====================================================================================

  ---PCIE_ASPM_CTRL (0x74040000 + 015Chu)---

    dn_l1_nak_time[3..0]         - (RW) For Downstream Port.
                                     The register is for DN port to count the interval between last received PM_Active_State_Request_L1 DLLP and next received PM_Active_State_Request_L1 DLLP.
                                     Unit : 1us
    up_l1_nak_time[7..4]         - (RW) For Upstream Port.
                                     The register is for UP port to count the interval between last transmitted PM_Active_State_Request_L1 DLLP and next transmitted PM_Active_State_Request_L1 DLLP.
                                     Unit : 1us
    dn_l1_nak_wait_time[15..8]   - (RW) For Downstream Port.
                                     The register is for DN port to timeout in ASL1_WAIT state to prevent from deadlock due to miss EIOS.
                                     Unit : 1us
    p2_exit_phystatus_chk_sel[16] - (RW) When P2 exit, MAC should check Phystatus.
                                     0 : only check phystatus falling edge for P2 exit.
                                     1 : check phystatus rising edge firstly then check phystatus falling edge to confirm the phystatus is really for P2 exit
    p2_exit_by_clkreq[17]        - (RW) L1 P2 exit condition
                                     0: only when rxelecidle is falling
                                     1: when rxelecidle or clkreq is falling
    RESERVED18[19..18]           - (RO) Reserved bits
    dn_l1_nak_end_time[23..20]   - (RW) For Downstream Port.
                                     The register is for DN port to  wait some time to prevent from send duplicate NAK to same PM_Active_State_Request_L1 DLLP.
                                     Unit : 1us
    p2_idle_time[27..24]         - (RW) The minimum time MAC will stay in P2 state.
                                     The time should be more than 3us (PHY's requirement)
                                     unit : 1us
    p2_sleep_time[31..28]        - (RW) The time MAC will assert sleep signal when MAC is in P2 state.
                                     The time should be more than 8us (PHY idle time (3us) + L1.2 Entry time (1us) + L1.2 idle time (4us))
                                     unit : 1us

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_sleep_time_ADDR        PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_sleep_time_MASK        0xF0000000u                // p2_sleep_time[31..28]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_sleep_time_SHFT        28u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_idle_time_ADDR         PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_idle_time_MASK         0x0F000000u                // p2_idle_time[27..24]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_idle_time_SHFT         24u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_end_time_ADDR   PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_end_time_MASK   0x00F00000u                // dn_l1_nak_end_time[23..20]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_end_time_SHFT   20u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_by_clkreq_ADDR    PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_by_clkreq_MASK    0x00020000u                // p2_exit_by_clkreq[17]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_by_clkreq_SHFT    17u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_phystatus_chk_sel_ADDR PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_phystatus_chk_sel_MASK 0x00010000u                // p2_exit_phystatus_chk_sel[16]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_phystatus_chk_sel_SHFT 16u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_wait_time_ADDR  PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_wait_time_MASK  0x0000FF00u                // dn_l1_nak_wait_time[15..8]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_wait_time_SHFT  8u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_up_l1_nak_time_ADDR       PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_up_l1_nak_time_MASK       0x000000F0u                // up_l1_nak_time[7..4]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_up_l1_nak_time_SHFT       4u
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_time_ADDR       PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_time_MASK       0x0000000Fu                // dn_l1_nak_time[3..0]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_time_SHFT       0u

/* =====================================================================================

  ---PCIE_PERF_SETTING_0 (0x74040000 + 0160hu)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_Block_TxBuf_Avail_cnt_MASK 0xFF000000u                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_Block_TxBuf_Avail_cnt_SHFT 24u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000u                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_TxBuf_Avail_cnt_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_rdcmd_cnt_MASK 0x0000FF00u                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_rdcmd_cnt_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_timer_MASK   0x000000FFu                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_timer_SHFT   0u

/* =====================================================================================

  ---PCIE_DEBUG_SEL_0 (0x74040000 + 0164hu)---

    Debug_signal_sel_0[7..0]     - (RW) For Debug Probe byte0 signals selection.
                                     Please see debug table for debug signals.
    Debug_signal_sel_1[15..8]    - (RW) For Debug Probe byte1 signals selection.
                                     Please see debug table for debug signals.
    Debug_signal_sel_2[23..16]   - (RW) For Debug Probe byte2 signals selection.
                                     Please see debug table for debug signals.
    Debug_signal_sel_3[31..24]   - (RW) For Debug Probe byte3 signals selection.
                                     Please see debug table for debug signals.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_3_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_3_MASK 0xFF000000u                // Debug_signal_sel_3[31..24]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_3_SHFT 24u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_2_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_2_MASK 0x00FF0000u                // Debug_signal_sel_2[23..16]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_2_SHFT 16u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_1_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_1_MASK 0x0000FF00u                // Debug_signal_sel_1[15..8]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_1_SHFT 8u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_0_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_0_MASK 0x000000FFu                // Debug_signal_sel_0[7..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_0_SHFT 0u

/* =====================================================================================

  ---PCIE_DEBUG_SEL_1 (0x74040000 + 0168hu)---

    Debug_sample_0[1..0]         - (RW) Debug Probe Byte0 Sample
                                     b00: for debug probe every cycle sample
                                     b01: for debug probe odd cycle sample
                                     b10: for debug probe even cycle sample
                                     b11: for debug probe combined odd cycle sample and even cycle sample
    Debug_sample_1[3..2]         - (RW) Debug Probe Byte1 Sample
                                     b00: for debug probe every cycle sample
                                     b01: for debug probe odd cycle sample
                                     b10: for debug probe even cycle sample
                                     b11: for debug probe combined odd cycle sample and even cycle sample
    Debug_sample_2[5..4]         - (RW) Debug Probe Byte2 Sample
                                     b00: for debug probe every cycle sample
                                     b01: for debug probe odd cycle sample
                                     b10: for debug probe even cycle sample
                                     b11: for debug probe combined odd cycle sample and even cycle sample
    Debug_sample_3[7..6]         - (RW) Debug Probe Byte3 Sample
                                     b00: for debug probe every cycle sample
                                     b01: for debug probe odd cycle sample
                                     b10: for debug probe even cycle sample
                                     b11: for debug probe combined odd cycle sample and even cycle sample
    Debug_en[8]                  - (RW) for debug clock CG enable
    Debug_reg_sel[9]             - (RW) for debug signal latch by DFF
                                     0 : Select Combinational Path
                                     1 : Select Register Path
    RSVD1[15..10]                - (RW) Reserved
    Debug_module_sel_0[19..16]   - (RW) for debug probe byte0 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : pl2 (physical layer 2)
                                     3 : pl3 (physical layer 3)
                                     4 : dl (data link layer)
                                     5 : tl0 (transaction layer 0)
                                     6 : tl1 (transaction layer 1)
                                     7 : tl2 (transaction layer 2)
                                     8 : tl3 (transaction layer 3)
                                     9 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved
    Debug_module_sel_1[23..20]   - (RW) for debug probe byte1 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : pl2 (physical layer 2)
                                     3 : pl3 (physical layer 3)
                                     4 : dl (data link layer)
                                     5 : tl0 (transaction layer 0)
                                     6 : tl1 (transaction layer 1)
                                     7 : tl2 (transaction layer 2)
                                     8 : tl3 (transaction layer 3)
                                     9 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved
    Debug_module_sel_2[27..24]   - (RW) for debug probe byte2 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : pl2 (physical layer 2)
                                     3 : pl3 (physical layer 3)
                                     4 : dl (data link layer)
                                     5 : tl0 (transaction layer 0)
                                     6 : tl1 (transaction layer 1)
                                     7 : tl2 (transaction layer 2)
                                     8 : tl3 (transaction layer 3)
                                     9 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved
    Debug_module_sel_3[31..28]   - (RW) for debug probe byte3 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : pl2 (physical layer 2)
                                     3 : pl3 (physical layer 3)
                                     4 : dl (data link layer)
                                     5 : tl0 (transaction layer 0)
                                     6 : tl1 (transaction layer 1)
                                     7 : tl2 (transaction layer 2)
                                     8 : tl3 (transaction layer 3)
                                     9 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_3_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_3_MASK 0xF0000000u                // Debug_module_sel_3[31..28]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_3_SHFT 28u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_2_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_2_MASK 0x0F000000u                // Debug_module_sel_2[27..24]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_2_SHFT 24u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_1_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_1_MASK 0x00F00000u                // Debug_module_sel_1[23..20]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_1_SHFT 20u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_0_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_0_MASK 0x000F0000u                // Debug_module_sel_0[19..16]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_0_SHFT 16u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_RSVD1_MASK              0x0000FC00u                // RSVD1[15..10]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_RSVD1_SHFT              10u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_reg_sel_ADDR      PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_reg_sel_MASK      0x00000200u                // Debug_reg_sel[9]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_reg_sel_SHFT      9u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_en_ADDR           PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_en_MASK           0x00000100u                // Debug_en[8]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_en_SHFT           8u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_3_ADDR     PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_3_MASK     0x000000C0u                // Debug_sample_3[7..6]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_3_SHFT     6u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_2_ADDR     PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_2_MASK     0x00000030u                // Debug_sample_2[5..4]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_2_SHFT     4u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_1_ADDR     PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_1_MASK     0x0000000Cu                // Debug_sample_1[3..2]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_1_SHFT     2u
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_0_ADDR     PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_0_MASK     0x00000003u                // Debug_sample_0[1..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_sample_0_SHFT     0u

/* =====================================================================================

  ---PCIE_EQ_CTRL_0 (0x74040000 + 016Chu)---

    EQ_NORESP_TIMER[15..0]       - (RW) Timeout value for the requester is unable to receive Ordered Sets with do EQ progress action.
                                     unit : 1us
                                     all 0 will disable the timer
    EQ_NOP_TIMER[31..16]         - (RW) Timeout value for LTSSM in Recovery.EQUAL but without any EQ progress action.
                                     unit : 1us
                                     all 0 will disable the timer

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NOP_TIMER_ADDR         PCIE_MAC_IREG_PCIE_EQ_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NOP_TIMER_MASK         0xFFFF0000u                // EQ_NOP_TIMER[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NOP_TIMER_SHFT         16u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NORESP_TIMER_ADDR      PCIE_MAC_IREG_PCIE_EQ_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NORESP_TIMER_MASK      0x0000FFFFu                // EQ_NORESP_TIMER[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NORESP_TIMER_SHFT      0u

/* =====================================================================================

  ---PCIE_EQ_CTRL_1 (0x74040000 + 0170hu)---

    EQ_SKIP_TIMER[3..0]          - (RW) Timeout value for SKIP EQ progress.
                                     unit : 1ms
                                     all 0 will disable the timer
    EQ_COMPLETE_TIMER[7..4]      - (RW) Timeout value for LTSSM in Recovery.EQUAL and equ_complete is 1.
                                     unit : 1ms
                                     all 0 will disable the timer
    STAY_EQ_TIMER[12..8]         - (RW) Timeout value for LTSSM in Recovery.EQUAL.
                                     unit : 1ms
                                     all 0 will disable the timer
    RSVD[15..13]                 - (RW) RSVD
    EVAL_TIMER[23..16]           - (RW) Timeout value for pl_eq_rxeqeval is asserted but can't get phystatus
                                     unit : 1us
                                     all 0 will disable the timer
    EQ_REJECT_SEL[24]            - (RW) Select how to reject Preset or Coeff for margin 1~4.
                                     0 : Reject all Preset and Coeff for margin 1~4.
                                     1 : Reject illegal Preset and Coeff for margin 1~4.
    EQ_MODE_SEL[25]              - (RW) Select EQ Operation mode.
                                     0 : MTK propritery EQ flow.
                                     1 : Standard EQ flow.
    RESERVED26[31..26]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_MODE_SEL_ADDR          PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_MODE_SEL_MASK          0x02000000u                // EQ_MODE_SEL[25]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_MODE_SEL_SHFT          25u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_REJECT_SEL_ADDR        PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_REJECT_SEL_MASK        0x01000000u                // EQ_REJECT_SEL[24]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_REJECT_SEL_SHFT        24u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EVAL_TIMER_ADDR           PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EVAL_TIMER_MASK           0x00FF0000u                // EVAL_TIMER[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EVAL_TIMER_SHFT           16u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_RSVD_ADDR                 PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_RSVD_MASK                 0x0000E000u                // RSVD[15..13]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_RSVD_SHFT                 13u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_STAY_EQ_TIMER_ADDR        PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_STAY_EQ_TIMER_MASK        0x00001F00u                // STAY_EQ_TIMER[12..8]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_STAY_EQ_TIMER_SHFT        8u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_COMPLETE_TIMER_ADDR    PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_COMPLETE_TIMER_MASK    0x000000F0u                // EQ_COMPLETE_TIMER[7..4]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_COMPLETE_TIMER_SHFT    4u
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_SKIP_TIMER_ADDR        PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_SKIP_TIMER_MASK        0x0000000Fu                // EQ_SKIP_TIMER[3..0]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_SKIP_TIMER_SHFT        0u

/* =====================================================================================

  ---PM_CONF_0_0 (0x74040000 + 0174hu)---

    RSVD1[15..0]                 - (RW) Reserved
    dat_scale_val0[17..16]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val1[19..18]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val2[21..20]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val3[23..22]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val4[25..24]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val5[27..26]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val6[29..28]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val7[31..30]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val7_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val7_MASK          0xC0000000u                // dat_scale_val7[31..30]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val7_SHFT          30u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val6_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val6_MASK          0x30000000u                // dat_scale_val6[29..28]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val6_SHFT          28u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val5_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val5_MASK          0x0C000000u                // dat_scale_val5[27..26]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val5_SHFT          26u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val4_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val4_MASK          0x03000000u                // dat_scale_val4[25..24]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val4_SHFT          24u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val3_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val3_MASK          0x00C00000u                // dat_scale_val3[23..22]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val3_SHFT          22u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val2_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val2_MASK          0x00300000u                // dat_scale_val2[21..20]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val2_SHFT          20u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val1_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val1_MASK          0x000C0000u                // dat_scale_val1[19..18]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val1_SHFT          18u
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val0_ADDR          PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val0_MASK          0x00030000u                // dat_scale_val0[17..16]
#define PCIE_MAC_IREG_PM_CONF_0_0_dat_scale_val0_SHFT          16u
#define PCIE_MAC_IREG_PM_CONF_0_0_RSVD1_ADDR                   PCIE_MAC_IREG_PM_CONF_0_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_0_RSVD1_MASK                   0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_IREG_PM_CONF_0_0_RSVD1_SHFT                   0u

/* =====================================================================================

  ---PM_CONF_1_0 (0x74040000 + 0178hu)---

    dat_register_val0[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val1[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val2[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val3[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val3_ADDR       PCIE_MAC_IREG_PM_CONF_1_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val3_MASK       0xFF000000u                // dat_register_val3[31..24]
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val3_SHFT       24u
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val2_ADDR       PCIE_MAC_IREG_PM_CONF_1_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val2_MASK       0x00FF0000u                // dat_register_val2[23..16]
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val2_SHFT       16u
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val1_ADDR       PCIE_MAC_IREG_PM_CONF_1_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val1_MASK       0x0000FF00u                // dat_register_val1[15..8]
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val1_SHFT       8u
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val0_ADDR       PCIE_MAC_IREG_PM_CONF_1_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val0_MASK       0x000000FFu                // dat_register_val0[7..0]
#define PCIE_MAC_IREG_PM_CONF_1_0_dat_register_val0_SHFT       0u

/* =====================================================================================

  ---PM_CONF_2_0 (0x74040000 + 017Chu)---

    dat_register_val4[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val5[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val6[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val7[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val7_ADDR       PCIE_MAC_IREG_PM_CONF_2_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val7_MASK       0xFF000000u                // dat_register_val7[31..24]
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val7_SHFT       24u
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val6_ADDR       PCIE_MAC_IREG_PM_CONF_2_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val6_MASK       0x00FF0000u                // dat_register_val6[23..16]
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val6_SHFT       16u
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val5_ADDR       PCIE_MAC_IREG_PM_CONF_2_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val5_MASK       0x0000FF00u                // dat_register_val5[15..8]
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val5_SHFT       8u
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val4_ADDR       PCIE_MAC_IREG_PM_CONF_2_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val4_MASK       0x000000FFu                // dat_register_val4[7..0]
#define PCIE_MAC_IREG_PM_CONF_2_0_dat_register_val4_SHFT       0u

/* =====================================================================================

  ---IMASK_LOCAL (0x74040000 + 0180hu)---

    DMA_END_EN[7..0]             - (RW) Local Interrupt Enable for DMA END
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    DMA_ERR_OR_MSI_RCV_EN[15..8] - (RW) Local Interrupt Enable for DMA ERROR
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    A_ATR_EVT_EN[19..16]         - (RW) Local Interrupt Enable for AXI Address Translation Event.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    P_ATR_EVT_EN[23..20]         - (RW) Local Interrupt Enable for PCIe Address Translation Event.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    INT_EVT_EN[27..24]           - (RW) Local Interrupt Enable for Interrupt Event.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    MSG_EVT_EN[28]               - (RW) Local Interrupt Enable for LTR message received, Hotplug event, Other message received.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    AER_L2_EVT_EN[29]            - (RW) Local Interrupt Enable for AER event or L2 event.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    PM_EVT_EN[30]                - (RW) Local Interrupt Enable for Power Management Event.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits
    ERR_RST_EVT_EN[31]           - (RW) Local Interrupt Enable for System error or PERSTn or PCIe reset event.
                                     Enable bit for each interrupt status. Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source.
                                     See ISTATUS_LOCAL for details of this register's bits

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_LOCAL_ERR_RST_EVT_EN_ADDR          PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_ERR_RST_EVT_EN_MASK          0x80000000u                // ERR_RST_EVT_EN[31]
#define PCIE_MAC_IREG_IMASK_LOCAL_ERR_RST_EVT_EN_SHFT          31u
#define PCIE_MAC_IREG_IMASK_LOCAL_PM_EVT_EN_ADDR               PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_PM_EVT_EN_MASK               0x40000000u                // PM_EVT_EN[30]
#define PCIE_MAC_IREG_IMASK_LOCAL_PM_EVT_EN_SHFT               30u
#define PCIE_MAC_IREG_IMASK_LOCAL_AER_L2_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_AER_L2_EVT_EN_MASK           0x20000000u                // AER_L2_EVT_EN[29]
#define PCIE_MAC_IREG_IMASK_LOCAL_AER_L2_EVT_EN_SHFT           29u
#define PCIE_MAC_IREG_IMASK_LOCAL_MSG_EVT_EN_ADDR              PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_MSG_EVT_EN_MASK              0x10000000u                // MSG_EVT_EN[28]
#define PCIE_MAC_IREG_IMASK_LOCAL_MSG_EVT_EN_SHFT              28u
#define PCIE_MAC_IREG_IMASK_LOCAL_INT_EVT_EN_ADDR              PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_INT_EVT_EN_MASK              0x0F000000u                // INT_EVT_EN[27..24]
#define PCIE_MAC_IREG_IMASK_LOCAL_INT_EVT_EN_SHFT              24u
#define PCIE_MAC_IREG_IMASK_LOCAL_P_ATR_EVT_EN_ADDR            PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_P_ATR_EVT_EN_MASK            0x00F00000u                // P_ATR_EVT_EN[23..20]
#define PCIE_MAC_IREG_IMASK_LOCAL_P_ATR_EVT_EN_SHFT            20u
#define PCIE_MAC_IREG_IMASK_LOCAL_A_ATR_EVT_EN_ADDR            PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_A_ATR_EVT_EN_MASK            0x000F0000u                // A_ATR_EVT_EN[19..16]
#define PCIE_MAC_IREG_IMASK_LOCAL_A_ATR_EVT_EN_SHFT            16u
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_ERR_OR_MSI_RCV_EN_ADDR   PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_ERR_OR_MSI_RCV_EN_MASK   0x0000FF00u                // DMA_ERR_OR_MSI_RCV_EN[15..8]
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_ERR_OR_MSI_RCV_EN_SHFT   8u
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_END_EN_ADDR              PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_END_EN_MASK              0x000000FFu                // DMA_END_EN[7..0]
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_END_EN_SHFT              0u

/* =====================================================================================

  ---ISTATUS_LOCAL (0x74040000 + 0184hu)---

    DMA_END[7..0]                - (W1C) Reports that a DMA transfer is ended. 
                                     Bit number i corresponds to DMA Engine number i.
    DMA_ERR_OR_MSI_RCV[15..8]    - (W1C) Report DMA error and Multiple MSI received
                                     DMA error: Reports that an error occurred during a DMA transfer. Bit number i corresponds to DMA Engine number i.
                                     Multiple MSI received: Report MSI events to the Local Processor. Bit number i corresponds to Function number i. 
                                     Please refer Multiple-MSI-related register (PCIE_MAC + C00h ~ PCIE_MAC + C9Fh) for more information. (RP only, reserved for EP)
    A_ATR_EVT[19..16]            - (W1C) Reports AXI Address Translation events:
                                     Bit [16]: AXI Post Error: asserted to indicate that an error occurred on an AXI write request. 
                                                   The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[24]
                                     Bit [17]: AXI Fetch Error: asserted to indicate that an error occurred on an AXI read request. 
                                                   The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[25]
                                     Bit [18]: AXI Discard Error: asserted to signal a completion timeout on an AXI read request. 
                                                   The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[26]
                                     Bit [19]: PTM message received or 
                                                   AXI Doorbell: asserted when an AXI request has successfully targeted an Address Translation Table. 
                                                   The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[27]
    P_ATR_EVT[23..20]            - (W1C) Reports PCIe Address Translation events:
                                     Bit [20]: PCIe Post Error: asserted to indicate that an error occurred on a PCIe write request
                                                   The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[28]
                                     Bit [21]: PCIe Fetch Error: asserted to indicate that an error occurred on a PCIe read request
                                                     The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[29]
                                     Bit [22]: PCIe Discard Error: asserted to signal a completion timeout on a PCIe read request
                                                     The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[30]
                                     Bit [23]: L2 wake for Rootport and OBFF status update event for Endpoint
                                                    PCIe Doorbell: asserted when a PCIe request has successfully targeted an Address Translation Table
                                                    The ADT event can be disabled by ISTATUS_LOCAL_ATR_DIS register in 0x1AC[31]
    INT_EVT[27..24]              - (W1C) Report Interrupts events to the Local Processor:
                                     Rootport :
                                     Bit [24]: Asserted when PCI interrupt line A is asserted
                                     Bit [25]: Asserted when PCI interrupt line B is asserted 
                                     Bit [26]: Asserted when PCI interrupt line C is asserted
                                     Bit [27]: Asserted when PCI interrupt line D is asserted 
                                     
                                     Endpoint : 
                                     Bit[24] : Function-Level Reset event.
                                     Bit[25] : Power profile counter overflow event
                                     Bit[26] : Software trigger local interrupt (0xD94) or Latency exceed high water mark interrupt(0x33B0)
                                     Bit[27] : Link up event .
    MSG_EVT[28]                  - (W1C) Rootport : Reports FRS message received, DRS message received, LTR message received, Hotplug event, Other message received to the Local Processor.
                                     Endpoint : Reports Other message received to the Local Processor or master bus enable toggle.
    AER_L2_EVT[29]               - (W1C) Rootport : Reports AER event to the Local Processor for Rootport.
                                     Endpoint : Reports L2 event to the Local Processor for Endpoint.
    PM_EVT[30]                   - (W1C) Rootport : Reports Power Management event to the Local Processor for Rootport
                                     Endpoint : Report Legacy power management state change event  to the Local Processor for Endpoint
    ERR_RST_EVT[31]              - (W1C) Rootport : Reports System error or PERSTn or PCIe reset event happen. (DLUP exit, L2 Exit, Hot Reset Exit)
                                     Endpoint : PERSTn or PCIe reset event happen. (EX : DLUP exit, L2 Exit, Hot Reset Exit)

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ERR_RST_EVT_ADDR           PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ERR_RST_EVT_MASK           0x80000000u                // ERR_RST_EVT[31]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ERR_RST_EVT_SHFT           31u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_PM_EVT_ADDR                PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_PM_EVT_MASK                0x40000000u                // PM_EVT[30]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_PM_EVT_SHFT                30u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_AER_L2_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_AER_L2_EVT_MASK            0x20000000u                // AER_L2_EVT[29]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_AER_L2_EVT_SHFT            29u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_MSG_EVT_ADDR               PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_MSG_EVT_MASK               0x10000000u                // MSG_EVT[28]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_MSG_EVT_SHFT               28u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_INT_EVT_ADDR               PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_INT_EVT_MASK               0x0F000000u                // INT_EVT[27..24]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_INT_EVT_SHFT               24u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_P_ATR_EVT_ADDR             PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_P_ATR_EVT_MASK             0x00F00000u                // P_ATR_EVT[23..20]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_P_ATR_EVT_SHFT             20u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_A_ATR_EVT_ADDR             PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_A_ATR_EVT_MASK             0x000F0000u                // A_ATR_EVT[19..16]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_A_ATR_EVT_SHFT             16u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_ERR_OR_MSI_RCV_ADDR    PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_ERR_OR_MSI_RCV_MASK    0x0000FF00u                // DMA_ERR_OR_MSI_RCV[15..8]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_ERR_OR_MSI_RCV_SHFT    8u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_END_ADDR               PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_END_MASK               0x000000FFu                // DMA_END[7..0]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_END_SHFT               0u

/* =====================================================================================

  ---IMASK_HOST_0 (0x74040000 + 0188hu)---

    DMA_END_EN[7..0]             - (RW) See ISTATUS_HOST[7:0] for details of this register's bits
                                     
                                     The register is per physical function register
    DMA_ERR_EN[15..8]            - (RW) See ISTATUS_HOST[15:8] for details of this register's bits
                                     
                                     The register is per physical function register
    A_ATR_EVT_EN[19..16]         - (RW) See ISTATUS_HOST[19:16] for details of this register's bits
                                     
                                     The register is per physical function register
    P_ATR_EVT_EN[23..20]         - (RW) See ISTATUS_HOST[23:20] for details of this register's bits
                                     
                                     The register is per physical function register
    INT_REQUEST_EN[31..24]       - (RW) See ISTATUS_HOST[31:24] for details of this register's bits
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_0_INT_REQUEST_EN_ADDR         PCIE_MAC_IREG_IMASK_HOST_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_0_INT_REQUEST_EN_MASK         0xFF000000u                // INT_REQUEST_EN[31..24]
#define PCIE_MAC_IREG_IMASK_HOST_0_INT_REQUEST_EN_SHFT         24u
#define PCIE_MAC_IREG_IMASK_HOST_0_P_ATR_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_0_P_ATR_EVT_EN_MASK           0x00F00000u                // P_ATR_EVT_EN[23..20]
#define PCIE_MAC_IREG_IMASK_HOST_0_P_ATR_EVT_EN_SHFT           20u
#define PCIE_MAC_IREG_IMASK_HOST_0_A_ATR_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_0_A_ATR_EVT_EN_MASK           0x000F0000u                // A_ATR_EVT_EN[19..16]
#define PCIE_MAC_IREG_IMASK_HOST_0_A_ATR_EVT_EN_SHFT           16u
#define PCIE_MAC_IREG_IMASK_HOST_0_DMA_ERR_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_0_DMA_ERR_EN_MASK             0x0000FF00u                // DMA_ERR_EN[15..8]
#define PCIE_MAC_IREG_IMASK_HOST_0_DMA_ERR_EN_SHFT             8u
#define PCIE_MAC_IREG_IMASK_HOST_0_DMA_END_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_0_DMA_END_EN_MASK             0x000000FFu                // DMA_END_EN[7..0]
#define PCIE_MAC_IREG_IMASK_HOST_0_DMA_END_EN_SHFT             0u

/* =====================================================================================

  ---ISTATUS_HOST_0 (0x74040000 + 018Chu)---

    DMA_END[7..0]                - (W1C) Reports that a DMA transfer is ended. 
                                     Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[7:0] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    DMA_ERR[15..8]               - (W1C) Reports that an error occurred during a DMA transfer. 
                                     Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[15:8] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    A_ATR_EVT[19..16]            - (W1C) Reports AXI Address Translation events: the event can be disabled by set 0x1AC[19:16] to 1
                                     Bit [16]: AXI Post Error: asserted to indicate that an error occurred on an AXI write request
                                     Bit [17]: AXI Fetch Error: asserted to indicate that an error occurred on an AXI read request
                                     Bit [18]: AXI Discard Error: asserted to signal a completion timeout on an AXI read request
                                     Bit [19]: AXI Doorbell: asserted when an AXI request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[19:16] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    P_ATR_EVT[23..20]            - (W1C) Reports PCIe Address Translation events: the event can be disabled by set 0x1AC[23:20] to 1
                                     Bit [20]: PCIe Post Error: asserted to indicate that an error occurred on a PCIe write request
                                     Bit [21]: PCIe Fetch Error: asserted to indicate that an error occurred on a PCIe read request
                                     Bit [22]: PCIe Discard Error: asserted to signal a completion timeout on a PCIe read request
                                     Bit [23]: PCIe Doorbell: asserted when a PCIe request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[23:20] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    INT_REQUEST[31..24]          - (W1C) Reports external interrupt requests bit[31:24] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_0_INT_REQUEST_ADDR          PCIE_MAC_IREG_ISTATUS_HOST_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_0_INT_REQUEST_MASK          0xFF000000u                // INT_REQUEST[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_0_INT_REQUEST_SHFT          24u
#define PCIE_MAC_IREG_ISTATUS_HOST_0_P_ATR_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_0_P_ATR_EVT_MASK            0x00F00000u                // P_ATR_EVT[23..20]
#define PCIE_MAC_IREG_ISTATUS_HOST_0_P_ATR_EVT_SHFT            20u
#define PCIE_MAC_IREG_ISTATUS_HOST_0_A_ATR_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_0_A_ATR_EVT_MASK            0x000F0000u                // A_ATR_EVT[19..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_0_A_ATR_EVT_SHFT            16u
#define PCIE_MAC_IREG_ISTATUS_HOST_0_DMA_ERR_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_0_DMA_ERR_MASK              0x0000FF00u                // DMA_ERR[15..8]
#define PCIE_MAC_IREG_ISTATUS_HOST_0_DMA_ERR_SHFT              8u
#define PCIE_MAC_IREG_ISTATUS_HOST_0_DMA_END_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_0_DMA_END_MASK              0x000000FFu                // DMA_END[7..0]
#define PCIE_MAC_IREG_ISTATUS_HOST_0_DMA_END_SHFT              0u

/* =====================================================================================

  ---RC_MSI_EN (0x74040000 + 0190hu)---

    rc_msi_en[7..0]              - (RO) RC MSI enable.
                                     Bit[0] : For MSI_F0.  Enable 0xC80 and 0xC00 MSI Adress and MSI capture capability.
                                     Bit[1] : For MSI_F1.  Enable 0xC84 and 0xC10 MSI Adress and MSI capture capability.
                                     Bit[2] : For MSI_F2.  Enable 0xC88 and 0xC20 MSI Adress and MSI capture capability.
                                     Bit[3] : For MSI_F3.  Enable 0xC8C and 0xC30 MSI Adress and MSI capture capability.
                                     Bit[4] : For MSI_F4.  Enable 0xC90 and 0xC40 MSI Adress and MSI capture capability.
                                     Bit[5] : For MSI_F5.  Enable 0xC94 and 0xC50 MSI Adress and MSI capture capability.
                                     Bit[6] : For MSI_F6.  Enable 0xC98 and 0xC60 MSI Adress and MSI capture capability.
                                     Bit[7] : For MSI_F7.  Enable 0xC9C and 0xC70 MSI Adress and MSI capture capability.
    rx_msi_status_sel[15..8]     - (RO) RC MSI Status Selection.
                                     Bit[8] : For MSI_F0.   0 : use 0xC04 to record MSI status.    1 :  use 0x31E0 to record MSI status.
                                     Bit[9] :  For MSI_F1.   0 : use 0xC14 to record MSI status.    1 :  use 0x31E4 to record MSI status.
                                     Bit[10] :  For MSI_F2.   0 : use 0xC24 to record MSI status.  1 :  use 0x31E8 to record MSI status.
                                     Bit[11] :  For MSI_F3.   0 : use 0xC34 to record MSI status.  1 :  use 0x31EC to record MSI status.
                                     Bit[12] :  For MSI_F4.   0 : use 0xC44 to record MSI status.  1 :  use 0x31F0 to record MSI status.
                                     Bit[13] :  For MSI_F5.   0 : use 0xC54 to record MSI status.  1 :  use 0x31F4 to record MSI status.
                                     Bit[14] :  For MSI_F6.   0 : use 0xC64 to record MSI status.  1 :  use 0x31F8 to record MSI status.
                                     Bit[15] :  For MSI_F7.   0 : use 0xC74 to record MSI status.  1 :  use 0x31FC to record MSI status.
    rc_msi_ordrule_en[16]        - (RO) RC before send MSI to GIC wait all write transaction finish
                                     0: disable
                                     1: enable
    RSVD1[26..17]                - (RO) Reserved
    rc_msi2axi_en[27]            - (RO) Send MSI to AXI master for RC mode
                                     1'b1: enable to send MSI packet to AXI master
                                     1'b0: do not send MSI packet to AXI master
    rc_intx_en[31..28]           - (RO) INTX interrupt MASK
                                     Bit [28] interrupt line A Mask
                                     Bit [29] interrupt line B Mask
                                     Bit [30] interrupt line C Mask
                                     Bit [31] interrupt line D Mask

 =====================================================================================*/
#define PCIE_MAC_IREG_RC_MSI_EN_rc_intx_en_ADDR                PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_rc_intx_en_MASK                0xF0000000u                // rc_intx_en[31..28]
#define PCIE_MAC_IREG_RC_MSI_EN_rc_intx_en_SHFT                28u
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi2axi_en_ADDR             PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi2axi_en_MASK             0x08000000u                // rc_msi2axi_en[27]
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi2axi_en_SHFT             27u
#define PCIE_MAC_IREG_RC_MSI_EN_RSVD1_ADDR                     PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_RSVD1_MASK                     0x07FE0000u                // RSVD1[26..17]
#define PCIE_MAC_IREG_RC_MSI_EN_RSVD1_SHFT                     17u
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_ordrule_en_ADDR         PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_ordrule_en_MASK         0x00010000u                // rc_msi_ordrule_en[16]
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_ordrule_en_SHFT         16u
#define PCIE_MAC_IREG_RC_MSI_EN_rx_msi_status_sel_ADDR         PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_rx_msi_status_sel_MASK         0x0000FF00u                // rx_msi_status_sel[15..8]
#define PCIE_MAC_IREG_RC_MSI_EN_rx_msi_status_sel_SHFT         8u
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_en_ADDR                 PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_en_MASK                 0x000000FFu                // rc_msi_en[7..0]
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_en_SHFT                 0u

/* =====================================================================================

  ---PCIE_LOW_POWER_CTRL_0 (0x74040000 + 0194hu)---

    dis_lowpwr_mask[3..0]        - (RW) Those registers can mask external ASPM control interface.
                                     0 : external ASPM control interface can not affect PCIe low power state.
                                     1 : external ASPM control interface can affect PCIe low power state.
                                     Bit[0] : L0s.
                                     Bit[1] : L1.
                                     Bit[2] : L1.1.
                                     Bit[3] : L1.2.
    en_l1_chk_int[4]             - (RW) Uncleaned interrupt status blocks PCIe enter L1 enable
                                     0: disable
                                     1: enable
    RESERVED5[7..5]              - (RO) Reserved bits
    force_dis_lowpwr[11..8]      - (RW) Disable Low Power State
                                     0: PCIe can enter to low power state.
                                     1: PCIe can not enter to low power state.
                                     Bit[0]: L0s (MAC will exit L0s if PCIe link is in L0s)
                                     Bit[1]: L1 ( MAC will exit L1 if PCIe link is in L1)
                                     Bit[2]: L1.1
                                     Bit[3]: L1.2
                                     
                                     The register is per physical function register
    l0l0s_lock_dbc_cnt[23..12]   - (RW) Debounce count for l0l0s_lock
                                     l0l0s_lock will refelt real L0 or L0s state after the debounce time.
                                     The unit of the count is 16T of tl_ck.
    L1_EXIT_NUM[30..24]          - (RW) L1 Exit Number
                                     The counter starts to count when clkreq_in_tl is high.
                                     lpm_state will request to exit L1 when the counter is met.
    L1_EXIT_EN[31]               - (RW) L1 Exit Enable
                                     0: disable to force L1 exit
                                     1: enable to force L1 exit

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_L1_EXIT_EN_ADDR    PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_L1_EXIT_EN_MASK    0x80000000u                // L1_EXIT_EN[31]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_L1_EXIT_EN_SHFT    31u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_L1_EXIT_NUM_ADDR   PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_L1_EXIT_NUM_MASK   0x7F000000u                // L1_EXIT_NUM[30..24]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_L1_EXIT_NUM_SHFT   24u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_l0l0s_lock_dbc_cnt_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_l0l0s_lock_dbc_cnt_MASK 0x00FFF000u                // l0l0s_lock_dbc_cnt[23..12]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_l0l0s_lock_dbc_cnt_SHFT 12u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_force_dis_lowpwr_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_force_dis_lowpwr_MASK 0x00000F00u                // force_dis_lowpwr[11..8]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_force_dis_lowpwr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_en_l1_chk_int_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_en_l1_chk_int_MASK 0x00000010u                // en_l1_chk_int[4]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_en_l1_chk_int_SHFT 4u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_dis_lowpwr_mask_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_dis_lowpwr_mask_MASK 0x0000000Fu                // dis_lowpwr_mask[3..0]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_0_dis_lowpwr_mask_SHFT 0u

/* =====================================================================================

  ---PCIE_ICMD_PM_0 (0x74040000 + 0198hu)---

    Send_PME[0]                  - (W1S) Send PME
                                     Local processor can write 1 to send PME bit command in order to generate a PME# event on the PCI Express link.
                                     This is used to ask PCI host processor to restore bridge to a fully functional legacy power state.
                                     Note that this bit is immediately cleared by the MAC : the local processor does not need to clear it.
                                     Note that the PME_En bit in the Power Management Control/Status register should be set to 1b to enable PME# to be asserted.
                                     
                                     The register is per physical function register
    ICMD_PME_TURN_OFF_HWCLR[1]   - (RW) For RC mode.
                                     0 : HW will not clear PME_TURN_OFF bit  automatically by HW when EP received receive PME TURN OFF message.
                                     1 : HW will clear PME_TURN_OFF bit  automatically by HW when EP received receive PME TURN OFF message.
    RSVD1[3..2]                  - (RO) Reserved
    Turn_Off_Link[4]             - (RO) Turn Off Link
                                     The local processor can send a Turn Off Link command in order to start L2 state entry negotiation. 
                                     If the Endpoint device is also ready to enter this state, then both devices will enter L2 state and this link will be turned off. 
                                     Deasserting this signal forces the Core to exit L2 state and wakes the link.
    RSVD2[7..5]                  - (RO) Reserved
    CLKREQ_Clock_control[8]      - (RW) Clock Request Control Capability for RC (RC legacy L1 clock power management)
                                     0: RC does not allow the reference clock to be removed in L1PM state. (RC will enter L1 with Powerdown is P1 for legacy L1 Clock Power Management)
                                     1: RC allows the reference clock to be removed L1PM state. (RC will enter L1 with Powerdown is P2 for legacy L1 Clock Power Management)
                                     The register is only used for RC.
    RSVD3[23..9]                 - (RO) Reserved
    OBFF_control[27..24]         - (RO) OBFF Control Register.
                                     For RC mode only.
                                     If OBFF (Optimized Buffer Flash Fill) is enabled, changing the value of this signal causes the Core to signal an OBFF status change to its link partner. Allowed values are:
                                     - 1111: CPU Active (default)
                                     - 0001: OBFF
                                     - 0000: Idle
                                     Either WAKE# or message signaling can be used, depending on which signaling method is enabled.
                                     If OBFF is not enabled then changing the value of this signal has no effect.
    OBFF_status[31..28]          - (RO) OBFF Status Register.
                                     For EP mode only.
                                     If OBFF is enabled, this signals reports the OBFF status received from the Core link partner. Possible values are:
                                     - 1111: CPU Active
                                     - 0001: OBFF
                                     - 0000: Idle
                                     Either WAKE# or message signaling can be used, depending on which signaling method is enabled.
                                     If OBFF is not enabled then the value of this signal is always "CPU Active".

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_OBFF_status_ADDR          PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_OBFF_status_MASK          0xF0000000u                // OBFF_status[31..28]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_OBFF_status_SHFT          28u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_OBFF_control_ADDR         PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_OBFF_control_MASK         0x0F000000u                // OBFF_control[27..24]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_OBFF_control_SHFT         24u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD3_MASK                0x00FFFE00u                // RSVD3[23..9]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD3_SHFT                9u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_CLKREQ_Clock_control_ADDR PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_CLKREQ_Clock_control_MASK 0x00000100u                // CLKREQ_Clock_control[8]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_CLKREQ_Clock_control_SHFT 8u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD2_MASK                0x000000E0u                // RSVD2[7..5]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD2_SHFT                5u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_Turn_Off_Link_ADDR        PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_Turn_Off_Link_MASK        0x00000010u                // Turn_Off_Link[4]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_Turn_Off_Link_SHFT        4u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD1_MASK                0x0000000Cu                // RSVD1[3..2]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_RSVD1_SHFT                2u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_ICMD_PME_TURN_OFF_HWCLR_ADDR PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_ICMD_PME_TURN_OFF_HWCLR_MASK 0x00000002u                // ICMD_PME_TURN_OFF_HWCLR[1]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_ICMD_PME_TURN_OFF_HWCLR_SHFT 1u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_Send_PME_ADDR             PCIE_MAC_IREG_PCIE_ICMD_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_Send_PME_MASK             0x00000001u                // Send_PME[0]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_0_Send_PME_SHFT             0u

/* =====================================================================================

  ---PCIE_ISTATUS_PM_0 (0x74040000 + 019Chu)---

    power_state[1..0]            - (RO) Power State
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot or D3cold
                                     
                                     The register is per physical function register
    RSVD1[7..2]                  - (RO) Reserved
    l1pm_sm[10..8]               - (RO) L1SS state machine.
                                     - 000b: L1.0
                                     - 001b: L1.1
                                     - 010b: L1.2 entry
                                     - 011b: L1.2 idle
                                     - 100b: L1.2 exit
    allow_tl_clk_gating[11]      - (RO) allow tl_clk gating when device is in L1 or L2.
    RSVD2[31..12]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_RSVD2_MASK             0xFFFFF000u                // RSVD2[31..12]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_RSVD2_SHFT             12u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_allow_tl_clk_gating_ADDR PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_allow_tl_clk_gating_MASK 0x00000800u                // allow_tl_clk_gating[11]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_allow_tl_clk_gating_SHFT 11u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_l1pm_sm_ADDR           PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_l1pm_sm_MASK           0x00000700u                // l1pm_sm[10..8]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_l1pm_sm_SHFT           8u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_RSVD1_MASK             0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_RSVD1_SHFT             2u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_power_state_ADDR       PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_power_state_MASK       0x00000003u                // power_state[1..0]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_0_power_state_SHFT       0u

/* =====================================================================================

  ---ATS_PRI_REPORT (0x74040000 + 01A0hu)---

    PAGE_REQ_RESP_FAIL[0]        - (RO) Page Request Interface response failure: This bit is asserted for one clock cycle to report a response failure. 
                                     It is automatically cleared by the Bridge. (unused now)
    PAGE_REQ_UPGRI[1]            - (RO) Page Request Interface UPGRI: The application sets this bit to report an unexpected page request group index error. 
                                     It is automatically cleared by the Bridge. (unused now)
    PAGE_REQ_RUNNING[2]          - (RO) Page Request Interface running: The application sets this bit when issuing page requests or waiting for page request completions, and must clear it when serviced. (unused now)
    RSVD1[31..3]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ATS_PRI_REPORT_RSVD1_ADDR                PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_RSVD1_MASK                0xFFFFFFF8u                // RSVD1[31..3]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_RSVD1_SHFT                3u
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RUNNING_ADDR     PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RUNNING_MASK     0x00000004u                // PAGE_REQ_RUNNING[2]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RUNNING_SHFT     2u
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_UPGRI_ADDR       PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_UPGRI_MASK       0x00000002u                // PAGE_REQ_UPGRI[1]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_UPGRI_SHFT       1u
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RESP_FAIL_ADDR   PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RESP_FAIL_MASK   0x00000001u                // PAGE_REQ_RESP_FAIL[0]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RESP_FAIL_SHFT   0u

/* =====================================================================================

  ---PCIE_LTR_VALUES_0 (0x74040000 + 01A4hu)---

    LTR_Max_Snoop_Latency[9..0]  - (RW) Along with the Max Snoop LatencyScale field, this register specifies the maximum snoop latency that a device is permitted to request.
    LTR_Max_Snoop_Latency_Scale[12..10] - (RW) This register provides a scale for the value contained within the Maximum Snoop LatencyValue field. 
                                     Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD1[14..13]                - (RO) Reserved
    LTR_Snoop_latency_requirement[15] - (RW) Snoop latency requirement
    LTR_Max_NonSnoop_Latency[25..16] - (RW) Along with the Max NonSnoop LatencyScale field, this register specifies the maximum nonsnoop latency that a device is permitted to request.
    LTR_Max_NonSnoop_Latency_Scale[28..26] - (RW) This register provides a scale for the value contained within the Maximum NonSnoop LatencyValue field. 
                                     Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD2[30..29]                - (RO) Reserved
    LTR_NonSnoop_latency_requirement[31] - (RW) No-Snoop latency requirement

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_NonSnoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_NonSnoop_latency_requirement_MASK 0x80000000u                // LTR_NonSnoop_latency_requirement[31]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_NonSnoop_latency_requirement_SHFT 31u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_RSVD2_MASK             0x60000000u                // RSVD2[30..29]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_RSVD2_SHFT             29u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_NonSnoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_NonSnoop_Latency_Scale_MASK 0x1C000000u                // LTR_Max_NonSnoop_Latency_Scale[28..26]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_NonSnoop_Latency_Scale_SHFT 26u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_NonSnoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_NonSnoop_Latency_MASK 0x03FF0000u                // LTR_Max_NonSnoop_Latency[25..16]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_NonSnoop_Latency_SHFT 16u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Snoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Snoop_latency_requirement_MASK 0x00008000u                // LTR_Snoop_latency_requirement[15]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Snoop_latency_requirement_SHFT 15u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_RSVD1_MASK             0x00006000u                // RSVD1[14..13]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_RSVD1_SHFT             13u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_Snoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_Snoop_Latency_Scale_MASK 0x00001C00u                // LTR_Max_Snoop_Latency_Scale[12..10]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_Snoop_Latency_Scale_SHFT 10u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_Snoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_0_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_Snoop_Latency_MASK 0x000003FFu                // LTR_Max_Snoop_Latency[9..0]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_0_LTR_Max_Snoop_Latency_SHFT 0u

/* =====================================================================================

  ---AXI_PCIE_IF_CTRL (0x74040000 + 01A8hu)---

    cpl_bcnt_chk_disable[0]      - (RW) Check if the byte count in Completion TLP match the Memory TLP have been sent
                                     0 : Enable
                                     1 : Disable
    axitag_en[1]                 - (RW) When PCIe MAC send TLP, AXI Slave signal "axi_tag" is used to bit[7:5] of TAG field of TLP packet.
                                     The function is only useful when extend tag capability of PCIe configuration space is enabled.
                                     0 : Disable.
                                     1 : Enable
    flr_mode_sel[2]              - (RW) Select Function-Level Reset mode
                                     0 : Hardware Mode, MAC output flr_req to reset function related module and wait flr_ack.
                                     1 : Software Mode, MAC will generate interrupt to notify software when MAC receive FLR.
    MSG_ID_RPL_DIS[3]            - (RW) Test mode
                                     0 : MAC will replace requester id field of message header with the bus and device number in configuration space.
                                     1 : MAC use the message header prepared by software directly and do not replace requester id.
    MSG_POOL_EN[4]               - (RW) Message pool enable
                                     0: one AXI slave data indicates a full Message, including Header and Payload.
                                     1: Bridge Layer should store AXI slave data and transfer a full message Message until the total received size exceeds MSG_POOL_DLEN.
    MSG_POOL_DLEN[7..5]          - (RW) Message pool payload length (unit : DW)
                                     It should meet the range from 0~4 because of hardware limit.
                                     So the max total length for message pool mode is 8DW (4DW Header + 4DW Data)
                                     Valid value : 0~4
    AXI_SLV_MASK[11..8]          - (RW) AXI Slave Mask
                                     Bit [0] AXI0 Slave Mask
                                     Bit [1] AXI1 Slave Mask
                                     Bit [2] AXI2 Slave Mask
                                     Bit [3] AXI3 Slave Mask
    AXI_SLV_RESP_MASK[15..12]    - (RW) AXI Slave Resp Mask, means always response OKAY
                                     Bit [0] AXI0 Slave Resp Mask
                                     Bit [1] AXI1 Slave Resp Mask
                                     Bit [2] AXI2 Slave Resp Mask
                                     Bit [3] AXI3 Slave Resp Mask
    sw_cplto_timer[25..16]       - (RW) Completion timeout adjust
                                     Bit [19:16] 1 ms to 10ms adjust
                                     Bit [25:20] 16 ms to 55ms adjust
    sw_cplto_always_en[26]       - (RW) Always assert completion timeout for np request
                                     0 : Disable
                                     1 : Enable
    sw_wr_cplto_always_en[27]    - (RW) Always assert completion timeout for write request
                                     0 : Disable
                                     1 : Enable
    sw_cplto_data_sel[28]        - (RW) Response data select when completion timeout
                                     0: all one
                                     1: all zero
    RSVD1[29]                    - (RW) Reserved
    MSG_SW_WREQ[30]              - (RW) Message Write Request
                                     Software set one to trigger message sent. Message payload is located in 0x355C-0x357B.
                                     Hardware clear it if the message had be sent.
    MSG_WREQ[31]                 - (RW) Message Write Request
                                     Software set one to trigger message sent. Message payload is located in 0x0DA0-0xDBF.
                                     Hardware clear it if the message had be sent.

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_WREQ_ADDR           PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_WREQ_MASK           0x80000000u                // MSG_WREQ[31]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_WREQ_SHFT           31u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_SW_WREQ_ADDR        PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_SW_WREQ_MASK        0x40000000u                // MSG_SW_WREQ[30]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_SW_WREQ_SHFT        30u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD1_ADDR              PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD1_MASK              0x20000000u                // RSVD1[29]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD1_SHFT              29u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_data_sel_ADDR  PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_data_sel_MASK  0x10000000u                // sw_cplto_data_sel[28]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_data_sel_SHFT  28u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_wr_cplto_always_en_ADDR PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_wr_cplto_always_en_MASK 0x08000000u                // sw_wr_cplto_always_en[27]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_wr_cplto_always_en_SHFT 27u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_always_en_ADDR PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_always_en_MASK 0x04000000u                // sw_cplto_always_en[26]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_always_en_SHFT 26u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_timer_ADDR     PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_timer_MASK     0x03FF0000u                // sw_cplto_timer[25..16]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_sw_cplto_timer_SHFT     16u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_AXI_SLV_RESP_MASK_ADDR  PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_AXI_SLV_RESP_MASK_MASK  0x0000F000u                // AXI_SLV_RESP_MASK[15..12]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_AXI_SLV_RESP_MASK_SHFT  12u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_AXI_SLV_MASK_ADDR       PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_AXI_SLV_MASK_MASK       0x00000F00u                // AXI_SLV_MASK[11..8]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_AXI_SLV_MASK_SHFT       8u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_DLEN_ADDR      PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_DLEN_MASK      0x000000E0u                // MSG_POOL_DLEN[7..5]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_DLEN_SHFT      5u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_EN_ADDR        PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_EN_MASK        0x00000010u                // MSG_POOL_EN[4]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_EN_SHFT        4u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_ID_RPL_DIS_ADDR     PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_ID_RPL_DIS_MASK     0x00000008u                // MSG_ID_RPL_DIS[3]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_ID_RPL_DIS_SHFT     3u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_flr_mode_sel_ADDR       PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_flr_mode_sel_MASK       0x00000004u                // flr_mode_sel[2]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_flr_mode_sel_SHFT       2u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_axitag_en_ADDR          PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_axitag_en_MASK          0x00000002u                // axitag_en[1]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_axitag_en_SHFT          1u
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_cpl_bcnt_chk_disable_ADDR PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_cpl_bcnt_chk_disable_MASK 0x00000001u                // cpl_bcnt_chk_disable[0]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_cpl_bcnt_chk_disable_SHFT 0u

/* =====================================================================================

  ---ISTATUS_LOCAL_CTRL (0x74040000 + 01AChu)---

    RSVD1[1..0]                  - (RW) Reserved
    ISTATUS_LOCAL_PME_HWCLR[2]   - (RW) For RC mode.
                                     RC will cleared istatus_local[30] automatically by HW when RC driver clear cfg.pme status.
                                     0 : HW will not clear istatus_local[30]  automatically.
                                     1 : HW will clear istatus_local[30]  automatically.
    ISTATUS_LOCAL_INTX_HWCLR[3]  - (RW) For RC mode.
                                     RC will cleared istatus_local[27:24] automatically by HW when received Deassert INTx message from EP.
                                     0 : HW will not clear istatus_local[27:24]  automatically.
                                     1 : HW will clear istatus_local[27:24]  automatically.
    RSVD2[22..4]                 - (RW) Reserved
    ISTATUS_LOCAL_Master_Bus_Enable_DIS[23] - (RW) when master bus enable is toggle and this bit is 1'b0,it will generate a interrupt.
    ISTATUS_LOCAL_ATR_DIS[31..24] - (RW) Local Processor ATR Interrupt Disable
                                     Bit [24] AXI Post Error Disable
                                     Bit [25] AXI Fetch Error Disable
                                     Bit [26] AXI Discard Error Disable
                                     Bit [27] AXI Doorbell Disable
                                     Bit [28] PCIe Post Error Disable
                                     Bit [29] PCIe Fetch Error Disable
                                     Bit [30] PCIe Discard Error Disable
                                     Bit [31] PCIe Doorbell Disable

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_ATR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_ATR_DIS_MASK 0xFF000000u                // ISTATUS_LOCAL_ATR_DIS[31..24]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_ATR_DIS_SHFT 24u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_Master_Bus_Enable_DIS_ADDR PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_Master_Bus_Enable_DIS_MASK 0x00800000u                // ISTATUS_LOCAL_Master_Bus_Enable_DIS[23]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_Master_Bus_Enable_DIS_SHFT 23u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_RSVD2_ADDR            PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_RSVD2_MASK            0x007FFFF0u                // RSVD2[22..4]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_RSVD2_SHFT            4u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_INTX_HWCLR_ADDR PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_INTX_HWCLR_MASK 0x00000008u                // ISTATUS_LOCAL_INTX_HWCLR[3]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_INTX_HWCLR_SHFT 3u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_PME_HWCLR_ADDR PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_PME_HWCLR_MASK 0x00000004u                // ISTATUS_LOCAL_PME_HWCLR[2]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ISTATUS_LOCAL_PME_HWCLR_SHFT 2u
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_RSVD1_ADDR            PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_RSVD1_MASK            0x00000003u                // RSVD1[1..0]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_CTRL_RSVD1_SHFT            0u

/* =====================================================================================

  ---ISTATUS_DMA0 (0x74040000 + 01B0hu)---

    ISTATUS_DMA0[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA0_ISTATUS_DMA0_ADDR           PCIE_MAC_IREG_ISTATUS_DMA0_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA0_ISTATUS_DMA0_MASK           0xFFFFFFFFu                // ISTATUS_DMA0[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA0_ISTATUS_DMA0_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA1 (0x74040000 + 01B4hu)---

    ISTATUS_DMA1[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA1_ISTATUS_DMA1_ADDR           PCIE_MAC_IREG_ISTATUS_DMA1_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA1_ISTATUS_DMA1_MASK           0xFFFFFFFFu                // ISTATUS_DMA1[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA1_ISTATUS_DMA1_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA2 (0x74040000 + 01B8hu)---

    ISTATUS_DMA2[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA2_ISTATUS_DMA2_ADDR           PCIE_MAC_IREG_ISTATUS_DMA2_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA2_ISTATUS_DMA2_MASK           0xFFFFFFFFu                // ISTATUS_DMA2[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA2_ISTATUS_DMA2_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA3 (0x74040000 + 01BChu)---

    ISTATUS_DMA3[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA3_ISTATUS_DMA3_ADDR           PCIE_MAC_IREG_ISTATUS_DMA3_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA3_ISTATUS_DMA3_MASK           0xFFFFFFFFu                // ISTATUS_DMA3[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA3_ISTATUS_DMA3_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA4 (0x74040000 + 01C0hu)---

    ISTATUS_DMA4[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA4_ISTATUS_DMA4_ADDR           PCIE_MAC_IREG_ISTATUS_DMA4_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA4_ISTATUS_DMA4_MASK           0xFFFFFFFFu                // ISTATUS_DMA4[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA4_ISTATUS_DMA4_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA5 (0x74040000 + 01C4hu)---

    ISTATUS_DMA5[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA5_ISTATUS_DMA5_ADDR           PCIE_MAC_IREG_ISTATUS_DMA5_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA5_ISTATUS_DMA5_MASK           0xFFFFFFFFu                // ISTATUS_DMA5[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA5_ISTATUS_DMA5_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA6 (0x74040000 + 01C8hu)---

    ISTATUS_DMA6[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA6_ISTATUS_DMA6_ADDR           PCIE_MAC_IREG_ISTATUS_DMA6_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA6_ISTATUS_DMA6_MASK           0xFFFFFFFFu                // ISTATUS_DMA6[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA6_ISTATUS_DMA6_SHFT           0u

/* =====================================================================================

  ---ISTATUS_DMA7 (0x74040000 + 01CChu)---

    ISTATUS_DMA7[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. 
                                     They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA7_ISTATUS_DMA7_ADDR           PCIE_MAC_IREG_ISTATUS_DMA7_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA7_ISTATUS_DMA7_MASK           0xFFFFFFFFu                // ISTATUS_DMA7[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA7_ISTATUS_DMA7_SHFT           0u

/* =====================================================================================

  ---ISTATUS_PENDING_DMA (0x74040000 + 01D0hu)---

    ISTATUS_PENDING_DMA[7..0]    - (RO) When bit i asserted, DMA i state machine is not in IDLE state
    RSVD[31..8]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_RSVD_ADDR            PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_RSVD_MASK            0xFFFFFF00u                // RSVD[31..8]
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_RSVD_SHFT            8u
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ISTATUS_PENDING_DMA_ADDR PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ISTATUS_PENDING_DMA_MASK 0x000000FFu                // ISTATUS_PENDING_DMA[7..0]
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ISTATUS_PENDING_DMA_SHFT 0u

/* =====================================================================================

  ---ISTATUS_PENDING_ADT (0x74040000 + 01D4hu)---

    ISTATUS_PENDING_ADT_W[11..0] - (RO) When bit i asserted, ADT i at least one write buffer resource is not in IDLE state
                                     bit[0] : ADT0 (PCIe)
                                     bit[4] : ADT4 (AXI Slave0)
                                     bit[5] : ADT5 (AXI Slave1)
                                     bit[6] : ADT6 (AXI Slave2)
                                     bit[7] : ADT7 (AXI Slave3)
    RSVD1[15..12]                - (RO) Reserved
    ISTATUS_PENDING_ADT_R[27..16] - (RO) When bit i asserted, ADT i at least one read buffer resource is not in IDLE state
                                     bit[16] : ADT0 (PCIe)
                                     bit[20] : ADT4 (AXI Slave0)
                                     bit[21] : ADT5 (AXI Slave1)
                                     bit[22] : ADT6 (AXI Slave2)
                                     bit[23] : ADT7 (AXI Slave3)
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD2_ADDR           PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD2_MASK           0xF0000000u                // RSVD2[31..28]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD2_SHFT           28u
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_R_ADDR PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_R_MASK 0x0FFF0000u                // ISTATUS_PENDING_ADT_R[27..16]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_R_SHFT 16u
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD1_ADDR           PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD1_MASK           0x0000F000u                // RSVD1[15..12]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD1_SHFT           12u
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_W_ADDR PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_W_MASK 0x00000FFFu                // ISTATUS_PENDING_ADT_W[11..0]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_W_SHFT 0u

/* =====================================================================================

  ---ISTATUS_P_ADT_WIN0 (0x74040000 + 01D8hu)---

    ISTATUS_P_ADT_WIN0[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ISTATUS_P_ADT_WIN0_ADDR PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ADDR
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ISTATUS_P_ADT_WIN0_MASK 0xFFFFFFFFu                // ISTATUS_P_ADT_WIN0[31..0]
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ISTATUS_P_ADT_WIN0_SHFT 0u

/* =====================================================================================

  ---ISTATUS_P_ADT_WIN1 (0x74040000 + 01DChu)---

    ISTATUS_P_ADT_WIN1[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ISTATUS_P_ADT_WIN1_ADDR PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ADDR
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ISTATUS_P_ADT_WIN1_MASK 0xFFFFFFFFu                // ISTATUS_P_ADT_WIN1[31..0]
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ISTATUS_P_ADT_WIN1_SHFT 0u

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV0 (0x74040000 + 01E0hu)---

    ISTATUS_A_ADT_SLV0[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ISTATUS_A_ADT_SLV0_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ISTATUS_A_ADT_SLV0_MASK 0xFFFFFFFFu                // ISTATUS_A_ADT_SLV0[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ISTATUS_A_ADT_SLV0_SHFT 0u

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV1 (0x74040000 + 01E4hu)---

    ISTATUS_A_ADT_SLV1[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ISTATUS_A_ADT_SLV1_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ISTATUS_A_ADT_SLV1_MASK 0xFFFFFFFFu                // ISTATUS_A_ADT_SLV1[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ISTATUS_A_ADT_SLV1_SHFT 0u

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV2 (0x74040000 + 01E8hu)---

    ISTATUS_A_ADT_SLV2[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ISTATUS_A_ADT_SLV2_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ISTATUS_A_ADT_SLV2_MASK 0xFFFFFFFFu                // ISTATUS_A_ADT_SLV2[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ISTATUS_A_ADT_SLV2_SHFT 0u

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV3 (0x74040000 + 01EChu)---

    ISTATUS_A_ADT_SLV3[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ISTATUS_A_ADT_SLV3_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ISTATUS_A_ADT_SLV3_MASK 0xFFFFFFFFu                // ISTATUS_A_ADT_SLV3[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ISTATUS_A_ADT_SLV3_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_SET_0 (0x74040000 + 01F0hu)---

    imask_host_set[31..0]        - (W1S) Write one to set register "IMASK_HOST" in  0x0188
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_SET_0_imask_host_set_ADDR     PCIE_MAC_IREG_IMASK_HOST_SET_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_SET_0_imask_host_set_MASK     0xFFFFFFFFu                // imask_host_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_SET_0_imask_host_set_SHFT     0u

/* =====================================================================================

  ---IMASK_HOST_CLR_0 (0x74040000 + 01F4hu)---

    imask_host_clr[31..0]        - (W1C) Write one to clear register "IMASK_HOST" in  0x0188
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_CLR_0_imask_host_clr_ADDR     PCIE_MAC_IREG_IMASK_HOST_CLR_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_CLR_0_imask_host_clr_MASK     0xFFFFFFFFu                // imask_host_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_CLR_0_imask_host_clr_SHFT     0u

/* =====================================================================================

  ---PCIE_DMA_DUMMY_0_0 (0x74040000 + 01F8hu)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_0_PCIE_DUMMY_ADDR       PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_0_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_0_PCIE_DUMMY_MASK       0xFFFFFFFFu                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_0_PCIE_DUMMY_SHFT       0u

/* =====================================================================================

  ---PCIE_DMA_DUMMY_1_0 (0x74040000 + 01FChu)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_0_PCIE_DUMMY_ADDR       PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_0_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_0_PCIE_DUMMY_MASK       0xFFFFFFFFu                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_0_PCIE_DUMMY_SHFT       0u

/* =====================================================================================

  ---ROUTING_RULES_R00 (0x74040000 + 0200hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R00_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R01 (0x74040000 + 0204hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R01_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R02 (0x74040000 + 0208hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R02_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R03 (0x74040000 + 020Chu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R03_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R04 (0x74040000 + 0210hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R04_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R05 (0x74040000 + 0214hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R05_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R06 (0x74040000 + 0218hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R06_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R07 (0x74040000 + 021Chu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R07_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R08 (0x74040000 + 0220hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R08_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R09 (0x74040000 + 0224hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R09_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R10 (0x74040000 + 0228hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R10_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R11 (0x74040000 + 022Chu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R11_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R12 (0x74040000 + 0230hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R12_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R13 (0x74040000 + 0234hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R13_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R14 (0x74040000 + 0238hu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R14_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_R15 (0x74040000 + 023Chu)---

    ROUTING_RULES_R[31..0]       - (RO) Defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R15_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ROUTING_RULES_R_MASK   0xFFFFFFFFu                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ROUTING_RULES_R_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W00 (0x74040000 + 0240hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W00_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W01 (0x74040000 + 0244hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W01_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W02 (0x74040000 + 0248hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W02_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W03 (0x74040000 + 024Chu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W03_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W04 (0x74040000 + 0250hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W04_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W05 (0x74040000 + 0254hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W05_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W06 (0x74040000 + 0258hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W06_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W07 (0x74040000 + 025Chu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W07_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W08 (0x74040000 + 0260hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W08_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W09 (0x74040000 + 0264hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W09_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W10 (0x74040000 + 0268hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W10_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W11 (0x74040000 + 026Chu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W11_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W12 (0x74040000 + 0270hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W12_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W13 (0x74040000 + 0274hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W13_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W14 (0x74040000 + 0278hu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W14_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ROUTING_RULES_W15 (0x74040000 + 027Chu)---

    ROUTING_RULES_W[31..0]       - (RO) Defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W15_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ROUTING_RULES_W_MASK   0xFFFFFFFFu                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ROUTING_RULES_W_SHFT   0u

/* =====================================================================================

  ---ARBITRATION_RULES0 (0x74040000 + 0280hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES1 (0x74040000 + 0284hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES2 (0x74040000 + 0288hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES3 (0x74040000 + 028Chu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES4 (0x74040000 + 0290hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES5 (0x74040000 + 0294hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES6 (0x74040000 + 0298hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES7 (0x74040000 + 029Chu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES8 (0x74040000 + 02A0hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES9 (0x74040000 + 02A4hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType1_MASK    0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType1_SHFT    28u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType1_MASK    0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType1_SHFT    24u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType1_MASK    0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType1_SHFT    20u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType1_MASK    0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType1_SHFT    16u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType0_MASK    0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType0_SHFT    12u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType0_MASK    0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType0_SHFT    8u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType0_MASK    0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType0_SHFT    4u
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType0_MASK    0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType0_SHFT    0u

/* =====================================================================================

  ---ARBITRATION_RULES10 (0x74040000 + 02A8hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType1_MASK   0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType1_SHFT   28u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType1_MASK   0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType1_SHFT   24u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType1_MASK   0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType1_SHFT   20u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType1_MASK   0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType1_SHFT   16u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType0_MASK   0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType0_SHFT   12u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType0_MASK   0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType0_SHFT   8u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType0_MASK   0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType0_SHFT   4u
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType0_MASK   0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType0_SHFT   0u

/* =====================================================================================

  ---ARBITRATION_RULES11 (0x74040000 + 02AChu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType1_MASK   0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType1_SHFT   28u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType1_MASK   0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType1_SHFT   24u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType1_MASK   0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType1_SHFT   20u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType1_MASK   0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType1_SHFT   16u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType0_MASK   0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType0_SHFT   12u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType0_MASK   0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType0_SHFT   8u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType0_MASK   0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType0_SHFT   4u
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType0_MASK   0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType0_SHFT   0u

/* =====================================================================================

  ---ARBITRATION_RULES12 (0x74040000 + 02B0hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType1_MASK   0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType1_SHFT   28u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType1_MASK   0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType1_SHFT   24u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType1_MASK   0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType1_SHFT   20u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType1_MASK   0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType1_SHFT   16u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType0_MASK   0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType0_SHFT   12u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType0_MASK   0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType0_SHFT   8u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType0_MASK   0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType0_SHFT   4u
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType0_MASK   0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType0_SHFT   0u

/* =====================================================================================

  ---ARBITRATION_RULES13 (0x74040000 + 02B4hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType1_MASK   0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType1_SHFT   28u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType1_MASK   0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType1_SHFT   24u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType1_MASK   0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType1_SHFT   20u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType1_MASK   0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType1_SHFT   16u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType0_MASK   0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType0_SHFT   12u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType0_MASK   0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType0_SHFT   8u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType0_MASK   0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType0_SHFT   4u
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType0_MASK   0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType0_SHFT   0u

/* =====================================================================================

  ---ARBITRATION_RULES14 (0x74040000 + 02B8hu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType1_MASK   0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType1_SHFT   28u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType1_MASK   0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType1_SHFT   24u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType1_MASK   0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType1_SHFT   20u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType1_MASK   0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType1_SHFT   16u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType0_MASK   0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType0_SHFT   12u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType0_MASK   0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType0_SHFT   8u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType0_MASK   0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType0_SHFT   4u
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType0_MASK   0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType0_SHFT   0u

/* =====================================================================================

  ---ARBITRATION_RULES15 (0x74040000 + 02BChu)---

    RdReqArbType0[3..0]          - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RO) defines the arbitration type for read requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RO) defines the arbitration type for read completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RO) defines the arbitration type for write requests
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RO) defines the arbitration type for write completion
                                     0: reserved
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType1_MASK   0xF0000000u                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType1_SHFT   28u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType1_MASK   0x0F000000u                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType1_SHFT   24u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType1_MASK   0x00F00000u                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType1_SHFT   20u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType1_MASK   0x000F0000u                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType1_SHFT   16u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType0_MASK   0x0000F000u                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType0_SHFT   12u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType0_MASK   0x00000F00u                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType0_SHFT   8u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType0_MASK   0x000000F0u                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType0_SHFT   4u
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType0_MASK   0x0000000Fu                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType0_SHFT   0u

/* =====================================================================================

  ---PRIORITY_RULES0 (0x74040000 + 02C0hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES1 (0x74040000 + 02C4hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES2 (0x74040000 + 02C8hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES3 (0x74040000 + 02CChu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES4 (0x74040000 + 02D0hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES5 (0x74040000 + 02D4hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES6 (0x74040000 + 02D8hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES7 (0x74040000 + 02DChu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES8 (0x74040000 + 02E0hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES9 (0x74040000 + 02E4hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority1_MASK      0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority1_SHFT      28u
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority1_MASK      0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority1_SHFT      24u
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority1_MASK      0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority1_SHFT      20u
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority1_MASK      0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority1_SHFT      16u
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority0_MASK      0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority0_SHFT      12u
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority0_MASK      0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority0_SHFT      8u
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority0_MASK      0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority0_SHFT      4u
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority0_MASK      0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority0_SHFT      0u

/* =====================================================================================

  ---PRIORITY_RULES10 (0x74040000 + 02E8hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority1_MASK     0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority1_SHFT     28u
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority1_MASK     0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority1_SHFT     24u
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority1_MASK     0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority1_SHFT     20u
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority1_MASK     0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority1_SHFT     16u
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority0_MASK     0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority0_SHFT     12u
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority0_MASK     0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority0_SHFT     8u
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority0_MASK     0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority0_SHFT     4u
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority0_MASK     0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority0_SHFT     0u

/* =====================================================================================

  ---PRIORITY_RULES11 (0x74040000 + 02EChu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority1_MASK     0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority1_SHFT     28u
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority1_MASK     0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority1_SHFT     24u
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority1_MASK     0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority1_SHFT     20u
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority1_MASK     0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority1_SHFT     16u
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority0_MASK     0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority0_SHFT     12u
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority0_MASK     0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority0_SHFT     8u
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority0_MASK     0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority0_SHFT     4u
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority0_MASK     0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority0_SHFT     0u

/* =====================================================================================

  ---PRIORITY_RULES12 (0x74040000 + 02F0hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority1_MASK     0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority1_SHFT     28u
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority1_MASK     0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority1_SHFT     24u
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority1_MASK     0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority1_SHFT     20u
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority1_MASK     0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority1_SHFT     16u
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority0_MASK     0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority0_SHFT     12u
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority0_MASK     0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority0_SHFT     8u
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority0_MASK     0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority0_SHFT     4u
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority0_MASK     0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority0_SHFT     0u

/* =====================================================================================

  ---PRIORITY_RULES13 (0x74040000 + 02F4hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority1_MASK     0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority1_SHFT     28u
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority1_MASK     0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority1_SHFT     24u
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority1_MASK     0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority1_SHFT     20u
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority1_MASK     0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority1_SHFT     16u
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority0_MASK     0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority0_SHFT     12u
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority0_MASK     0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority0_SHFT     8u
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority0_MASK     0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority0_SHFT     4u
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority0_MASK     0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority0_SHFT     0u

/* =====================================================================================

  ---PRIORITY_RULES14 (0x74040000 + 02F8hu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority1_MASK     0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority1_SHFT     28u
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority1_MASK     0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority1_SHFT     24u
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority1_MASK     0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority1_SHFT     20u
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority1_MASK     0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority1_SHFT     16u
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority0_MASK     0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority0_SHFT     12u
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority0_MASK     0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority0_SHFT     8u
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority0_MASK     0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority0_SHFT     4u
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority0_MASK     0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority0_SHFT     0u

/* =====================================================================================

  ---PRIORITY_RULES15 (0x74040000 + 02FChu)---

    RdReqPriority0[3..0]         - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RO) defines the priority of the read request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RO) defines the priority of the read completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RO) defines the priority of the write request. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RO) defines the priority of the write completion. 
                                     The higher the Priority value attributed to a request or completion, the lower the actual priority. 
                                     For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority1_MASK     0xF0000000u                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority1_SHFT     28u
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority1_MASK     0x0F000000u                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority1_SHFT     24u
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority1_MASK     0x00F00000u                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority1_SHFT     20u
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority1_MASK     0x000F0000u                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority1_SHFT     16u
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority0_MASK     0x0000F000u                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority0_SHFT     12u
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority0_MASK     0x00000F00u                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority0_SHFT     8u
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority0_MASK     0x000000F0u                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority0_SHFT     4u
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority0_MASK     0x0000000Fu                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority0_SHFT     0u

/* =====================================================================================

  ---P2A_TC_QOS_CONV (0x74040000 + 0300hu)---

    tc_qos_auto_conv[0]          - (RW) Automatic conversion between PCIe Traffic Class and AXI Quality of Service :
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_P2A_TC_QOS_CONV.
                                     When automatic conversion is enabled, the Traffic Class or AxQoS values issued by the Bridge are computed based on the Traffic Class or AxQoS values received by the Address Translation modules.
                                     When this bit is asserted, automatic conversion between PCIe Traffic Class and AXI Quality of Service is enabled. Otherwise it is disabled.
                                     Note: The AxQoS[3:0] value corresponding to TC[2:0] = 0 is always 0.
                                     When automatic conversion is disabled, the Traffic Class or AxQoS values issued by the Bridge depends on the Transfer Parameters programmed in Address Translation Tables.
    RESERVED1[3..1]              - (RO) Reserved bits
    aqos_tc1[7..4]               - (RW) AxQoS value corresponding to TC[2:0] = 1
                                     (recommended value is 1)
    aqos_tc2[11..8]              - (RW) AxQoS value corresponding to TC[2:0] = 2
                                     (recommended value is 2)
    aqos_tc3[15..12]             - (RW) AxQoS value corresponding to TC[2:0] = 3
                                     (recommended value is 3)
    aqos_tc4[19..16]             - (RW) AxQoS value corresponding to TC[2:0] = 4
                                     (recommended value is 4)
    aqos_tc5[23..20]             - (RW) AxQoS value corresponding to TC[2:0] = 5
                                     (recommended value is 5)
    aqos_tc6[27..24]             - (RW) AxQoS value corresponding to TC[2:0] = 6
                                     (recommended value is 6)
    aqos_tc7[31..28]             - (RW) AxQoS value corresponding to TC[2:0] = 7
                                     (recommended value is 7)

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc7_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc7_MASK            0xF0000000u                // aqos_tc7[31..28]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc7_SHFT            28u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc6_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc6_MASK            0x0F000000u                // aqos_tc6[27..24]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc6_SHFT            24u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc5_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc5_MASK            0x00F00000u                // aqos_tc5[23..20]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc5_SHFT            20u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc4_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc4_MASK            0x000F0000u                // aqos_tc4[19..16]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc4_SHFT            16u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc3_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc3_MASK            0x0000F000u                // aqos_tc3[15..12]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc3_SHFT            12u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc2_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc2_MASK            0x00000F00u                // aqos_tc2[11..8]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc2_SHFT            8u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc1_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc1_MASK            0x000000F0u                // aqos_tc1[7..4]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc1_SHFT            4u
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_tc_qos_auto_conv_ADDR    PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_tc_qos_auto_conv_MASK    0x00000001u                // tc_qos_auto_conv[0]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_tc_qos_auto_conv_SHFT    0u

/* =====================================================================================

  ---P2A_ATTR_CACHE_CONV (0x74040000 + 0304hu)---

    attr_cache_auto_conv[0]      - (RW) Automatic conversion between PCIe No Snoop Attribute and AXI Memory types
                                     When automatic conversion is enabled, the No Snoop Attribute or AxCACHE values issued by the Bridge are computed based on the No Snoop Attribute or AxCACHE values received by the Address Translation modules.
                                     Bit [0]: When this bit is asserted, automatic conversion between PCIe No Snoop Attribute and AXI Memory types is enabled.
    RESERVED1[3..1]              - (RO) Reserved bits
    memory_bufferable[4]         - (RW) Bit [4]: Memory bufferable: when asserted, all PCIe memory accesses are marked as bufferable (AxCACHE[0] is set to 1) 
                                     (recommended value = 1).
    memory_cacheable[5]          - (RW) Bit [5]: Memory cacheable: when asserted, and PCIe No Snoop = 0, all PCIe memory accesses are marked as cacheable (AxCACHE[1] is set to 1) 
                                     (recommended value = 1).
    memory_allocate[6]           - (RW) Bit [6]: Memory allocate: when asserted, and PCIe No Snoop = 0 and Bit [5:4] = 2'b11, all PCIe memory accesses are marked as allocate (AxCACHE[2] is set to 1) 
                                     (recommended value = 0).
    memory_other_allocate[7]     - (RW) Bit [7]: Memory other allocate: when asserted, and PCIe No Snoop = 0 and Bit [5:4] = 2'b11, all PCIe memory accesses are marked as other allocate (AxCACHE[3] is set to 1) 
                                     (recommended value = 0).
    RESERVED8[23..8]             - (RO) Reserved bits
    non_cache_space_size[30..24] - (RW) Bit [30:24]: Non-Cacheable Space Size: when set to 0, this address space is disabled. 
                                     Otherwise its size is equal to 2^Non-Cacheable Space Size in Bytes.
    non_cache_space_bufferable[31] - (RW) Bit [31]: Non-Cacheable Space bufferable: 
                                     when asserted, all PCIe accesses whose address falls between Non-Cacheable Space Base Address and Non-Cacheable Space Base Address + 2^Non-Cacheable Space Size are set to AxCACHE = 4'b0001. Otherwise it is set to 4'b0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_bufferable_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_bufferable_MASK 0x80000000u                // non_cache_space_bufferable[31]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_bufferable_SHFT 31u
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_size_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_size_MASK 0x7F000000u                // non_cache_space_size[30..24]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_size_SHFT 24u
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_other_allocate_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_other_allocate_MASK 0x00000080u                // memory_other_allocate[7]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_other_allocate_SHFT 7u
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_allocate_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_allocate_MASK 0x00000040u                // memory_allocate[6]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_allocate_SHFT 6u
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_cacheable_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_cacheable_MASK 0x00000020u                // memory_cacheable[5]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_cacheable_SHFT 5u
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_bufferable_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_bufferable_MASK 0x00000010u                // memory_bufferable[4]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_bufferable_SHFT 4u
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_attr_cache_auto_conv_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_attr_cache_auto_conv_MASK 0x00000001u                // attr_cache_auto_conv[0]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_attr_cache_auto_conv_SHFT 0u

/* =====================================================================================

  ---P2A_NC_BASE_ADDR_L (0x74040000 + 0308hu)---

    p2a_nc_base_addr_low[31..0]  - (RW) Low 32 bit address of P2A_NC_BASE_ADDR.
                                     This 64-bit address should be aligned on Non-Cacheable Space Size. 
                                     Therefore, P2A_NC_BASE_ADDR[integer (Non-Cacheable Space Size-1):0] should be reserved and is ignored.
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_P2A_NC_BASE_ADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_p2a_nc_base_addr_low_ADDR PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_ADDR
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_p2a_nc_base_addr_low_MASK 0xFFFFFFFFu                // p2a_nc_base_addr_low[31..0]
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_p2a_nc_base_addr_low_SHFT 0u

/* =====================================================================================

  ---P2A_NC_BASE_ADDR_H (0x74040000 + 030Chu)---

    p2a_nc_base_addr_high[31..0] - (RW) High 32 bit address of P2A_NC_BASE_ADDR.
                                     This 64-bit address should be aligned on Non-Cacheable Space Size. 
                                     Therefore, P2A_NC_BASE_ADDR[integer (Non-Cacheable Space Size-1):0] should be reserved and is ignored.
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_P2A_NC_BASE_ADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_p2a_nc_base_addr_high_ADDR PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_ADDR
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_p2a_nc_base_addr_high_MASK 0xFFFFFFFFu                // p2a_nc_base_addr_high[31..0]
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_p2a_nc_base_addr_high_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_LOCAL_INTR_MASK (0x74040000 + 0310hu)---

    sw_trig_local_intr_mask[31..0] - (RO) Software trigger interrupt for local CPU enable.
                                     If any bit status f the register is 1, HW will enable assert interrupt to local CPU.

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_sw_trig_local_intr_mask_ADDR PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_ADDR
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_sw_trig_local_intr_mask_MASK 0xFFFFFFFFu                // sw_trig_local_intr_mask[31..0]
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_sw_trig_local_intr_mask_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_LOCAL_INTR_MASK_W1S (0x74040000 + 0314hu)---

    sw_trig_local_intr_mask_w1s[31..0] - (W1S) Write one to set sw_trig_local_intr_mask in address 0x0310

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1S_sw_trig_local_intr_mask_w1s_ADDR PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1S_ADDR
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1S_sw_trig_local_intr_mask_w1s_MASK 0xFFFFFFFFu                // sw_trig_local_intr_mask_w1s[31..0]
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1S_sw_trig_local_intr_mask_w1s_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_LOCAL_INTR_MASK_W1C (0x74040000 + 0318hu)---

    sw_trig_local_intr_mask_w1c[31..0] - (W1C) Write one to clear sw_trig_local_intr_mask in address 0x0310

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1C_sw_trig_local_intr_mask_w1c_ADDR PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1C_ADDR
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1C_sw_trig_local_intr_mask_w1c_MASK 0xFFFFFFFFu                // sw_trig_local_intr_mask_w1c[31..0]
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_MASK_W1C_sw_trig_local_intr_mask_w1c_SHFT 0u

/* =====================================================================================

  ---ISTATUS_HOST_CTRL_0 (0x74040000 + 031Chu)---

    ISTATUS_HOST_DIS[0]          - (RW) When the register is set to 1, all interrupt to Host will be disabled
                                     0 : Enable
                                     1 : Disable
                                     
                                     The register is per physical function register
    ISTATUS_HOST_EXT_CLR_DIS[1]  - (RW) When external interrupt in fall, it will clear ISTATUS_HOST status or not (0x18C)
                                     0 : Enable (external interrupt falling edge will clear corresponding bit of ISTATUS_HOST automatically) (MTK Proprietary Mode)
                                     1 : Disable (external interrupt falling edge will not clear corresponding bit of ISTATUS_HOST automatically) (Original PLDA mode)
    ISTATUS_HOST_DIS_LOCAL[2]    - (RW) When the register is set to 1, all interrupt to Host will be disabled, which is for EP CPU in local.
                                     0 : Enable
                                     1 : Disable
                                     
                                     The register is per physical function register
    RSVD1[15..3]                 - (RW) Reserved
    ISTATUS_HOST_ATR_DIS[23..16] - (RW) Host Processor ATR Interrupt Disable
                                     Bit [16] AXI Post Error Disable
                                     Bit [17] AXI Fetch Error Disable
                                     Bit [18] AXI Discard Error Disable
                                     Bit [19] AXI Doorbell Disable
                                     Bit [20] PCIe Post Error Disable
                                     Bit [21] PCIe Fetch Error Disable
                                     Bit [22] PCIe Discard Error Disable
                                     Bit [23] PCIe Doorbell Disable
    RSVD2[31..24]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_RSVD2_ADDR           PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_RSVD2_MASK           0xFF000000u                // RSVD2[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_RSVD2_SHFT           24u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_ATR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_ATR_DIS_MASK 0x00FF0000u                // ISTATUS_HOST_ATR_DIS[23..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_ATR_DIS_SHFT 16u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_RSVD1_ADDR           PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_RSVD1_MASK           0x0000FFF8u                // RSVD1[15..3]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_RSVD1_SHFT           3u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_DIS_LOCAL_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_DIS_LOCAL_MASK 0x00000004u                // ISTATUS_HOST_DIS_LOCAL[2]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_DIS_LOCAL_SHFT 2u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_EXT_CLR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_EXT_CLR_DIS_MASK 0x00000002u                // ISTATUS_HOST_EXT_CLR_DIS[1]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_EXT_CLR_DIS_SHFT 1u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_DIS_MASK 0x00000001u                // ISTATUS_HOST_DIS[0]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_0_ISTATUS_HOST_DIS_SHFT 0u

/* =====================================================================================

  ---ORDRULES_DIS (0x74040000 + 0320hu)---

    P_RD_VS_P_WR_DIS[0]          - (RW) when this bit is 1b, the ordering rule between PCIe read requests and PCIe write requests is disabled.
                                     This means that PCIe Non-Posted requests (without data) are allowed to pass before PCIe Posted requests, possibly violating the PCIe Specification B2a Ordering Rule.
    P2Q_RD_VS_P2Q_WR_DIS[1]      - (RW) when this bit is 1b, the ordering rule between PCIe read requests and PCIe write requests is disabled in P2Q module
                                     This means that PCIe Non-Posted requests (without data) are allowed to pass before PCIe Posted requests, possibly violating the PCIe Specification B2a Ordering Rule.
    RSVD1[3..2]                  - (RO) Reserved
    Ai_CPL_VS_P_WR_DIS[7..4]     - (RW) when this bit is 1b, the ordering rule between AXI Slave #i read completions and PCIe write requests is disabled. 
                                     This means that PCIe to AXI Slave #i read completions are allowed to pass before PCIe Posted requests to AXI Master #0, possibly violating the PCIe Specification D2a Ordering Rule.
    Ai_RD_VS_Ai_WR_DIS[11..8]    - (RW) when this bit is 1b, the ordering rule between AXI Slave #i read requests and AXI Slave #i write requests is disabled. 
                                     This means that AXI Slave #i read requests (without data) are allowed to pass before AXI Slave #i write requests, possibly violating the PCIe Specification B2a Ordering Rule.
    P_CPL_VS_Ai_WR_DIS[15..12]   - (RW) when this bit is 1b, the ordering rule between PCIe read completions and AXI Slave #i to PCIe write requests is disabled. 
                                     This means that AXI to PCIe read completions are allowed to pass before AXI Slave #i to PCIe Posted requests, possibly violating the PCIe Specification D2a Ordering Rule.
    Ai_CPL_VS_Aj_WR_DIS[31..16]  - (RW) when this bit is 1b, the ordering rule between AXI Slave #i read completions and AXI Slave #j write requests is disabled. 
                                     This means that AXI Master #j to AXI Slave #i read completions are allowed to pass before AXI Slave #j write requests to AXI Master #i, possibly violating the PCIe Specification D2a Ordering Rule.

 =====================================================================================*/
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_Aj_WR_DIS_ADDR    PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_Aj_WR_DIS_MASK    0xFFFF0000u                // Ai_CPL_VS_Aj_WR_DIS[31..16]
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_Aj_WR_DIS_SHFT    16u
#define PCIE_MAC_IREG_ORDRULES_DIS_P_CPL_VS_Ai_WR_DIS_ADDR     PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_P_CPL_VS_Ai_WR_DIS_MASK     0x0000F000u                // P_CPL_VS_Ai_WR_DIS[15..12]
#define PCIE_MAC_IREG_ORDRULES_DIS_P_CPL_VS_Ai_WR_DIS_SHFT     12u
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_RD_VS_Ai_WR_DIS_ADDR     PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_RD_VS_Ai_WR_DIS_MASK     0x00000F00u                // Ai_RD_VS_Ai_WR_DIS[11..8]
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_RD_VS_Ai_WR_DIS_SHFT     8u
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_P_WR_DIS_ADDR     PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_P_WR_DIS_MASK     0x000000F0u                // Ai_CPL_VS_P_WR_DIS[7..4]
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_P_WR_DIS_SHFT     4u
#define PCIE_MAC_IREG_ORDRULES_DIS_RSVD1_ADDR                  PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_RSVD1_MASK                  0x0000000Cu                // RSVD1[3..2]
#define PCIE_MAC_IREG_ORDRULES_DIS_RSVD1_SHFT                  2u
#define PCIE_MAC_IREG_ORDRULES_DIS_P2Q_RD_VS_P2Q_WR_DIS_ADDR   PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_P2Q_RD_VS_P2Q_WR_DIS_MASK   0x00000002u                // P2Q_RD_VS_P2Q_WR_DIS[1]
#define PCIE_MAC_IREG_ORDRULES_DIS_P2Q_RD_VS_P2Q_WR_DIS_SHFT   1u
#define PCIE_MAC_IREG_ORDRULES_DIS_P_RD_VS_P_WR_DIS_ADDR       PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_P_RD_VS_P_WR_DIS_MASK       0x00000001u                // P_RD_VS_P_WR_DIS[0]
#define PCIE_MAC_IREG_ORDRULES_DIS_P_RD_VS_P_WR_DIS_SHFT       0u

/* =====================================================================================

  ---RAM_ARB_PRIORITY (0x74040000 + 0324hu)---

    RAM_ARB_PRIOR[31..0]         - (RW) RAM Arbitration Priority.
                                     If set port priority to 1, the port change to high priority.
                                     Bit[7:0] : P2A Write Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA2 > DMA4
                                     Bit [0]: PCIe
                                     Bit [1]: AXI Slave0
                                     Bit [2]: AXI Slave1
                                     Bit [3]: AXI Slave2
                                     Bit [4]: AXI Slave3
                                     Bit [5] : DMA0
                                     Bit [6] : DMA2
                                     Bit [7] : DMA4
                                     Bit[15:8] : A2P Write Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA3 > DMA5
                                     Bit [8]: PCIe
                                     Bit [9]: AXI Slave0
                                     Bit [10]: AXI Slave1
                                     Bit [11]: AXI Slave2
                                     Bit [12]: AXI Slave3
                                     Bit [13] : DMA1
                                     Bit [14] : DMA3
                                     Bit [15] : DMA5
                                     Bit[23:16] : P2A Read Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA2 > DMA4
                                     Bit [16]: PCIe
                                     Bit [17]: AXI Slave0
                                     Bit [18]: AXI Slave1
                                     Bit [19]: AXI Slave2
                                     Bit [20]: AXI Slave3
                                     Bit [21] : DMA0
                                     Bit [22] : DMA2
                                     Bit [23] : DMA4
                                     Bit[31:24] : A2P Read Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA3 > DMA5
                                     Bit [24]: PCIe
                                     Bit [25]: AXI Slave0
                                     Bit [26]: AXI Slave1
                                     Bit [27]: AXI Slave2
                                     Bit [28]: AXI Slave3
                                     Bit [29] : DMA1
                                     Bit [30] : DMA3
                                     Bit [31] : DMA5

 =====================================================================================*/
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_RAM_ARB_PRIOR_ADDR      PCIE_MAC_IREG_RAM_ARB_PRIORITY_ADDR
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_RAM_ARB_PRIOR_MASK      0xFFFFFFFFu                // RAM_ARB_PRIOR[31..0]
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_RAM_ARB_PRIOR_SHFT      0u

/* =====================================================================================

  ---RAM_ARB_OPTIONS (0x74040000 + 0328hu)---

    RAM_ARB_OPTIONS[31..0]       - (RW) RAM Arbitration Options: To optimize performances, access to shared RAM should be granted to a requester for the entire duration of packet reading or writing.
                                     However, this may lead to deadlock or performance issues if a requester starts reading or writing a packet, but then has to wait for another packet to be read or written before sending the rest of the packet.
                                     The RAM Arbitration Options enable you to work around this issue by forcing arbitration computation after each clock cycle.
                                     When the associated bit is 1b, the corresponding write or read access arbitration is reevaluated every clock cycle; otherwise it is reevaluated at the end of the packet in progress.
                                     Bit [0]: PCIe to AXI Buffer Write Arbitration: if this bit is 0, a deadlock can occur if AXI interleaved read data is written to this buffer.
                                     Bit [1]: AXI to PCIe Buffer Write Arbitration: if this bit is 0, a deadlock can occur if AXI interleaved read data is written to this buffer.
                                     Bit [3:2]: reserved
                                     Bit [4]: PCIe to AXI Buffer Read Arbitration: if this bit is 0, performance issues can occur if packets are forwarded to a slow performance interface. Typically, if a packet is sent to a slow AXI Master Interface (due to low clock frequency, datapath or application), other packets should wait for this packet to be forwarded before being extracted.
                                     Bit [5]: AXI to PCIe Buffer Read Arbitration: if this bit is 0, performance issues can occur if packets are forwarded to a slow performance interface. If this bit is 1, however, performance issues can occur if several write transactions from different AXI Slave Interfaces are forwarded to the PCIe at the same time.
                                     Bit [31:6]: reserved
                                     The reset value for this register is 0x00000013.
                                     If AXI to AXI transactions are allowed and stored in the AXI to PCIe Buffer, this register may be set to 0x00000033

 =====================================================================================*/
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_RAM_ARB_OPTIONS_ADDR     PCIE_MAC_IREG_RAM_ARB_OPTIONS_ADDR
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_RAM_ARB_OPTIONS_MASK     0xFFFFFFFFu                // RAM_ARB_OPTIONS[31..0]
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_RAM_ARB_OPTIONS_SHFT     0u

/* =====================================================================================

  ---RAM_READ_OPTIONS (0x74040000 + 032Chu)---

    RAM_READ_OPTIONS[31..0]      - (RW) RAM Read Options: When an Address Translation Module or a DMA Engine forwards a write transaction or a read completion, it keeps its read enable active even if the Bridge interconnect doesn't grant access to it.
                                     This could lead to performance issues if several modules target the same interface, and there will be unnecessary reads if the RAM Arbitration Option is set to 0.
                                     The RAM Read Options enable you to work around this issue by forcing read enable de-assertion when access to the destination interface isn't granted.
                                     However, a dead clock cycle will be required for the module to re-assert read enable when access is finally granted.
                                     When the associated bit is 1b, read enable for the corresponding packet extraction is forcibly de-asserted; otherwise it is kept asserted.
                                     Bit [0]: PCIe Address Translation Module write transaction extraction.
                                     Bit [1]: PCIe Address Translation Module read completion extraction.
                                     Bit [7:2]: reserved
                                     Bit [8 + 2*i + 0]: AXI Slave #i Address Translation Module write transaction extraction.
                                     Bit [8 + 2*i + 1]: AXI Slave #i Address Translation Module read completion extraction.
                                     Bit [23:16]: reserved
                                     Bit [24 + j]: DMA Engine write transaction extraction.

 =====================================================================================*/
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_RAM_READ_OPTIONS_ADDR   PCIE_MAC_IREG_RAM_READ_OPTIONS_ADDR
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_RAM_READ_OPTIONS_MASK   0xFFFFFFFFu                // RAM_READ_OPTIONS[31..0]
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_RAM_READ_OPTIONS_SHFT   0u

/* =====================================================================================

  ---ECO_SPACE_0 (0x74040000 + 0330hu)---

    eco_space_0[31..0]           - (RW) Spare Register for ECOs.
                                     The purpose of this 32-bit RW reserved register is to ease ECO implementation

 =====================================================================================*/
#define PCIE_MAC_IREG_ECO_SPACE_0_eco_space_0_ADDR             PCIE_MAC_IREG_ECO_SPACE_0_ADDR
#define PCIE_MAC_IREG_ECO_SPACE_0_eco_space_0_MASK             0xFFFFFFFFu                // eco_space_0[31..0]
#define PCIE_MAC_IREG_ECO_SPACE_0_eco_space_0_SHFT             0u

/* =====================================================================================

  ---ECO_SPACE_1 (0x74040000 + 0334hu)---

    eco_space_1[31..0]           - (RW) Spare Register for ECOs.
                                     The purpose of this 32-bit RW reserved register is to ease ECO implementation

 =====================================================================================*/
#define PCIE_MAC_IREG_ECO_SPACE_1_eco_space_1_ADDR             PCIE_MAC_IREG_ECO_SPACE_1_ADDR
#define PCIE_MAC_IREG_ECO_SPACE_1_eco_space_1_MASK             0xFFFFFFFFu                // eco_space_1[31..0]
#define PCIE_MAC_IREG_ECO_SPACE_1_eco_space_1_SHFT             0u

/* =====================================================================================

  ---PIPE4_PIE8_SETTING (0x74040000 + 0338hu)---

    k_finetune_max[5..0]         - (RW) Maximum number of fine-tuning iterations. 
                                     Supported values are 0 - 63. If value is 0, will disable fine-tuning.
                                     This parameter is used to limit the number of coefficient fine-tuning iterations. 
                                     It should be adjusted to ensure that the remote transmitter does not continue for too long and that it completes within the 24ms time frame allowed by the PCI Express specifications.
                                     0 : disable
                                     1 : 7 iterations
                                     2 : 11 iterations
                                     ...
                                     62 : 251 iterations
                                     63 : 255 iterations
    k_finetune_err[7..6]         - (RW) Behavior if PHY gives direction change instructions that would lead to illegal coeffs
                                     Specifies behavior when an error is detected during the fine-tuning process. 
                                     If PHY gives direction-change instructions that would lead to illegal coefficients then the module does one of the following:
                                     00: last good coefficients are kept and fine-tuning iterations continue
                                     01: last good coefficients are kept and fine-tuning iterations are stopped
                                     10: best preset is reapplied and fine-tuning iterations continue from there (number of fine tuning iterations is reset)
                                     11: best preset is reapplied and fine-tuning iterations are stopped
    k_preset_to_use[18..8]       - (RW) This signal indicates which preset will be tested in the preset scanning phase for 8G speed.
                                     0: Use preset 0
                                     1: Use preset 1
                                     ...
                                     10: Use preset 10
                                     If all bits are 0 then no preset will be tested. 
                                     Either no bits or just one bit must be set if the PHY does not support evaluation feedback in figure of merit format.
    k_phyparam_query[19]         - (RW) Query PHY to get parameters:
                                     0: Use internal FS/LF/Preset-to-coefficient values (these internal values need to be adjusted depending on the PHY)
                                     1: Query local FS/LF/Preset-to-coefficient values from the PHY through PIPE interface signals
    k_query_timeout[20]          - (RW) Implement timeout for Preset-to-coefficient query:
                                     0: No timeout
                                     1: Implement a 256 clock cycles timeout
                                     Note that PIPE specification indicates that PHY must respond to a Preset-to-coefficient within 128ns.
    k_preset_to_use_16g[31..21]  - (RW) This signal indicates which preset will be tested in the preset scanning phase for 16G speed.
                                     0: Use preset 0
                                     1: Use preset 1
                                     ...
                                     10: Use preset 10
                                     If all bits are 0 then no preset will be tested. 
                                     Either no bits or just one bit must be set if the PHY does not support evaluation feedback in figure of merit format.

 =====================================================================================*/
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_16g_ADDR PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_16g_MASK 0xFFE00000u                // k_preset_to_use_16g[31..21]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_16g_SHFT 21u
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_query_timeout_ADDR  PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_query_timeout_MASK  0x00100000u                // k_query_timeout[20]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_query_timeout_SHFT  20u
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_phyparam_query_ADDR PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_phyparam_query_MASK 0x00080000u                // k_phyparam_query[19]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_phyparam_query_SHFT 19u
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_ADDR  PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_MASK  0x0007FF00u                // k_preset_to_use[18..8]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_SHFT  8u
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_err_ADDR   PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_err_MASK   0x000000C0u                // k_finetune_err[7..6]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_err_SHFT   6u
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_max_ADDR   PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_max_MASK   0x0000003Fu                // k_finetune_max[5..0]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_max_SHFT   0u

/* =====================================================================================

  ---PHYMAC_CFG (0x74040000 + 033Chu)---

    Perform_equ_phases_23[0]     - (RW) For downstream ports: setting this bit makes the Core execute phases 2/3; otherwise these phases are skipped.
                                     For upstream ports: setting this bit makes the Core perform remote transmitter adjustment during phase 2; otherwise
                                     the Core does not perform adjustment during this phase.
    Use_RXEIDLE_det_elecidle_entry[1] - (RW) Use RXELECIDLE to Detect Electrical Idle Entry
                                     0: Do not use RXELECIDLE to detect electrical idle entry
                                     1: Use RXELECIDLE to detect electrical idle entry
    RxValid_Filter_Enable[2]     - (RW) When set to 1, special logic is used to solve issues if the PHY does not de-assert PL_RXVALID after EIOS is received.
    Disable_16GT_EIEOS_support[3] - (RW) when this bit is set to 1, 16GT EIEOS cannot be used at 16GT/s; 8GT EIEOS are used at 8 and 16GT/s instead.
    RSVD1[31..4]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PHYMAC_CFG_RSVD1_ADDR                    PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_RSVD1_MASK                    0xFFFFFFF0u                // RSVD1[31..4]
#define PCIE_MAC_IREG_PHYMAC_CFG_RSVD1_SHFT                    4u
#define PCIE_MAC_IREG_PHYMAC_CFG_Disable_16GT_EIEOS_support_ADDR PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_Disable_16GT_EIEOS_support_MASK 0x00000008u                // Disable_16GT_EIEOS_support[3]
#define PCIE_MAC_IREG_PHYMAC_CFG_Disable_16GT_EIEOS_support_SHFT 3u
#define PCIE_MAC_IREG_PHYMAC_CFG_RxValid_Filter_Enable_ADDR    PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_RxValid_Filter_Enable_MASK    0x00000004u                // RxValid_Filter_Enable[2]
#define PCIE_MAC_IREG_PHYMAC_CFG_RxValid_Filter_Enable_SHFT    2u
#define PCIE_MAC_IREG_PHYMAC_CFG_Use_RXEIDLE_det_elecidle_entry_ADDR PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_Use_RXEIDLE_det_elecidle_entry_MASK 0x00000002u                // Use_RXEIDLE_det_elecidle_entry[1]
#define PCIE_MAC_IREG_PHYMAC_CFG_Use_RXEIDLE_det_elecidle_entry_SHFT 1u
#define PCIE_MAC_IREG_PHYMAC_CFG_Perform_equ_phases_23_ADDR    PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_Perform_equ_phases_23_MASK    0x00000001u                // Perform_equ_phases_23[0]
#define PCIE_MAC_IREG_PHYMAC_CFG_Perform_equ_phases_23_SHFT    0u

/* =====================================================================================

  ---WCPL_TIMEOUT (0x74040000 + 0340hu)---

    WCPL_TIMEOUT[31..0]          - (RW) This registers allows you to configure the AXI Write Completion Timeout.
                                     Bits [19:0]: Timeout value in ms (hardware) or us (Simulation) for AXI to PCIe Write request. When set to 0 the timeout is disabled.
                                     Bits [31:20]: reserved
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_A2P_WRCPL_TIMEOUT. 
                                     If this value is undefined, its default value is set to 32'h00000080.

 =====================================================================================*/
#define PCIE_MAC_IREG_WCPL_TIMEOUT_WCPL_TIMEOUT_ADDR           PCIE_MAC_IREG_WCPL_TIMEOUT_ADDR
#define PCIE_MAC_IREG_WCPL_TIMEOUT_WCPL_TIMEOUT_MASK           0xFFFFFFFFu                // WCPL_TIMEOUT[31..0]
#define PCIE_MAC_IREG_WCPL_TIMEOUT_WCPL_TIMEOUT_SHFT           0u

/* =====================================================================================

  ---PCIE_IF_TIMEOUT (0x74040000 + 0344hu)---

    ptx_timeout_value[2..0]      - (RW) PCIe Transmit Interface Timeout Ranges Supported
                                     0: 50ms
                                     1: 64us
                                     2: 4ms
                                     3: 10ms
                                     4: 16ms
                                     5: 32ms
                                     6: 128ms
                                     7: 512ms
    RESERVED3[6..3]              - (RO) Reserved bits
    ptx_timeout_dis[7]           - (RW) PCIe Transmit Interface Timeout Enable Supported
                                     0: Enable
                                     1: Disable
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_dis_ADDR     PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ADDR
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_dis_MASK     0x00000080u                // ptx_timeout_dis[7]
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_dis_SHFT     7u
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_value_ADDR   PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ADDR
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_value_MASK   0x00000007u                // ptx_timeout_value[2..0]
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_value_SHFT   0u

/* =====================================================================================

  ---PCIE_MISC_CTRL (0x74040000 + 0348hu)---

    pl_cken[0]                   - (RW) PL Clock Gating Control
                                     0: gating
                                     1: enable always
    dvfs_vlt_force_on[1]         - (RW) Force output "pextp_mac_dvfs_vlt_req" always on, dvfs_vlt_req_force_on and dvfs_vlt_req_force_off can't be 1 at same time.
                                     1 : pextp_mac_dvfs_vlt_req is always 1
                                     0 : pextp_mac_dvfs_vlt_req can change to 0 if PCIe power mode is P2 state.
    br_cken[2]                   - (RW) Bridge Clock (br_clk) Gating Control
                                     0: gating
                                     1: enable always
    tl_cken[3]                   - (RW) Transaction Clock (tl_clk) Gating Control
                                     0: gating
                                     1: enable always
    axi_cken[4]                  - (RW) AXI Clock Gating Control
                                     0: gating
                                     1: enable always
    pcie_ck_dis[5]               - (RW) Software control PL Clock, PL EQ Clock, TL Clock, and AXI Clock gating
                                     0: clock enable
                                     1: clock disable
    pextp_mac_active_dis[6]      - (RW) Disable output "pextp_mac_active" function
                                     0 : pextp_mac_active can change to 0 if PCIe traffic is idle.
                                     1 : pextp_mac_active is always 1
    pextp_mac_sleep_dis[7]       - (RW) Disable output "pextp_mac_sleep" function
                                     0 : pextp_mac_sleep can change to 1 if PCIe enter low power mode. (RC: L1.2/L2, EP: L1.1/L1.2)
                                     1 : pextp_mac_sleep is always 0
    tl_clk_div_sel[10..8]        - (RW) Transaction Clock (tl_clk) Divider Control
                                     0: divide 1
                                     1 : divide 2
                                     2 : divide 4
                                     3 : divide 8
                                     4 : divide 16
                                     others : reserved
    l1pm_l1ss_l2_sleep_en[11]    - (RW) Control whether MAC assert sleep signal when link power state in L1PM, L1.1, and L2 state.
                                     1 : MAC sleep will be asserted in L1PM, L1.1 and L2
                                     0 : MAC sleep will not be asserted in L1PM (both RC and EP), L2 (both RC and EP), and L1.1 (RC) except for PERSTn is asserted in L2.
    dvfs_vlt_req_force_off[12]   - (RW) Force output "pextp_mac_dvfs_vlt_req" always off, dvfs_vlt_req_force_on and dvfs_vlt_req_force_off can't be 1 at same time.
                                     1 : pextp_mac_dvfs_vlt_req is always 0
                                     0 : pextp_mac_dvfs_vlt_req can change to 0 if PCIe power mode is P2 state.
    pextp_mac_ddren_urgent_dis[13] - (RW) Disable output "pextp_mac_ddren_urgent_dis" function
                                     0 : pextp_mac_ddren_urgent can change to 1 if PCIe traffic is busy.
                                     1 : pextp_mac_ddren_urgent is always 0
    sw_tl_equ_redo_dis[14]       - (RW) For MTK PHY, disable redo EQ when change to Gen3 again
                                     0 : enable redo EQ
                                     1 : disable redo EQ
    sw_int_busy_dis[15]          - (RW) Disable output "pextp_mac_sleep"  consider interrupt in
                                     0 : de-assert   "pextp_mac_sleep" when interrupt in busy
                                     1 : "pextp_mac_sleep" is not related to interrupt in busy
    autoclr_wake_time[23..16]    - (RW) The timeout value for AUTOCLR_WAKE_N.
                                     When time of AUTOCLR_WAKE_N is 1 more than the timeout value, Hardware will clear AUTOCLR_WAKE_N to 0 automatically.
                                     0 : 0-1ms
                                     1 : 2-3ms
                                     ...
                                     255 : 510-511ms
                                     unit : 2ms
    WAKE_N[24]                   - (RW) SW WAKE# Control
                                     0: PCIe WAKE# pin follows standard behavior
                                     1: PCIe WAKE# pin is forced to drive logic low
    AUTOCLR_WAKE_N[25]           - (RW) SW WAKE# Control but HW clear automatically
                                     0: PCIe WAKE# pin follows standard behavior
                                     1: PCIe WAKE# pin is forced to drive logic low
    flr_cfg_access_dis[26]       - (RW) Configuration space access during FLR disable
                                     0: enable cfg access during FLR.
                                     1: disable cfg access during FLR, CPL with status UR.
    imask_clear_irq_sent_dis[27] - (RW) imask clear irq sent disable
                                     0: enable imask clear sent.
                                     1: disable imask clear sent.
    ep_l2_clkreq_ref_perstn_opt[28] - (RW) EP L2 CLKREQ behavior refernce prestn option 
                                     0: EP in L2. CLKREQ only can de-assert when perstn is low.
                                     1: EP in L2. CLKREQ can de-assert without checking perstn state..
    l0s_revovery_proc_opt[29]    - (RW) L0s & Recovery  process option. How to handle L0s & Recovery request at the same time.
                                     0: Enter Recovery. Recovery has higher priority.
                                     1: Enter L0s.L0s has higher priority.
    LATCH_HW_STRAP[30]           - (RW) External Configuration Latch Enable
                                     0: Disable to latch external configuration
                                     1: Enable to latch external configuration after efuse_rdy rising.
    DISABLE_HW_STRAP[31]         - (RW) External Configuration Disable
                                     If HW configuration support external ID or external DSN, the register can select ID or DSN from external pre-defined tied value or internal  register.
                                     If HW configuration don't enable external ID or external DSN, the register is useless and default is from internal register.
                                     0: Select PCIe ID related information or DSN which is hard-wired by pre-defined tied value
                                     1: Select PCIe ID related information (offset 0x0098 - 0x00A3) or DSN (offset 0x158) from internal register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_DISABLE_HW_STRAP_ADDR     PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_DISABLE_HW_STRAP_MASK     0x80000000u                // DISABLE_HW_STRAP[31]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_DISABLE_HW_STRAP_SHFT     31u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_LATCH_HW_STRAP_ADDR       PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_LATCH_HW_STRAP_MASK       0x40000000u                // LATCH_HW_STRAP[30]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_LATCH_HW_STRAP_SHFT       30u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_l0s_revovery_proc_opt_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_l0s_revovery_proc_opt_MASK 0x20000000u                // l0s_revovery_proc_opt[29]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_l0s_revovery_proc_opt_SHFT 29u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_ep_l2_clkreq_ref_perstn_opt_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_ep_l2_clkreq_ref_perstn_opt_MASK 0x10000000u                // ep_l2_clkreq_ref_perstn_opt[28]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_ep_l2_clkreq_ref_perstn_opt_SHFT 28u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_imask_clear_irq_sent_dis_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_imask_clear_irq_sent_dis_MASK 0x08000000u                // imask_clear_irq_sent_dis[27]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_imask_clear_irq_sent_dis_SHFT 27u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_flr_cfg_access_dis_ADDR   PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_flr_cfg_access_dis_MASK   0x04000000u                // flr_cfg_access_dis[26]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_flr_cfg_access_dis_SHFT   26u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_AUTOCLR_WAKE_N_ADDR       PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_AUTOCLR_WAKE_N_MASK       0x02000000u                // AUTOCLR_WAKE_N[25]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_AUTOCLR_WAKE_N_SHFT       25u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_WAKE_N_ADDR               PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_WAKE_N_MASK               0x01000000u                // WAKE_N[24]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_WAKE_N_SHFT               24u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_autoclr_wake_time_ADDR    PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_autoclr_wake_time_MASK    0x00FF0000u                // autoclr_wake_time[23..16]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_autoclr_wake_time_SHFT    16u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_sw_int_busy_dis_ADDR      PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_sw_int_busy_dis_MASK      0x00008000u                // sw_int_busy_dis[15]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_sw_int_busy_dis_SHFT      15u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_sw_tl_equ_redo_dis_ADDR   PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_sw_tl_equ_redo_dis_MASK   0x00004000u                // sw_tl_equ_redo_dis[14]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_sw_tl_equ_redo_dis_SHFT   14u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_ddren_urgent_dis_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_ddren_urgent_dis_MASK 0x00002000u                // pextp_mac_ddren_urgent_dis[13]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_ddren_urgent_dis_SHFT 13u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_dvfs_vlt_req_force_off_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_dvfs_vlt_req_force_off_MASK 0x00001000u                // dvfs_vlt_req_force_off[12]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_dvfs_vlt_req_force_off_SHFT 12u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_l1pm_l1ss_l2_sleep_en_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_l1pm_l1ss_l2_sleep_en_MASK 0x00000800u                // l1pm_l1ss_l2_sleep_en[11]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_l1pm_l1ss_l2_sleep_en_SHFT 11u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_clk_div_sel_ADDR       PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_clk_div_sel_MASK       0x00000700u                // tl_clk_div_sel[10..8]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_clk_div_sel_SHFT       8u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_sleep_dis_ADDR  PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_sleep_dis_MASK  0x00000080u                // pextp_mac_sleep_dis[7]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_sleep_dis_SHFT  7u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_active_dis_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_active_dis_MASK 0x00000040u                // pextp_mac_active_dis[6]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_active_dis_SHFT 6u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_ck_dis_ADDR          PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_ck_dis_MASK          0x00000020u                // pcie_ck_dis[5]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_ck_dis_SHFT          5u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_axi_cken_ADDR             PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_axi_cken_MASK             0x00000010u                // axi_cken[4]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_axi_cken_SHFT             4u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_cken_ADDR              PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_cken_MASK              0x00000008u                // tl_cken[3]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_cken_SHFT              3u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_br_cken_ADDR              PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_br_cken_MASK              0x00000004u                // br_cken[2]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_br_cken_SHFT              2u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_dvfs_vlt_force_on_ADDR    PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_dvfs_vlt_force_on_MASK    0x00000002u                // dvfs_vlt_force_on[1]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_dvfs_vlt_force_on_SHFT    1u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pl_cken_ADDR              PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pl_cken_MASK              0x00000001u                // pl_cken[0]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pl_cken_SHFT              0u

/* =====================================================================================

  ---PCIE_DEBUG_SEL_2 (0x74040000 + 034Chu)---

    debug_probe_bit_en[31..0]    - (RW) If design support "DEBUG SHIFT" feature, it means user can select which design probe bit are enabled and be right shifted to gather those enabled probes.
                                     bit 0 : debug probe bit 0 is enabled.
                                     ...
                                     bit 31 : debug probe bit 31 is enabled.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_debug_probe_bit_en_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_debug_probe_bit_en_MASK 0xFFFFFFFFu                // debug_probe_bit_en[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_debug_probe_bit_en_SHFT 0u

/* =====================================================================================

  ---PCIE_LMR_0 (0x74040000 + 0350hu)---

    vol_margin_supp[0]           - (RW) Voltage margining supported
    indp_vol_margin_supp[1]      - (RW) Independent up/down voltage margining supported
    indp_time_margin_supp[2]     - (RW) Independent left/right timing margining supported
    samp_report_method[3]        - (RW) Sample reporting method 
                                     0: Sample count supported
                                     1:Sampling rates supported
    marg_err[4]                  - (RW) Margining will not produce errors in data stream
    marg_use_driver[5]           - (RW) Lane margining uses driver software
    RSVD1[7..6]                  - (RW) reserved
    vol_step_num[14..8]          - (RW) Number of voltage steps (32 - 127)
    RSVD2[15]                    - (RW) reserved
    time_step_num[21..16]        - (RW) Number of timing steps value (6 - 63)
    RSVD3[23..22]                - (RW) reserved
    max_time_offset[29..24]      - (RW) Maximum timing offset (20 - 50)
    RSVD4[31..30]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD4_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD4_MASK                    0xC0000000u                // RSVD4[31..30]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD4_SHFT                    30u
#define PCIE_MAC_IREG_PCIE_LMR_0_max_time_offset_ADDR          PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_max_time_offset_MASK          0x3F000000u                // max_time_offset[29..24]
#define PCIE_MAC_IREG_PCIE_LMR_0_max_time_offset_SHFT          24u
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD3_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD3_MASK                    0x00C00000u                // RSVD3[23..22]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD3_SHFT                    22u
#define PCIE_MAC_IREG_PCIE_LMR_0_time_step_num_ADDR            PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_time_step_num_MASK            0x003F0000u                // time_step_num[21..16]
#define PCIE_MAC_IREG_PCIE_LMR_0_time_step_num_SHFT            16u
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD2_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD2_MASK                    0x00008000u                // RSVD2[15]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD2_SHFT                    15u
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_step_num_ADDR             PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_step_num_MASK             0x00007F00u                // vol_step_num[14..8]
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_step_num_SHFT             8u
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD1_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD1_MASK                    0x000000C0u                // RSVD1[7..6]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD1_SHFT                    6u
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_use_driver_ADDR          PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_use_driver_MASK          0x00000020u                // marg_use_driver[5]
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_use_driver_SHFT          5u
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_err_ADDR                 PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_err_MASK                 0x00000010u                // marg_err[4]
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_err_SHFT                 4u
#define PCIE_MAC_IREG_PCIE_LMR_0_samp_report_method_ADDR       PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_samp_report_method_MASK       0x00000008u                // samp_report_method[3]
#define PCIE_MAC_IREG_PCIE_LMR_0_samp_report_method_SHFT       3u
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_time_margin_supp_ADDR    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_time_margin_supp_MASK    0x00000004u                // indp_time_margin_supp[2]
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_time_margin_supp_SHFT    2u
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_vol_margin_supp_ADDR     PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_vol_margin_supp_MASK     0x00000002u                // indp_vol_margin_supp[1]
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_vol_margin_supp_SHFT     1u
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_margin_supp_ADDR          PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_margin_supp_MASK          0x00000001u                // vol_margin_supp[0]
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_margin_supp_SHFT          0u

/* =====================================================================================

  ---PCIE_LMR_1 (0x74040000 + 0354hu)---

    max_vol_offset[5..0]         - (RW) Maximum voltage offset (5 - 50)
    RSVD1[7..6]                  - (RW) reserved
    samp_rate_vol[13..8]         - (RW) Sampling rate voltage (0 - 63)
    RSVD2[15..14]                - (RW) reserved
    samp_rate_time[21..16]       - (RW) Sampling rate timing (0 - 63)
    RSVD3[23..22]                - (RW) reserved
    RSVD4[31..24]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD4_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD4_MASK                    0xFF000000u                // RSVD4[31..24]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD4_SHFT                    24u
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD3_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD3_MASK                    0x00C00000u                // RSVD3[23..22]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD3_SHFT                    22u
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_time_ADDR           PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_time_MASK           0x003F0000u                // samp_rate_time[21..16]
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_time_SHFT           16u
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD2_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD2_MASK                    0x0000C000u                // RSVD2[15..14]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD2_SHFT                    14u
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_vol_ADDR            PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_vol_MASK            0x00003F00u                // samp_rate_vol[13..8]
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_vol_SHFT            8u
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD1_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD1_MASK                    0x000000C0u                // RSVD1[7..6]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD1_SHFT                    6u
#define PCIE_MAC_IREG_PCIE_LMR_1_max_vol_offset_ADDR           PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_max_vol_offset_MASK           0x0000003Fu                // max_vol_offset[5..0]
#define PCIE_MAC_IREG_PCIE_LMR_1_max_vol_offset_SHFT           0u

/* =====================================================================================

  ---PCIE_LMR_2 (0x74040000 + 0358hu)---

    max_lane_margin[3..0]        - (RW) Maximum number of lanes that can be marginedat the same time, minus 1
    RSVD1[31..4]                 - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LMR_2_RSVD1_ADDR                    PCIE_MAC_IREG_PCIE_LMR_2_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_2_RSVD1_MASK                    0xFFFFFFF0u                // RSVD1[31..4]
#define PCIE_MAC_IREG_PCIE_LMR_2_RSVD1_SHFT                    4u
#define PCIE_MAC_IREG_PCIE_LMR_2_max_lane_margin_ADDR          PCIE_MAC_IREG_PCIE_LMR_2_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_2_max_lane_margin_MASK          0x0000000Fu                // max_lane_margin[3..0]
#define PCIE_MAC_IREG_PCIE_LMR_2_max_lane_margin_SHFT          0u

/* =====================================================================================

  ---PCIE_DL_FEATURE (0x74040000 + 035Chu)---

    scaled_flow_ctrl_supp[0]     - (RW) This bit indicates that this Port supports the Scaled Flow Control Feature.
                                     0 : not support
                                     1 : support
    RSVD1[22..1]                 - (RW) reserved
    dl_feature_en[23]            - (RW) Data Link Feature Exchange Enable.
                                     If Set, this bit indicates that this Port will enter the DL_Feature negotiation state
    dl_feature_impl[24]          - (RW) If Data Link Feature Extended Capability is implemented.
                                     0 : not implemented.
                                     1 : implemented.
    RSVD2[31..25]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD2_ADDR               PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD2_MASK               0xFE000000u                // RSVD2[31..25]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD2_SHFT               25u
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_impl_ADDR     PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_impl_MASK     0x01000000u                // dl_feature_impl[24]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_impl_SHFT     24u
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_en_ADDR       PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_en_MASK       0x00800000u                // dl_feature_en[23]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_en_SHFT       23u
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD1_MASK               0x007FFFFEu                // RSVD1[22..1]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD1_SHFT               1u
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_scaled_flow_ctrl_supp_ADDR PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_scaled_flow_ctrl_supp_MASK 0x00000001u                // scaled_flow_ctrl_supp[0]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_scaled_flow_ctrl_supp_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_0_3 (0x74040000 + 0360hu)---

    eq_16g_val_ln0[7..0]         - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln1[15..8]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln2[23..16]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln3[31..24]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln3_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln3_MASK 0xFF000000u                // eq_16g_val_ln3[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln3_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln2_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln2_MASK 0x00FF0000u                // eq_16g_val_ln2[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln2_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln1_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln1_MASK 0x0000FF00u                // eq_16g_val_ln1[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln1_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln0_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln0_MASK 0x000000FFu                // eq_16g_val_ln0[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln0_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_4_7 (0x74040000 + 0364hu)---

    eq_16g_val_ln4[7..0]         - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln5[15..8]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln6[23..16]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln7[31..24]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln7_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln7_MASK 0xFF000000u                // eq_16g_val_ln7[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln7_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln6_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln6_MASK 0x00FF0000u                // eq_16g_val_ln6[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln6_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln5_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln5_MASK 0x0000FF00u                // eq_16g_val_ln5[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln5_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln4_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln4_MASK 0x000000FFu                // eq_16g_val_ln4[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln4_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_8_11 (0x74040000 + 0368hu)---

    eq_16g_val_ln8[7..0]         - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln9[15..8]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln10[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln11[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln11_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln11_MASK 0xFF000000u                // eq_16g_val_ln11[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln11_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln10_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln10_MASK 0x00FF0000u                // eq_16g_val_ln10[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln10_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln9_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln9_MASK 0x0000FF00u                // eq_16g_val_ln9[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln9_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln8_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln8_MASK 0x000000FFu                // eq_16g_val_ln8[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln8_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_12_15 (0x74040000 + 036Chu)---

    eq_16g_val_ln12[7..0]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln13[15..8]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln14[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln15[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln15_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln15_MASK 0xFF000000u                // eq_16g_val_ln15[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln15_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln14_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln14_MASK 0x00FF0000u                // eq_16g_val_ln14[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln14_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln13_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln13_MASK 0x0000FF00u                // eq_16g_val_ln13[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln13_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln12_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln12_MASK 0x000000FFu                // eq_16g_val_ln12[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln12_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_16_19 (0x74040000 + 0370hu)---

    eq_16g_val_ln16[7..0]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln17[15..8]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln18[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln19[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln19_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln19_MASK 0xFF000000u                // eq_16g_val_ln19[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln19_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln18_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln18_MASK 0x00FF0000u                // eq_16g_val_ln18[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln18_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln17_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln17_MASK 0x0000FF00u                // eq_16g_val_ln17[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln17_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln16_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln16_MASK 0x000000FFu                // eq_16g_val_ln16[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_16_19_eq_16g_val_ln16_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_20_23 (0x74040000 + 0374hu)---

    eq_16g_val_ln20[7..0]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln21[15..8]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln22[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln23[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln23_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln23_MASK 0xFF000000u                // eq_16g_val_ln23[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln23_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln22_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln22_MASK 0x00FF0000u                // eq_16g_val_ln22[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln22_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln21_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln21_MASK 0x0000FF00u                // eq_16g_val_ln21[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln21_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln20_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln20_MASK 0x000000FFu                // eq_16g_val_ln20[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_20_23_eq_16g_val_ln20_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_24_27 (0x74040000 + 0378hu)---

    eq_16g_val_ln24[7..0]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln25[15..8]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln26[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln27[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln27_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln27_MASK 0xFF000000u                // eq_16g_val_ln27[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln27_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln26_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln26_MASK 0x00FF0000u                // eq_16g_val_ln26[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln26_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln25_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln25_MASK 0x0000FF00u                // eq_16g_val_ln25[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln25_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln24_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln24_MASK 0x000000FFu                // eq_16g_val_ln24[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_24_27_eq_16g_val_ln24_SHFT 0u

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_28_31 (0x74040000 + 037Chu)---

    eq_16g_val_ln28[7..0]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln29[15..8]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln30[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln31[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln31_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln31_MASK 0xFF000000u                // eq_16g_val_ln31[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln31_SHFT 24u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln30_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln30_MASK 0x00FF0000u                // eq_16g_val_ln30[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln30_SHFT 16u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln29_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln29_MASK 0x0000FF00u                // eq_16g_val_ln29[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln29_SHFT 8u
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln28_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln28_MASK 0x000000FFu                // eq_16g_val_ln28[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_28_31_eq_16g_val_ln28_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN0_MODE_01 (0x74040000 + 0380hu)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE1_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE0_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN0_MODE_23 (0x74040000 + 0384hu)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE3_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE2_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN0_MODE_45 (0x74040000 + 0388hu)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE5_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE4_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN0_MODE_67 (0x74040000 + 038Chu)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE7_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE6_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN1_MODE_01 (0x74040000 + 0390hu)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE1_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE0_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN1_MODE_23 (0x74040000 + 0394hu)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE3_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE2_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN1_MODE_45 (0x74040000 + 0398hu)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE5_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE4_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN1_MODE_67 (0x74040000 + 039Chu)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE7_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE6_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN2_MODE_01 (0x74040000 + 03A0hu)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE1_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE0_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN2_MODE_23 (0x74040000 + 03A4hu)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE3_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE2_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN2_MODE_45 (0x74040000 + 03A8hu)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE5_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE4_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN2_MODE_67 (0x74040000 + 03AChu)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE7_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE6_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN3_MODE_01 (0x74040000 + 03B0hu)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE1_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE0_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN3_MODE_23 (0x74040000 + 03B4hu)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE3_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE2_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN3_MODE_45 (0x74040000 + 03B8hu)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE5_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE4_SHFT 0u

/* =====================================================================================

  ---AXI4_STRIN3_MODE_67 (0x74040000 + 03BChu)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. 
                                     You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. 
                                     Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000u                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE7_SHFT 16u
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFFu                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE6_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_MISC_CAP (0x74040000 + 03C0hu)---

    PASID_SUP[0]                 - (RW) PASID Supported
                                     0: disable
                                     1: enable
    PASID_EXEC_PERM_SUP[1]       - (RW) PASID Execute Permission  Supported
                                     0: disable
                                     1: enable
    PASID_PRIV_MODE_SUP[2]       - (RW) PASID Privileged Mode Supported
                                     0: disable
                                     1: enable
    PASID_MAX_WIDTH[7..3]        - (RW) PASID Max Width
    DVSEC_SUP[8]                 - (RW) Designated Vendor-Specific Extended Capability supported
                                     0 : not supported
                                     1 : supported
    RESERVED9[31..9]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_DVSEC_SUP_ADDR         PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_DVSEC_SUP_MASK         0x00000100u                // DVSEC_SUP[8]
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_DVSEC_SUP_SHFT         8u
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_MAX_WIDTH_ADDR   PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_MAX_WIDTH_MASK   0x000000F8u                // PASID_MAX_WIDTH[7..3]
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_MAX_WIDTH_SHFT   3u
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_PRIV_MODE_SUP_ADDR PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_PRIV_MODE_SUP_MASK 0x00000004u                // PASID_PRIV_MODE_SUP[2]
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_PRIV_MODE_SUP_SHFT 2u
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_EXEC_PERM_SUP_ADDR PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_EXEC_PERM_SUP_MASK 0x00000002u                // PASID_EXEC_PERM_SUP[1]
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_EXEC_PERM_SUP_SHFT 1u
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_SUP_ADDR         PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_SUP_MASK         0x00000001u                // PASID_SUP[0]
#define PCIE_MAC_IREG_PCIE_PCI_MISC_CAP_PASID_SUP_SHFT         0u

/* =====================================================================================

  ---SW_TRIG_AUTO_CLR_0 (0x74040000 + 03C4hu)---

    SW_TRIG_AUTO_CLR[31..0]      - (RW) Auto clear sw trigger interrupt status when msi sent
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_0_SW_TRIG_AUTO_CLR_ADDR PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_0_ADDR
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_0_SW_TRIG_AUTO_CLR_MASK 0xFFFFFFFFu                // SW_TRIG_AUTO_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_0_SW_TRIG_AUTO_CLR_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_INTR_SET_0 (0x74040000 + 03C8hu)---

    SW_TRIG_INTR_SET[31..0]      - (W1S) Write one set register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_0_SW_TRIG_INTR_SET_ADDR PCIE_MAC_IREG_SW_TRIG_INTR_SET_0_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_0_SW_TRIG_INTR_SET_MASK 0xFFFFFFFFu                // SW_TRIG_INTR_SET[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_0_SW_TRIG_INTR_SET_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_INTR_CLR_0 (0x74040000 + 03CChu)---

    SW_TRIG_INTR_CLR[31..0]      - (W1C) Write one clear register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_0_SW_TRIG_INTR_CLR_ADDR PCIE_MAC_IREG_SW_TRIG_INTR_CLR_0_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_0_SW_TRIG_INTR_CLR_MASK 0xFFFFFFFFu                // SW_TRIG_INTR_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_0_SW_TRIG_INTR_CLR_SHFT 0u

/* =====================================================================================

  ---PCIE_ULTRA_SETTING (0x74040000 + 03D0hu)---

    TAG_SET_ULTRA_EN[0]          - (RW) Enable tag[7]/tag[6] set ultra/pre=ultra
                                     0: disable
                                     1: enable
    TAG_SET_ULTRA_SWAP[1]        - (RW) Swap to tag[6]/tag[7] set ultra/pre=ultra
                                     0: disable
                                     1: enable
    REQID_EN[2]                  - (RW) Enable the AXI master side band signal request id.
    TAG_EN[3]                    - (RW) Enable the AXI master side band signal axi tag.
    URGENT_W_SEL[7..4]           - (RW) AXI Master Write Urgent will be asserted when
                                     b0000: write outstanding is available below 1/4
                                     b0001: write outstanding is available below 1/2
                                     b0010: write outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    URGENT_R_SEL[11..8]          - (RW) AXI Master Read Urgent will be asserted when
                                     b0000: read outstanding is available below 1/4
                                     b0001: read outstanding is available below 1/2
                                     b0010: read outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    URGENT_EN[12]                - (RW) Enable the AXI master side band signal Urgent.
    URGENT_LEVEL_EN[13]          - (RW) Enable level mode for Urgent.
                                     1'b0: pulse mode
                                     1'b1: level mode
    PARAM_EN[14]                 - (RW) The use of AXI master user signals is defined as PCIe paramater
                                     awuser/aruser[0] = ECEC error
                                     awuser/aruser[1] = PCIe Controller Buffer Memory Error
                                     awuser/aruser[2] = Bridge Buffer Memory Error
                                     awuser/aruser[3] = AXI Application Data Error
                                     awuser/aruser[31:4] : PCIe Address Type, PCIe Attribute, PCIe Requester ID
    ULTRA_EN[15]                 - (RW) The use of AXI master user signals is defined as Ultra
                                     awuser/aruser[0] = Reserved
                                     awuser/aruser[1] = Reserved
                                     awuser/aruser[2] = Ultra
                                     awuser/aruser[3] = Pre Ultra
                                     awuser/aruser[31:4] : Reserved
    ULTRA_R_SEL[19..16]          - (RW) AXI Master Read Ultra will be asserted when
                                     b0000: read outstanding is available below 1/4
                                     b0001: read outstanding is available below 1/2
                                     b0010: read outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    PRE_ULTRA_R_SEL[23..20]      - (RW) AXI Master Read Pre Ultra will be asserted when
                                     b0000: read outstanding is available below 1/4
                                     b0001: read outstanding is available below 1/2
                                     b0010: read outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    ULTRA_W_SEL[27..24]          - (RW) AXI Master Write Ultra will be asserted when
                                     b0000: write outstanding is available below 1/4
                                     b0001: write outstanding is available below 1/2
                                     b0010: write outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    PRE_ULTRA_W_SEL[30..28]      - (RW) AXI Master Write Pre Ultra will be asserted when
                                     b000: write outstanding is available below 1/4
                                     b001: write outstanding is available below 1/2
                                     b010: write outstanding is available below 3/4
                                     b011: always
                                     otherwise: Reserved
    SW_ADT_ULTRAN_EN[31]         - (RW) Enable the AXI master side band signal ultra and pre ultra base on fifo depth

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_SW_ADT_ULTRAN_EN_ADDR PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_SW_ADT_ULTRAN_EN_MASK 0x80000000u                // SW_ADT_ULTRAN_EN[31]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_SW_ADT_ULTRAN_EN_SHFT 31u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_W_SEL_ADDR  PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_W_SEL_MASK  0x70000000u                // PRE_ULTRA_W_SEL[30..28]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_W_SEL_SHFT  28u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_W_SEL_ADDR      PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_W_SEL_MASK      0x0F000000u                // ULTRA_W_SEL[27..24]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_W_SEL_SHFT      24u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_R_SEL_ADDR  PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_R_SEL_MASK  0x00F00000u                // PRE_ULTRA_R_SEL[23..20]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_R_SEL_SHFT  20u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_R_SEL_ADDR      PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_R_SEL_MASK      0x000F0000u                // ULTRA_R_SEL[19..16]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_R_SEL_SHFT      16u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_EN_ADDR         PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_EN_MASK         0x00008000u                // ULTRA_EN[15]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_EN_SHFT         15u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PARAM_EN_ADDR         PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PARAM_EN_MASK         0x00004000u                // PARAM_EN[14]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PARAM_EN_SHFT         14u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_LEVEL_EN_ADDR  PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_LEVEL_EN_MASK  0x00002000u                // URGENT_LEVEL_EN[13]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_LEVEL_EN_SHFT  13u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_EN_ADDR        PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_EN_MASK        0x00001000u                // URGENT_EN[12]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_EN_SHFT        12u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_R_SEL_ADDR     PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_R_SEL_MASK     0x00000F00u                // URGENT_R_SEL[11..8]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_R_SEL_SHFT     8u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_W_SEL_ADDR     PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_W_SEL_MASK     0x000000F0u                // URGENT_W_SEL[7..4]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_URGENT_W_SEL_SHFT     4u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_EN_ADDR           PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_EN_MASK           0x00000008u                // TAG_EN[3]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_EN_SHFT           3u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_REQID_EN_ADDR         PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_REQID_EN_MASK         0x00000004u                // REQID_EN[2]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_REQID_EN_SHFT         2u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_SET_ULTRA_SWAP_ADDR PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_SET_ULTRA_SWAP_MASK 0x00000002u                // TAG_SET_ULTRA_SWAP[1]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_SET_ULTRA_SWAP_SHFT 1u
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_SET_ULTRA_EN_ADDR PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_SET_ULTRA_EN_MASK 0x00000001u                // TAG_SET_ULTRA_EN[0]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_TAG_SET_ULTRA_EN_SHFT 0u

/* =====================================================================================

  ---PCIE_PERF_SETTING_1 (0x74040000 + 03D4hu)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_Block_TxBuf_Avail_cnt_MASK 0xFF000000u                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_Block_TxBuf_Avail_cnt_SHFT 24u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000u                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_TxBuf_Avail_cnt_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_rdcmd_cnt_MASK 0x0000FF00u                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_rdcmd_cnt_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_timer_MASK   0x000000FFu                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_timer_SHFT   0u

/* =====================================================================================

  ---PCIE_PERF_SETTING_2 (0x74040000 + 03D8hu)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_Block_TxBuf_Avail_cnt_MASK 0xFF000000u                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_Block_TxBuf_Avail_cnt_SHFT 24u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000u                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_TxBuf_Avail_cnt_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_rdcmd_cnt_MASK 0x0000FF00u                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_rdcmd_cnt_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_timer_MASK   0x000000FFu                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_timer_SHFT   0u

/* =====================================================================================

  ---PCIE_PERF_SETTING_3 (0x74040000 + 03DChu)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_Block_TxBuf_Avail_cnt_MASK 0xFF000000u                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_Block_TxBuf_Avail_cnt_SHFT 24u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000u                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_TxBuf_Avail_cnt_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_rdcmd_cnt_MASK 0x0000FF00u                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_rdcmd_cnt_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_timer_MASK   0x000000FFu                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_timer_SHFT   0u

/* =====================================================================================

  ---AXI_ERR_REPORT (0x74040000 + 03E0hu)---

    CFG_NO_SLVERR[0]             - (RW) This register enables you to modify the Slave Response on the AXI side.
                                     When set to 1, no SLVERR response is returned to the AXI or AXI4-Lite Slave interface when an Unsupported Request (UR) or a Configuration Request Retry Status (CRS) is returned in response to a PCIe Configuration Access.
    PKT_ERR_COMMIT[1]            - (RW) When set to 1, no SLVERR response is returned to the AXI or AXI4-Lite Slave interface when an ECRC error, Poisoned TLP or Receive Buffer Memory error is detected in a MRD or MWR TLP.
    PKT_ZLEN_COMMIT_P2A[2]       - (RW) 0: not need to issue if receiving a Zero-Length Write and Read
                                     1: issue a Zero-Length Write if receiving a Zero-Length Write; and issue a DWord Read if receiving a Zero-Length Read
    PKT_ZLEN_COMMIT_A2P[3]       - (RW) 0: not need to issue if receiving a Zero-Length Write
                                     1: issue a Zero-Length Write if receiving a Zero-Length Write
    IREG_MATCH_BAR[7..4]         - (RW) Internal Register Match BAR Number
                                     When IREG_MATCH_EN is asserted, PCIe read and write requests targeting IREG_MATCH_BAR are routed to Internal Register
    IREG_MATCH_EN[8]             - (RW) Internal Register Match BAR Enable
                                     0: PCIe read and write requests targeting BAR01 are routed to Internal Register
                                     1: PCIe read and write requests targeting IREG_MATCH_BAR are routed to Internal Register
    RESERVED9[31..9]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_ERR_REPORT_IREG_MATCH_EN_ADDR        PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERR_REPORT_IREG_MATCH_EN_MASK        0x00000100u                // IREG_MATCH_EN[8]
#define PCIE_MAC_IREG_AXI_ERR_REPORT_IREG_MATCH_EN_SHFT        8u
#define PCIE_MAC_IREG_AXI_ERR_REPORT_IREG_MATCH_BAR_ADDR       PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERR_REPORT_IREG_MATCH_BAR_MASK       0x000000F0u                // IREG_MATCH_BAR[7..4]
#define PCIE_MAC_IREG_AXI_ERR_REPORT_IREG_MATCH_BAR_SHFT       4u
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ZLEN_COMMIT_A2P_ADDR  PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ZLEN_COMMIT_A2P_MASK  0x00000008u                // PKT_ZLEN_COMMIT_A2P[3]
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ZLEN_COMMIT_A2P_SHFT  3u
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ZLEN_COMMIT_P2A_ADDR  PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ZLEN_COMMIT_P2A_MASK  0x00000004u                // PKT_ZLEN_COMMIT_P2A[2]
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ZLEN_COMMIT_P2A_SHFT  2u
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ERR_COMMIT_ADDR       PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ERR_COMMIT_MASK       0x00000002u                // PKT_ERR_COMMIT[1]
#define PCIE_MAC_IREG_AXI_ERR_REPORT_PKT_ERR_COMMIT_SHFT       1u
#define PCIE_MAC_IREG_AXI_ERR_REPORT_CFG_NO_SLVERR_ADDR        PCIE_MAC_IREG_AXI_ERR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERR_REPORT_CFG_NO_SLVERR_MASK        0x00000001u                // CFG_NO_SLVERR[0]
#define PCIE_MAC_IREG_AXI_ERR_REPORT_CFG_NO_SLVERR_SHFT        0u

/* =====================================================================================

  ---PCIE_IP_REVISION (0x74040000 + 03E4hu)---

    ip_revision[31..0]           - (RO) PCIe MAC IP Revision for IPM.
                                     Bit[7:0] : ECO
                                     Bit[15:8] : Change in Branch.
                                     Bit[23:16] : Minor
                                     Bit[31:24] : Major

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ip_revision_ADDR        PCIE_MAC_IREG_PCIE_IP_REVISION_ADDR
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ip_revision_MASK        0xFFFFFFFFu                // ip_revision[31..0]
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ip_revision_SHFT        0u

/* =====================================================================================

  ---ASPM_TIMER_INFO (0x74040000 + 03E8hu)---

    aspm_l0s_entry_cnt[8..0]     - (RO) The ASPM L0s idle counter. 
                                     If PCIe bus is active and there are TLP or DLLP to transmit, the counter will load default value and counter down. 
                                     Timeout will happen when counter is 0.
                                     Unit is 256ns.
    RESERVED9[11..9]             - (RO) Reserved bits
    aspm_l0s_entry_timeout[12]   - (RO) ASPM L0s timeout and PCIe will try to enter L0s
    RESERVED13[15..13]           - (RO) Reserved bits
    aspm_l1_entry_cnt[24..16]    - (RO) The ASPM L1 idle counter. 
                                     If PCIe bus is active and there are TLP or DLLP to transmit, the counter will load default value and counter down. 
                                     Timeout will happen when counter is 0.
                                     Unit is 256ns.
    RESERVED25[27..25]           - (RO) Reserved bits
    aspm_l1_entry_timeout[28]    - (RO) ASPM L1 timeout and PCIe will try to enter L1
    RESERVED29[31..29]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l1_entry_timeout_ADDR PCIE_MAC_IREG_ASPM_TIMER_INFO_ADDR
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l1_entry_timeout_MASK 0x10000000u                // aspm_l1_entry_timeout[28]
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l1_entry_timeout_SHFT 28u
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l1_entry_cnt_ADDR   PCIE_MAC_IREG_ASPM_TIMER_INFO_ADDR
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l1_entry_cnt_MASK   0x01FF0000u                // aspm_l1_entry_cnt[24..16]
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l1_entry_cnt_SHFT   16u
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l0s_entry_timeout_ADDR PCIE_MAC_IREG_ASPM_TIMER_INFO_ADDR
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l0s_entry_timeout_MASK 0x00001000u                // aspm_l0s_entry_timeout[12]
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l0s_entry_timeout_SHFT 12u
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l0s_entry_cnt_ADDR  PCIE_MAC_IREG_ASPM_TIMER_INFO_ADDR
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l0s_entry_cnt_MASK  0x000001FFu                // aspm_l0s_entry_cnt[8..0]
#define PCIE_MAC_IREG_ASPM_TIMER_INFO_aspm_l0s_entry_cnt_SHFT  0u

/* =====================================================================================

  ---PCIE_CFG_MSIX_0 (0x74040000 + 03EChu)---

    cfg_msix_ctrl[3..0]          - (RW) Multiple MSIX message Enable
                                     System software writes to this field to indicate the number of allocated MSIX messages (equal to or less than the number of requested MSIX messages).
                                     The number of allocated messages is aligned to a power of two. 
                                     If a function requests four MSIX messages, system software can allocate either four, two, or one message by writing a 010b, 001b, or 000b to this field, respectively. 
                                     When MSIX is enabled, a device will be allocated at least 1 message.
                                     
                                     Bit[i*4+0] : Program to enable the MSI-X merging function
                                     0: disable
                                     1:enable
                                     
                                     Bit[i*4+1+:3] : Program a 3-bit value in this field indicating the actual number of MSI-X allocated.
                                     - 000b: 1 message allocated
                                     - 001b: 2 messages  allocated
                                     - 010b: 4 message  allocated
                                     - 011b: 8 messages  allocated
                                     - 100b: 16 message  allocated
                                     - 101b: 32 messages  allocated
                                     - 110b: 64 messages  allocated
                                     - 111b: 128 messages  allocated
                                     
                                     bit[3:0] : MSIX Group 0, each group has 128 MSIX vector
                                     
                                     The register is per physical function register
    int_sent_byp_istatus_host[4] - (RW) Bypass to check the condition of istatus_host when int_sent assert
                                     1'b0: enable to check the condition of istatus_host when int_sent assert.
                                     1'b1: bypass to check the condition of istatus_host when int_sent assert.
    intx_req_byp_all_sent[5]     - (RW) Bypass to check all int sent for intx req
                                     1'b0: enable
                                     1'b1: bypass
    int_sent_byp_msi_pending[6]  - (RW) Bypass to check msi pending when assert int sent
                                     1'b0: enable
                                     1'b1: bypass
    RESERVED7[31..7]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_int_sent_byp_msi_pending_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_int_sent_byp_msi_pending_MASK 0x00000040u                // int_sent_byp_msi_pending[6]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_int_sent_byp_msi_pending_SHFT 6u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_intx_req_byp_all_sent_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_intx_req_byp_all_sent_MASK 0x00000020u                // intx_req_byp_all_sent[5]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_intx_req_byp_all_sent_SHFT 5u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_int_sent_byp_istatus_host_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_int_sent_byp_istatus_host_MASK 0x00000010u                // int_sent_byp_istatus_host[4]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_int_sent_byp_istatus_host_SHFT 4u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_cfg_msix_ctrl_ADDR       PCIE_MAC_IREG_PCIE_CFG_MSIX_0_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_cfg_msix_ctrl_MASK       0x0000000Fu                // cfg_msix_ctrl[3..0]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_0_cfg_msix_ctrl_SHFT       0u

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_0 (0x74040000 + 03F0hu)---

    PMSG_SUPPORT_RX[7..0]        - (RW) PCIe Message Reception Support: When the associated bit is 1b, the PCIe Message is forwarded to the AXI Application; 
                                     Otherwise it is treated as unsupported by the XpressRICH3-AXI:
                                     Bit [0]: Unlock Message
                                     Bit [1]: ATS Messages
                                     Bit [2]: Latency Tolerance Reporting
                                     Bit [3]: Optimized Buffer Flush/Fill
                                     Bit [4]: Vendor-Defined Type 0
                                     Bit [5]: Vendor-Defined Type 1
                                     Bit [6]: Precise Time Measurement Message
                                     Bit [7]: reserved
    RSVD[31..8]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_RSVD_ADDR      PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_RSVD_MASK      0xFFFFFF00u                // RSVD[31..8]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_RSVD_SHFT      8u
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_PMSG_SUPPORT_RX_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_PMSG_SUPPORT_RX_MASK 0x000000FFu                // PMSG_SUPPORT_RX[7..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_PMSG_SUPPORT_RX_SHFT 0u

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_1 (0x74040000 + 03F4hu)---

    PMSG_DEST_ID[4..0]           - (RW) PCIe Message Reception Destination Interface: defines the ID of the AXI interface to which supported messages will be forwarded. 
                                     Supported values are:
                                     5'd4 for AXI Master #0
                                     5'd5 for AXI Master #1
                                     5'd6 for AXI Master #2
                                     5'd7 for AXI Master #3
                                     5'd8 for AXI Stream Out #0
                                     5'd9 for AXI Stream Out #1
                                     5'd10 for AXI Stream Out #2
                                     5'd11 for AXI Stream Out #3
                                     5'd12 for internal register
    RSVD1[31..5]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD1_ADDR     PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD1_MASK     0xFFFFFFE0u                // RSVD1[31..5]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD1_SHFT     5u
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_PMSG_DEST_ID_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_PMSG_DEST_ID_MASK 0x0000001Fu                // PMSG_DEST_ID[4..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_PMSG_DEST_ID_SHFT 0u

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_2 (0x74040000 + 03F8hu)---

    PMSG_DEST_ADDR_LSB[31..0]    - (RW) PCIe Message Reception Destination LSB Address.
                                     Defines the AXI address to which supported messages will be forwarded.
                                     Note : if the destination is "internal register", the address must be 0x00000000_00000ce0

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_PMSG_DEST_ADDR_LSB_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_PMSG_DEST_ADDR_LSB_MASK 0xFFFFFFFFu                // PMSG_DEST_ADDR_LSB[31..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_PMSG_DEST_ADDR_LSB_SHFT 0u

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_3 (0x74040000 + 03FChu)---

    PMSG_DEST_ADDR_MSB[31..0]    - (RW) PCIe Message Reception Destination MSB Address.
                                     Defines the AXI address to which supported messages will be forwarded.
                                     Note : if the destination is "internal register", the address must be 0x00000000_00000ce0

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_PMSG_DEST_ADDR_MSB_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_PMSG_DEST_ADDR_MSB_MASK 0xFFFFFFFFu                // PMSG_DEST_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_PMSG_DEST_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---DMA0_SRCPARAM (0x74040000 + 0400hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA0_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA0_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA0_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA0_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA0_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA0_DESTPARAM (0x74040000 + 0404hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA0_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA0_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA0_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA0_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA0_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA0_SRCADDR_L (0x74040000 + 0408hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA0_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA0_SRCADDR_H (0x74040000 + 040Chu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA0_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA0_DESTADDR_L (0x74040000 + 0410hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA0_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA0_DESTADDR_H (0x74040000 + 0414hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA0_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA0_LENGTH (0x74040000 + 0418hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA0_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA0_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA0_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA0_CONTROL (0x74040000 + 041Chu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: dma_sg_id_en, when set to 1, SG_ID is 4’hc.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA0_STATUS (0x74040000 + 0420hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA0_PRC_LENGTH (0x74040000 + 0424hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA0_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA0_SHARE_ACCESS (0x74040000 + 0428hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA1_SRCPARAM (0x74040000 + 0440hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA1_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA1_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA1_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA1_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA1_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA1_DESTPARAM (0x74040000 + 0444hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA1_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA1_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA1_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA1_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA1_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA1_SRCADDR_L (0x74040000 + 0448hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA1_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA1_SRCADDR_H (0x74040000 + 044Chu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA1_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA1_DESTADDR_L (0x74040000 + 0450hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA1_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA1_DESTADDR_H (0x74040000 + 0454hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA1_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA1_LENGTH (0x74040000 + 0458hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA1_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA1_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA1_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA1_CONTROL (0x74040000 + 045Chu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA1_STATUS (0x74040000 + 0460hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA1_PRC_LENGTH (0x74040000 + 0464hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA1_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA1_SHARE_ACCESS (0x74040000 + 0468hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA2_SRCPARAM (0x74040000 + 0480hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA2_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA2_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA2_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA2_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA2_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA2_DESTPARAM (0x74040000 + 0484hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA2_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA2_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA2_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA2_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA2_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA2_SRCADDR_L (0x74040000 + 0488hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA2_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA2_SRCADDR_H (0x74040000 + 048Chu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA2_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA2_DESTADDR_L (0x74040000 + 0490hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA2_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA2_DESTADDR_H (0x74040000 + 0494hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA2_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA2_LENGTH (0x74040000 + 0498hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA2_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA2_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA2_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA2_CONTROL (0x74040000 + 049Chu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA2_STATUS (0x74040000 + 04A0hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA2_PRC_LENGTH (0x74040000 + 04A4hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA2_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA2_SHARE_ACCESS (0x74040000 + 04A8hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA3_SRCPARAM (0x74040000 + 04C0hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA3_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA3_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA3_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA3_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA3_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA3_DESTPARAM (0x74040000 + 04C4hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA3_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA3_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA3_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA3_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA3_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA3_SRCADDR_L (0x74040000 + 04C8hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA3_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA3_SRCADDR_H (0x74040000 + 04CChu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA3_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA3_DESTADDR_L (0x74040000 + 04D0hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA3_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA3_DESTADDR_H (0x74040000 + 04D4hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA3_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA3_LENGTH (0x74040000 + 04D8hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA3_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA3_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA3_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA3_CONTROL (0x74040000 + 04DChu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA3_STATUS (0x74040000 + 04E0hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA3_PRC_LENGTH (0x74040000 + 04E4hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA3_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA3_SHARE_ACCESS (0x74040000 + 04E8hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA4_SRCPARAM (0x74040000 + 0500hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA4_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA4_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA4_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA4_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA4_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA4_DESTPARAM (0x74040000 + 0504hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA4_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA4_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA4_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA4_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA4_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA4_SRCADDR_L (0x74040000 + 0508hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA4_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA4_SRCADDR_H (0x74040000 + 050Chu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA4_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA4_DESTADDR_L (0x74040000 + 0510hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA4_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA4_DESTADDR_H (0x74040000 + 0514hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA4_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA4_LENGTH (0x74040000 + 0518hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA4_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA4_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA4_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA4_CONTROL (0x74040000 + 051Chu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA4_STATUS (0x74040000 + 0520hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA4_PRC_LENGTH (0x74040000 + 0524hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA4_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA4_SHARE_ACCESS (0x74040000 + 0528hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA5_SRCPARAM (0x74040000 + 0540hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA5_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA5_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA5_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA5_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA5_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA5_DESTPARAM (0x74040000 + 0544hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA5_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA5_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA5_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA5_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA5_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA5_SRCADDR_L (0x74040000 + 0548hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA5_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA5_SRCADDR_H (0x74040000 + 054Chu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA5_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA5_DESTADDR_L (0x74040000 + 0550hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA5_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA5_DESTADDR_H (0x74040000 + 0554hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA5_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA5_LENGTH (0x74040000 + 0558hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA5_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA5_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA5_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA5_CONTROL (0x74040000 + 055Chu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA5_STATUS (0x74040000 + 0560hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA5_PRC_LENGTH (0x74040000 + 0564hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA5_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA5_SHARE_ACCESS (0x74040000 + 0568hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA6_SRCPARAM (0x74040000 + 0580hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA6_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA6_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA6_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA6_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA6_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA6_DESTPARAM (0x74040000 + 0584hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA6_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA6_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA6_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA6_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA6_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA6_SRCADDR_L (0x74040000 + 0588hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA6_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA6_SRCADDR_H (0x74040000 + 058Chu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA6_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA6_DESTADDR_L (0x74040000 + 0590hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA6_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA6_DESTADDR_H (0x74040000 + 0594hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA6_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA6_LENGTH (0x74040000 + 0598hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA6_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA6_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA6_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA6_CONTROL (0x74040000 + 059Chu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA6_STATUS (0x74040000 + 05A0hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA6_PRC_LENGTH (0x74040000 + 05A4hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA6_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA6_SHARE_ACCESS (0x74040000 + 05A8hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---DMA7_SRCPARAM (0x74040000 + 05C0hu)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA7_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA7_SRCPARAM_TRSF_PARAM_SHFT            16u
#define PCIE_MAC_IREG_DMA7_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA7_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_SRCPARAM_SRC_ID_MASK                0x0000000Fu                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA7_SRCPARAM_SRC_ID_SHFT                0u

/* =====================================================================================

  ---DMA7_DESTPARAM (0x74040000 + 05C4hu)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters. 
                                     Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA7_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA7_DESTPARAM_TRSF_PARAM_SHFT           16u
#define PCIE_MAC_IREG_DMA7_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA7_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_DESTPARAM_DEST_ID_MASK              0x0000000Fu                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA7_DESTPARAM_DEST_ID_SHFT              0u

/* =====================================================================================

  ---DMA7_SRCADDR_L (0x74040000 + 05C8hu)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA7_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFFu                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_DMA_SRCADDR_L_SHFT        0u

/* =====================================================================================

  ---DMA7_SRCADDR_H (0x74040000 + 05CChu)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA7_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFFu                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_DMA_SRCADDR_H_SHFT        0u

/* =====================================================================================

  ---DMA7_DESTADDR_L (0x74040000 + 05D0hu)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA7_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFFu                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_DMA_DESTADDR_L_SHFT      0u

/* =====================================================================================

  ---DMA7_DESTADDR_H (0x74040000 + 05D4hu)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA7_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFFu                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_DMA_DESTADDR_H_SHFT      0u

/* =====================================================================================

  ---DMA7_LENGTH (0x74040000 + 05D8hu)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB - 1) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA7_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA7_LENGTH_DMA_Length_MASK              0xFFFFFFFFu                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA7_LENGTH_DMA_Length_SHFT              0u

/* =====================================================================================

  ---DMA7_CONTROL (0x74040000 + 05DChu)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. 
                                     If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit [4]: reserved.
                                     Bit [5]: Stop if DMA_LENGTH is reached.  
                                     Bit [6]: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit [7]: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit [8]: an IRQ is issued on a DMA end. 
                                     Bit [9]: an IRQ is issued if an error occurs.
                                     Bit [10]: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit [11]: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit [12]: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit [13]: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time.
                                     To generate an interruption on both sides, you must enable interrupts on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side.
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    DMA_RST[14]                  - (RW) Reset the DMA channel.
                                     Software can write one to reset the DMA channel and write zero to release reset.
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. 
                                     Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    DMA_DESC_DISPOLL[19]         - (RW) DESC_DISPOLL :
                                     Set to 1 to disable descriptor polling if descriptor ready bit is 0 in SG mode.
    RESERVED20[22..20]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG2_ID_MASK             0xE0000000u                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG2_ID_SHFT             29u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_ID_MASK              0x1C000000u                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_ID_SHFT              26u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_TYPE_MASK            0x03000000u                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_TYPE_SHFT            24u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_UPDT_MASK          0x00800000u                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_UPDT_SHFT          23u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_DISPOLL_ADDR       PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_DISPOLL_MASK       0x00080000u                // DMA_DESC_DISPOLL[19]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_DISPOLL_SHFT       19u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_TC_MASK            0x00070000u                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_TC_SHFT            16u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_PERF_MASK            0x00008000u                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_PERF_SHFT            15u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_RST_ADDR                PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_RST_MASK                0x00004000u                // DMA_RST[14]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_RST_SHFT                14u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ID_MASK             0x00003000u                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ID_SHFT             12u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_MASK                0x00000F00u                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_SHFT                8u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SE_COND_MASK            0x000000F0u                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SE_COND_SHFT            4u
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_CTRL_MASK               0x0000000Fu                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_CTRL_SHFT               0u

/* =====================================================================================

  ---DMA7_STATUS (0x74040000 + 05E0hu)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERR[15..8]           - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [15:12]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERR[23..16]         - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:20]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not in idle state.
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
                                     DMA stop due to the End of Chain field of DMA descriptor is 1
    DMA_REPORT[31]               - (RO) DMA state machine is in report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_REPORT_MASK              0x80000000u                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_REPORT_SHFT              31u
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_EODESC_EVENT_MASK        0x40000000u                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_EODESC_EVENT_SHFT        30u
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_BUSY_MASK                0x10000000u                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_BUSY_SHFT                28u
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_DEST_ERR_ADDR            PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_DEST_ERR_MASK            0x00FF0000u                // DMA_DEST_ERR[23..16]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_DEST_ERR_SHFT            16u
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_SRC_ERR_ADDR             PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_SRC_ERR_MASK             0x0000FF00u                // DMA_SRC_ERR[15..8]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_SRC_ERR_SHFT             8u
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_STATUS_MASK              0x000000FFu                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_STATUS_SHFT              0u

/* =====================================================================================

  ---DMA7_PRC_LENGTH (0x74040000 + 05E4hu)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA7_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFFu                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0u

/* =====================================================================================

  ---DMA7_SHARE_ACCESS (0x74040000 + 05E8hu)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. 
                                     Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. 
                                     These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800u                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_PF_NUM_SHFT        11u
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0u                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_VF_NUM_SHFT        4u
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002u                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1u
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001u                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0600hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_SRC_ADDR_MSB (0x74040000 + 0604hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB (0x74040000 + 0608hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB (0x74040000 + 060Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_PARAM (0x74040000 + 0610hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_MASK_LSB (0x74040000 + 0618hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_MASK_MSB (0x74040000 + 061Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0620hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_SRC_ADDR_MSB (0x74040000 + 0624hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB (0x74040000 + 0628hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB (0x74040000 + 062Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_PARAM (0x74040000 + 0630hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_MASK_LSB (0x74040000 + 0638hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_MASK_MSB (0x74040000 + 063Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0640hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_SRC_ADDR_MSB (0x74040000 + 0644hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB (0x74040000 + 0648hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB (0x74040000 + 064Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_PARAM (0x74040000 + 0650hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_MASK_LSB (0x74040000 + 0658hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_MASK_MSB (0x74040000 + 065Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0660hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_SRC_ADDR_MSB (0x74040000 + 0664hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB (0x74040000 + 0668hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB (0x74040000 + 066Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_PARAM (0x74040000 + 0670hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_MASK_LSB (0x74040000 + 0678hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_MASK_MSB (0x74040000 + 067Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0680hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_SRC_ADDR_MSB (0x74040000 + 0684hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB (0x74040000 + 0688hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB (0x74040000 + 068Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_PARAM (0x74040000 + 0690hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_MASK_LSB (0x74040000 + 0698hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_MASK_MSB (0x74040000 + 069Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 06A0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_SRC_ADDR_MSB (0x74040000 + 06A4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB (0x74040000 + 06A8hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB (0x74040000 + 06AChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_PARAM (0x74040000 + 06B0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_MASK_LSB (0x74040000 + 06B8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_MASK_MSB (0x74040000 + 06BChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 06C0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_SRC_ADDR_MSB (0x74040000 + 06C4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB (0x74040000 + 06C8hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB (0x74040000 + 06CChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_PARAM (0x74040000 + 06D0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_MASK_LSB (0x74040000 + 06D8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_MASK_MSB (0x74040000 + 06DChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 06E0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_SRC_ADDR_MSB (0x74040000 + 06E4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB (0x74040000 + 06E8hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB (0x74040000 + 06EChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_PARAM (0x74040000 + 06F0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_MASK_LSB (0x74040000 + 06F8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_MASK_MSB (0x74040000 + 06FChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0700hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_SRC_ADDR_MSB (0x74040000 + 0704hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB (0x74040000 + 0708hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB (0x74040000 + 070Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_PARAM (0x74040000 + 0710hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_MASK_LSB (0x74040000 + 0718hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_MASK_MSB (0x74040000 + 071Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0720hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_SRC_ADDR_MSB (0x74040000 + 0724hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB (0x74040000 + 0728hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB (0x74040000 + 072Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_PARAM (0x74040000 + 0730hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_MASK_LSB (0x74040000 + 0738hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_MASK_MSB (0x74040000 + 073Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0740hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_SRC_ADDR_MSB (0x74040000 + 0744hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB (0x74040000 + 0748hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB (0x74040000 + 074Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_PARAM (0x74040000 + 0750hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_MASK_LSB (0x74040000 + 0758hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_MASK_MSB (0x74040000 + 075Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0760hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_SRC_ADDR_MSB (0x74040000 + 0764hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB (0x74040000 + 0768hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB (0x74040000 + 076Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_PARAM (0x74040000 + 0770hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_MASK_LSB (0x74040000 + 0778hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_MASK_MSB (0x74040000 + 077Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0780hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_SRC_ADDR_MSB (0x74040000 + 0784hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB (0x74040000 + 0788hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB (0x74040000 + 078Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_PARAM (0x74040000 + 0790hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_MASK_LSB (0x74040000 + 0798hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_MASK_MSB (0x74040000 + 079Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 07A0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_SRC_ADDR_MSB (0x74040000 + 07A4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB (0x74040000 + 07A8hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB (0x74040000 + 07AChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_PARAM (0x74040000 + 07B0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_MASK_LSB (0x74040000 + 07B8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_MASK_MSB (0x74040000 + 07BChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 07C0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_SRC_ADDR_MSB (0x74040000 + 07C4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB (0x74040000 + 07C8hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB (0x74040000 + 07CChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_PARAM (0x74040000 + 07D0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_MASK_LSB (0x74040000 + 07D8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_MASK_MSB (0x74040000 + 07DChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 07E0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. 
                                     When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. 
                                     This space size in bytes is equal to 2^(ATR_SIZE +1). 
                                     Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_SRC_ADDR_MSB (0x74040000 + 07E4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB (0x74040000 + 07E8hu)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR0 or BAR01 (64 bits BAR)
                                     1 : BAR1
                                     2 : BAR2 or BAR23 (64 bits BAR)
                                     3 : BAR3
                                     4 : BAR4 or BAR45 (64 bits BAR)
                                     5 : BAR5
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0u                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000Fu                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_BAR_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB (0x74040000 + 07EChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. 
                                     SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_PARAM (0x74040000 + 07F0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. 
                                     The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. 
                                     The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
                                     Target Interface : PCIe
                                     Bit [2:0]: TLP Type:
                                       - 3'b000: Memory
                                       - 3'b001: Memory Locked
                                       - 3'b011: Translation Request
                                       - 3'b101: Memory Translated Request
                                       - 3'b010: IO
                                       - 3'b100: Message
                                       - Other values are reserved.
                                     Bit [3]: Translation Request No Write (NW) Flag (must be 0b when TLP Type is different from 3'b011)
                                     Bit [6:4]: TLP Attributes:
                                       - Bit 4: NoSnoop
                                       - Bit 5: Relaxed Ordering
                                       - Bit 6: ID-Based Ordering
                                     Bit [7]: ECRC Forward
                                     Bit [10:8]: Traffic Class
                                     Bit [11]: reserved
                                     
                                     Target Interface : AXI MAster
                                     Bit [3:0]: ACACHE
                                     Bit [4]: ALOCK
                                     Bit [7:5]: APROT
                                     Bit [11:8]: AQOS
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSL_ID_MASK 0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSL_ID_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_MASK_LSB (0x74040000 + 07F8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_MASK_MSB (0x74040000 + 07FChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. 
                                     It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0800hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_SRC_ADDR_MSB (0x74040000 + 0804hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_ADDR_LSB (0x74040000 + 0808hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_ADDR_MSB (0x74040000 + 080Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_PARAM (0x74040000 + 0810hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_MASK_LSB (0x74040000 + 0818hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_MASK_MSB (0x74040000 + 081Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0820hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_SRC_ADDR_MSB (0x74040000 + 0824hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_ADDR_LSB (0x74040000 + 0828hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_ADDR_MSB (0x74040000 + 082Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_PARAM (0x74040000 + 0830hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_MASK_LSB (0x74040000 + 0838hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_MASK_MSB (0x74040000 + 083Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0840hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_SRC_ADDR_MSB (0x74040000 + 0844hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_ADDR_LSB (0x74040000 + 0848hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_ADDR_MSB (0x74040000 + 084Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_PARAM (0x74040000 + 0850hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_MASK_LSB (0x74040000 + 0858hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_MASK_MSB (0x74040000 + 085Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0860hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_SRC_ADDR_MSB (0x74040000 + 0864hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_ADDR_LSB (0x74040000 + 0868hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_ADDR_MSB (0x74040000 + 086Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_PARAM (0x74040000 + 0870hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_MASK_LSB (0x74040000 + 0878hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_MASK_MSB (0x74040000 + 087Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0880hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_SRC_ADDR_MSB (0x74040000 + 0884hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_ADDR_LSB (0x74040000 + 0888hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_ADDR_MSB (0x74040000 + 088Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_PARAM (0x74040000 + 0890hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_MASK_LSB (0x74040000 + 0898hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_MASK_MSB (0x74040000 + 089Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 08A0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_SRC_ADDR_MSB (0x74040000 + 08A4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_ADDR_LSB (0x74040000 + 08A8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_ADDR_MSB (0x74040000 + 08AChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_PARAM (0x74040000 + 08B0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_MASK_LSB (0x74040000 + 08B8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_MASK_MSB (0x74040000 + 08BChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 08C0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_SRC_ADDR_MSB (0x74040000 + 08C4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_ADDR_LSB (0x74040000 + 08C8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_ADDR_MSB (0x74040000 + 08CChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_PARAM (0x74040000 + 08D0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_MASK_LSB (0x74040000 + 08D8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_MASK_MSB (0x74040000 + 08DChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 08E0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_SRC_ADDR_MSB (0x74040000 + 08E4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_ADDR_LSB (0x74040000 + 08E8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_ADDR_MSB (0x74040000 + 08EChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_PARAM (0x74040000 + 08F0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_MASK_LSB (0x74040000 + 08F8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_MASK_MSB (0x74040000 + 08FChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0900hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_SRC_ADDR_MSB (0x74040000 + 0904hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_ADDR_LSB (0x74040000 + 0908hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_ADDR_MSB (0x74040000 + 090Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_PARAM (0x74040000 + 0910hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_MASK_LSB (0x74040000 + 0918hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_MASK_MSB (0x74040000 + 091Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0920hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_SRC_ADDR_MSB (0x74040000 + 0924hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_ADDR_LSB (0x74040000 + 0928hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_ADDR_MSB (0x74040000 + 092Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_PARAM (0x74040000 + 0930hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_MASK_LSB (0x74040000 + 0938hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_MASK_MSB (0x74040000 + 093Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0940hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_SRC_ADDR_MSB (0x74040000 + 0944hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_ADDR_LSB (0x74040000 + 0948hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_ADDR_MSB (0x74040000 + 094Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_PARAM (0x74040000 + 0950hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_MASK_LSB (0x74040000 + 0958hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_MASK_MSB (0x74040000 + 095Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0960hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_SRC_ADDR_MSB (0x74040000 + 0964hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_ADDR_LSB (0x74040000 + 0968hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_ADDR_MSB (0x74040000 + 096Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_PARAM (0x74040000 + 0970hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_MASK_LSB (0x74040000 + 0978hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_MASK_MSB (0x74040000 + 097Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0980hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_SRC_ADDR_MSB (0x74040000 + 0984hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_ADDR_LSB (0x74040000 + 0988hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_ADDR_MSB (0x74040000 + 098Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_PARAM (0x74040000 + 0990hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_MASK_LSB (0x74040000 + 0998hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_MASK_MSB (0x74040000 + 099Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 09A0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_SRC_ADDR_MSB (0x74040000 + 09A4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_ADDR_LSB (0x74040000 + 09A8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_ADDR_MSB (0x74040000 + 09AChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_PARAM (0x74040000 + 09B0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_MASK_LSB (0x74040000 + 09B8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_MASK_MSB (0x74040000 + 09BChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 09C0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_SRC_ADDR_MSB (0x74040000 + 09C4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_ADDR_LSB (0x74040000 + 09C8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_ADDR_MSB (0x74040000 + 09CChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_PARAM (0x74040000 + 09D0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_MASK_LSB (0x74040000 + 09D8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_MASK_MSB (0x74040000 + 09DChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 09E0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_SRC_ADDR_MSB (0x74040000 + 09E4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_ADDR_LSB (0x74040000 + 09E8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_ADDR_MSB (0x74040000 + 09EChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_PARAM (0x74040000 + 09F0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_MASK_LSB (0x74040000 + 09F8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_MASK_MSB (0x74040000 + 09FChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0A00hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_SRC_ADDR_MSB (0x74040000 + 0A04hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_ADDR_LSB (0x74040000 + 0A08hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_ADDR_MSB (0x74040000 + 0A0Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_PARAM (0x74040000 + 0A10hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_MASK_LSB (0x74040000 + 0A18hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_MASK_MSB (0x74040000 + 0A1Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0A20hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_SRC_ADDR_MSB (0x74040000 + 0A24hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_ADDR_LSB (0x74040000 + 0A28hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_ADDR_MSB (0x74040000 + 0A2Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_PARAM (0x74040000 + 0A30hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_MASK_LSB (0x74040000 + 0A38hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_MASK_MSB (0x74040000 + 0A3Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0A40hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_SRC_ADDR_MSB (0x74040000 + 0A44hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_ADDR_LSB (0x74040000 + 0A48hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_ADDR_MSB (0x74040000 + 0A4Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_PARAM (0x74040000 + 0A50hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_MASK_LSB (0x74040000 + 0A58hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_MASK_MSB (0x74040000 + 0A5Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0A60hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_SRC_ADDR_MSB (0x74040000 + 0A64hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_ADDR_LSB (0x74040000 + 0A68hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_ADDR_MSB (0x74040000 + 0A6Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_PARAM (0x74040000 + 0A70hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_MASK_LSB (0x74040000 + 0A78hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_MASK_MSB (0x74040000 + 0A7Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0A80hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_SRC_ADDR_MSB (0x74040000 + 0A84hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_ADDR_LSB (0x74040000 + 0A88hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_ADDR_MSB (0x74040000 + 0A8Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_PARAM (0x74040000 + 0A90hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_MASK_LSB (0x74040000 + 0A98hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_MASK_MSB (0x74040000 + 0A9Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0AA0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_SRC_ADDR_MSB (0x74040000 + 0AA4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_ADDR_LSB (0x74040000 + 0AA8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_ADDR_MSB (0x74040000 + 0AAChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_PARAM (0x74040000 + 0AB0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_MASK_LSB (0x74040000 + 0AB8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_MASK_MSB (0x74040000 + 0ABChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0AC0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_SRC_ADDR_MSB (0x74040000 + 0AC4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_ADDR_LSB (0x74040000 + 0AC8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_ADDR_MSB (0x74040000 + 0ACChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_PARAM (0x74040000 + 0AD0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_MASK_LSB (0x74040000 + 0AD8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_MASK_MSB (0x74040000 + 0ADChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0AE0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_SRC_ADDR_MSB (0x74040000 + 0AE4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_ADDR_LSB (0x74040000 + 0AE8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_ADDR_MSB (0x74040000 + 0AEChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_PARAM (0x74040000 + 0AF0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_MASK_LSB (0x74040000 + 0AF8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_MASK_MSB (0x74040000 + 0AFChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0B00hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_SRC_ADDR_MSB (0x74040000 + 0B04hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_ADDR_LSB (0x74040000 + 0B08hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_ADDR_MSB (0x74040000 + 0B0Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_PARAM (0x74040000 + 0B10hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_MASK_LSB (0x74040000 + 0B18hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_MASK_MSB (0x74040000 + 0B1Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0B20hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_SRC_ADDR_MSB (0x74040000 + 0B24hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_ADDR_LSB (0x74040000 + 0B28hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_ADDR_MSB (0x74040000 + 0B2Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_PARAM (0x74040000 + 0B30hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_MASK_LSB (0x74040000 + 0B38hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_MASK_MSB (0x74040000 + 0B3Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0B40hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_SRC_ADDR_MSB (0x74040000 + 0B44hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_ADDR_LSB (0x74040000 + 0B48hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_ADDR_MSB (0x74040000 + 0B4Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_PARAM (0x74040000 + 0B50hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_MASK_LSB (0x74040000 + 0B58hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_MASK_MSB (0x74040000 + 0B5Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0B60hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_SRC_ADDR_MSB (0x74040000 + 0B64hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_ADDR_LSB (0x74040000 + 0B68hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_ADDR_MSB (0x74040000 + 0B6Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_PARAM (0x74040000 + 0B70hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_MASK_LSB (0x74040000 + 0B78hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_MASK_MSB (0x74040000 + 0B7Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0B80hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_SRC_ADDR_MSB (0x74040000 + 0B84hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_ADDR_LSB (0x74040000 + 0B88hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_ADDR_MSB (0x74040000 + 0B8Chu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_PARAM (0x74040000 + 0B90hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_MASK_LSB (0x74040000 + 0B98hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_MASK_MSB (0x74040000 + 0B9Chu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0BA0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_SRC_ADDR_MSB (0x74040000 + 0BA4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_ADDR_LSB (0x74040000 + 0BA8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_ADDR_MSB (0x74040000 + 0BAChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_PARAM (0x74040000 + 0BB0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_MASK_LSB (0x74040000 + 0BB8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_MASK_MSB (0x74040000 + 0BBChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0BC0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_SRC_ADDR_MSB (0x74040000 + 0BC4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_ADDR_LSB (0x74040000 + 0BC8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_ADDR_MSB (0x74040000 + 0BCChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_PARAM (0x74040000 + 0BD0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_MASK_LSB (0x74040000 + 0BD8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_MASK_MSB (0x74040000 + 0BDChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB (0x74040000 + 0BE0hu)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000u                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007Eu                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001u                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_SRC_ADDR_MSB (0x74040000 + 0BE4hu)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFFu                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_ADDR_LSB (0x74040000 + 0BE8hu)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000u                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_ADDR_MSB (0x74040000 + 0BEChu)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFFu                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_PARAM (0x74040000 + 0BF0hu)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000u                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16u
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000Fu                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSL_ID_SHFT  0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_MASK_LSB (0x74040000 + 0BF8hu)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFFu                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0u

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_MASK_MSB (0x74040000 + 0BFChu)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFFu                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F0 (0x74040000 + 0C00hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC mode only
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     when dut is EP mode , can not write by RC

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F0_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F0 (0x74040000 + 0C04hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F0_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F0 (0x74040000 + 0C08hu)---

    IMASK_MSI[31..0]             - (RW) For RC 
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP 
                                     LSB addr  of matching dummy read for axi slave0

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F0_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F0_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F0_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F0_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F0 (0x74040000 + 0C0Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC 
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP 
                                     MSB addr  of matching dummy read for axi slave0

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F0_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F0_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F0_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F0_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F1 (0x74040000 + 0C10hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F1_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F1 (0x74040000 + 0C14hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F1_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F1 (0x74040000 + 0C18hu)---

    IMASK_MSI[31..0]             - (RW) For RC 
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP 
                                     LSB addr  of matching dummy read for axi slave01

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F1_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F1_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F1_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F1_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F1 (0x74040000 + 0C1Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC 
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP 
                                     MSB addr  of matching dummy read for axi slave1

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F1_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F1_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F1_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F1_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F2 (0x74040000 + 0C20hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F2_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F2 (0x74040000 + 0C24hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F2_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F2 (0x74040000 + 0C28hu)---

    IMASK_MSI[31..0]             - (RW) For RC .
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP 
                                     LSB addr  of matching dummy read for axi slave2

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F2_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F2_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F2_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F2_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F2 (0x74040000 + 0C2Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC .
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP 
                                     MSB addr  of matching dummy read for axi slave2

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F2_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F2_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F2_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F2_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F3 (0x74040000 + 0C30hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F3_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F3 (0x74040000 + 0C34hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F3_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F3 (0x74040000 + 0C38hu)---

    IMASK_MSI[31..0]             - (RW) For RC .
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP 
                                     LSB addr  of matching dummy read for axi slave3

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F3_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F3_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F3_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F3_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F3 (0x74040000 + 0C3Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC.
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP 
                                     MSB addr  of matching dummy read for axi slave3

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F3_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F3_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F3_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F3_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F4 (0x74040000 + 0C40hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F4_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F4 (0x74040000 + 0C44hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F4_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F4 (0x74040000 + 0C48hu)---

    IMASK_MSI[31..0]             - (RW) For RC .
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP
                                     LSB addr  of matching dummy write for axi slave0

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F4_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F4_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F4_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F4_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F4 (0x74040000 + 0C4Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC.
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP
                                     MSB addr  of matching dummy write for axi slave0

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F4_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F4_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F4_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F4_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F5 (0x74040000 + 0C50hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F5_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F5 (0x74040000 + 0C54hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F5_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F5 (0x74040000 + 0C58hu)---

    IMASK_MSI[31..0]             - (RW) For RC.
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP
                                     LSB addr  of matching dummy write for axi slave1

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F5_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F5_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F5_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F5_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F5 (0x74040000 + 0C5Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC.
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP
                                     MSB addr  of matching dummy write for axi slave1

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F5_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F5_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F5_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F5_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F6 (0x74040000 + 0C60hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F6_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F6 (0x74040000 + 0C64hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F6_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F6 (0x74040000 + 0C68hu)---

    IMASK_MSI[31..0]             - (RW) For RC.
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP
                                     LSB addr  of matching dummy write for axi slave2

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F6_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F6_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F6_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F6_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F6 (0x74040000 + 0C6Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC.
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP
                                     MSB addr  of matching dummy write for axi slave2

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F6_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F6_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F6_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F6_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_LO_ADDR_F7 (0x74040000 + 0C70hu)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F7_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_IMSI_LO_ADDR_MASK        0xFFFFFFFFu                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_IMSI_LO_ADDR_SHFT        0u

/* =====================================================================================

  ---ISTATUS_MSI_F7 (0x74040000 + 0C74hu)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F7_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ISTATUS_MSI_MASK          0xFFFFFFFFu                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ISTATUS_MSI_SHFT          0u

/* =====================================================================================

  ---IMASK_MSI_F7 (0x74040000 + 0C78hu)---

    IMASK_MSI[31..0]             - (RW) For RC only.
                                     MSI Message Status Enable for Group0
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184 and generate IRQ by output signal "pcie_interrupt_out"
                                     For EP
                                     LSB addr  of matching dummy write for axi slave3

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F7_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F7_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F7_IMASK_MSI_MASK              0xFFFFFFFFu                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F7_IMASK_MSI_SHFT              0u

/* =====================================================================================

  ---IMASK_MSI_GRP1_F7 (0x74040000 + 0C7Chu)---

    IMASK_MSI_GRP1[31..0]        - (RW) For RC.
                                     MSI Message Status Enable for Group1
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp1".
                                     For EP
                                     MSB addr  of matching dummy write for axi slave3

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F7_IMASK_MSI_GRP1_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP1_F7_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F7_IMASK_MSI_GRP1_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP1[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP1_F7_IMASK_MSI_GRP1_SHFT    0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F0 (0x74040000 + 0C80hu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.
                                     For EP mode
                                     bit0~3 Enable axi dummy read change to pcie zero length pkt for pcie axi slav(0: disable 1:enable)
                                     bit 0:  For pcie axi slave port0
                                     bit 1:  For pcie axi slave port1
                                     bit 2:  For pcie axi slave port2
                                     bit 3:  For pcie axi slave port3
                                     bit4~7 Enable axi dummy write change to pcie zero length pkt for pcie axi slav(0: disable 1:enable)
                                     bit 4:  For pcie axi slave port0
                                     bit 5:  For pcie axi slave port1
                                     bit 6:  For pcie axi slave port2
                                     bit 7:  For pcie axi slave port3
                                     bit 8:  dummy write sw  rst

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F0_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F1 (0x74040000 + 0C84hu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F1_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F2 (0x74040000 + 0C88hu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F2_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F3 (0x74040000 + 0C8Chu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F3_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F4 (0x74040000 + 0C90hu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F4_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F5 (0x74040000 + 0C94hu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F5_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F6 (0x74040000 + 0C98hu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F6_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---IMSI_HI_ADDR_F7 (0x74040000 + 0C9Chu)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F7_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_IMSI_HI_ADDR_MASK        0xFFFFFFFFu                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_IMSI_HI_ADDR_SHFT        0u

/* =====================================================================================

  ---PCIE_VC_CAP (0x74040000 + 0CA0hu)---

    VC_NUM[2..0]                 - (RO) Indicates the number of (extended) Virtual Channels in addition to the default VC supported by the device. This field is valid for all Functions.
                                     The minimum value of this field is 000b (for devices that only support the default VC). The maximum value is 7.
    RSVD1[3]                     - (RW) Reserved
    VC_LP_NUM[6..4]              - (RW) Indicates the number of (extended) Virtual Channels in addition to the default VC belonging to the low-priority VC (LPVC) group that has the lowest priority with respect to other VC resources in a strict-priority VC Arbitration. 
                                     This field is valid for all Functions.
                                     The minimum value of this field is 000b and the maximum value is Extended VC Count.
    RSVD2[23..7]                 - (RW) Reserved
    TC_EN[31..24]                - (RO) Indicates which TC is enabled.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CAP_TC_EN_ADDR                   PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_TC_EN_MASK                   0xFF000000u                // TC_EN[31..24]
#define PCIE_MAC_IREG_PCIE_VC_CAP_TC_EN_SHFT                   24u
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD2_MASK                   0x00FFFF80u                // RSVD2[23..7]
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD2_SHFT                   7u
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_LP_NUM_ADDR               PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_LP_NUM_MASK               0x00000070u                // VC_LP_NUM[6..4]
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_LP_NUM_SHFT               4u
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD1_MASK                   0x00000008u                // RSVD1[3]
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD1_SHFT                   3u
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_NUM_ADDR                  PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_NUM_MASK                  0x00000007u                // VC_NUM[2..0]
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_NUM_SHFT                  0u

/* =====================================================================================

  ---PCIE_VC_CAP2 (0x74040000 + 0CA4hu)---

    TC_VC_MAP[23..0]             - (RO) This field indicates the TCs that are mapped to the VC resource. 
                                     Bit[2:0] : TC0 map to which VC resource.
                                     Bit[5:3] : TC1 map to which VC resource.
                                     .
                                     Bit[23:21] : TC7 map to which VC resource.
    VC_EN[31..24]                - (RO) Indicates which VC is enabled.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CAP2_VC_EN_ADDR                  PCIE_MAC_IREG_PCIE_VC_CAP2_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP2_VC_EN_MASK                  0xFF000000u                // VC_EN[31..24]
#define PCIE_MAC_IREG_PCIE_VC_CAP2_VC_EN_SHFT                  24u
#define PCIE_MAC_IREG_PCIE_VC_CAP2_TC_VC_MAP_ADDR              PCIE_MAC_IREG_PCIE_VC_CAP2_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP2_TC_VC_MAP_MASK              0x00FFFFFFu                // TC_VC_MAP[23..0]
#define PCIE_MAC_IREG_PCIE_VC_CAP2_TC_VC_MAP_SHFT              0u

/* =====================================================================================

  ---PCIE_VC1_CRED_L (0x74040000 + 0CA8hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC1_CRED_H (0x74040000 + 0CAChu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_VC2_CRED_L (0x74040000 + 0CB0hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC2_CRED_H (0x74040000 + 0CB4hu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_VC3_CRED_L (0x74040000 + 0CB8hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC3_CRED_H (0x74040000 + 0CBChu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_VC4_CRED_L (0x74040000 + 0CC0hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC4_CRED_H (0x74040000 + 0CC4hu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_VC5_CRED_L (0x74040000 + 0CC8hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC5_CRED_H (0x74040000 + 0CCChu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_VC6_CRED_L (0x74040000 + 0CD0hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC6_CRED_H (0x74040000 + 0CD4hu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_VC7_CRED_L (0x74040000 + 0CD8hu)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPD_credits_L_MASK       0xF0000000u                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPD_credits_L_SHFT       28u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPH_credits_MASK         0x0FF00000u                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPH_credits_SHFT         20u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PD_credits_MASK          0x000FFF00u                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PD_credits_SHFT          8u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PH_credits_MASK          0x000000FFu                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PH_credits_SHFT          0u

/* =====================================================================================

  ---PCIE_VC7_CRED_H (0x74040000 + 0CDChu)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_RSVD1_MASK               0xC0000000u                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_RSVD1_SHFT               30u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPL_scale_MASK           0x30000000u                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPL_scale_SHFT           28u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Non_Post_scale_MASK      0x0C000000u                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Non_Post_scale_SHFT      26u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Post_scale_MASK          0x03000000u                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Post_scale_SHFT          24u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLD_credits_MASK        0x00FFF000u                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLD_credits_SHFT        12u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLH_credits_MASK        0x00000FF0u                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLH_credits_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_NPD_credits_H_MASK       0x0000000Fu                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_NPD_credits_H_SHFT       0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_0 (0x74040000 + 0CE0hu)---

    PCIE_RECEIVED_MESSAGE_0[31..0] - (RO) DW0 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_PCIE_RECEIVED_MESSAGE_0_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_PCIE_RECEIVED_MESSAGE_0_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_0[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_PCIE_RECEIVED_MESSAGE_0_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_1 (0x74040000 + 0CE4hu)---

    PCIE_RECEIVED_MESSAGE_1[31..0] - (RO) DW1 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_PCIE_RECEIVED_MESSAGE_1_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_PCIE_RECEIVED_MESSAGE_1_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_1[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_PCIE_RECEIVED_MESSAGE_1_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_2 (0x74040000 + 0CE8hu)---

    PCIE_RECEIVED_MESSAGE_2[31..0] - (RO) DW2 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_PCIE_RECEIVED_MESSAGE_2_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_PCIE_RECEIVED_MESSAGE_2_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_2[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_PCIE_RECEIVED_MESSAGE_2_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_3 (0x74040000 + 0CEChu)---

    PCIE_RECEIVED_MESSAGE_3[31..0] - (RO) DW3 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_PCIE_RECEIVED_MESSAGE_3_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_PCIE_RECEIVED_MESSAGE_3_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_3[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_PCIE_RECEIVED_MESSAGE_3_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_4 (0x74040000 + 0CF0hu)---

    PCIE_RECEIVED_MESSAGE_4[31..0] - (RO) DW4 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_PCIE_RECEIVED_MESSAGE_4_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_PCIE_RECEIVED_MESSAGE_4_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_4[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_PCIE_RECEIVED_MESSAGE_4_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_5 (0x74040000 + 0CF4hu)---

    PCIE_RECEIVED_MESSAGE_5[31..0] - (RO) DW5 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_PCIE_RECEIVED_MESSAGE_5_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_PCIE_RECEIVED_MESSAGE_5_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_5[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_PCIE_RECEIVED_MESSAGE_5_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_6 (0x74040000 + 0CF8hu)---

    PCIE_RECEIVED_MESSAGE_6[31..0] - (RO) DW6 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_PCIE_RECEIVED_MESSAGE_6_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_PCIE_RECEIVED_MESSAGE_6_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_6[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_PCIE_RECEIVED_MESSAGE_6_SHFT 0u

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_7 (0x74040000 + 0CFChu)---

    PCIE_RECEIVED_MESSAGE_7[31..0] - (RO) DW7 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_PCIE_RECEIVED_MESSAGE_7_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_PCIE_RECEIVED_MESSAGE_7_MASK 0xFFFFFFFFu                // PCIE_RECEIVED_MESSAGE_7[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_PCIE_RECEIVED_MESSAGE_7_SHFT 0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_0 (0x74040000 + 0D00hu)---

    debug_dummy_0[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_debug_dummy_0_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_debug_dummy_0_MASK    0xFFFFFFFFu                // debug_dummy_0[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_debug_dummy_0_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_1 (0x74040000 + 0D04hu)---

    debug_dummy_1[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_debug_dummy_1_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_debug_dummy_1_MASK    0xFFFFFFFFu                // debug_dummy_1[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_debug_dummy_1_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_2 (0x74040000 + 0D08hu)---

    debug_dummy_2[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_debug_dummy_2_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_debug_dummy_2_MASK    0xFFFFFFFFu                // debug_dummy_2[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_debug_dummy_2_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_3 (0x74040000 + 0D0Chu)---

    debug_dummy_3[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_debug_dummy_3_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_debug_dummy_3_MASK    0xFFFFFFFFu                // debug_dummy_3[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_debug_dummy_3_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_4 (0x74040000 + 0D10hu)---

    debug_dummy_4[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_debug_dummy_4_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_debug_dummy_4_MASK    0xFFFFFFFFu                // debug_dummy_4[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_debug_dummy_4_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_5 (0x74040000 + 0D14hu)---

    debug_dummy_5[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_debug_dummy_5_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_debug_dummy_5_MASK    0xFFFFFFFFu                // debug_dummy_5[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_debug_dummy_5_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_6 (0x74040000 + 0D18hu)---

    debug_dummy_6[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_debug_dummy_6_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_debug_dummy_6_MASK    0xFFFFFFFFu                // debug_dummy_6[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_debug_dummy_6_SHFT    0u

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_7 (0x74040000 + 0D1Chu)---

    debug_dummy_7[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_debug_dummy_7_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_debug_dummy_7_MASK    0xFFFFFFFFu                // debug_dummy_7[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_debug_dummy_7_SHFT    0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_STATUS_0 (0x74040000 + 0D20hu)---

    PCIE_OUTSTANDING_RD_CNT[6..0] - (RO) PCIE outstanding read command counts
    PCIE_OUTSTANDING_WR_CNT[13..7] - (RO) PCIE outstanding write command counts
    RSVD[31..14]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_RSVD_ADDR       PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_RSVD_MASK       0xFFFFC000u                // RSVD[31..14]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_RSVD_SHFT       14u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_WR_CNT_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_WR_CNT_MASK 0x00003F80u                // PCIE_OUTSTANDING_WR_CNT[13..7]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_WR_CNT_SHFT 7u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_RD_CNT_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_RD_CNT_MASK 0x0000007Fu                // PCIE_OUTSTANDING_RD_CNT[6..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_RD_CNT_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_STATUS_1 (0x74040000 + 0D24hu)---

    CPLD_AVG_LATENCY[9..0]       - (W1C) Average Completion latency cycle
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_CPLD_AVG_LATENCY_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_CPLD_AVG_LATENCY_MASK 0x000003FFu                // CPLD_AVG_LATENCY[9..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_CPLD_AVG_LATENCY_SHFT 0u

/* =====================================================================================

  ---PCIE_RESOURCE_STATUS (0x74040000 + 0D28hu)---

    pcie_resource_status[7..0]   - (RO) PCIe Resource Status from system.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RESOURCE_STATUS_pcie_resource_status_ADDR PCIE_MAC_IREG_PCIE_RESOURCE_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_STATUS_pcie_resource_status_MASK 0x000000FFu                // pcie_resource_status[7..0]
#define PCIE_MAC_IREG_PCIE_RESOURCE_STATUS_pcie_resource_status_SHFT 0u

/* =====================================================================================

  ---PCIE_RESOURCE_CTRL (0x74040000 + 0D2Chu)---

    sys_clk_rdy_time[7..0]       - (RW) The time MAC will debounce signal "pextp_sys_clk_rdy" from system after pextp_mac_sleep is 0.
                                     unit : 1us
    tl_resource_rdy_en[15..8]    - (RW) enable resource check when issue axi command.
    resource_rdy_time[19..16]    - (RW) The time MAC will debounce signal "tl_resource_rdy" from system. 0 means no debounce.
                                     unit : 1us
    ddren_rdy_en[20]             - (RW) enable ddren check when issue axi command.
    pcie_dram_l0l0s_lock_en[21]  - (RW) enable "pextp_mac_active" always assert in L0 or L0s
    RSVD0[23..22]                - (RW) Reserved
    ddren_rdy_time[27..24]       - (RW) The time MAC will debounce signal "pextp_mac_ddren_rdy" from system. 0 means no debounce.
                                     unit : 1us
    RSVD1[31..28]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_RSVD1_MASK            0xF0000000u                // RSVD1[31..28]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_RSVD1_SHFT            28u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ddren_rdy_time_ADDR   PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ddren_rdy_time_MASK   0x0F000000u                // ddren_rdy_time[27..24]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ddren_rdy_time_SHFT   24u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_RSVD0_ADDR            PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_RSVD0_MASK            0x00C00000u                // RSVD0[23..22]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_RSVD0_SHFT            22u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_pcie_dram_l0l0s_lock_en_ADDR PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_pcie_dram_l0l0s_lock_en_MASK 0x00200000u                // pcie_dram_l0l0s_lock_en[21]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_pcie_dram_l0l0s_lock_en_SHFT 21u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ddren_rdy_en_ADDR     PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ddren_rdy_en_MASK     0x00100000u                // ddren_rdy_en[20]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ddren_rdy_en_SHFT     20u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_resource_rdy_time_ADDR PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_resource_rdy_time_MASK 0x000F0000u                // resource_rdy_time[19..16]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_resource_rdy_time_SHFT 16u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_tl_resource_rdy_en_ADDR PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_tl_resource_rdy_en_MASK 0x0000FF00u                // tl_resource_rdy_en[15..8]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_tl_resource_rdy_en_SHFT 8u
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_sys_clk_rdy_time_ADDR PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_sys_clk_rdy_time_MASK 0x000000FFu                // sys_clk_rdy_time[7..0]
#define PCIE_MAC_IREG_PCIE_RESOURCE_CTRL_sys_clk_rdy_time_SHFT 0u

/* =====================================================================================

  ---PCIE_TX_CREDIT_0 (0x74040000 + 0D30hu)---

    P_READY[0]                   - (RO) Posted Ready
                                     Asserted when there are enough credits to transmit at least one posted TLP with maximum payload size.
    PH_CRED[3..1]                - (RO) Posted Header Credits
                                     Indicate the number of PH credits.
                                     When 7 or more credits are available or when a component has received infinite credits at initialization, this vector is saturated at 7h.
    PD_CRED[15..4]               - (RO) Posted Data Credits
                                     Indicate the number of PD credits.
                                     When a component has received infinite credits, this vector is saturated at FFFh.
    CPL_READY[16]                - (RO) Completion Ready
                                     Asserted when there are enough credits to transmit at least one completion TLP with maximum payload size.
    CPLH_CRED[19..17]            - (RO) Completion Header Credits
                                     Indicate the number of CPLH credits.
                                     When 7 or more credits are available or when a component has received infinite credits at initialization, this vector is saturated at 7h.
    CPLD_CRED[31..20]            - (RO) Completion Data Credits
                                     Indicate the number of CPLD credits.
                                     When a component has received infinite credits, this vector is saturated at FFFh.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLD_CRED_ADDR          PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLD_CRED_MASK          0xFFF00000u                // CPLD_CRED[31..20]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLD_CRED_SHFT          20u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLH_CRED_ADDR          PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLH_CRED_MASK          0x000E0000u                // CPLH_CRED[19..17]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLH_CRED_SHFT          17u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPL_READY_ADDR          PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPL_READY_MASK          0x00010000u                // CPL_READY[16]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPL_READY_SHFT          16u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PD_CRED_ADDR            PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PD_CRED_MASK            0x0000FFF0u                // PD_CRED[15..4]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PD_CRED_SHFT            4u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PH_CRED_ADDR            PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PH_CRED_MASK            0x0000000Eu                // PH_CRED[3..1]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PH_CRED_SHFT            1u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_P_READY_ADDR            PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_P_READY_MASK            0x00000001u                // P_READY[0]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_P_READY_SHFT            0u

/* =====================================================================================

  ---PCIE_TX_CREDIT_1 (0x74040000 + 0D34hu)---

    NP_READY[0]                  - (RO) Non-Posted Ready
                                     Asserted when there are enough credits to transmit at least one non-posted TLP of maximum payload size.
    NPH_CRED[3..1]               - (RO) Non-Posted Header Credits
                                     Indicate the number of NPPH credits.
                                     When 7 or more credits are available or when a component has received infinite credits at initialization, this vector is saturated at 7h.
    NPD_CRED[6..4]               - (RO) Non-Posted Data Credits
                                     Indicate the number of NPPD credits.
                                     When a component has received infinite credits, this vector is saturated at 7h.
    RSVD1[31..7]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_RSVD1_MASK              0xFFFFFF80u                // RSVD1[31..7]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_RSVD1_SHFT              7u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPD_CRED_ADDR           PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPD_CRED_MASK           0x00000070u                // NPD_CRED[6..4]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPD_CRED_SHFT           4u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPH_CRED_ADDR           PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPH_CRED_MASK           0x0000000Eu                // NPH_CRED[3..1]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPH_CRED_SHFT           1u
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NP_READY_ADDR           PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NP_READY_MASK           0x00000001u                // NP_READY[0]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NP_READY_SHFT           0u

/* =====================================================================================

  ---PCIE_DLLP_HEADER_LOG_0 (0x74040000 + 0D38hu)---

    PCIE_DLLP_HEADER_LOG[31..0]  - (RO) LOG Error DLLP Header
                                     When an error DLLP received, log DLLP header here.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_PCIE_DLLP_HEADER_LOG_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_PCIE_DLLP_HEADER_LOG_MASK 0xFFFFFFFFu                // PCIE_DLLP_HEADER_LOG[31..0]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_PCIE_DLLP_HEADER_LOG_SHFT 0u

/* =====================================================================================

  ---PCIE_DLLP_HEADER_LOG_1 (0x74040000 + 0D3Chu)---

    PCIE_DLLP_HEADER_LOG_1[7..0] - (W1C) LOG Error DLLP Header
                                     bit [3:0] asserted if DLLP is error
                                     bit [7:4] asserted if DLLP is unknown type
    PCIE_TXNAK_COUNT[15..8]      - (W1C) DUT Send NAK Counts
                                     Count when DUT sent NAK
    PCIE_REPLAYTIMOUT_COUNT[23..16] - (W1C) PCIe Replay Timeout Count
                                     Count when replay timeout happened
    PCIE_RXNAK_COUNT[31..24]     - (W1C) DUT Receive NAK Counts
                                     Count when DUT received NAK

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_RXNAK_COUNT_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_RXNAK_COUNT_MASK 0xFF000000u                // PCIE_RXNAK_COUNT[31..24]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_RXNAK_COUNT_SHFT 24u
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_REPLAYTIMOUT_COUNT_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_REPLAYTIMOUT_COUNT_MASK 0x00FF0000u                // PCIE_REPLAYTIMOUT_COUNT[23..16]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_REPLAYTIMOUT_COUNT_SHFT 16u
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_TXNAK_COUNT_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_TXNAK_COUNT_MASK 0x0000FF00u                // PCIE_TXNAK_COUNT[15..8]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_TXNAK_COUNT_SHFT 8u
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_DLLP_HEADER_LOG_1_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_DLLP_HEADER_LOG_1_MASK 0x000000FFu                // PCIE_DLLP_HEADER_LOG_1[7..0]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_DLLP_HEADER_LOG_1_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE0 (0x74040000 + 0D40hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE1 (0x74040000 + 0D44hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE2 (0x74040000 + 0D48hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE3 (0x74040000 + 0D4Chu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE4 (0x74040000 + 0D50hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE5 (0x74040000 + 0D54hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE6 (0x74040000 + 0D58hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE7 (0x74040000 + 0D5Chu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE8 (0x74040000 + 0D60hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE8_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE9 (0x74040000 + 0D64hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE9_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE10 (0x74040000 + 0D68hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE10_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE11 (0x74040000 + 0D6Chu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE11_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE12 (0x74040000 + 0D70hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE12_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE13 (0x74040000 + 0D74hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE13_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE14 (0x74040000 + 0D78hu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    skpparity_err_count_ovf[31]  - (W1C) skpparity_err_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_skpparity_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_skpparity_err_count_ovf_MASK 0x80000000u                // skpparity_err_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_skpparity_err_count_ovf_SHFT 31u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE14_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE15 (0x74040000 + 0D7Chu)---

    p8b10b_err_count[6..0]       - (W1C) 8b10b_err_count
    p8b10b_err_count_ovf[7]      - (W1C) 8b10b_err_count_ovf
    p128b130b_err_count[14..8]   - (W1C) 128b130b_err_count
    p128b130b_err_count_ovf[15]  - (W1C) 128b130b_err_count_ovf
    mlfskp_err_count[22..16]     - (W1C) mlfskp_err_count
    mlfskp_err_count_ovf[23]     - (W1C) mlfskp_err_count_ovf
    skppraity_err_count[30..24]  - (W1C) skppraity_err_count
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_skppraity_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_skppraity_err_count_MASK 0x7F000000u                // skppraity_err_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_skppraity_err_count_SHFT 24u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_mlfskp_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_mlfskp_err_count_ovf_MASK 0x00800000u                // mlfskp_err_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_mlfskp_err_count_ovf_SHFT 23u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_mlfskp_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_mlfskp_err_count_MASK 0x007F0000u                // mlfskp_err_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_mlfskp_err_count_SHFT 16u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p128b130b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p128b130b_err_count_ovf_MASK 0x00008000u                // p128b130b_err_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p128b130b_err_count_ovf_SHFT 15u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p128b130b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p128b130b_err_count_MASK 0x00007F00u                // p128b130b_err_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p128b130b_err_count_SHFT 8u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p8b10b_err_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p8b10b_err_count_ovf_MASK 0x00000080u                // p8b10b_err_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p8b10b_err_count_ovf_SHFT 7u
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p8b10b_err_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p8b10b_err_count_MASK 0x0000007Fu                // p8b10b_err_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE15_p8b10b_err_count_SHFT 0u

/* =====================================================================================

  ---PTM_RECEIVED_MESSAGE_0 (0x74040000 + 0D80hu)---

    PTM_RECEIVED_MESSAGE_0[31..0] - (RO) DW0 of PCIe received PTM Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_0_PTM_RECEIVED_MESSAGE_0_ADDR PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_0_ADDR
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_0_PTM_RECEIVED_MESSAGE_0_MASK 0xFFFFFFFFu                // PTM_RECEIVED_MESSAGE_0[31..0]
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_0_PTM_RECEIVED_MESSAGE_0_SHFT 0u

/* =====================================================================================

  ---PTM_RECEIVED_MESSAGE_1 (0x74040000 + 0D84hu)---

    PTM_RECEIVED_MESSAGE_1[31..0] - (RO) DW1 of PCIe received PTM Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_1_PTM_RECEIVED_MESSAGE_1_ADDR PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_1_ADDR
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_1_PTM_RECEIVED_MESSAGE_1_MASK 0xFFFFFFFFu                // PTM_RECEIVED_MESSAGE_1[31..0]
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_1_PTM_RECEIVED_MESSAGE_1_SHFT 0u

/* =====================================================================================

  ---PTM_RECEIVED_MESSAGE_2 (0x74040000 + 0D88hu)---

    PTM_RECEIVED_MESSAGE_2[31..0] - (RO) DW2 of PCIe received PTM Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_2_PTM_RECEIVED_MESSAGE_2_ADDR PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_2_ADDR
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_2_PTM_RECEIVED_MESSAGE_2_MASK 0xFFFFFFFFu                // PTM_RECEIVED_MESSAGE_2[31..0]
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_2_PTM_RECEIVED_MESSAGE_2_SHFT 0u

/* =====================================================================================

  ---PTM_RECEIVED_MESSAGE_3 (0x74040000 + 0D8Chu)---

    PTM_RECEIVED_MESSAGE_3[31..0] - (RO) DW3 of PCIe received PTM Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_3_PTM_RECEIVED_MESSAGE_3_ADDR PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_3_ADDR
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_3_PTM_RECEIVED_MESSAGE_3_MASK 0xFFFFFFFFu                // PTM_RECEIVED_MESSAGE_3[31..0]
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_3_PTM_RECEIVED_MESSAGE_3_SHFT 0u

/* =====================================================================================

  ---PTM_RECEIVED_MESSAGE_4 (0x74040000 + 0D90hu)---

    PTM_RECEIVED_MESSAGE_4[31..0] - (RO) DW4 of PCIe received PTM Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_4_PTM_RECEIVED_MESSAGE_4_ADDR PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_4_ADDR
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_4_PTM_RECEIVED_MESSAGE_4_MASK 0xFFFFFFFFu                // PTM_RECEIVED_MESSAGE_4[31..0]
#define PCIE_MAC_IREG_PTM_RECEIVED_MESSAGE_4_PTM_RECEIVED_MESSAGE_4_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_LOCAL_INTR (0x74040000 + 0D94hu)---

    sw_trig_local_intr[31..0]    - (RO) Software trigger interrupt for local CPU.
                                     If any bit status f the register is 1, HW will assert interrupt to local CPU.

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_sw_trig_local_intr_ADDR PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_ADDR
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_sw_trig_local_intr_MASK 0xFFFFFFFFu                // sw_trig_local_intr[31..0]
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_sw_trig_local_intr_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_LOCAL_INTR_W1S (0x74040000 + 0D98hu)---

    sw_trig_local_intr_w1s[31..0] - (W1S) Write one to set sw_trig_local_intr in address 0x0D94

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1S_sw_trig_local_intr_w1s_ADDR PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1S_ADDR
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1S_sw_trig_local_intr_w1s_MASK 0xFFFFFFFFu                // sw_trig_local_intr_w1s[31..0]
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1S_sw_trig_local_intr_w1s_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_LOCAL_INTR_W1C (0x74040000 + 0D9Chu)---

    sw_trig_local_intr_w1c[31..0] - (W1C) Write one to clear sw_trig_local_intr in address 0x0D94

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1C_sw_trig_local_intr_w1c_ADDR PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1C_ADDR
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1C_sw_trig_local_intr_w1c_MASK 0xFFFFFFFFu                // sw_trig_local_intr_w1c[31..0]
#define PCIE_MAC_IREG_SW_TRIG_LOCAL_INTR_W1C_sw_trig_local_intr_w1c_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_0 (0x74040000 + 0DA0hu)---

    SENDING_MESSAGE_0[31..0]     - (RW) Message Sending Header DW0

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_0_SENDING_MESSAGE_0_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_0_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_0_SENDING_MESSAGE_0_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_0[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_0_SENDING_MESSAGE_0_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_1 (0x74040000 + 0DA4hu)---

    SENDING_MESSAGE_1[31..0]     - (RW) Message Sending Header DW1

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_1_SENDING_MESSAGE_1_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_1_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_1_SENDING_MESSAGE_1_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_1[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_1_SENDING_MESSAGE_1_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_2 (0x74040000 + 0DA8hu)---

    SENDING_MESSAGE_2[31..0]     - (RW) Message Sending Header DW2

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_2_SENDING_MESSAGE_2_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_2_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_2_SENDING_MESSAGE_2_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_2[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_2_SENDING_MESSAGE_2_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_3 (0x74040000 + 0DAChu)---

    SENDING_MESSAGE_3[31..0]     - (RW) Message Sending Header DW3

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_3_SENDING_MESSAGE_3_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_3_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_3_SENDING_MESSAGE_3_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_3[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_3_SENDING_MESSAGE_3_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_4 (0x74040000 + 0DB0hu)---

    SENDING_MESSAGE_4[31..0]     - (RW) Message Sending Data DW0

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_4_SENDING_MESSAGE_4_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_4_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_4_SENDING_MESSAGE_4_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_4[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_4_SENDING_MESSAGE_4_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_5 (0x74040000 + 0DB4hu)---

    SENDING_MESSAGE_5[31..0]     - (RW) Message Sending Data DW1

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_5_SENDING_MESSAGE_5_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_5_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_5_SENDING_MESSAGE_5_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_5[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_5_SENDING_MESSAGE_5_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_6 (0x74040000 + 0DB8hu)---

    SENDING_MESSAGE_6[31..0]     - (RW) Message Sending Data DW2

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_6_SENDING_MESSAGE_6_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_6_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_6_SENDING_MESSAGE_6_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_6[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_6_SENDING_MESSAGE_6_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_7 (0x74040000 + 0DBChu)---

    SENDING_MESSAGE_7[31..0]     - (RW) Message Sending Data DW3

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_7_SENDING_MESSAGE_7_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_7_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_7_SENDING_MESSAGE_7_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_7[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_7_SENDING_MESSAGE_7_SHFT 0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F0 (0x74040000 + 0DC0hu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F0_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F0_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F0_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F0_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F1 (0x74040000 + 0DC4hu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F1_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F1_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F1_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F1_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F2 (0x74040000 + 0DC8hu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F2_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F2_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F2_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F2_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F3 (0x74040000 + 0DCChu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F3_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F3_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F3_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F3_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F4 (0x74040000 + 0DD0hu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F4_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F4_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F4_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F4_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F5 (0x74040000 + 0DD4hu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F5_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F5_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F5_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F5_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F6 (0x74040000 + 0DD8hu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F6_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F6_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F6_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F6_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP2_F7 (0x74040000 + 0DDChu)---

    IMASK_MSI_GRP2[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group2
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp2".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F7_IMASK_MSI_GRP2_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP2_F7_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F7_IMASK_MSI_GRP2_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP2[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP2_F7_IMASK_MSI_GRP2_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F0 (0x74040000 + 0DE0hu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F0_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F0_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F0_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F0_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F1 (0x74040000 + 0DE4hu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F1_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F1_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F1_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F1_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F2 (0x74040000 + 0DE8hu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F2_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F2_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F2_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F2_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F3 (0x74040000 + 0DEChu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F3_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F3_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F3_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F3_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F4 (0x74040000 + 0DF0hu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F4_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F4_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F4_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F4_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F5 (0x74040000 + 0DF4hu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F5_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F5_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F5_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F5_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F6 (0x74040000 + 0DF8hu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F6_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F6_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F6_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F6_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---IMASK_MSI_GRP3_F7 (0x74040000 + 0DFChu)---

    IMASK_MSI_GRP3[31..0]        - (RW) For RC only.
                                     MSI Message Status Enable for Group3
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate IRQ by output signal "pcie_interrupt_out_msi_grp3".

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F7_IMASK_MSI_GRP3_ADDR    PCIE_MAC_IREG_IMASK_MSI_GRP3_F7_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F7_IMASK_MSI_GRP3_MASK    0xFFFFFFFFu                // IMASK_MSI_GRP3[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_GRP3_F7_IMASK_MSI_GRP3_SHFT    0u

/* =====================================================================================

  ---AXI0_ERR_ADDR_L (0x74040000 + 0E00hu)---

    ERR_ADDR_L[31..0]            - (RO) Error Address
                                     Reports address [31:0] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_L_ERR_ADDR_L_ADDR          PCIE_MAC_IREG_AXI0_ERR_ADDR_L_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_L_ERR_ADDR_L_MASK          0xFFFFFFFFu                // ERR_ADDR_L[31..0]
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_L_ERR_ADDR_L_SHFT          0u

/* =====================================================================================

  ---AXI0_ERR_ADDR_H (0x74040000 + 0E04hu)---

    ERR_ADDR_H[31..0]            - (RO) Error Address
                                     Reports address [63:32] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_H_ERR_ADDR_H_ADDR          PCIE_MAC_IREG_AXI0_ERR_ADDR_H_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_H_ERR_ADDR_H_MASK          0xFFFFFFFFu                // ERR_ADDR_H[31..0]
#define PCIE_MAC_IREG_AXI0_ERR_ADDR_H_ERR_ADDR_H_SHFT          0u

/* =====================================================================================

  ---AXI0_ERR_INFO (0x74040000 + 0E08hu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Clear the error record including ERR_ADDR_L, ERR_ADDR_H and ERR_INFO to all 0
    ERR_EVT[3..1]                - (RO) Error Event
                                     Bit [1]: Post Error: asserted to indicate that an error occurred on a write request
                                     Bit [2]: Fetch Error: asserted to indicate that an error occurred on a read request
                                     Bit [3]: Discard Error: asserted to signal a completion timeout on a read request
    ERR_AXI_ID[18..4]            - (RO) Error AXI ID
                                     AWID/ARID of the error transaction if it is an AXI read request
    RESERVED19[21..19]           - (RO) Reserved bits
    ERR_TLP_PF[26..22]           - (RO) Error TLP Phisical Function
                                     TLP Phisical Function of the error PCIE transaction
    RSVD[31..27]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI0_ERR_INFO_RSVD_ADDR                  PCIE_MAC_IREG_AXI0_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_INFO_RSVD_MASK                  0xF8000000u                // RSVD[31..27]
#define PCIE_MAC_IREG_AXI0_ERR_INFO_RSVD_SHFT                  27u
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_TLP_PF_ADDR            PCIE_MAC_IREG_AXI0_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_TLP_PF_MASK            0x07C00000u                // ERR_TLP_PF[26..22]
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_TLP_PF_SHFT            22u
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_AXI_ID_ADDR            PCIE_MAC_IREG_AXI0_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_AXI_ID_MASK            0x0007FFF0u                // ERR_AXI_ID[18..4]
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_AXI_ID_SHFT            4u
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_EVT_ADDR               PCIE_MAC_IREG_AXI0_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_EVT_MASK               0x0000000Eu                // ERR_EVT[3..1]
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_EVT_SHFT               1u
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_STS_ADDR               PCIE_MAC_IREG_AXI0_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_STS_MASK               0x00000001u                // ERR_STS[0]
#define PCIE_MAC_IREG_AXI0_ERR_INFO_ERR_STS_SHFT               0u

/* =====================================================================================

  ---AXI1_ERR_ADDR_L (0x74040000 + 0E10hu)---

    ERR_ADDR_L[31..0]            - (RO) Error Address
                                     Reports address [31:0] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_L_ERR_ADDR_L_ADDR          PCIE_MAC_IREG_AXI1_ERR_ADDR_L_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_L_ERR_ADDR_L_MASK          0xFFFFFFFFu                // ERR_ADDR_L[31..0]
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_L_ERR_ADDR_L_SHFT          0u

/* =====================================================================================

  ---AXI1_ERR_ADDR_H (0x74040000 + 0E14hu)---

    ERR_ADDR_H[31..0]            - (RO) Error Address
                                     Reports address [63:32] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_H_ERR_ADDR_H_ADDR          PCIE_MAC_IREG_AXI1_ERR_ADDR_H_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_H_ERR_ADDR_H_MASK          0xFFFFFFFFu                // ERR_ADDR_H[31..0]
#define PCIE_MAC_IREG_AXI1_ERR_ADDR_H_ERR_ADDR_H_SHFT          0u

/* =====================================================================================

  ---AXI1_ERR_INFO (0x74040000 + 0E18hu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Clear the error record including ERR_ADDR_L, ERR_ADDR_H and ERR_INFO to all 0
    ERR_EVT[3..1]                - (RO) Error Event
                                     Bit [1]: Post Error: asserted to indicate that an error occurred on a write request
                                     Bit [2]: Fetch Error: asserted to indicate that an error occurred on a read request
                                     Bit [3]: Discard Error: asserted to signal a completion timeout on a read request
    ERR_AXI_ID[18..4]            - (RO) Error AXI ID
                                     AWID/ARID of the error transaction if it is an AXI read request
    RESERVED19[21..19]           - (RO) Reserved bits
    ERR_TLP_PF[26..22]           - (RO) Error TLP Phisical Function
                                     TLP Phisical Function of the error PCIE transaction
    RSVD[31..27]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI1_ERR_INFO_RSVD_ADDR                  PCIE_MAC_IREG_AXI1_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_INFO_RSVD_MASK                  0xF8000000u                // RSVD[31..27]
#define PCIE_MAC_IREG_AXI1_ERR_INFO_RSVD_SHFT                  27u
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_TLP_PF_ADDR            PCIE_MAC_IREG_AXI1_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_TLP_PF_MASK            0x07C00000u                // ERR_TLP_PF[26..22]
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_TLP_PF_SHFT            22u
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_AXI_ID_ADDR            PCIE_MAC_IREG_AXI1_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_AXI_ID_MASK            0x0007FFF0u                // ERR_AXI_ID[18..4]
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_AXI_ID_SHFT            4u
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_EVT_ADDR               PCIE_MAC_IREG_AXI1_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_EVT_MASK               0x0000000Eu                // ERR_EVT[3..1]
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_EVT_SHFT               1u
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_STS_ADDR               PCIE_MAC_IREG_AXI1_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_STS_MASK               0x00000001u                // ERR_STS[0]
#define PCIE_MAC_IREG_AXI1_ERR_INFO_ERR_STS_SHFT               0u

/* =====================================================================================

  ---AXI2_ERR_ADDR_L (0x74040000 + 0E20hu)---

    ERR_ADDR_L[31..0]            - (RO) Error Address
                                     Reports address [31:0] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_L_ERR_ADDR_L_ADDR          PCIE_MAC_IREG_AXI2_ERR_ADDR_L_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_L_ERR_ADDR_L_MASK          0xFFFFFFFFu                // ERR_ADDR_L[31..0]
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_L_ERR_ADDR_L_SHFT          0u

/* =====================================================================================

  ---AXI2_ERR_ADDR_H (0x74040000 + 0E24hu)---

    ERR_ADDR_H[31..0]            - (RO) Error Address
                                     Reports address [63:32] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_H_ERR_ADDR_H_ADDR          PCIE_MAC_IREG_AXI2_ERR_ADDR_H_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_H_ERR_ADDR_H_MASK          0xFFFFFFFFu                // ERR_ADDR_H[31..0]
#define PCIE_MAC_IREG_AXI2_ERR_ADDR_H_ERR_ADDR_H_SHFT          0u

/* =====================================================================================

  ---AXI2_ERR_INFO (0x74040000 + 0E28hu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Clear the error record including ERR_ADDR_L, ERR_ADDR_H and ERR_INFO to all 0
    ERR_EVT[3..1]                - (RO) Error Event
                                     Bit [1]: Post Error: asserted to indicate that an error occurred on a write request
                                     Bit [2]: Fetch Error: asserted to indicate that an error occurred on a read request
                                     Bit [3]: Discard Error: asserted to signal a completion timeout on a read request
    ERR_AXI_ID[18..4]            - (RO) Error AXI ID
                                     AWID/ARID of the error transaction if it is an AXI read request
    RESERVED19[21..19]           - (RO) Reserved bits
    ERR_TLP_PF[26..22]           - (RO) Error TLP Phisical Function
                                     TLP Phisical Function of the error PCIE transaction
    RSVD[31..27]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI2_ERR_INFO_RSVD_ADDR                  PCIE_MAC_IREG_AXI2_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_INFO_RSVD_MASK                  0xF8000000u                // RSVD[31..27]
#define PCIE_MAC_IREG_AXI2_ERR_INFO_RSVD_SHFT                  27u
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_TLP_PF_ADDR            PCIE_MAC_IREG_AXI2_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_TLP_PF_MASK            0x07C00000u                // ERR_TLP_PF[26..22]
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_TLP_PF_SHFT            22u
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_AXI_ID_ADDR            PCIE_MAC_IREG_AXI2_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_AXI_ID_MASK            0x0007FFF0u                // ERR_AXI_ID[18..4]
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_AXI_ID_SHFT            4u
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_EVT_ADDR               PCIE_MAC_IREG_AXI2_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_EVT_MASK               0x0000000Eu                // ERR_EVT[3..1]
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_EVT_SHFT               1u
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_STS_ADDR               PCIE_MAC_IREG_AXI2_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_STS_MASK               0x00000001u                // ERR_STS[0]
#define PCIE_MAC_IREG_AXI2_ERR_INFO_ERR_STS_SHFT               0u

/* =====================================================================================

  ---AXI3_ERR_ADDR_L (0x74040000 + 0E30hu)---

    ERR_ADDR_L[31..0]            - (RO) Error Address
                                     Reports address [31:0] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_L_ERR_ADDR_L_ADDR          PCIE_MAC_IREG_AXI3_ERR_ADDR_L_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_L_ERR_ADDR_L_MASK          0xFFFFFFFFu                // ERR_ADDR_L[31..0]
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_L_ERR_ADDR_L_SHFT          0u

/* =====================================================================================

  ---AXI3_ERR_ADDR_H (0x74040000 + 0E34hu)---

    ERR_ADDR_H[31..0]            - (RO) Error Address
                                     Reports address [63:32] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_H_ERR_ADDR_H_ADDR          PCIE_MAC_IREG_AXI3_ERR_ADDR_H_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_H_ERR_ADDR_H_MASK          0xFFFFFFFFu                // ERR_ADDR_H[31..0]
#define PCIE_MAC_IREG_AXI3_ERR_ADDR_H_ERR_ADDR_H_SHFT          0u

/* =====================================================================================

  ---AXI3_ERR_INFO (0x74040000 + 0E38hu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Clear the error record including ERR_ADDR_L, ERR_ADDR_H and ERR_INFO to all 0
    ERR_EVT[3..1]                - (RO) Error Event
                                     Bit [1]: Post Error: asserted to indicate that an error occurred on a write request
                                     Bit [2]: Fetch Error: asserted to indicate that an error occurred on a read request
                                     Bit [3]: Discard Error: asserted to signal a completion timeout on a read request
    ERR_AXI_ID[18..4]            - (RO) Error AXI ID
                                     AWID/ARID of the error transaction if it is an AXI read request
    RESERVED19[21..19]           - (RO) Reserved bits
    ERR_TLP_PF[26..22]           - (RO) Error TLP Phisical Function
                                     TLP Phisical Function of the error PCIE transaction
    RSVD[31..27]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI3_ERR_INFO_RSVD_ADDR                  PCIE_MAC_IREG_AXI3_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_INFO_RSVD_MASK                  0xF8000000u                // RSVD[31..27]
#define PCIE_MAC_IREG_AXI3_ERR_INFO_RSVD_SHFT                  27u
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_TLP_PF_ADDR            PCIE_MAC_IREG_AXI3_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_TLP_PF_MASK            0x07C00000u                // ERR_TLP_PF[26..22]
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_TLP_PF_SHFT            22u
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_AXI_ID_ADDR            PCIE_MAC_IREG_AXI3_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_AXI_ID_MASK            0x0007FFF0u                // ERR_AXI_ID[18..4]
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_AXI_ID_SHFT            4u
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_EVT_ADDR               PCIE_MAC_IREG_AXI3_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_EVT_MASK               0x0000000Eu                // ERR_EVT[3..1]
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_EVT_SHFT               1u
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_STS_ADDR               PCIE_MAC_IREG_AXI3_ERR_INFO_ADDR
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_STS_MASK               0x00000001u                // ERR_STS[0]
#define PCIE_MAC_IREG_AXI3_ERR_INFO_ERR_STS_SHFT               0u

/* =====================================================================================

  ---PCIE_ERR_ADDR_L (0x74040000 + 0E40hu)---

    ERR_ADDR_L[31..0]            - (RO) Error Address
                                     Reports address [31:0] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_L_ERR_ADDR_L_ADDR          PCIE_MAC_IREG_PCIE_ERR_ADDR_L_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_L_ERR_ADDR_L_MASK          0xFFFFFFFFu                // ERR_ADDR_L[31..0]
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_L_ERR_ADDR_L_SHFT          0u

/* =====================================================================================

  ---PCIE_ERR_ADDR_H (0x74040000 + 0E44hu)---

    ERR_ADDR_H[31..0]            - (RO) Error Address
                                     Reports address [63:32] of the first error transaction

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_H_ERR_ADDR_H_ADDR          PCIE_MAC_IREG_PCIE_ERR_ADDR_H_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_H_ERR_ADDR_H_MASK          0xFFFFFFFFu                // ERR_ADDR_H[31..0]
#define PCIE_MAC_IREG_PCIE_ERR_ADDR_H_ERR_ADDR_H_SHFT          0u

/* =====================================================================================

  ---PCIE_ERR_INFO (0x74040000 + 0E48hu)---

    ERR_STS[0]                   - (W1C) Error Status
                                     Clear the error record including ERR_ADDR_L, ERR_ADDR_H and ERR_INFO to all 0
    ERR_EVT[3..1]                - (RO) Error Event
                                     Bit [1]: Post Error: asserted to indicate that an error occurred on a write request
                                     Bit [2]: Fetch Error: asserted to indicate that an error occurred on a read request
                                     Bit [3]: Discard Error: asserted to signal a completion timeout on a read request
    ERR_TLP_TAG[13..4]           - (RO) Error TLP Tag
                                     TLP tag of the error PCIE transaction
    ERR_TLP_TYPE[18..14]         - (RO) Error TLP Type
                                     TLP type of the error PCIE transaction
    ERR_TLP_BAR[21..19]          - (RO) Error TLP BAR
                                     TLP BAR of the error PCIE transaction
                                     0: BAR0 or BAR0/1
                                     1: BAR1
                                     2: BAR2 or BAR2/3
                                     3: BAR3
                                     4: BAR4 or BAR4/5
                                     5: BAR5
                                     6: Expansion ROM
                                     7: Rootport window
    ERR_TLP_PF[26..22]           - (RO) Error TLP Phisical Function
                                     TLP Phisical Function of the error PCIE transaction
    RSVD[31..27]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ERR_INFO_RSVD_ADDR                  PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_RSVD_MASK                  0xF8000000u                // RSVD[31..27]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_RSVD_SHFT                  27u
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_PF_ADDR            PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_PF_MASK            0x07C00000u                // ERR_TLP_PF[26..22]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_PF_SHFT            22u
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_BAR_ADDR           PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_BAR_MASK           0x00380000u                // ERR_TLP_BAR[21..19]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_BAR_SHFT           19u
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_TYPE_ADDR          PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_TYPE_MASK          0x0007C000u                // ERR_TLP_TYPE[18..14]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_TYPE_SHFT          14u
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_TAG_ADDR           PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_TAG_MASK           0x00003FF0u                // ERR_TLP_TAG[13..4]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_TLP_TAG_SHFT           4u
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_EVT_ADDR               PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_EVT_MASK               0x0000000Eu                // ERR_EVT[3..1]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_EVT_SHFT               1u
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_STS_ADDR               PCIE_MAC_IREG_PCIE_ERR_INFO_ADDR
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_STS_MASK               0x00000001u                // ERR_STS[0]
#define PCIE_MAC_IREG_PCIE_ERR_INFO_ERR_STS_SHFT               0u

/* =====================================================================================

  ---DIS_ASPM_LOWPWR_SET_0 (0x74040000 + 0E50hu)---

    dis_aspm_lowpwr_set[31..0]   - (W1S) Write one to register to set corresponding bit in 0xE60.
                                     Bit[i*4+0]: L0s
                                     Bit[i*4+1]: L1
                                     Bit[i*4+2]: L1.1
                                     Bit[i*4+3]: L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_0_dis_aspm_lowpwr_set_ADDR PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_0_ADDR
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_0_dis_aspm_lowpwr_set_MASK 0xFFFFFFFFu                // dis_aspm_lowpwr_set[31..0]
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_0_dis_aspm_lowpwr_set_SHFT 0u

/* =====================================================================================

  ---DIS_ASPM_LOWPWR_CLR_0 (0x74040000 + 0E54hu)---

    dis_aspm_lowpwr_clr[31..0]   - (W1C) Write one to register to clear corresponding bit in 0xE60.
                                     Bit[i*4+0]: L0s
                                     Bit[i*4+1]: L1
                                     Bit[i*4+2]: L1.1
                                     Bit[i*4+3]: L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_0_dis_aspm_lowpwr_clr_ADDR PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_0_ADDR
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_0_dis_aspm_lowpwr_clr_MASK 0xFFFFFFFFu                // dis_aspm_lowpwr_clr[31..0]
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_0_dis_aspm_lowpwr_clr_SHFT 0u

/* =====================================================================================

  ---DIS_ASPM_LOWPWR_SET_1 (0x74040000 + 0E58hu)---

    dis_aspm_lowpwr_set[31..0]   - (W1S) Write one to register to set corresponding bit in 0xE64.
                                     Bit[i*4+0]: L0s
                                     Bit[i*4+1]: L1
                                     Bit[i*4+2]: L1.1
                                     Bit[i*4+3]: L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_1_dis_aspm_lowpwr_set_ADDR PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_1_ADDR
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_1_dis_aspm_lowpwr_set_MASK 0xFFFFFFFFu                // dis_aspm_lowpwr_set[31..0]
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_SET_1_dis_aspm_lowpwr_set_SHFT 0u

/* =====================================================================================

  ---DIS_ASPM_LOWPWR_CLR_1 (0x74040000 + 0E5Chu)---

    dis_aspm_lowpwr_clr[31..0]   - (W1C) Write one to register to clear corresponding bit in 0xE64.
                                     Bit[i*4+0]: L0s
                                     Bit[i*4+1]: L1
                                     Bit[i*4+2]: L1.1
                                     Bit[i*4+3]: L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_1_dis_aspm_lowpwr_clr_ADDR PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_1_ADDR
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_1_dis_aspm_lowpwr_clr_MASK 0xFFFFFFFFu                // dis_aspm_lowpwr_clr[31..0]
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_CLR_1_dis_aspm_lowpwr_clr_SHFT 0u

/* =====================================================================================

  ---DIS_ASPM_LOWPWR_STS_0 (0x74040000 + 0E60hu)---

    dis_aspm_lowpwr_sts[31..0]   - (RO) Disable Low Power State
                                     0: PCIe can enter to low power state.
                                     1: PCIe can not enter to low power state.
                                     Bit[i*4+0]: L0s (MAC will exit L0s if PCIe link is in L0s)
                                     Bit[i*4+1]: L1 (MAC will exit L1 if PCIe link is in L1)
                                     Bit[i*4+2]: L1.1
                                     Bit[i*4+3]: L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_0_dis_aspm_lowpwr_sts_ADDR PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_0_ADDR
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_0_dis_aspm_lowpwr_sts_MASK 0xFFFFFFFFu                // dis_aspm_lowpwr_sts[31..0]
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_0_dis_aspm_lowpwr_sts_SHFT 0u

/* =====================================================================================

  ---DIS_ASPM_LOWPWR_STS_1 (0x74040000 + 0E64hu)---

    dis_aspm_lowpwr_sts[31..0]   - (RO) Disable Low Power State
                                     0: PCIe can enter to low power state.
                                     1: PCIe can not enter to low power state.
                                     Bit[i*4+0]: L0s (MAC will exit L0s if PCIe link is in L0s)
                                     Bit[i*4+1]: L1 (MAC will exit L1 if PCIe link is in L1)
                                     Bit[i*4+2]: L1.1
                                     Bit[i*4+3]: L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_1_dis_aspm_lowpwr_sts_ADDR PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_1_ADDR
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_1_dis_aspm_lowpwr_sts_MASK 0xFFFFFFFFu                // dis_aspm_lowpwr_sts[31..0]
#define PCIE_MAC_IREG_DIS_ASPM_LOWPWR_STS_1_dis_aspm_lowpwr_sts_SHFT 0u

/* =====================================================================================

  ---PCIE_PEX_VS1_0 (0x74040000 + 0E68hu)---

    RSVD1[7..0]                  - (RW) Reserved
    VS_REG35[15..8]              - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+35h)[7:0]
                                     
                                     The register is per physical function register
    VS_REG36[23..16]             - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+36h)[7:0]
                                     
                                     The register is per physical function register
    VS_REG37[31..24]             - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+37h)[7:0]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG37_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG37_MASK             0xFF000000u                // VS_REG37[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG37_SHFT             24u
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG36_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG36_MASK             0x00FF0000u                // VS_REG36[23..16]
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG36_SHFT             16u
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG35_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG35_MASK             0x0000FF00u                // VS_REG35[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_VS_REG35_SHFT             8u
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_PEX_VS1_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_RSVD1_MASK                0x000000FFu                // RSVD1[7..0]
#define PCIE_MAC_IREG_PCIE_PEX_VS1_0_RSVD1_SHFT                0u

/* =====================================================================================

  ---PCIE_PEX_VS2_0 (0x74040000 + 0E6Chu)---

    VS_REG38[7..0]               - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+38h)[7:0]
                                     
                                     The register is per physical function register
    VS_REG39[15..8]              - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+39h)[7:0]
                                     
                                     The register is per physical function register
    VS_REG3A[23..16]             - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+3Ah)[7:0]
                                     
                                     The register is per physical function register
    VS_REG3B[31..24]             - (RW) Backdoor access to PCIe Configuration Space Type0 Header(+3Bh)[7:0]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG3B_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG3B_MASK             0xFF000000u                // VS_REG3B[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG3B_SHFT             24u
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG3A_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG3A_MASK             0x00FF0000u                // VS_REG3A[23..16]
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG3A_SHFT             16u
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG39_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG39_MASK             0x0000FF00u                // VS_REG39[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG39_SHFT             8u
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG38_ADDR             PCIE_MAC_IREG_PCIE_PEX_VS2_0_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG38_MASK             0x000000FFu                // VS_REG38[7..0]
#define PCIE_MAC_IREG_PCIE_PEX_VS2_0_VS_REG38_SHFT             0u

/* =====================================================================================

  ---PCIE_PEXTP_MAC_SLEEP_CTRL (0x74040000 + 0E70hu)---

    pextp_mac_sleep_dis_set[7..0] - (W1S) PCIe Sleep Disable Set
                                     Set to 1 to disable output "pextp_mac_sleep" function
                                     Bit[i] : Set bit of ctrl i, i = 0..7
    pextp_mac_sleep_dis_clr[15..8] - (W1C) PCIe Sleep Disable Clear
                                     Set to 1 to enable output "pextp_mac_sleep" function
                                     Bit[i] : Clr bit of ctrl i, i = 0..7
    pextp_mac_sleep_dis_sts[23..16] - (RO) PCIe Sleep Disable Status
                                     Show the status of each "pextp_mac_sleep" control 
                                     0 : pextp_mac_sleep can change to 1 if PCIe enter low power mode. (RC: L1.2/L2, EP: L1.1/L1.2)
                                     1 : pextp_mac_sleep is always 0
                                     Bit[i] : Sts bit of ctrl i, i = 0..7
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_sts_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_sts_MASK 0x00FF0000u                // pextp_mac_sleep_dis_sts[23..16]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_sts_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_clr_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_clr_MASK 0x0000FF00u                // pextp_mac_sleep_dis_clr[15..8]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_clr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_set_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_set_MASK 0x000000FFu                // pextp_mac_sleep_dis_set[7..0]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_SLEEP_CTRL_pextp_mac_sleep_dis_set_SHFT 0u

/* =====================================================================================

  ---PCIE_PEXTP_MAC_ACTIVE_CTRL (0x74040000 + 0E74hu)---

    pextp_mac_active_frc_set[7..0] - (W1S) PCIe Active sw force  Set
                                     Set to 1 to  output "pextp_mac_active" function
                                     Bit[i] : Set bit of ctrl i, i = 0..7
    pextp_mac_active_frc_clr[15..8] - (W1C) PCIe Active sw force Clear
                                     Set to 1 to clear output "pextp_mac_active" function
                                     Bit[i] : Clr bit of ctrl i, i = 0..7
    pextp_mac_active_frc_sts[23..16] - (RO) PCIe Active sw force Status
                                     Show the status of each "pextp_mac_active" control 
                                     0 : pextp_mac_active can change to 0 if PCIe traffic is idle.. 
                                     1 : pextp_mac_sleep is always 1
                                     Bit[i] : Sts bit of ctrl i, i = 0..7
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_sts_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_sts_MASK 0x00FF0000u                // pextp_mac_active_frc_sts[23..16]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_sts_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_clr_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_clr_MASK 0x0000FF00u                // pextp_mac_active_frc_clr[15..8]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_clr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_set_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_set_MASK 0x000000FFu                // pextp_mac_active_frc_set[7..0]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_ACTIVE_CTRL_pextp_mac_active_frc_set_SHFT 0u

/* =====================================================================================

  ---PCIE_PEXTP_MAC_DDREN_CTRL (0x74040000 + 0E78hu)---

    pextp_mac_ddren_frc_set[7..0] - (W1S) PCIe Ddren sw force  Set
                                     Set to 1 to  output "pextp_mac_ddren" function
                                     Bit[i] : Set bit of ctrl i, i = 0..7
    pextp_mac_ddren_frc_clr[15..8] - (W1C) PCIe Ddren sw force Clear
                                     Set to 1 to clear output "pextp_mac_ddren" function
                                     Bit[i] : Clr bit of ctrl i, i = 0..7
    pextp_mac_ddren_frc_sts[23..16] - (RO) PCIe Ddren sw force Status
                                     Show the status of each "pextp_mac_ddren" control 
                                     0 : pextp_mac_ddren equal pextp_mac_active  if sw_ddren_mask_mac_active invalid. 
                                     1 : pextp_mac_ddren is always 1
                                     Bit[i] : Sts bit of ctrl i, i = 0..7
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_sts_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_sts_MASK 0x00FF0000u                // pextp_mac_ddren_frc_sts[23..16]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_sts_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_clr_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_clr_MASK 0x0000FF00u                // pextp_mac_ddren_frc_clr[15..8]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_clr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_set_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_set_MASK 0x000000FFu                // pextp_mac_ddren_frc_set[7..0]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_DDREN_CTRL_pextp_mac_ddren_frc_set_SHFT 0u

/* =====================================================================================

  ---PCIE_PEXTP_MAC_WAKEN_CTRL (0x74040000 + 0E7Chu)---

    pextp_mac_waken_set[7..0]    - (W1S) PCIe waken sw force  Set
                                     Set to 1 to  output "pcie_wake_out" function
                                     Bit[i] : Set bit of ctrl i, i = 0..7
    pextp_mac_waken_clr[15..8]   - (W1C) PCIe waken sw force Clear
                                     Set to 1 to clear output "pextp_wake_out" function
                                     Bit[i] : Clr bit of ctrl i, i = 0..7
    pextp_mac_waken_sts[23..16]  - (RO) PCIe waken sw force Status
                                     Show the status of each "pcie_wake_out" control 
                                     0 : pextp_mac_waken can change to 0 if PCIe traffic is idle.. 
                                     1 : pextp_wake_out is always 0
                                     Bit[i] : Sts bit of ctrl i, i = 0..7
    Reserved[31..24]             - (RO)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_Reserved_ADDR  PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_Reserved_MASK  0xFF000000u                // Reserved[31..24]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_Reserved_SHFT  24u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_sts_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_sts_MASK 0x00FF0000u                // pextp_mac_waken_sts[23..16]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_sts_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_clr_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_clr_MASK 0x0000FF00u                // pextp_mac_waken_clr[15..8]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_clr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_set_ADDR PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_set_MASK 0x000000FFu                // pextp_mac_waken_set[7..0]
#define PCIE_MAC_IREG_PCIE_PEXTP_MAC_WAKEN_CTRL_pextp_mac_waken_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_0_0 (0x74040000 + 0E80hu)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_0_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_0_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_0_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_1_0 (0x74040000 + 0E84hu)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i+32 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_0_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_0_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_0_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_2_0 (0x74040000 + 0E88hu)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet. Bit number i corresponds to Entry number i+64 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_0_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_0_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_0_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_3_0 (0x74040000 + 0E8Chu)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i+96 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_0_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_0_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_0_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_0_0 (0x74040000 + 0F00hu)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_0_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_0_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_0_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_1_0 (0x74040000 + 0F04hu)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+32 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_0_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_0_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_0_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_2_0 (0x74040000 + 0F08hu)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+64 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_0_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_0_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_0_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_3_0 (0x74040000 + 0F0Chu)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+96 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_0_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_0_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_0_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_0_0 (0x74040000 + 0F80hu)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_0_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_0_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_0_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_1_0 (0x74040000 + 0F84hu)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+32 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_0_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_0_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_0_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_2_0 (0x74040000 + 0F88hu)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+64 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_0_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_0_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_0_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_3_0 (0x74040000 + 0F8Chu)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+96 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_0_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_0_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_0_msix_pba_SHFT          0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_0_0 (0x74040000 + 3000hu)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_0_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_0_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_0_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_1_0 (0x74040000 + 3004hu)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_0_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_0_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_0_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_2_0 (0x74040000 + 3008hu)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_0_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_0_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_0_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_3_0 (0x74040000 + 300Chu)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_0_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_0_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_0_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_0_0 (0x74040000 + 3080hu)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_0_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_0_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_0_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_1_0 (0x74040000 + 3084hu)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_0_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_0_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_0_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_2_0 (0x74040000 + 3088hu)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_0_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_0_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_0_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_3_0 (0x74040000 + 308Chu)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_0_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_0_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_0_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_0_0 (0x74040000 + 3100hu)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_0_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_0_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_0_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_1_0 (0x74040000 + 3104hu)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_0_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_0_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_0_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_2_0 (0x74040000 + 3108hu)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_0_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_0_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_0_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_3_0 (0x74040000 + 310Chu)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_0_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_0_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_0_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_0_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---FLR_STATUS_PF (0x74040000 + 31C0hu)---

    flr_status_pf[7..0]          - (W1C) Function-Level Reset Status for Physical function. (For EP only)
                                     When EP received FLR requested from RC, those registers will be set to indicate which physical function need to be reset.
                                     Software need to write one to clear the status once software complete the FLR procedure.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_FLR_STATUS_PF_flr_status_pf_ADDR         PCIE_MAC_IREG_FLR_STATUS_PF_ADDR
#define PCIE_MAC_IREG_FLR_STATUS_PF_flr_status_pf_MASK         0x000000FFu                // flr_status_pf[7..0]
#define PCIE_MAC_IREG_FLR_STATUS_PF_flr_status_pf_SHFT         0u

/* =====================================================================================

  ---PCIE_IREG_EDBG_0 (0x74040000 + 31C4hu)---

    pcie_ireg_edbg[31..0]        - (RO) External debug signals to IREG

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_0_pcie_ireg_edbg_ADDR     PCIE_MAC_IREG_PCIE_IREG_EDBG_0_ADDR
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_0_pcie_ireg_edbg_MASK     0xFFFFFFFFu                // pcie_ireg_edbg[31..0]
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_0_pcie_ireg_edbg_SHFT     0u

/* =====================================================================================

  ---PCIE_IREG_EDBG_1 (0x74040000 + 31C8hu)---

    pcie_ireg_edbg[31..0]        - (RO) External debug signals to IREG

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_1_pcie_ireg_edbg_ADDR     PCIE_MAC_IREG_PCIE_IREG_EDBG_1_ADDR
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_1_pcie_ireg_edbg_MASK     0xFFFFFFFFu                // pcie_ireg_edbg[31..0]
#define PCIE_MAC_IREG_PCIE_IREG_EDBG_1_pcie_ireg_edbg_SHFT     0u

/* =====================================================================================

  ---MASTER_BUS_EN_TGL_STATUS_PF (0x74040000 + 31CChu)---

    master_bus_en_tgl_status_pf[7..0] - (W1C) Mater Bus Enable Toggle Status for Physical function. (For EP only)
                                     When EP received cfg write for change master bus enable bit from RC, those registers will be set to indicate which physical function's master bus enable bit is change.
                                     Software need to write one to clear the status once software complete the interrupt procedure.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_MASTER_BUS_EN_TGL_STATUS_PF_master_bus_en_tgl_status_pf_ADDR PCIE_MAC_IREG_MASTER_BUS_EN_TGL_STATUS_PF_ADDR
#define PCIE_MAC_IREG_MASTER_BUS_EN_TGL_STATUS_PF_master_bus_en_tgl_status_pf_MASK 0x000000FFu                // master_bus_en_tgl_status_pf[7..0]
#define PCIE_MAC_IREG_MASTER_BUS_EN_TGL_STATUS_PF_master_bus_en_tgl_status_pf_SHFT 0u

/* =====================================================================================

  ---PM_CHG_STATUS_PF (0x74040000 + 31D0hu)---

    pm_chg_status_pf[7..0]       - (W1C) PM State Chagne Status for Physical function.
                                     When EP'S PM state has changed, those registers will be set to indicate this event occurs.
                                     Each bit belongs to each function. Bit0~7 belongs to function0~7
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_pm_chg_status_pf_ADDR   PCIE_MAC_IREG_PM_CHG_STATUS_PF_ADDR
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_pm_chg_status_pf_MASK   0x000000FFu                // pm_chg_status_pf[7..0]
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_pm_chg_status_pf_SHFT   0u

/* =====================================================================================

  ---PM_CHG_STATUS_PF_EN (0x74040000 + 31D4hu)---

    pm_chg_status_pf_en[7..0]    - (RW) PM State Chagne IRQ enable for Physical function.
                                     When corresponding bit set to 1'b1, function's PM state change status IRQ will sent out.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_EN_pm_chg_status_pf_en_ADDR PCIE_MAC_IREG_PM_CHG_STATUS_PF_EN_ADDR
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_EN_pm_chg_status_pf_en_MASK 0x000000FFu                // pm_chg_status_pf_en[7..0]
#define PCIE_MAC_IREG_PM_CHG_STATUS_PF_EN_pm_chg_status_pf_en_SHFT 0u

/* =====================================================================================

  ---ISTATUS2_MSI_F0 (0x74040000 + 31E0hu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F0_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F0_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F0_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F0_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F1 (0x74040000 + 31E4hu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F1_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F1_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F1_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F1_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F2 (0x74040000 + 31E8hu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F2_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F2_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F2_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F2_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F3 (0x74040000 + 31EChu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F3_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F3_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F3_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F3_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F4 (0x74040000 + 31F0hu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F4_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F4_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F4_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F4_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F5 (0x74040000 + 31F4hu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F5_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F5_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F5_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F5_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F6 (0x74040000 + 31F8hu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F6_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F6_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F6_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F6_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---ISTATUS2_MSI_F7 (0x74040000 + 31FChu)---

    ISTATUS2_MSI[31..0]          - (W1C) For RC only.
                                     MSI Message Status2.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS2_MSI_F7_ISTATUS2_MSI_ADDR        PCIE_MAC_IREG_ISTATUS2_MSI_F7_ADDR
#define PCIE_MAC_IREG_ISTATUS2_MSI_F7_ISTATUS2_MSI_MASK        0xFFFFFFFFu                // ISTATUS2_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS2_MSI_F7_ISTATUS2_MSI_SHFT        0u

/* =====================================================================================

  ---PCIE_VBAR0_ADDR_0 (0x74040000 + 03200hu)---

    vbar0_en[2..0]               - (RW) Virtual BAR0 Enable
                                     [0]: The read and write requests targeting to {vbar0_addr[31:12]} will be decoded to BAR0
                                     [1]: The read and write requests targeting to {vbar0_addr[31:12]} will be decoded to BAR2
                                     [2]: The read and write requests targeting to {vbar0_addr[31:12]} will be decoded to BAR4
    vbar0_addr_en[3]             - (RW) Virtual BAR0 Base Address Hardware Strap Disable
                                     0: Virtual BAR0 Base Address is configured by efuse
                                     1: Virtual BAR0 Base Address is configured by internal register
    vbar0_addr[31..4]            - (RW) Virtual BAR0 Base Address
                                     The read and write requests targeting to Virtual BAR Base Address will be mapped to the virtual BAR0

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_addr_ADDR        PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_addr_MASK        0xFFFFFFF0u                // vbar0_addr[31..4]
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_addr_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_addr_en_ADDR     PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_addr_en_MASK     0x00000008u                // vbar0_addr_en[3]
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_addr_en_SHFT     3u
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_en_ADDR          PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_en_MASK          0x00000007u                // vbar0_en[2..0]
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_0_vbar0_en_SHFT          0u

/* =====================================================================================

  ---PCIE_VBAR0_ADDR_1 (0x74040000 + 03204hu)---

    vbar0_io[0]                  - (RW) Virtual BAR0 IO
                                     1'b0: 32 bit address MEM TLP
                                     1'b1: IO TLP
    RESERVED1[3..1]              - (RO) Reserved bits
    vbar0_addr_mask[31..4]       - (RW) Virtual BAR0 Base Address Mask
                                     Address Mask to decide the BAR0 size.
                                     Ex. 4KB size: FFFFF00
                                     Ex. 2MB size: FFE0000

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_vbar0_addr_mask_ADDR   PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_vbar0_addr_mask_MASK   0xFFFFFFF0u                // vbar0_addr_mask[31..4]
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_vbar0_addr_mask_SHFT   4u
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_vbar0_io_ADDR          PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_vbar0_io_MASK          0x00000001u                // vbar0_io[0]
#define PCIE_MAC_IREG_PCIE_VBAR0_ADDR_1_vbar0_io_SHFT          0u

/* =====================================================================================

  ---PCIE_VBAR1_ADDR_0 (0x74040000 + 03208hu)---

    vbar1_en[2..0]               - (RW) Virtual BAR1 Enable
                                     [0]: The read and write requests targeting to {vbar0_addr[31:12]} will be decoded to BAR1
                                     [1]: The read and write requests targeting to {vbar0_addr[31:12]} will be decoded to BAR3
                                     [2]: The read and write requests targeting to {vbar0_addr[31:12]} will be decoded to BAR5
    vbar1_addr_en[3]             - (RW) Virtual BAR1 Base Address Hardware Strap Disable
                                     0: Virtual BAR1 Base Address is configured by efuse
                                     1: Virtual BAR1 Base Address is configured by internal register
    vbar1_addr[31..4]            - (RW) Virtual BAR1 Base Address
                                     The read and write requests targeting to Virtual BAR Base Address will be mapped to the virtual BAR1

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_addr_ADDR        PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_addr_MASK        0xFFFFFFF0u                // vbar1_addr[31..4]
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_addr_SHFT        4u
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_addr_en_ADDR     PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_addr_en_MASK     0x00000008u                // vbar1_addr_en[3]
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_addr_en_SHFT     3u
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_en_ADDR          PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_en_MASK          0x00000007u                // vbar1_en[2..0]
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_0_vbar1_en_SHFT          0u

/* =====================================================================================

  ---PCIE_VBAR1_ADDR_1 (0x74040000 + 0320Chu)---

    vbar1_io[0]                  - (RW) Virtual BAR1 IO
                                     1'b0: 32 bit address MEM TLP
                                     1'b1: IO TLP
    RESERVED1[3..1]              - (RO) Reserved bits
    vbar1_addr_mask[31..4]       - (RW) Virtual BAR1 Base Address Mask
                                     Address Mask to decide the BAR1 size.
                                     Ex. 4KB size: FFFFF00
                                     Ex. 2MB size: FFE0000

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_vbar1_addr_mask_ADDR   PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_vbar1_addr_mask_MASK   0xFFFFFFF0u                // vbar1_addr_mask[31..4]
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_vbar1_addr_mask_SHFT   4u
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_vbar1_io_ADDR          PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_ADDR
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_vbar1_io_MASK          0x00000001u                // vbar1_io[0]
#define PCIE_MAC_IREG_PCIE_VBAR1_ADDR_1_vbar1_io_SHFT          0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_0 (0x74040000 + 3210hu)---

    axi_slv_mem_rd_max_latency[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave read max、min and cur record
                                     Max axi slave memory read latency cycle
    axi_slv_mem_rd_min_latency[31..16] - (W1C) Mine axi slave memory read latency cycle

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_axi_slv_mem_rd_min_latency_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_axi_slv_mem_rd_min_latency_MASK 0xFFFF0000u                // axi_slv_mem_rd_min_latency[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_axi_slv_mem_rd_min_latency_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_axi_slv_mem_rd_max_latency_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_axi_slv_mem_rd_max_latency_MASK 0x0000FFFFu                // axi_slv_mem_rd_max_latency[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_axi_slv_mem_rd_max_latency_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_1 (0x74040000 + 3214hu)---

    axi_slv_mem_rd_cur_latency[15..0] - (W1C) Current axi slave memory read latency cycle
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_axi_slv_mem_rd_cur_latency_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_axi_slv_mem_rd_cur_latency_MASK 0x0000FFFFu                // axi_slv_mem_rd_cur_latency[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_axi_slv_mem_rd_cur_latency_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_0 (0x74040000 + 3218hu)---

    axi_slv_mem_wr_max_latency[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave write max、min and cur record
                                     Max axi slave memory write latency cycle
    axi_slv_mem_wr_min_latency[31..16] - (W1C) Mine axi slave memory write latency cycle

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_axi_slv_mem_wr_min_latency_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_axi_slv_mem_wr_min_latency_MASK 0xFFFF0000u                // axi_slv_mem_wr_min_latency[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_axi_slv_mem_wr_min_latency_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_axi_slv_mem_wr_max_latency_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_axi_slv_mem_wr_max_latency_MASK 0x0000FFFFu                // axi_slv_mem_wr_max_latency[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_axi_slv_mem_wr_max_latency_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_1 (0x74040000 + 321Chu)---

    axi_slv_mem_wr_cur_latency[15..0] - (W1C) Current  axi slave memory write latency cycle
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_axi_slv_mem_wr_cur_latency_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_axi_slv_mem_wr_cur_latency_MASK 0x0000FFFFu                // axi_slv_mem_wr_cur_latency[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_axi_slv_mem_wr_cur_latency_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_0 (0x74040000 + 3220hu)---

    axi_mst_mem_rd_max_latency[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi Master read max、min and cur record
                                     Max axi master memory read latency cycle
    axi_mst_mem_rd_min_latency[31..16] - (W1C) Mine axi master memory read latency cycle

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_axi_mst_mem_rd_min_latency_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_axi_mst_mem_rd_min_latency_MASK 0xFFFF0000u                // axi_mst_mem_rd_min_latency[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_axi_mst_mem_rd_min_latency_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_axi_mst_mem_rd_max_latency_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_axi_mst_mem_rd_max_latency_MASK 0x0000FFFFu                // axi_mst_mem_rd_max_latency[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_axi_mst_mem_rd_max_latency_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_1 (0x74040000 + 3224hu)---

    axi_mst_mem_rd_cur_latency[15..0] - (W1C) Current axi master memory read latency cycle
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_axi_mst_mem_rd_cur_latency_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_axi_mst_mem_rd_cur_latency_MASK 0x0000FFFFu                // axi_mst_mem_rd_cur_latency[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_axi_mst_mem_rd_cur_latency_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_0 (0x74040000 + 3228hu)---

    axi_mst_mem_wr_max_latency[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi Master read max、min and cur record
                                     Max axi master memory write latency cycle
    axi_mst_mem_wr_min_latency[31..16] - (W1C) Mine axi master memory write latency cycle

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_axi_mst_mem_wr_min_latency_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_axi_mst_mem_wr_min_latency_MASK 0xFFFF0000u                // axi_mst_mem_wr_min_latency[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_axi_mst_mem_wr_min_latency_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_axi_mst_mem_wr_max_latency_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_axi_mst_mem_wr_max_latency_MASK 0x0000FFFFu                // axi_mst_mem_wr_max_latency[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_axi_mst_mem_wr_max_latency_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_1 (0x74040000 + 322Chu)---

    axi_mst_mem_wr_cur_latency[15..0] - (W1C) Currente axi master memory write latency cycle
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_axi_mst_mem_wr_cur_latency_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_axi_mst_mem_wr_cur_latency_MASK 0x0000FFFFu                // axi_mst_mem_wr_cur_latency[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_axi_mst_mem_wr_cur_latency_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0 (0x74040000 + 3230hu)---

    axi_slv_mem_rd_max_latency_by_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave read max、min and cur record by function
                                     Max axi slave memory read latency cycle  by function
    axi_slv_mem_rd_min_latency_by_func[31..16] - (W1C) Mine axi slave memory read latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_axi_slv_mem_rd_min_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_axi_slv_mem_rd_min_latency_by_func_MASK 0xFFFF0000u                // axi_slv_mem_rd_min_latency_by_func[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_axi_slv_mem_rd_min_latency_by_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_axi_slv_mem_rd_max_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_axi_slv_mem_rd_max_latency_by_func_MASK 0x0000FFFFu                // axi_slv_mem_rd_max_latency_by_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_0_axi_slv_mem_rd_max_latency_by_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0 (0x74040000 + 3234hu)---

    axi_slv_mem_rd_cur_latency_by_func[15..0] - (W1C) Current axi slave memory read latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_axi_slv_mem_rd_cur_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_axi_slv_mem_rd_cur_latency_by_func_MASK 0x0000FFFFu                // axi_slv_mem_rd_cur_latency_by_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_0_axi_slv_mem_rd_cur_latency_by_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0 (0x74040000 + 3238hu)---

    axi_slv_mem_wr_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave write max、min and cur record by function
                                     Max axi slave memory write latency cycle by function
    axi_slv_mem_wr_min_latency_func[31..16] - (W1C) Mine axi slave memory write latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_axi_slv_mem_wr_min_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_axi_slv_mem_wr_min_latency_func_MASK 0xFFFF0000u                // axi_slv_mem_wr_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_axi_slv_mem_wr_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_axi_slv_mem_wr_max_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_axi_slv_mem_wr_max_latency_func_MASK 0x0000FFFFu                // axi_slv_mem_wr_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_0_axi_slv_mem_wr_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0 (0x74040000 + 323Chu)---

    axi_slv_mem_wr_cur_latency_func[15..0] - (W1C) Current axi slave memory write latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_axi_slv_mem_wr_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_axi_slv_mem_wr_cur_latency_func_MASK 0x0000FFFFu                // axi_slv_mem_wr_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_0_axi_slv_mem_wr_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_0_By_Func_0 (0x74040000 + 3240hu)---

    axi_mst_mem_rd_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi master read max、min and cur record by function
                                     Max axi master memory read latency cycle by function
    axi_mst_mem_rd_min_latency_func[31..16] - (W1C) Mine axi master memory read latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_axi_mst_mem_rd_min_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_axi_mst_mem_rd_min_latency_func_MASK 0xFFFF0000u                // axi_mst_mem_rd_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_axi_mst_mem_rd_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_axi_mst_mem_rd_max_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_axi_mst_mem_rd_max_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_rd_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_0_axi_mst_mem_rd_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0 (0x74040000 + 3244hu)---

    axi_mst_mem_rd_cur_latency_func[15..0] - (W1C) Current axi master memory read latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_axi_mst_mem_rd_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_axi_mst_mem_rd_cur_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_rd_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_0_axi_mst_mem_rd_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_0_By_Func_0 (0x74040000 + 3248hu)---

    axi_mst_mem_wr_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi master write max、min and cur record by function
                                     Max axi master memory write latency cycle by function
    axi_mst_mem_wr_min_latency_func[31..16] - (W1C) Mine axi master memory write latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_axi_mst_mem_wr_min_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_axi_mst_mem_wr_min_latency_func_MASK 0xFFFF0000u                // axi_mst_mem_wr_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_axi_mst_mem_wr_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_axi_mst_mem_wr_max_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_axi_mst_mem_wr_max_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_wr_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_0_axi_mst_mem_wr_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_1_By_Func_0 (0x74040000 + 324Chu)---

    axi_mst_mem_wr_cur_latency_func[15..0] - (W1C) Current axi master memory write latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_axi_mst_mem_wr_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_axi_mst_mem_wr_cur_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_wr_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_0_axi_mst_mem_wr_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---PCIE_L10_LATENCY_WATER_MARK (0x74040000 + 3380hu)---

    pcie_l10_latency_water_mark[31..0] - (RW) PCIe L10 latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_L10_LATENCY_WATER_MARK_pcie_l10_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_L10_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_L10_LATENCY_WATER_MARK_pcie_l10_latency_water_mark_MASK 0xFFFFFFFFu                // pcie_l10_latency_water_mark[31..0]
#define PCIE_MAC_IREG_PCIE_L10_LATENCY_WATER_MARK_pcie_l10_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_L11_LATENCY_WATER_MARK (0x74040000 + 3384hu)---

    pcie_l11_latency_water_mark[31..0] - (RW) PCIe L11 latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_L11_LATENCY_WATER_MARK_pcie_l11_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_L11_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_L11_LATENCY_WATER_MARK_pcie_l11_latency_water_mark_MASK 0xFFFFFFFFu                // pcie_l11_latency_water_mark[31..0]
#define PCIE_MAC_IREG_PCIE_L11_LATENCY_WATER_MARK_pcie_l11_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_L12_LATENCY_WATER_MARK (0x74040000 + 3388hu)---

    pcie_l12_latency_water_mark[31..0] - (RW) PCIe L12 latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_L12_LATENCY_WATER_MARK_pcie_l12_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_L12_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_L12_LATENCY_WATER_MARK_pcie_l12_latency_water_mark_MASK 0xFFFFFFFFu                // pcie_l12_latency_water_mark[31..0]
#define PCIE_MAC_IREG_PCIE_L12_LATENCY_WATER_MARK_pcie_l12_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK (0x74040000 + 338Chu)---

    pcie_mrd_req_by_device_latency_water_mark[15..0] - (RW) PCIe memory read request by device latency water mark setting
    pcie_mwr_req_by_device_latency_water_mark[31..16] - (RW) PCIe memory write request by device latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_pcie_mwr_req_by_device_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_pcie_mwr_req_by_device_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_req_by_device_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_pcie_mwr_req_by_device_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_pcie_mrd_req_by_device_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_pcie_mrd_req_by_device_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_req_by_device_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_DEVICE_LATENCY_WATER_MARK_pcie_mrd_req_by_device_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK (0x74040000 + 3390hu)---

    pcie_mrd_cpl_by_device_latency_water_mark[15..0] - (RW) PCIe memory read complete(like EP mode MMIO) by device latency water mark setting
    pcie_mwr_cpl_by_device_latency_water_mark[31..16] - (RW) PCIe memory write complete(like EP mode MMIO) by device latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_pcie_mwr_cpl_by_device_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_pcie_mwr_cpl_by_device_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_cpl_by_device_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_pcie_mwr_cpl_by_device_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_pcie_mrd_cpl_by_device_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_pcie_mrd_cpl_by_device_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_cpl_by_device_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_DEVICE_LATENCY_WATER_MARK_pcie_mrd_cpl_by_device_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0 (0x74040000 + 3394hu)---

    pcie_mrd_req_by_func_latency_water_mark[15..0] - (RW) PCIe memory read request by func latency water mark setting
    pcie_mwr_req_by_func_latency_water_mark[31..16] - (RW) PCIe memory write request by func latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mwr_req_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mwr_req_by_func_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_req_by_func_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mwr_req_by_func_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mrd_req_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mrd_req_by_func_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_req_by_func_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mrd_req_by_func_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0 (0x74040000 + 3398hu)---

    pcie_mrd_cpl_by_func_latency_water_mark[15..0] - (RW) PCIe memory read complete(like EP mode MMIO) by func latency water mark setting
    pcie_mwr_cpl_by_func_latency_water_mark[31..16] - (RW) PCIe memory write complete(like EP mode MMIO) by func latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mwr_cpl_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mwr_cpl_by_func_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_cpl_by_func_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mwr_cpl_by_func_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mrd_cpl_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mrd_cpl_by_func_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_cpl_by_func_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_0_pcie_mrd_cpl_by_func_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN (0x74040000 + 33AChu)---

    pcie_l10_latency_exceed_water_mark_irq_en[0] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_l11_latency_exceed_water_mark_irq_en[1] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_l12_latency_exceed_water_mark_irq_en[2] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_req_by_device_latency_exceed_water_mark_irq_en[3] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_req_by_device_latency_exceed_water_mark_irq_en[4] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_en[5] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_en[6] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_en[7] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_en[8] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_en[9] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_en[10] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_en[11] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_en[12] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_en[13] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_en[14] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_en[15] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_en[16] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_en[17] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_en[18] - (RW) enable 0x33B0 send interrupt to 0x184[26].Set 1 to enable the associated interrupt source and set 0 to mask the interrupt source
    RSVD1[31..19]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_RSVD1_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_RSVD1_MASK 0xFFF80000u                // RSVD1[31..19]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_RSVD1_SHFT 19u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_en_MASK 0x00040000u                // pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_en[18]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_en_SHFT 18u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_en_MASK 0x00020000u                // pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_en[17]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_en_SHFT 17u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_en_MASK 0x00010000u                // pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_en[16]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_en_SHFT 16u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_en_MASK 0x00008000u                // pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_en[15]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_en_SHFT 15u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_en_MASK 0x00004000u                // pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_en[14]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_en_SHFT 14u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_en_MASK 0x00002000u                // pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_en[13]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_en_SHFT 13u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_en_MASK 0x00001000u                // pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_en[12]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_en_SHFT 12u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_en_MASK 0x00000800u                // pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_en[11]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_en_SHFT 11u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_en_MASK 0x00000400u                // pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_en[10]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_en_SHFT 10u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_en_MASK 0x00000200u                // pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_en[9]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_en_SHFT 9u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_en_MASK 0x00000100u                // pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_en[8]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_en_SHFT 8u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_en_MASK 0x00000080u                // pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_en[7]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_en_SHFT 7u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_en_MASK 0x00000040u                // pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_en[6]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_en_SHFT 6u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_en_MASK 0x00000020u                // pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_en[5]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_en_SHFT 5u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_device_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_device_latency_exceed_water_mark_irq_en_MASK 0x00000010u                // pcie_mwr_req_by_device_latency_exceed_water_mark_irq_en[4]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mwr_req_by_device_latency_exceed_water_mark_irq_en_SHFT 4u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_device_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_device_latency_exceed_water_mark_irq_en_MASK 0x00000008u                // pcie_mrd_req_by_device_latency_exceed_water_mark_irq_en[3]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_mrd_req_by_device_latency_exceed_water_mark_irq_en_SHFT 3u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l12_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l12_latency_exceed_water_mark_irq_en_MASK 0x00000004u                // pcie_l12_latency_exceed_water_mark_irq_en[2]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l12_latency_exceed_water_mark_irq_en_SHFT 2u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l11_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l11_latency_exceed_water_mark_irq_en_MASK 0x00000002u                // pcie_l11_latency_exceed_water_mark_irq_en[1]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l11_latency_exceed_water_mark_irq_en_SHFT 1u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l10_latency_exceed_water_mark_irq_en_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l10_latency_exceed_water_mark_irq_en_MASK 0x00000001u                // pcie_l10_latency_exceed_water_mark_irq_en[0]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_EN_pcie_l10_latency_exceed_water_mark_irq_en_SHFT 0u

/* =====================================================================================

  ---PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS (0x74040000 + 33B0hu)---

    pcie_l10_latency_exceed_water_mark_irq_sts[0] - (W1C) corresponding latency exceed water mark status
    pcie_l11_latency_exceed_water_mark_irq_sts[1] - (W1C) corresponding latency exceed water mark status
    pcie_l12_latency_exceed_water_mark_irq_sts[2] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_req_by_device_latency_exceed_water_mark_irq_sts[3] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_req_by_device_latency_exceed_water_mark_irq_sts[4] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_sts[5] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_sts[6] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_sts[7] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_sts[8] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_sts[9] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_sts[10] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_sts[11] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_sts[12] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_sts[13] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_sts[14] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_sts[15] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_sts[16] - (W1C) corresponding latency exceed water mark status
    pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_sts[17] - (W1C) corresponding latency exceed water mark status
    pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_sts[18] - (W1C) corresponding latency exceed water mark status
    RSVD1[31..19]                - (RO) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_RSVD1_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_RSVD1_MASK 0xFFF80000u                // RSVD1[31..19]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_RSVD1_SHFT 19u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_sts_MASK 0x00040000u                // pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_sts[18]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func2_latency_exceed_water_mark_irq_sts_SHFT 18u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_sts_MASK 0x00020000u                // pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_sts[17]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func2_latency_exceed_water_mark_irq_sts_SHFT 17u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_sts_MASK 0x00010000u                // pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_sts[16]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func2_latency_exceed_water_mark_irq_sts_SHFT 16u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_sts_MASK 0x00008000u                // pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_sts[15]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func2_latency_exceed_water_mark_irq_sts_SHFT 15u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_sts_MASK 0x00004000u                // pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_sts[14]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func1_latency_exceed_water_mark_irq_sts_SHFT 14u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_sts_MASK 0x00002000u                // pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_sts[13]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func1_latency_exceed_water_mark_irq_sts_SHFT 13u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_sts_MASK 0x00001000u                // pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_sts[12]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func1_latency_exceed_water_mark_irq_sts_SHFT 12u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_sts_MASK 0x00000800u                // pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_sts[11]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func1_latency_exceed_water_mark_irq_sts_SHFT 11u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_sts_MASK 0x00000400u                // pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_sts[10]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_func0_latency_exceed_water_mark_irq_sts_SHFT 10u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_sts_MASK 0x00000200u                // pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_sts[9]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_func0_latency_exceed_water_mark_irq_sts_SHFT 9u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_sts_MASK 0x00000100u                // pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_sts[8]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_func0_latency_exceed_water_mark_irq_sts_SHFT 8u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_sts_MASK 0x00000080u                // pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_sts[7]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_func0_latency_exceed_water_mark_irq_sts_SHFT 7u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_sts_MASK 0x00000040u                // pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_sts[6]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_cpl_by_device_latency_exceed_water_mark_irq_sts_SHFT 6u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_sts_MASK 0x00000020u                // pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_sts[5]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_cpl_by_device_latency_exceed_water_mark_irq_sts_SHFT 5u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_device_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_device_latency_exceed_water_mark_irq_sts_MASK 0x00000010u                // pcie_mwr_req_by_device_latency_exceed_water_mark_irq_sts[4]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mwr_req_by_device_latency_exceed_water_mark_irq_sts_SHFT 4u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_device_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_device_latency_exceed_water_mark_irq_sts_MASK 0x00000008u                // pcie_mrd_req_by_device_latency_exceed_water_mark_irq_sts[3]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_mrd_req_by_device_latency_exceed_water_mark_irq_sts_SHFT 3u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l12_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l12_latency_exceed_water_mark_irq_sts_MASK 0x00000004u                // pcie_l12_latency_exceed_water_mark_irq_sts[2]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l12_latency_exceed_water_mark_irq_sts_SHFT 2u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l11_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l11_latency_exceed_water_mark_irq_sts_MASK 0x00000002u                // pcie_l11_latency_exceed_water_mark_irq_sts[1]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l11_latency_exceed_water_mark_irq_sts_SHFT 1u
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l10_latency_exceed_water_mark_irq_sts_ADDR PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_ADDR
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l10_latency_exceed_water_mark_irq_sts_MASK 0x00000001u                // pcie_l10_latency_exceed_water_mark_irq_sts[0]
#define PCIE_MAC_IREG_PCIE_LATENCY_EXCEED_WATER_MARK_IRQ_STS_pcie_l10_latency_exceed_water_mark_irq_sts_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0_STATE_CNT (0x74040000 + 3400hu)---

    pwr_l0_state_cnt[31..0]      - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L0 state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_pwr_l0_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_pwr_l0_state_cnt_MASK 0xFFFFFFFFu                // pwr_l0_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_pwr_l0_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0S_STATE_CNT (0x74040000 + 3404hu)---

    pwr_l0s_state_cnt[31..0]     - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L0s state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_pwr_l0s_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_pwr_l0s_state_cnt_MASK 0xFFFFFFFFu                // pwr_l0s_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_pwr_l0s_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_STATE_CNT (0x74040000 + 3408hu)---

    pwr_l1p0_state_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L1.0 state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_pwr_l1p0_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_pwr_l1p0_state_cnt_MASK 0xFFFFFFFFu                // pwr_l1p0_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_pwr_l1p0_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_STATE_CNT (0x74040000 + 340Chu)---

    pwr_l1p1_state_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L1.1 state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_pwr_l1p1_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_pwr_l1p1_state_cnt_MASK 0xFFFFFFFFu                // pwr_l1p1_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_pwr_l1p1_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_STATE_CNT (0x74040000 + 3410hu)---

    pwr_l1p2_state_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L1.2 state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_pwr_l1p2_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_pwr_l1p2_state_cnt_MASK 0xFFFFFFFFu                // pwr_l1p2_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_pwr_l1p2_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L2_STATE_CNT (0x74040000 + 3414hu)---

    pwr_l2_state_cnt[31..0]      - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L2 state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_pwr_l2_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_pwr_l2_state_cnt_MASK 0xFFFFFFFFu                // pwr_l2_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_pwr_l2_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_RCVR_STATE_CNT (0x74040000 + 3418hu)---

    pwr_rcvr_state_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in Recovery state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_STATE_CNT_pwr_rcvr_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_RCVR_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_STATE_CNT_pwr_rcvr_state_cnt_MASK 0xFFFFFFFFu                // pwr_rcvr_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_STATE_CNT_pwr_rcvr_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_OTHERS_STATE_CNT (0x74040000 + 341Chu)---

    pwr_others_state_cnt[31..0]  - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in other states by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     Other stats is a state not belong to L0, L0s, L1.0, L1.1, L1.2, L2 & Recovery state.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_STATE_CNT_pwr_others_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_OTHERS_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_STATE_CNT_pwr_others_state_cnt_MASK 0xFFFFFFFFu                // pwr_others_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_STATE_CNT_pwr_others_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0_ENTRY_CNT (0x74040000 + 3420hu)---

    pwr_l0_entry_cnt[31..0]      - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L0 state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0_ENTRY_CNT_pwr_l0_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0_ENTRY_CNT_pwr_l0_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l0_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0_ENTRY_CNT_pwr_l0_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0S_ENTRY_CNT (0x74040000 + 3424hu)---

    pwr_l0s_entry_cnt[31..0]     - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L0s state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_ENTRY_CNT_pwr_l0s_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0S_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_ENTRY_CNT_pwr_l0s_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l0s_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_ENTRY_CNT_pwr_l0s_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_ENTRY_CNT (0x74040000 + 3428hu)---

    pwr_l1p0_entry_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_ENTRY_CNT_pwr_l1p0_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_ENTRY_CNT_pwr_l1p0_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l1p0_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_ENTRY_CNT_pwr_l1p0_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_ENTRY_CNT (0x74040000 + 342Chu)---

    pwr_l1p1_entry_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_ENTRY_CNT_pwr_l1p1_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_ENTRY_CNT_pwr_l1p1_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l1p1_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_ENTRY_CNT_pwr_l1p1_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_ENTRY_CNT (0x74040000 + 3430hu)---

    pwr_l1p2_entry_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_ENTRY_CNT_pwr_l1p2_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_ENTRY_CNT_pwr_l1p2_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l1p2_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_ENTRY_CNT_pwr_l1p2_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L2_ENTRY_CNT (0x74040000 + 3434hu)---

    pwr_l2_entry_cnt[31..0]      - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L2 state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L2_ENTRY_CNT_pwr_l2_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L2_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L2_ENTRY_CNT_pwr_l2_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l2_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L2_ENTRY_CNT_pwr_l2_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_RCVR_ENTRY_CNT (0x74040000 + 3438hu)---

    pwr_rcvr_entry_cnt[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the Recovery state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_ENTRY_CNT_pwr_rcvr_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_RCVR_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_ENTRY_CNT_pwr_rcvr_entry_cnt_MASK 0xFFFFFFFFu                // pwr_rcvr_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_RCVR_ENTRY_CNT_pwr_rcvr_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_OTHERS_ENTRY_CNT (0x74040000 + 343Chu)---

    pwr_others_entry_cnt[31..0]  - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the orher state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     Other stats is a state not belong to L0, L0s, L1.0, L1.1, L1.2, L2 & Recovery state.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_ENTRY_CNT_pwr_others_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_OTHERS_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_ENTRY_CNT_pwr_others_entry_cnt_MASK 0xFFFFFFFFu                // pwr_others_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_OTHERS_ENTRY_CNT_pwr_others_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_SETTING (0x74040000 + 3440hu)---

    pwr_profile_en[0]            - (RW) Power profile enable.
                                     Enables power profile function.
    rsv1[30..1]                  - (RO)  xxx 
    profile_type[31]             - (RO) Low power profile type.
                                     1'b0: 32bits mode
                                     1'b1: 64bits mode

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_profile_type_ADDR    PCIE_MAC_IREG_PWR_PROFILE_SETTING_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_profile_type_MASK    0x80000000u                // profile_type[31]
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_profile_type_SHFT    31u
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_rsv1_ADDR            PCIE_MAC_IREG_PWR_PROFILE_SETTING_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_rsv1_MASK            0x7FFFFFFEu                // rsv1[30..1]
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_rsv1_SHFT            1u
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_pwr_profile_en_ADDR  PCIE_MAC_IREG_PWR_PROFILE_SETTING_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_pwr_profile_en_MASK  0x00000001u                // pwr_profile_en[0]
#define PCIE_MAC_IREG_PWR_PROFILE_SETTING_pwr_profile_en_SHFT  0u

/* =====================================================================================

  ---PWR_PROFILE_CNT_SWITCH_SETTING (0x74040000 + 3444hu)---

    pwr_profile_cnt_switch_setting[31..0] - (RW) Power profile counter switch setting.
                                     Decide each power profile time interval. (Unit: reference clock period. Usually connect to 26MHz clock)
                                     Power profile time interval equal to pwr_profile_cnt_switch_setting+1.
                                     When 26MHz counter reach this setting. Hardware will assert power_profile_counter_overflow interrupt and update each state's entry and state counts.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_pwr_profile_cnt_switch_setting_ADDR PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_pwr_profile_cnt_switch_setting_MASK 0xFFFFFFFFu                // pwr_profile_cnt_switch_setting[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_pwr_profile_cnt_switch_setting_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_POWER_RESUME_STATE_CNT (0x74040000 + 3448hu)---

    pwr_l12_resume_state_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L12 power resume state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_STATE_CNT_pwr_l12_resume_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_STATE_CNT_pwr_l12_resume_state_cnt_MASK 0xFFFFFFFFu                // pwr_l12_resume_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_STATE_CNT_pwr_l12_resume_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_WAIT4PCLK_STATE_CNT (0x74040000 + 344Chu)---

    pwr_l12_wait4pclk_state_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L12 wait for pclk state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_STATE_CNT_pwr_l12_wait4pclk_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_STATE_CNT_pwr_l12_wait4pclk_state_cnt_MASK 0xFFFFFFFFu                // pwr_l12_wait4pclk_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_STATE_CNT_pwr_l12_wait4pclk_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_PCLK2P0_STATE_CNT (0x74040000 + 3450hu)---

    pwr_l12_pclk2p0_state_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L12 pclk to p0 state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_STATE_CNT_pwr_l12_pclk2p0_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_STATE_CNT_pwr_l12_pclk2p0_state_cnt_MASK 0xFFFFFFFFu                // pwr_l12_pclk2p0_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_STATE_CNT_pwr_l12_pclk2p0_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_RCV_RLOCK_STATE_CNT (0x74040000 + 3454hu)---

    pwr_l12_rcv_rlock_state_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L12 recovery rlock state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_STATE_CNT_pwr_l12_rcv_rlock_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_STATE_CNT_pwr_l12_rcv_rlock_state_cnt_MASK 0xFFFFFFFFu                // pwr_l12_rcv_rlock_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_STATE_CNT_pwr_l12_rcv_rlock_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_RCV_RCFGIDLE_STATE_CNT (0x74040000 + 3458hu)---

    pwr_l12_rcv_rcfgidle_state_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L12 recovery rcfg and ridle state by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_STATE_CNT_pwr_l12_rcv_rcfgidle_state_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_STATE_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_STATE_CNT_pwr_l12_rcv_rcfgidle_state_cnt_MASK 0xFFFFFFFFu                // pwr_l12_rcv_rcfgidle_state_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_STATE_CNT_pwr_l12_rcv_rcfgidle_state_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_POWER_RESUME_ENTRY_CNT (0x74040000 + 345Chu)---

    pwr_l12_resume_entry_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records L12 power resume state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_ENTRY_CNT_pwr_l12_resume_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_ENTRY_CNT_pwr_l12_resume_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l12_resume_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_POWER_RESUME_ENTRY_CNT_pwr_l12_resume_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_WAIT4PCLK_ENTRY_CNT (0x74040000 + 3460hu)---

    pwr_l12_wait4pclk_entry_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records L12 wait for pclk state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_ENTRY_CNT_pwr_l12_wait4pclk_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_ENTRY_CNT_pwr_l12_wait4pclk_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l12_wait4pclk_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_WAIT4PCLK_ENTRY_CNT_pwr_l12_wait4pclk_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_PCLK2P0_ENTRY_CNT (0x74040000 + 3464hu)---

    pwr_l12_pclk2p0_entry_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records L12 pclk to p0 state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_ENTRY_CNT_pwr_l12_pclk2p0_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_ENTRY_CNT_pwr_l12_pclk2p0_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l12_pclk2p0_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_PCLK2P0_ENTRY_CNT_pwr_l12_pclk2p0_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_RCV_RLOCK_ENTRY_CNT (0x74040000 + 3468hu)---

    pwr_l12_rcv_rlock_entry_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records L12 recovery rlock state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_ENTRY_CNT_pwr_l12_rcv_rlock_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_ENTRY_CNT_pwr_l12_rcv_rlock_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l12_rcv_rlock_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RLOCK_ENTRY_CNT_pwr_l12_rcv_rlock_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L12_RCV_RCFGIDLE_ENTRY_CNT (0x74040000 + 346Chu)---

    pwr_l12_rcv_rcfgidle_entry_cnt[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records L12 recovery rcfg and ridle state entry times counts by 26MHz clock in the pre-define time period which decided by 0x3444 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_ENTRY_CNT_pwr_l12_rcv_rcfgidle_entry_cnt_ADDR PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_ENTRY_CNT_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_ENTRY_CNT_pwr_l12_rcv_rcfgidle_entry_cnt_MASK 0xFFFFFFFFu                // pwr_l12_rcv_rcfgidle_entry_cnt[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L12_RCV_RCFGIDLE_ENTRY_CNT_pwr_l12_rcv_rcfgidle_entry_cnt_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_3490 (0x74040000 + 3490hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3490_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3490_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3490_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3490_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_3494 (0x74040000 + 3494hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3494_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3494_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3494_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3494_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_3498 (0x74040000 + 3498hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3498_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3498_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3498_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_3498_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_349C (0x74040000 + 349Chu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_349C_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_349C_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_349C_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_349C_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34A0 (0x74040000 + 34A0hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A0_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A0_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A0_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A0_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34A4 (0x74040000 + 34A4hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A4_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A4_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A4_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A4_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34A8 (0x74040000 + 34A8hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A8_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A8_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A8_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34A8_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34AC (0x74040000 + 34AChu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34AC_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34AC_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34AC_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34AC_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34B0 (0x74040000 + 34B0hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B0_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B0_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B0_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B0_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34B4 (0x74040000 + 34B4hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B4_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B4_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B4_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B4_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34B8 (0x74040000 + 34B8hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B8_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B8_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B8_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34B8_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34BC (0x74040000 + 34BChu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34BC_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34BC_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34BC_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34BC_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34C0 (0x74040000 + 34C0hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C0_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C0_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C0_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C0_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34C4 (0x74040000 + 34C4hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C4_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C4_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C4_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C4_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34C8 (0x74040000 + 34C8hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C8_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C8_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C8_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34C8_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34CC (0x74040000 + 34CChu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34CC_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34CC_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34CC_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34CC_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34D0 (0x74040000 + 34D0hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D0_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D0_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D0_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D0_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34D4 (0x74040000 + 34D4hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D4_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D4_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D4_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D4_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34D8 (0x74040000 + 34D8hu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D8_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D8_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D8_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34D8_debug_dummy_SHFT 0u

/* =====================================================================================

  ---PCIE_MD_DEBUG_DUMMY_34DC (0x74040000 + 34DChu)---

    debug_dummy[31..0]           - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34DC_debug_dummy_ADDR PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34DC_ADDR
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34DC_debug_dummy_MASK 0xFFFFFFFFu                // debug_dummy[31..0]
#define PCIE_MAC_IREG_PCIE_MD_DEBUG_DUMMY_34DC_debug_dummy_SHFT 0u

/* =====================================================================================

  ---DVSEC_CAP_0 (0x74040000 + 34EChu)---

    DVSEC_VID[15..0]             - (RW) DVSEC Vendor ID
                                     This field is the Vendor ID associated with the vendor that defined the contents of this capability.
    DVSEC_REV[19..16]            - (RW) DVSEC Revision
                                     This field is a vendor-defined version number that indicates the version of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID and DVSEC ID before interpreting this field.
    DVSEC_LEN[31..20]            - (RW) DVSEC Length
                                     This field indicates the number of bytes in the entire DVSEC structure, including the PCI Express Extended Capability Header , the DVSEC Header 1, DVSEC Header 2, and DVSEC vendor-specific registers.

 =====================================================================================*/
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_LEN_ADDR               PCIE_MAC_IREG_DVSEC_CAP_0_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_LEN_MASK               0xFFF00000u                // DVSEC_LEN[31..20]
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_LEN_SHFT               20u
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_REV_ADDR               PCIE_MAC_IREG_DVSEC_CAP_0_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_REV_MASK               0x000F0000u                // DVSEC_REV[19..16]
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_REV_SHFT               16u
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_VID_ADDR               PCIE_MAC_IREG_DVSEC_CAP_0_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_VID_MASK               0x0000FFFFu                // DVSEC_VID[15..0]
#define PCIE_MAC_IREG_DVSEC_CAP_0_DVSEC_VID_SHFT               0u

/* =====================================================================================

  ---DVSEC_CAP_1 (0x74040000 + 34F0hu)---

    DVSEC_ID[15..0]              - (RW) DVSEC ID
                                     This field is a vendor-defined ID that indicates the nature and format of the DVSEC structure.
                                     Software must qualify the DVSEC Vendor ID before interpreting this field.
    DVSEC_REG[31..16]            - (RW) DVSEC Registers
                                     The DVSEC Vendor-Specific Register area begins at offset 0Ah.

 =====================================================================================*/
#define PCIE_MAC_IREG_DVSEC_CAP_1_DVSEC_REG_ADDR               PCIE_MAC_IREG_DVSEC_CAP_1_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_1_DVSEC_REG_MASK               0xFFFF0000u                // DVSEC_REG[31..16]
#define PCIE_MAC_IREG_DVSEC_CAP_1_DVSEC_REG_SHFT               16u
#define PCIE_MAC_IREG_DVSEC_CAP_1_DVSEC_ID_ADDR                PCIE_MAC_IREG_DVSEC_CAP_1_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_1_DVSEC_ID_MASK                0x0000FFFFu                // DVSEC_ID[15..0]
#define PCIE_MAC_IREG_DVSEC_CAP_1_DVSEC_ID_SHFT                0u

/* =====================================================================================

  ---DVSEC_CAP_2 (0x74040000 + 34F4hu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Registers
                                     The DVSEC Vendor-Specific Register area begins at offset 0Ah.

 =====================================================================================*/
#define PCIE_MAC_IREG_DVSEC_CAP_2_DVSEC_REG_ADDR               PCIE_MAC_IREG_DVSEC_CAP_2_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_2_DVSEC_REG_MASK               0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_IREG_DVSEC_CAP_2_DVSEC_REG_SHFT               0u

/* =====================================================================================

  ---DVSEC_CAP_3 (0x74040000 + 34F8hu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Registers
                                     The DVSEC Vendor-Specific Register area begins at offset 0Ah.

 =====================================================================================*/
#define PCIE_MAC_IREG_DVSEC_CAP_3_DVSEC_REG_ADDR               PCIE_MAC_IREG_DVSEC_CAP_3_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_3_DVSEC_REG_MASK               0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_IREG_DVSEC_CAP_3_DVSEC_REG_SHFT               0u

/* =====================================================================================

  ---DVSEC_CAP_4 (0x74040000 + 34FChu)---

    DVSEC_REG[31..0]             - (RW) DVSEC Registers
                                     The DVSEC Vendor-Specific Register area begins at offset 0Ah.

 =====================================================================================*/
#define PCIE_MAC_IREG_DVSEC_CAP_4_DVSEC_REG_ADDR               PCIE_MAC_IREG_DVSEC_CAP_4_ADDR
#define PCIE_MAC_IREG_DVSEC_CAP_4_DVSEC_REG_MASK               0xFFFFFFFFu                // DVSEC_REG[31..0]
#define PCIE_MAC_IREG_DVSEC_CAP_4_DVSEC_REG_SHFT               0u

/* =====================================================================================

  ---INTERRUPT_SENT0 (0x74040000 + 3500hu)---

    interrupt_sent0[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT0_interrupt_sent0_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT0_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT0_interrupt_sent0_MASK     0xFFFFFFFFu                // interrupt_sent0[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT0_interrupt_sent0_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT1 (0x74040000 + 3504hu)---

    interrupt_sent1[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT1_interrupt_sent1_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT1_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT1_interrupt_sent1_MASK     0xFFFFFFFFu                // interrupt_sent1[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT1_interrupt_sent1_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT2 (0x74040000 + 3508hu)---

    interrupt_sent2[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT2_interrupt_sent2_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT2_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT2_interrupt_sent2_MASK     0xFFFFFFFFu                // interrupt_sent2[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT2_interrupt_sent2_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT3 (0x74040000 + 350Chu)---

    interrupt_sent3[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT3_interrupt_sent3_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT3_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT3_interrupt_sent3_MASK     0xFFFFFFFFu                // interrupt_sent3[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT3_interrupt_sent3_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT4 (0x74040000 + 3510hu)---

    interrupt_sent4[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT4_interrupt_sent4_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT4_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT4_interrupt_sent4_MASK     0xFFFFFFFFu                // interrupt_sent4[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT4_interrupt_sent4_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT5 (0x74040000 + 3514hu)---

    interrupt_sent5[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT5_interrupt_sent5_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT5_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT5_interrupt_sent5_MASK     0xFFFFFFFFu                // interrupt_sent5[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT5_interrupt_sent5_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT6 (0x74040000 + 3518hu)---

    interrupt_sent6[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT6_interrupt_sent6_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT6_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT6_interrupt_sent6_MASK     0xFFFFFFFFu                // interrupt_sent6[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT6_interrupt_sent6_SHFT     0u

/* =====================================================================================

  ---INTERRUPT_SENT7 (0x74040000 + 351Chu)---

    interrupt_sent7[31..0]       - (RO) PCIe msi sent

 =====================================================================================*/
#define PCIE_MAC_IREG_INTERRUPT_SENT7_interrupt_sent7_ADDR     PCIE_MAC_IREG_INTERRUPT_SENT7_ADDR
#define PCIE_MAC_IREG_INTERRUPT_SENT7_interrupt_sent7_MASK     0xFFFFFFFFu                // interrupt_sent7[31..0]
#define PCIE_MAC_IREG_INTERRUPT_SENT7_interrupt_sent7_SHFT     0u

/* =====================================================================================

  ---MTK_VDM_RECEPTION_SETTINGS_1 (0x74040000 + 3520hu)---

    MTK_VDM_DEST_ID[4..0]        - (RW) MTK VDM Message Reception Destination Interface: defines the ID of the AXI interface to which supported messages will be forwarded. 
                                     Supported values are:
                                     5'd4 for AXI Master #0
                                     5'd5 for AXI Master #1
                                     5'd6 for AXI Master #2
                                     5'd7 for AXI Master #3
                                     5'd8 for AXI Stream Out #0
                                     5'd9 for AXI Stream Out #1
                                     5'd10 for AXI Stream Out #2
                                     5'd11 for AXI Stream Out #3
                                     5'd12 for internal register
    RSVD1[31..5]                 - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_RSVD1_ADDR  PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_RSVD1_MASK  0xFFFFFFE0u                // RSVD1[31..5]
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_RSVD1_SHFT  5u
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_MTK_VDM_DEST_ID_ADDR PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_MTK_VDM_DEST_ID_MASK 0x0000001Fu                // MTK_VDM_DEST_ID[4..0]
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_1_MTK_VDM_DEST_ID_SHFT 0u

/* =====================================================================================

  ---MTK_VDM_RECEPTION_SETTINGS_2 (0x74040000 + 3524hu)---

    MTK_VDM_DEST_ADDR_LSB[31..0] - (RW) MTK VDM Message Reception Destination LSB Address.
                                     Defines the AXI address to which supported messages will be forwarded.
                                     Note : if the destination is "internal register", the address must be 0x00000000_00000ce0

 =====================================================================================*/
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_2_MTK_VDM_DEST_ADDR_LSB_ADDR PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_2_ADDR
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_2_MTK_VDM_DEST_ADDR_LSB_MASK 0xFFFFFFFFu                // MTK_VDM_DEST_ADDR_LSB[31..0]
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_2_MTK_VDM_DEST_ADDR_LSB_SHFT 0u

/* =====================================================================================

  ---MTK_VDM_RECEPTION_SETTINGS_3 (0x74040000 + 3528hu)---

    MTK_VDM_DEST_ADDR_MSB[31..0] - (RW) MTK VDM Message Reception Destination MSB Address.
                                     Defines the AXI address to which supported messages will be forwarded.
                                     Note : if the destination is "internal register", the address must be 0x00000000_00000ce0

 =====================================================================================*/
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_3_MTK_VDM_DEST_ADDR_MSB_ADDR PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_3_ADDR
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_3_MTK_VDM_DEST_ADDR_MSB_MASK 0xFFFFFFFFu                // MTK_VDM_DEST_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_MTK_VDM_RECEPTION_SETTINGS_3_MTK_VDM_DEST_ADDR_MSB_SHFT 0u

/* =====================================================================================

  ---HW_VDM_CTL (0x74040000 + 3530hu)---

    vdm_sub_type[7..0]           - (RW) VDM sub-type value.
                                     Softwave can write this register to definite HW VDM sub-format. This register impact the 12th byte of the VDM message.
    vdm_type[8]                  - (RW) VDM type value.
                                     1'b0: Vendor_Defined Type 0
                                     1'b1: Vendor_Defined Type 1
    RESERVED9[15..9]             - (RO) Reserved bits
    vdm_vendor_id[31..16]        - (RW) VDM vendor ID value.
                                     Softwave can write this register to definite HW VDM vendor ID filed.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_vendor_id_ADDR            PCIE_MAC_IREG_HW_VDM_CTL_ADDR
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_vendor_id_MASK            0xFFFF0000u                // vdm_vendor_id[31..16]
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_vendor_id_SHFT            16u
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_type_ADDR                 PCIE_MAC_IREG_HW_VDM_CTL_ADDR
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_type_MASK                 0x00000100u                // vdm_type[8]
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_type_SHFT                 8u
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_sub_type_ADDR             PCIE_MAC_IREG_HW_VDM_CTL_ADDR
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_sub_type_MASK             0x000000FFu                // vdm_sub_type[7..0]
#define PCIE_MAC_IREG_HW_VDM_CTL_vdm_sub_type_SHFT             0u

/* =====================================================================================

  ---HW_PTM_CTL_0 (0x74040000 + 3534hu)---

    ptm_ep_timer_dev[15..0]      - (RW) HW PTM timer for EP device
                                     Software can set this register to enable HW to send ptm request when this timer is timeout for the EP device.
                                     unit: 1us
    ptm_ep_timer_func[19..16]    - (RW) HW PTM timer for EP function
                                     After ptm_ep_timer_dev timer is timeout, software can set this register to make HW to send ptm request when this timer is timeout for the EP functions.
                                     unit: 1us
    ptm_rc_timer[23..20]         - (RW) HW PTM timer for RC
                                     HW will wait until this timer is timeout and then send ptm rsp or rspd to EP. (spec: < 10us)
                                     unit: 1us
    ptm_rc_rsp_reset[31..24]     - (RW) HW PTM rsp reset for RC
                                     if this register set, HW will re-send rsp when received a PTM request.
                                     bit 0 is for function 0.
                                     bit 1 is for function 1.
                                     ...

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_rc_rsp_reset_ADDR       PCIE_MAC_IREG_HW_PTM_CTL_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_rc_rsp_reset_MASK       0xFF000000u                // ptm_rc_rsp_reset[31..24]
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_rc_rsp_reset_SHFT       24u
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_rc_timer_ADDR           PCIE_MAC_IREG_HW_PTM_CTL_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_rc_timer_MASK           0x00F00000u                // ptm_rc_timer[23..20]
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_rc_timer_SHFT           20u
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_ep_timer_func_ADDR      PCIE_MAC_IREG_HW_PTM_CTL_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_ep_timer_func_MASK      0x000F0000u                // ptm_ep_timer_func[19..16]
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_ep_timer_func_SHFT      16u
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_ep_timer_dev_ADDR       PCIE_MAC_IREG_HW_PTM_CTL_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_ep_timer_dev_MASK       0x0000FFFFu                // ptm_ep_timer_dev[15..0]
#define PCIE_MAC_IREG_HW_PTM_CTL_0_ptm_ep_timer_dev_SHFT       0u

/* =====================================================================================

  ---HW_VDM_MSG_DIS (0x74040000 + 3538hu)---

    hw_vdm_msg_dis[31..0]        - (RW) HW VDM message disable control register.
                                     when this bit is set, HW VDM message could not send to link partner.
                                     bit 0: Vector 0 for HW VDM message
                                     bit 1: Vector 1 for HW VDM message
                                     ...
                                     bit 31: Vector 31 for HW VDM message

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_VDM_MSG_DIS_hw_vdm_msg_dis_ADDR       PCIE_MAC_IREG_HW_VDM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_VDM_MSG_DIS_hw_vdm_msg_dis_MASK       0xFFFFFFFFu                // hw_vdm_msg_dis[31..0]
#define PCIE_MAC_IREG_HW_VDM_MSG_DIS_hw_vdm_msg_dis_SHFT       0u

/* =====================================================================================

  ---HW_PTM_MSG_DIS (0x74040000 + 353Chu)---

    pcie_hw_ptm_rsp_dis[0]       - (RW) HW ptm rsp message disable register.
                                     When this bit is set, HW ptm rsp message could not send to link partner.
    pcie_hw_ptm_rspd_dis[1]      - (RW) HW ptm rspd message disable register.
                                     When this bit is set, HW ptm rspd message could not send to link partner.
    pcie_hw_ptm_rqst_dis[9..2]   - (RW) HW ptm request message disable register.
                                     for HW PTM EP periodical mode, when this bit is set, HW ptm request message could not send to link partner.
                                     for HW PTM EP trigger mode, write 0 to make HW send a PTM request packet, and the bit could be set to 1 by HW when HW getting a valid master time of t1'.
                                     bit 1 is for function 1
                                     ...
    rg_sys_timer_unit[11..10]    - (RW) sys timer sample count adjustment register.
                                     2'b00: sample count * 1
                                     2'b01: sample count * 2
                                     2'b10: sample count * 4
                                     2'b11: sample count * 8
    rg_ptm_dis_lowpower[12]      - (RW) low power disable register when do PTM dialog.
                                     1'b0: LTSSM will not stuck at L0 when do PTM dialog
                                     1'b1: LTSSM will stuck at L0 when do PTM dialog
    rg_ptm_rx_debug_func[15..13] - (RW) PTM function RX info select register.
                                     3'h0: select function 0 PTM RX info.
                                     3'h1: select function 1 PTM RX info.
                                     3'h2: select function 2 PTM RX info.
                                     ...
    rg_systimer_refck_div_sel[17..16] - (RW) sys timer ref_ck divider select register.
                                     2'h0: ref_ck divide 1
                                     2'h1: ref_ck divide 2
                                     2'h2: ref_ck divide 4
                                     2'h3: ref_ck divide 8
    rg_sys_timer_enable[18]      - (RW) sys timer enable
                                     1'b1: enable
                                     1'b0: disable
    rg_ptm_tx_rpl_chk_dis[19]    - (RW) PTM replay packet check disable for EP mode
                                     1'b1: do not check the PTM replay packet
                                     1'b0:  check the PTM replay packet
    rg_ptm_rx_dupl_chk_dis[20]   - (RW) PTM duplicate packet check disable for EP mode
                                     1'b1: do not check the PTM duplicate packet
                                     1'b0: check the PTM duplicate packet
    rg_ptm_ep_trig_intr_dis[21]  - (RW) PTM interrupt disable for EP trigger mode
                                     1'b1: disable PTM interrupt
                                     1'b0: enable PTM interrupt
    rg_ptm_lcrc_err_chk[22]      - (RW) PTM packet LCRC error check enable
                                     1'b1: check ptm packet LCRC error, that means invalid ptm context if occurred ptm packet LCRC error.
                                     1'b0: do not check ptm packet LCRC error
    rg_ptm_ep_clk_req_en[23]     - (RW) PTM clock request when PTM enable for EP mode
                                     1'b1: request ptm clock by SW
                                     1'b0: request ptm clock by HW
    rg_ptm_fail_count_clr_by_rqst_dis[24] - (RW) Enable PTM handshake fail count clear by pcie_hw_ptm_rqst_dis
                                     1'b1: ptm handshake fail count could be clear by pcie_hw_ptm_rqst_dis assert
                                     1'b0: ptm handshake fail count could not be clear by pcie_hw_ptm_rqst_dis assert.
    rg_ptm_chk_tx_rpl_aft_rsp[25] - (RW) Enable HW to check replay PTM packet after receiving a PTM response or responsed packet
                                     1'b1: check the replay PTM packet. reissue a new PTM dialog to get the master time if HW send a replay PTM packet.
                                     1'b0: do not check the replay PTM packet.
    RSV[31..26]                  - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_RSV_ADDR                  PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_RSV_MASK                  0xFC000000u                // RSV[31..26]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_RSV_SHFT                  26u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_chk_tx_rpl_aft_rsp_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_chk_tx_rpl_aft_rsp_MASK 0x02000000u                // rg_ptm_chk_tx_rpl_aft_rsp[25]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_chk_tx_rpl_aft_rsp_SHFT 25u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_fail_count_clr_by_rqst_dis_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_fail_count_clr_by_rqst_dis_MASK 0x01000000u                // rg_ptm_fail_count_clr_by_rqst_dis[24]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_fail_count_clr_by_rqst_dis_SHFT 24u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_ep_clk_req_en_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_ep_clk_req_en_MASK 0x00800000u                // rg_ptm_ep_clk_req_en[23]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_ep_clk_req_en_SHFT 23u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_lcrc_err_chk_ADDR  PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_lcrc_err_chk_MASK  0x00400000u                // rg_ptm_lcrc_err_chk[22]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_lcrc_err_chk_SHFT  22u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_ep_trig_intr_dis_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_ep_trig_intr_dis_MASK 0x00200000u                // rg_ptm_ep_trig_intr_dis[21]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_ep_trig_intr_dis_SHFT 21u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_rx_dupl_chk_dis_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_rx_dupl_chk_dis_MASK 0x00100000u                // rg_ptm_rx_dupl_chk_dis[20]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_rx_dupl_chk_dis_SHFT 20u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_tx_rpl_chk_dis_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_tx_rpl_chk_dis_MASK 0x00080000u                // rg_ptm_tx_rpl_chk_dis[19]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_tx_rpl_chk_dis_SHFT 19u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_sys_timer_enable_ADDR  PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_sys_timer_enable_MASK  0x00040000u                // rg_sys_timer_enable[18]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_sys_timer_enable_SHFT  18u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_systimer_refck_div_sel_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_systimer_refck_div_sel_MASK 0x00030000u                // rg_systimer_refck_div_sel[17..16]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_systimer_refck_div_sel_SHFT 16u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_rx_debug_func_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_rx_debug_func_MASK 0x0000E000u                // rg_ptm_rx_debug_func[15..13]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_rx_debug_func_SHFT 13u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_dis_lowpower_ADDR  PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_dis_lowpower_MASK  0x00001000u                // rg_ptm_dis_lowpower[12]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_ptm_dis_lowpower_SHFT  12u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_sys_timer_unit_ADDR    PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_sys_timer_unit_MASK    0x00000C00u                // rg_sys_timer_unit[11..10]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_rg_sys_timer_unit_SHFT    10u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rqst_dis_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rqst_dis_MASK 0x000003FCu                // pcie_hw_ptm_rqst_dis[9..2]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rqst_dis_SHFT 2u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rspd_dis_ADDR PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rspd_dis_MASK 0x00000002u                // pcie_hw_ptm_rspd_dis[1]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rspd_dis_SHFT 1u
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rsp_dis_ADDR  PCIE_MAC_IREG_HW_PTM_MSG_DIS_ADDR
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rsp_dis_MASK  0x00000001u                // pcie_hw_ptm_rsp_dis[0]
#define PCIE_MAC_IREG_HW_PTM_MSG_DIS_pcie_hw_ptm_rsp_dis_SHFT  0u

/* =====================================================================================

  ---HW_PTM_EP_LOCAL_T1A_LO_0 (0x74040000 + 3540hu)---

    pcie_ptm_rx_t_local_t1_a_lo[31..0] - (RO) HW PTM t1' local time stamp low 32bits register
                                     this register records the local t1' time stamp low 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_0_pcie_ptm_rx_t_local_t1_a_lo_ADDR PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_0_pcie_ptm_rx_t_local_t1_a_lo_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_local_t1_a_lo[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_0_pcie_ptm_rx_t_local_t1_a_lo_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_LOCAL_T1A_HI_0 (0x74040000 + 3544hu)---

    pcie_ptm_rx_t_local_t1_a_hi[31..0] - (RO) HW PTM t1' local time stamp high 32bits register
                                     this register records the local t1' time stamp high 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_0_pcie_ptm_rx_t_local_t1_a_hi_ADDR PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_0_pcie_ptm_rx_t_local_t1_a_hi_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_local_t1_a_hi[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_0_pcie_ptm_rx_t_local_t1_a_hi_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_MASTER_T1A_LO_0 (0x74040000 + 3548hu)---

    pcie_ptm_rx_t_mst_t1_a_lo[31..0] - (RO) HW PTM master t1' time stamp low 32bits register
                                     this register will reflect the master t1' time stamp low 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_0_pcie_ptm_rx_t_mst_t1_a_lo_ADDR PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_0_pcie_ptm_rx_t_mst_t1_a_lo_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_mst_t1_a_lo[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_0_pcie_ptm_rx_t_mst_t1_a_lo_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_MASTER_T1A_HI_0 (0x74040000 + 354Chu)---

    pcie_ptm_rx_t_mst_t1_a_hi[31..0] - (RO) HW PTM t1' master time stamp high 32bits register
                                     this register will reflect the master t1' time stamp high 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_0_pcie_ptm_rx_t_mst_t1_a_hi_ADDR PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_0_pcie_ptm_rx_t_mst_t1_a_hi_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_mst_t1_a_hi[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_0_pcie_ptm_rx_t_mst_t1_a_hi_SHFT 0u

/* =====================================================================================

  ---HW_PTM_INFO_VALID_0 (0x74040000 + 3550hu)---

    Reserved[3..0]               - (RO) Reserved
    pcie_ptm_handshake_round_fail_count[6..4] - (RO) HW PTM get the handshake round fail count for EP trigger mode
                                     Max value of this count is 7, HW will trigger pcie_ep_ptm_handshake_fail assert. During pcie_ep_ptm_handshake_fail assertion, the value could keep to 7.
                                     this count could clear to 0 when pcie_ep_ptm_handshake_fail deassert or pcie_ep_ptm_calculated_mst_time_valid assert.
    RESERVED7[7]                 - (RO) Reserved bits
    pcie_ptm_last_rspd_rcv[8]    - (RO) HW PTM received a ResponseD packet for the last packet
                                     1'b1: last received ptm packet is ResponseD
                                     1'b0: last received ptm packet is not ResponseD
    ptm_handshake_round_valid_count[10..9] - (RO) HW PTM get the valid handshake round count for EP mode
    RESERVED11[11]               - (RO) Reserved bits
    ptm_valid_t2_t3[12]          - (RO) HW PTM get the valid t2,t3 value for RC mode
                                     1'b1: get the valid t2, t3 value
                                     1'b0: get the invalid t2, t3 value
    RESERVED13[14..13]           - (RO) Reserved bits
    pcie_ep_ptm_trigger_mode[15] - (RW) HW PTM trigger mode select for EP mode
                                     1'b0: send PTM request packet by periodically when enable PTM
                                     1'b1: send PTM request packet by SW trigger "pcie_hw_ptm_rqst_dis" when enable PTM
    pcie_ep_ptm_handshake_fail[23..16] - (W1C) HW PTM dialog handshake round indicator for EP mode per function
                                     1'b1: the handshake round fail count is more or equal 7
                                     1'b0: the handshake round fail count is less than 7
    pcie_ep_ptm_calculated_mst_time_valid[31..24] - (W1C) HW PTM calculated master time t1' is valid for EP mode per function
                                     1'b1: HW calculated master time t1' is valid per function
                                     1'b0: HW calculated master time t1' is not valid per function

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_calculated_mst_time_valid_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_calculated_mst_time_valid_MASK 0xFF000000u                // pcie_ep_ptm_calculated_mst_time_valid[31..24]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_calculated_mst_time_valid_SHFT 24u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_handshake_fail_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_handshake_fail_MASK 0x00FF0000u                // pcie_ep_ptm_handshake_fail[23..16]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_handshake_fail_SHFT 16u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_trigger_mode_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_trigger_mode_MASK 0x00008000u                // pcie_ep_ptm_trigger_mode[15]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ep_ptm_trigger_mode_SHFT 15u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ptm_valid_t2_t3_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ptm_valid_t2_t3_MASK 0x00001000u                // ptm_valid_t2_t3[12]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ptm_valid_t2_t3_SHFT 12u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ptm_handshake_round_valid_count_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ptm_handshake_round_valid_count_MASK 0x00000600u                // ptm_handshake_round_valid_count[10..9]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ptm_handshake_round_valid_count_SHFT 9u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ptm_last_rspd_rcv_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ptm_last_rspd_rcv_MASK 0x00000100u                // pcie_ptm_last_rspd_rcv[8]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ptm_last_rspd_rcv_SHFT 8u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ptm_handshake_round_fail_count_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ptm_handshake_round_fail_count_MASK 0x00000070u                // pcie_ptm_handshake_round_fail_count[6..4]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_pcie_ptm_handshake_round_fail_count_SHFT 4u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_Reserved_ADDR        PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_Reserved_MASK        0x0000000Fu                // Reserved[3..0]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_0_Reserved_SHFT        0u

/* =====================================================================================

  ---HW_RCV_PSEUDO_PM_DLLP_CNT (0x74040000 + 3554hu)---

    rcv_pseudo_pm_dllp_cnt[7..0] - (RW) HW PTM received data TL valid register
                                     8'b0: RCV Pseudo PM DLLP Count Max is 0 in TL
                                     8'bNN: RCV Pseudo PM DLLP Count Max is 0xNN in TL
    rg_sending_ack_nak_option[8] - (RW) RC sending ack or nak select signal
                                     1'b0:RC sending ack
                                     1'b1:RC sending nak
    Reserved[31..9]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_Reserved_ADDR  PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_ADDR
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_Reserved_MASK  0xFFFFFE00u                // Reserved[31..9]
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_Reserved_SHFT  9u
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_rg_sending_ack_nak_option_ADDR PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_ADDR
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_rg_sending_ack_nak_option_MASK 0x00000100u                // rg_sending_ack_nak_option[8]
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_rg_sending_ack_nak_option_SHFT 8u
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_rcv_pseudo_pm_dllp_cnt_ADDR PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_ADDR
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_rcv_pseudo_pm_dllp_cnt_MASK 0x000000FFu                // rcv_pseudo_pm_dllp_cnt[7..0]
#define PCIE_MAC_IREG_HW_RCV_PSEUDO_PM_DLLP_CNT_rcv_pseudo_pm_dllp_cnt_SHFT 0u

/* =====================================================================================

  ---PCIE_MISC_CTRL2 (0x74040000 + 3558hu)---

    sw_en_ctrl_ltr[0]            - (RW) SW Enable Control register
                                     1'b1: EP send LTR message after EP from Dx to D0
                                     1'b0: EP don't send LTR message after EP from Dx to D0
    sw_en_ctrl_ecrc[1]           - (RW) SW Enable Control register
                                     1'b1:EP response a CPL with UR after receiving non-posted request with ECRC error
                                     1'b0:EP response a CPL with CA after receiving non-posted request with ECRC error
    pcie_tpoweron_bypass_en[2]   - (RW) Pcie bypass mode for L1.2 exit tpoweron wait time enable  register
                                     1'b1:Pcie exit L1.2 no need wait tpoweron timing
                                     1'b0:Pcie exit L1.2 need wait tpoweron timing
    sw_ddren_mask_mac_active[3]  - (RW) pcie ddren mask mac active
    Reserved0[5..4]              - (RW) Reserved0
    func_sent_any_intx_en[6]     - (RW) function send intx enable
                                     1'b1:function 1~7 can send INTA/B/C/D according int pin setting
                                     1'b0:function 1~3 only can send INTX less than function number
    pcie_ltr_bypass_en[7]        - (RW) ltr bypass enable
                                     1'b0:enable LTR value check even LTR enable set when enter L1.2
                                     1'b1:bypass LTR value check even LTR enable set when enter L1.2
    pcie_ddren_base_axi_mst_en[8] - (RW) pcie ddren base axi master enable
                                     1'b0:ddren req assert base pcie active
                                     1'b1:ddren req assert base axi master
    sw_en_ctrl_cpl_type0[9]      - (RW) sw enable control cpl type
                                     1'b1:EP response a CPL with UR after receiving unsupported  TLP or error-poisoned TLP
                                     1'b0:EP response a CPL with CA after receiving unsupported  TLP or error-poisoned TLP
    sw_en_ctrl_cpl_type1[10]     - (RW) sw enable control cpl type
                                     1'b1:EP response a CPL with UR after receiving TLP that conf access to register that is not implemented
                                     1'b0:EP response a CPL with CA after receiving TLP that conf access to register that is not implemented
    Reserved[31..11]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_Reserved_ADDR            PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_Reserved_MASK            0xFFFFF800u                // Reserved[31..11]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_Reserved_SHFT            11u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_cpl_type1_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_cpl_type1_MASK 0x00000400u                // sw_en_ctrl_cpl_type1[10]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_cpl_type1_SHFT 10u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_cpl_type0_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_cpl_type0_MASK 0x00000200u                // sw_en_ctrl_cpl_type0[9]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_cpl_type0_SHFT 9u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_ddren_base_axi_mst_en_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_ddren_base_axi_mst_en_MASK 0x00000100u                // pcie_ddren_base_axi_mst_en[8]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_ddren_base_axi_mst_en_SHFT 8u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_ltr_bypass_en_ADDR  PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_ltr_bypass_en_MASK  0x00000080u                // pcie_ltr_bypass_en[7]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_ltr_bypass_en_SHFT  7u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_func_sent_any_intx_en_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_func_sent_any_intx_en_MASK 0x00000040u                // func_sent_any_intx_en[6]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_func_sent_any_intx_en_SHFT 6u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_Reserved0_ADDR           PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_Reserved0_MASK           0x00000030u                // Reserved0[5..4]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_Reserved0_SHFT           4u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_ddren_mask_mac_active_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_ddren_mask_mac_active_MASK 0x00000008u                // sw_ddren_mask_mac_active[3]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_ddren_mask_mac_active_SHFT 3u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_tpoweron_bypass_en_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_tpoweron_bypass_en_MASK 0x00000004u                // pcie_tpoweron_bypass_en[2]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_pcie_tpoweron_bypass_en_SHFT 2u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_ecrc_ADDR     PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_ecrc_MASK     0x00000002u                // sw_en_ctrl_ecrc[1]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_ecrc_SHFT     1u
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_ltr_ADDR      PCIE_MAC_IREG_PCIE_MISC_CTRL2_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_ltr_MASK      0x00000001u                // sw_en_ctrl_ltr[0]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL2_sw_en_ctrl_ltr_SHFT      0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_0 (0x74040000 + 355Chu)---

    SENDING_SW_CFG_MESSAGE_0[31..0] - (RW) Message Sending Header DW0

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_0_SENDING_SW_CFG_MESSAGE_0_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_0_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_0_SENDING_SW_CFG_MESSAGE_0_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_0[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_0_SENDING_SW_CFG_MESSAGE_0_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_1 (0x74040000 + 3560hu)---

    SENDING_SW_CFG_MESSAGE_1[31..0] - (RW) Message Sending Header DW1

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_1_SENDING_SW_CFG_MESSAGE_1_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_1_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_1_SENDING_SW_CFG_MESSAGE_1_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_1[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_1_SENDING_SW_CFG_MESSAGE_1_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_2 (0x74040000 + 3564hu)---

    SENDING_SW_CFG_MESSAGE_2[31..0] - (RW) Message Sending Header DW2

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_2_SENDING_SW_CFG_MESSAGE_2_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_2_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_2_SENDING_SW_CFG_MESSAGE_2_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_2[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_2_SENDING_SW_CFG_MESSAGE_2_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_3 (0x74040000 + 3568hu)---

    SENDING_SW_CFG_MESSAGE_3[31..0] - (RW) Message Sending Header DW3

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_3_SENDING_SW_CFG_MESSAGE_3_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_3_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_3_SENDING_SW_CFG_MESSAGE_3_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_3[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_3_SENDING_SW_CFG_MESSAGE_3_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_4 (0x74040000 + 356Chu)---

    SENDING_SW_CFG_MESSAGE_4[31..0] - (RW) Message Sending Data DW0

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_4_SENDING_SW_CFG_MESSAGE_4_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_4_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_4_SENDING_SW_CFG_MESSAGE_4_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_4[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_4_SENDING_SW_CFG_MESSAGE_4_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_5 (0x74040000 + 3570hu)---

    SENDING_SW_CFG_MESSAGE_5[31..0] - (RW) Message Sending Data DW1

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_5_SENDING_SW_CFG_MESSAGE_5_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_5_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_5_SENDING_SW_CFG_MESSAGE_5_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_5[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_5_SENDING_SW_CFG_MESSAGE_5_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_6 (0x74040000 + 3574hu)---

    SENDING_SW_CFG_MESSAGE_6[31..0] - (RW) Message Sending Data DW2

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_6_SENDING_SW_CFG_MESSAGE_6_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_6_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_6_SENDING_SW_CFG_MESSAGE_6_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_6[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_6_SENDING_SW_CFG_MESSAGE_6_SHFT 0u

/* =====================================================================================

  ---SENDING_SW_CFG_MESSAGE_7 (0x74040000 + 3578hu)---

    SENDING_SW_CFG_MESSAGE_7[31..0] - (RW) Message Sending Data DW3

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_7_SENDING_SW_CFG_MESSAGE_7_ADDR PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_7_ADDR
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_7_SENDING_SW_CFG_MESSAGE_7_MASK 0xFFFFFFFFu                // SENDING_SW_CFG_MESSAGE_7[31..0]
#define PCIE_MAC_IREG_SENDING_SW_CFG_MESSAGE_7_SENDING_SW_CFG_MESSAGE_7_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0 (0x74040000 + 357Chu)---

    SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0[31..0] - (RW) Message Sending request aribter high prior setting, bit 31-0
                                     When the corresponding bit is set to 1, a higher priority is obtained; when multiple bits are set to 1, the priority of the lower bit is higher

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_MASK 0xFFFFFFFFu                // SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0[31..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_0_SHFT 0u

/* =====================================================================================

  ---SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1 (0x74040000 + 3580hu)---

    SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1[11..0] - (RW) Message Sending request aribter high prior setting, bit 44-32
                                     When the corresponding bit is set to 1, a higher priority is obtained; when multiple bits are set to 1, the priority of the lower bit is higher
    Reserved[31..12]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_Reserved_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_Reserved_MASK 0xFFFFF000u                // Reserved[31..12]
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_Reserved_SHFT 12u
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_ADDR PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_ADDR
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_MASK 0x00000FFFu                // SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1[11..0]
#define PCIE_MAC_IREG_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_SENDING_MESSAGE_REQ_HIGH_PRIOR_SET_1_SHFT 0u

/* =====================================================================================

  ---HW_PTM_TIME_DELTA (0x74040000 + 3584hu)---

    rg_ptm_rx_time_delta[15..0]  - (RW) time delta for ptm packet receiving
                                     the real receiving time of ptm packet is equal sample time add or minus rg_ptm_rx_time_delta[15:1].
                                     rg_ptm_rx_time_delta[0]: 0 is minus operation; 1 is add operation.
    rg_ptm_tx_time_delta[31..16] - (RW) time delta for ptm packet sending
                                     the real sending time of ptm packet is equal sample time add or minus rg_ptm_rx_time_delta[15:1].
                                     rg_ptm_tx_time_delata[0]: 0 is minus operation; 1 is add operation.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_rg_ptm_tx_time_delta_ADDR PCIE_MAC_IREG_HW_PTM_TIME_DELTA_ADDR
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_rg_ptm_tx_time_delta_MASK 0xFFFF0000u                // rg_ptm_tx_time_delta[31..16]
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_rg_ptm_tx_time_delta_SHFT 16u
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_rg_ptm_rx_time_delta_ADDR PCIE_MAC_IREG_HW_PTM_TIME_DELTA_ADDR
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_rg_ptm_rx_time_delta_MASK 0x0000FFFFu                // rg_ptm_rx_time_delta[15..0]
#define PCIE_MAC_IREG_HW_PTM_TIME_DELTA_rg_ptm_rx_time_delta_SHFT 0u

/* =====================================================================================

  ---AXI_MST_TO_CTRL (0x74040000 + 3588hu)---

    mst_to_ctrl_read_enable[0]   - (RW) 1'b0 : enable axi master read  timeout 
                                     1'b1 : disable axi master read timeout
    mst_to_ctrl_write_enable[1]  - (RW) 1'b0 : enable axi master read  timeout 
                                     1'b1 : disable axi master read timeout
    rsv[5..2]                    - (RW)  xxx 
    mst_to_timer_setting[7..6]   - (RW) Timer unit:
                                     2'b00: Timer unit is ms, and timeout value is 64ms
                                     2'b01: Timer unit is us, and timeout value 64us
                                     2'b10: Timer unit is us, and timeout value is setting by mst_to_sw_timer_setting
                                     2'b11: Timer unit is ms, and timeout value is setting by mst_to_sw_timer_setting
    p2q_rd_timeout_cpl_type[9..8] - (RW) 2'b0: cpl type is SC
                                     2'bx1: cpl type is CA
                                     2'b10: cpl type is UR
    p2q_wr_timeout_cpl_type[11..10] - (RW) 2'b0: cpl type is SC
                                     2'bx1: cpl type is CA
                                     2'b10: cpl type is UR
    mst_to_sw_timer_setting[17..12] - (RW) Timer out value for axi master timeout:
                                     when Timer unit is us, every count is 1 us
                                     when Timer unit is ms, every count is 1 ms
    p2q_rd_unsaddr_cpl_type[19..18] - (RW) when axi4 master's response is 2'b11
                                     2'b00: cpl type is SC
                                     2'bx1: cpl type is CA
                                     2'b10: cpl type is UR
    p2q_rd_unsreq_cpl_type[21..20] - (RW) when axi4 master's response is 2'b11
                                     2'b00: cpl type is SC
                                     2'bx1: cpl type is CA
                                     2'b10: cpl type is UR
    p2q_rd_unsparam_cpl_type[23..22] - (RW) when axi4 master side unsupport parameter is 1'b1
                                     2'b00: cpl type is SC
                                     2'bx1: cpl type is CA
                                     2'b10: cpl type is UR
    p2q_rd_incrcpl_cpl_type[25..24] - (RW) when axi4 master side increase completion parameter is 1'b1
                                     2'b00: cpl type is SC
                                     2'bx1: cpl type is CA
                                     2'b10: cpl type is UR
    Reserved[31..26]             - (RW) Reserved register

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_Reserved_ADDR            PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_Reserved_MASK            0xFC000000u                // Reserved[31..26]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_Reserved_SHFT            26u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_incrcpl_cpl_type_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_incrcpl_cpl_type_MASK 0x03000000u                // p2q_rd_incrcpl_cpl_type[25..24]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_incrcpl_cpl_type_SHFT 24u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsparam_cpl_type_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsparam_cpl_type_MASK 0x00C00000u                // p2q_rd_unsparam_cpl_type[23..22]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsparam_cpl_type_SHFT 22u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsreq_cpl_type_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsreq_cpl_type_MASK 0x00300000u                // p2q_rd_unsreq_cpl_type[21..20]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsreq_cpl_type_SHFT 20u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsaddr_cpl_type_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsaddr_cpl_type_MASK 0x000C0000u                // p2q_rd_unsaddr_cpl_type[19..18]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_unsaddr_cpl_type_SHFT 18u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_sw_timer_setting_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_sw_timer_setting_MASK 0x0003F000u                // mst_to_sw_timer_setting[17..12]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_sw_timer_setting_SHFT 12u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_wr_timeout_cpl_type_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_wr_timeout_cpl_type_MASK 0x00000C00u                // p2q_wr_timeout_cpl_type[11..10]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_wr_timeout_cpl_type_SHFT 10u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_timeout_cpl_type_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_timeout_cpl_type_MASK 0x00000300u                // p2q_rd_timeout_cpl_type[9..8]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_p2q_rd_timeout_cpl_type_SHFT 8u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_timer_setting_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_timer_setting_MASK 0x000000C0u                // mst_to_timer_setting[7..6]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_timer_setting_SHFT 6u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_rsv_ADDR                 PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_rsv_MASK                 0x0000003Cu                // rsv[5..2]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_rsv_SHFT                 2u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_ctrl_write_enable_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_ctrl_write_enable_MASK 0x00000002u                // mst_to_ctrl_write_enable[1]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_ctrl_write_enable_SHFT 1u
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_ctrl_read_enable_ADDR PCIE_MAC_IREG_AXI_MST_TO_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_ctrl_read_enable_MASK 0x00000001u                // mst_to_ctrl_read_enable[0]
#define PCIE_MAC_IREG_AXI_MST_TO_CTRL_mst_to_ctrl_read_enable_SHFT 0u

/* =====================================================================================

  ---PCIE_TUNNELING_TIMING_PARAMETER (0x74040000 + 358Chu)---

    rg_u4_ufc_timer_sel[0]       - (RW) Update FC timeout value select for rx path
                                     1'b0: 30us
                                     1'b0: 60us
    rg_u4_ufc_relink_timer_sel[2..1] - (RW) Retrain link timeout value select for no update FC received
                                     2'b00: 200us
                                     2''b01: 400us
                                     2'b10: 800us
                                     2'b11: rsved
    rg_u4_rc_l1_reject_timer_sel[4..3] - (RW) L1 reject timeout value select for RC mode
                                     2'b00: 9us
                                     2''b01: 18us
                                     2'b10: 36us
                                     2'b11: 78us
    rg_u4_replay_timer_sel[7..5] - (RW) Replay timeout value select
                                     3'h0: timeout count is 4096, unit: pclk period
                                     3'h1: timeout count is 4096*2, unit: pclk period
                                     3'h2: timeout count is 4096*4, unit: pclk period
                                     3'h3: timeout count is 4096*8, unit: pclk period
                                     3'h4: timeout count is 4096*16, unit: pclk period
                                     others value is reserved.
    Reserved[31..8]              - (RW) Reserved register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_Reserved_ADDR PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_ADDR
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_Reserved_MASK 0xFFFFFF00u                // Reserved[31..8]
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_Reserved_SHFT 8u
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_replay_timer_sel_ADDR PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_ADDR
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_replay_timer_sel_MASK 0x000000E0u                // rg_u4_replay_timer_sel[7..5]
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_replay_timer_sel_SHFT 5u
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_rc_l1_reject_timer_sel_ADDR PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_ADDR
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_rc_l1_reject_timer_sel_MASK 0x00000018u                // rg_u4_rc_l1_reject_timer_sel[4..3]
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_rc_l1_reject_timer_sel_SHFT 3u
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_ufc_relink_timer_sel_ADDR PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_ADDR
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_ufc_relink_timer_sel_MASK 0x00000006u                // rg_u4_ufc_relink_timer_sel[2..1]
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_ufc_relink_timer_sel_SHFT 1u
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_ufc_timer_sel_ADDR PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_ADDR
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_ufc_timer_sel_MASK 0x00000001u                // rg_u4_ufc_timer_sel[0]
#define PCIE_MAC_IREG_PCIE_TUNNELING_TIMING_PARAMETER_rg_u4_ufc_timer_sel_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_WR_WRR_VALUE_0 (0x74040000 + 3590hu)---

    rg_p2a_ram_port_wr_wrr_value_0[31..0] - (RW) P2A Write Weighted Round Robin Value for phase 0~7
                                     For phase N, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_0_rg_p2a_ram_port_wr_wrr_value_0_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_0_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_0_rg_p2a_ram_port_wr_wrr_value_0_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_wr_wrr_value_0[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_0_rg_p2a_ram_port_wr_wrr_value_0_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_WR_WRR_VALUE_1 (0x74040000 + 3594hu)---

    rg_p2a_ram_port_wr_wrr_value_1[31..0] - (RW) P2A Write Weighted Round Robin Value for phase 8~15
                                     For phase N+8, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_1_rg_p2a_ram_port_wr_wrr_value_1_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_1_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_1_rg_p2a_ram_port_wr_wrr_value_1_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_wr_wrr_value_1[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_1_rg_p2a_ram_port_wr_wrr_value_1_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_WR_WRR_VALUE_2 (0x74040000 + 3598hu)---

    rg_p2a_ram_port_wr_wrr_value_2[31..0] - (RW) P2A Write Weighted Round Robin Value for phase 16~23
                                     For phase N+16, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_2_rg_p2a_ram_port_wr_wrr_value_2_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_2_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_2_rg_p2a_ram_port_wr_wrr_value_2_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_wr_wrr_value_2[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_2_rg_p2a_ram_port_wr_wrr_value_2_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_WR_WRR_VALUE_3 (0x74040000 + 359Chu)---

    rg_p2a_ram_port_wr_wrr_value_3[31..0] - (RW) P2A Write Weighted Round Robin Value for phase 24~31
                                     For phase N+24, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_3_rg_p2a_ram_port_wr_wrr_value_3_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_3_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_3_rg_p2a_ram_port_wr_wrr_value_3_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_wr_wrr_value_3[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_WR_WRR_VALUE_3_rg_p2a_ram_port_wr_wrr_value_3_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_WR_WRR_VALUE_0 (0x74040000 + 35A0hu)---

    rg_a2p_ram_port_wr_wrr_value_0[31..0] - (RW) A2P Write Weighted Round Robin Value for phase 0~7
                                     For phase N, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_0_rg_a2p_ram_port_wr_wrr_value_0_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_0_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_0_rg_a2p_ram_port_wr_wrr_value_0_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_wr_wrr_value_0[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_0_rg_a2p_ram_port_wr_wrr_value_0_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_WR_WRR_VALUE_1 (0x74040000 + 35A4hu)---

    rg_a2p_ram_port_wr_wrr_value_1[31..0] - (RW) A2P Write Weighted Round Robin Value for phase 8~15
                                     For phase N+8, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_1_rg_a2p_ram_port_wr_wrr_value_1_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_1_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_1_rg_a2p_ram_port_wr_wrr_value_1_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_wr_wrr_value_1[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_1_rg_a2p_ram_port_wr_wrr_value_1_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_WR_WRR_VALUE_2 (0x74040000 + 35A8hu)---

    rg_a2p_ram_port_wr_wrr_value_2[31..0] - (RW) A2P Write Weighted Round Robin Value for phase 16~23
                                     For phase N+16, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_2_rg_a2p_ram_port_wr_wrr_value_2_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_2_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_2_rg_a2p_ram_port_wr_wrr_value_2_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_wr_wrr_value_2[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_2_rg_a2p_ram_port_wr_wrr_value_2_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_WR_WRR_VALUE_3 (0x74040000 + 35AChu)---

    rg_a2p_ram_port_wr_wrr_value_3[31..0] - (RW) A2P Write Weighted Round Robin Value for phase 24~31
                                     For phase N+24, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_3_rg_a2p_ram_port_wr_wrr_value_3_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_3_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_3_rg_a2p_ram_port_wr_wrr_value_3_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_wr_wrr_value_3[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_WR_WRR_VALUE_3_rg_a2p_ram_port_wr_wrr_value_3_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_RD_WRR_VALUE_0 (0x74040000 + 35B0hu)---

    rg_p2a_ram_port_rd_wrr_value_0[31..0] - (RW) P2A Read Weighted Round Robin Value for phase 0~7
                                     For phase N, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_0_rg_p2a_ram_port_rd_wrr_value_0_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_0_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_0_rg_p2a_ram_port_rd_wrr_value_0_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_rd_wrr_value_0[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_0_rg_p2a_ram_port_rd_wrr_value_0_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_RD_WRR_VALUE_1 (0x74040000 + 35B4hu)---

    rg_p2a_ram_port_rd_wrr_value_1[31..0] - (RW) P2A Read Weighted Round Robin Value for phase 8~15
                                     For phase N+8, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_1_rg_p2a_ram_port_rd_wrr_value_1_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_1_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_1_rg_p2a_ram_port_rd_wrr_value_1_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_rd_wrr_value_1[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_1_rg_p2a_ram_port_rd_wrr_value_1_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_RD_WRR_VALUE_2 (0x74040000 + 35B8hu)---

    rg_p2a_ram_port_rd_wrr_value_2[31..0] - (RW) P2A Read Weighted Round Robin Value for phase 16~23
                                     For phase N+16, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_2_rg_p2a_ram_port_rd_wrr_value_2_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_2_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_2_rg_p2a_ram_port_rd_wrr_value_2_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_rd_wrr_value_2[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_2_rg_p2a_ram_port_rd_wrr_value_2_SHFT 0u

/* =====================================================================================

  ---P2A_RAM_PORT_RD_WRR_VALUE_3 (0x74040000 + 35BChu)---

    rg_p2a_ram_port_rd_wrr_value_3[31..0] - (RW) P2A Read Weighted Round Robin Value for phase 24~31
                                     For phase N+24, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA0
                                     6: DMA2
                                     7: DMA4
                                     8: DMA6

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_3_rg_p2a_ram_port_rd_wrr_value_3_ADDR PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_3_ADDR
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_3_rg_p2a_ram_port_rd_wrr_value_3_MASK 0xFFFFFFFFu                // rg_p2a_ram_port_rd_wrr_value_3[31..0]
#define PCIE_MAC_IREG_P2A_RAM_PORT_RD_WRR_VALUE_3_rg_p2a_ram_port_rd_wrr_value_3_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_RD_WRR_VALUE_0 (0x74040000 + 35C0hu)---

    rg_a2p_ram_port_rd_wrr_value_0[31..0] - (RW) A2P Read Weighted Round Robin Value for phase 0~7
                                     For phase N, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_0_rg_a2p_ram_port_rd_wrr_value_0_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_0_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_0_rg_a2p_ram_port_rd_wrr_value_0_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_rd_wrr_value_0[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_0_rg_a2p_ram_port_rd_wrr_value_0_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_RD_WRR_VALUE_1 (0x74040000 + 35C4hu)---

    rg_a2p_ram_port_rd_wrr_value_1[31..0] - (RW) A2P Read Weighted Round Robin Value for phase 8~15
                                     For phase N+8, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_1_rg_a2p_ram_port_rd_wrr_value_1_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_1_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_1_rg_a2p_ram_port_rd_wrr_value_1_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_rd_wrr_value_1[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_1_rg_a2p_ram_port_rd_wrr_value_1_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_RD_WRR_VALUE_2 (0x74040000 + 35C8hu)---

    rg_a2p_ram_port_rd_wrr_value_2[31..0] - (RW) A2P Read Weighted Round Robin Value for phase 16~23
                                     For phase N+16, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_2_rg_a2p_ram_port_rd_wrr_value_2_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_2_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_2_rg_a2p_ram_port_rd_wrr_value_2_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_rd_wrr_value_2[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_2_rg_a2p_ram_port_rd_wrr_value_2_SHFT 0u

/* =====================================================================================

  ---A2P_RAM_PORT_RD_WRR_VALUE_3 (0x74040000 + 35CChu)---

    rg_a2p_ram_port_wr_wrr_value_3[31..0] - (RW) A2P Read Weighted Round Robin Value for phase 24~31
                                     For phase N+24, the corresponding bit number is 4*(N+1)-1: 4N
                                     Note: valid value for phase value: 
                                     0: PCIe
                                     1: AXI Slave0
                                     2: AXI Slave1
                                     3: AXI Slave2
                                     4: AXI Slave3
                                     5: DMA1
                                     6: DMA3
                                     7: DMA5
                                     8: DMA7

 =====================================================================================*/
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_3_rg_a2p_ram_port_wr_wrr_value_3_ADDR PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_3_ADDR
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_3_rg_a2p_ram_port_wr_wrr_value_3_MASK 0xFFFFFFFFu                // rg_a2p_ram_port_wr_wrr_value_3[31..0]
#define PCIE_MAC_IREG_A2P_RAM_PORT_RD_WRR_VALUE_3_rg_a2p_ram_port_wr_wrr_value_3_SHFT 0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_0 (0x74040000 + 35E0hu)---

    DESC_STATUS_NUM[3..0]        - (RW) Incremented once a descriptor is processed
                                     If there are multiple descriptors, software could distinguish the order
    DESC_PRC_STATUS[7..4]        - (RW) Define the processed status
                                     [4]: descriptor has been processed
                                     [5]: error occurs
                                     [6]: source reports an EOP condition (AXI4 stream)
                                     [7]: reserved
    DESC_PRC_PAGE_SIZE[31..8]    - (RW) The page size that has been processed

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_PRC_PAGE_SIZE_ADDR PCIE_MAC_IREG_DMA_SOURCE_DESC_0_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_PRC_PAGE_SIZE_MASK 0xFFFFFF00u                // DESC_PRC_PAGE_SIZE[31..8]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_PRC_PAGE_SIZE_SHFT 8u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_PRC_STATUS_ADDR   PCIE_MAC_IREG_DMA_SOURCE_DESC_0_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_PRC_STATUS_MASK   0x000000F0u                // DESC_PRC_STATUS[7..4]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_PRC_STATUS_SHFT   4u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_STATUS_NUM_ADDR   PCIE_MAC_IREG_DMA_SOURCE_DESC_0_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_STATUS_NUM_MASK   0x0000000Fu                // DESC_STATUS_NUM[3..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_0_DESC_STATUS_NUM_SHFT   0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_1 (0x74040000 + 35E4hu)---

    DESC_STATUS_IRQ[0]           - (RW) Enable DMA engine to update the descriptor processing status when set to 1
    DESC_TYPE[3..1]              - (RW) Reserved to 3’b000
                                     No usage in DMA engine currently
    DESC_IRQ[7..4]               - (RW) Define when an interrupt should be issued
                                     [4]: when this descriptor has been processed
                                     [5]: if error occurs (No usage in DMA engine currently)
                                     [6]: if source reports an EOP condition (AXI4 stream)
                                     [7]: reserved
    DESC_PAGE_SIZE[31..8]        - (RW) Page size in bytes, 1Byte~16MB
                                     24’b0 means 16MB

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_PAGE_SIZE_ADDR    PCIE_MAC_IREG_DMA_SOURCE_DESC_1_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_PAGE_SIZE_MASK    0xFFFFFF00u                // DESC_PAGE_SIZE[31..8]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_PAGE_SIZE_SHFT    8u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_IRQ_ADDR          PCIE_MAC_IREG_DMA_SOURCE_DESC_1_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_IRQ_MASK          0x000000F0u                // DESC_IRQ[7..4]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_IRQ_SHFT          4u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_TYPE_ADDR         PCIE_MAC_IREG_DMA_SOURCE_DESC_1_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_TYPE_MASK         0x0000000Eu                // DESC_TYPE[3..1]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_TYPE_SHFT         1u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_STATUS_IRQ_ADDR   PCIE_MAC_IREG_DMA_SOURCE_DESC_1_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_STATUS_IRQ_MASK   0x00000001u                // DESC_STATUS_IRQ[0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_1_DESC_STATUS_IRQ_SHFT   0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_2 (0x74040000 + 35E8hu)---

    DESC_SE_COND[3..0]           - (RW) Define the start and end condition for DMA processing
                                     [0]: end DMA after this descriptor has been processed
                                     	(this bit is also interpret as EOC, End Of Chain)
                                     [1]: abort processing if error occurs (No usage in DMA engine currently)
                                     [2]: generate an EOP at the end of processing, or stop processing if EOP condition (AXI4 stream)
                                     [3]: start processing if receive SOP (AXI4 stream)
    DESC_NEXT_READY[4]           - (RW) Indicate the next descriptor is ready when set to 1
    DESC_NEXT_ADDR_L[31..5]      - (RW) Next descriptor address

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_NEXT_ADDR_L_ADDR  PCIE_MAC_IREG_DMA_SOURCE_DESC_2_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_NEXT_ADDR_L_MASK  0xFFFFFFE0u                // DESC_NEXT_ADDR_L[31..5]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_NEXT_ADDR_L_SHFT  5u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_NEXT_READY_ADDR   PCIE_MAC_IREG_DMA_SOURCE_DESC_2_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_NEXT_READY_MASK   0x00000010u                // DESC_NEXT_READY[4]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_NEXT_READY_SHFT   4u
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_SE_COND_ADDR      PCIE_MAC_IREG_DMA_SOURCE_DESC_2_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_SE_COND_MASK      0x0000000Fu                // DESC_SE_COND[3..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_2_DESC_SE_COND_SHFT      0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_3 (0x74040000 + 35EChu)---

    DESC_NEXT_ADDR_H[31..0]      - (RW) Next descriptor address

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_3_DESC_NEXT_ADDR_H_ADDR  PCIE_MAC_IREG_DMA_SOURCE_DESC_3_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_3_DESC_NEXT_ADDR_H_MASK  0xFFFFFFFFu                // DESC_NEXT_ADDR_H[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_3_DESC_NEXT_ADDR_H_SHFT  0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_4 (0x74040000 + 35F0hu)---

    DESC_SRC_ADDR_L[31..0]       - (RW)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_4_DESC_SRC_ADDR_L_ADDR   PCIE_MAC_IREG_DMA_SOURCE_DESC_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_4_DESC_SRC_ADDR_L_MASK   0xFFFFFFFFu                // DESC_SRC_ADDR_L[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_4_DESC_SRC_ADDR_L_SHFT   0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_5 (0x74040000 + 35F4hu)---

    DESC_SRC_ADDR_H[31..0]       - (RW) Source address
                                     Useless when SG_TYPE10
                                     When SG_TYPE10, the source address comes from DMA_SRCADDR[63:0] (ireg 0x408 ~ 0x40F) as direct mode

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_5_DESC_SRC_ADDR_H_ADDR   PCIE_MAC_IREG_DMA_SOURCE_DESC_5_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_5_DESC_SRC_ADDR_H_MASK   0xFFFFFFFFu                // DESC_SRC_ADDR_H[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_5_DESC_SRC_ADDR_H_SHFT   0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_6 (0x74040000 + 35F8hu)---

    DESC_DEST_ADDR_L[31..0]      - (RW)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_6_DESC_DEST_ADDR_L_ADDR  PCIE_MAC_IREG_DMA_SOURCE_DESC_6_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_6_DESC_DEST_ADDR_L_MASK  0xFFFFFFFFu                // DESC_DEST_ADDR_L[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_6_DESC_DEST_ADDR_L_SHFT  0u

/* =====================================================================================

  ---DMA_SOURCE_DESC_7 (0x74040000 + 35FChu)---

    DESC_DEST_ADDR_H[31..0]      - (RW) Destination address
                                     Useless when SG_TYPE01
                                     When SG_TYPE01, the destination address comes from DMA_DESTADDR[63:0] (ireg 0x410 ~ 0x417) as direct mode

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_7_DESC_DEST_ADDR_H_ADDR  PCIE_MAC_IREG_DMA_SOURCE_DESC_7_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_7_DESC_DEST_ADDR_H_MASK  0xFFFFFFFFu                // DESC_DEST_ADDR_H[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DESC_7_DESC_DEST_ADDR_H_SHFT  0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_0 (0x74040000 + 3600hu)---

    TIMESTAMP_H[31..0]           - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_0_TIMESTAMP_H_ADDR       PCIE_MAC_IREG_DMA_SOURCE_DATA_0_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_0_TIMESTAMP_H_MASK       0xFFFFFFFFu                // TIMESTAMP_H[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_0_TIMESTAMP_H_SHFT       0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_1 (0x74040000 + 3604hu)---

    TIMESTAMP_L[31..0]           - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_1_TIMESTAMP_L_ADDR       PCIE_MAC_IREG_DMA_SOURCE_DATA_1_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_1_TIMESTAMP_L_MASK       0xFFFFFFFFu                // TIMESTAMP_L[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_1_TIMESTAMP_L_SHFT       0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_2 (0x74040000 + 3608hu)---

    ADDR_H[31..0]                - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_2_ADDR_H_ADDR            PCIE_MAC_IREG_DMA_SOURCE_DATA_2_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_2_ADDR_H_MASK            0xFFFFFFFFu                // ADDR_H[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_2_ADDR_H_SHFT            0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_3 (0x74040000 + 360Chu)---

    RSV[1..0]                    - (RW) Record the first transaction of exit L1.2
    ADDR_L[31..2]                - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_ADDR_L_ADDR            PCIE_MAC_IREG_DMA_SOURCE_DATA_3_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_ADDR_L_MASK            0xFFFFFFFCu                // ADDR_L[31..2]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_ADDR_L_SHFT            2u
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_RSV_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_3_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_RSV_MASK               0x00000003u                // RSV[1..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_3_RSV_SHFT               0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_4 (0x74040000 + 3610hu)---

    UNIT[7..0]                   - (RW) Record the first transaction of exit L1.2
    TAG[15..8]                   - (RW) Record the first transaction of exit L1.2
    DIR[16]                      - (RW) Record the first transaction of exit L1.2
    LENGTH[23..17]               - (RW) Record the first transaction of exit L1.2
    TYPE[28..24]                 - (RW) Record the first transaction of exit L1.2
    FMT[31..29]                  - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_FMT_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_FMT_MASK               0xE0000000u                // FMT[31..29]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_FMT_SHFT               29u
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_TYPE_ADDR              PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_TYPE_MASK              0x1F000000u                // TYPE[28..24]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_TYPE_SHFT              24u
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_LENGTH_ADDR            PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_LENGTH_MASK            0x00FE0000u                // LENGTH[23..17]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_LENGTH_SHFT            17u
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_DIR_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_DIR_MASK               0x00010000u                // DIR[16]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_DIR_SHFT               16u
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_TAG_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_TAG_MASK               0x0000FF00u                // TAG[15..8]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_TAG_SHFT               8u
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_UNIT_ADDR              PCIE_MAC_IREG_DMA_SOURCE_DATA_4_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_UNIT_MASK              0x000000FFu                // UNIT[7..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_4_UNIT_SHFT              0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_5 (0x74040000 + 3614hu)---

    RSV[31..0]                   - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_5_RSV_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_5_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_5_RSV_MASK               0xFFFFFFFFu                // RSV[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_5_RSV_SHFT               0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_6 (0x74040000 + 3618hu)---

    RSV[31..0]                   - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_6_RSV_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_6_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_6_RSV_MASK               0xFFFFFFFFu                // RSV[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_6_RSV_SHFT               0u

/* =====================================================================================

  ---DMA_SOURCE_DATA_7 (0x74040000 + 361Chu)---

    RSV[31..0]                   - (RW) Record the first transaction of exit L1.2

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_7_RSV_ADDR               PCIE_MAC_IREG_DMA_SOURCE_DATA_7_ADDR
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_7_RSV_MASK               0xFFFFFFFFu                // RSV[31..0]
#define PCIE_MAC_IREG_DMA_SOURCE_DATA_7_RSV_SHFT               0u

/* =====================================================================================

  ---POSTED_TX_CREDIT_INFO (0x74040000 + 3620hu)---

    ph_remain_cred_tx[11..0]     - (RO) Records the current number of header PCIe flow control credits available for Posted transactions in PCIe Tx link for VC0,Unit : 4DW
    pd_remain_cred_tx[27..12]    - (RO) Records the current number of data PCIe flow control credits available for Posted transactions in PCIe Tx link for VC0,Unit : 4DW
    ph_cred_scale_tx[29..28]     - (RO) Records the Posted header credit scale in Pcie Tx link
    pd_cred_scale_tx[31..30]     - (RO) Records the Posted data credit scale in Pcie Tx link

 =====================================================================================*/
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_pd_cred_scale_tx_ADDR PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_pd_cred_scale_tx_MASK 0xC0000000u                // pd_cred_scale_tx[31..30]
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_pd_cred_scale_tx_SHFT 30u
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ph_cred_scale_tx_ADDR PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ph_cred_scale_tx_MASK 0x30000000u                // ph_cred_scale_tx[29..28]
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ph_cred_scale_tx_SHFT 28u
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_pd_remain_cred_tx_ADDR PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_pd_remain_cred_tx_MASK 0x0FFFF000u                // pd_remain_cred_tx[27..12]
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_pd_remain_cred_tx_SHFT 12u
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ph_remain_cred_tx_ADDR PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ph_remain_cred_tx_MASK 0x00000FFFu                // ph_remain_cred_tx[11..0]
#define PCIE_MAC_IREG_POSTED_TX_CREDIT_INFO_ph_remain_cred_tx_SHFT 0u

/* =====================================================================================

  ---NON_POSTED_TX_CREDIT_INFO (0x74040000 + 3624hu)---

    nph_remain_cred_tx[11..0]    - (RO) Records the current number of header PCIe flow control credits available for Non-Posted transactions in PCIe Tx link for VC0,Unit : 4DW
    npd_remain_cred_tx[27..12]   - (RO) Records the current number of data PCIe flow control credits available for Non-Posted transactions in PCIe Tx link for VC0,Unit : 4DW
    nph_cred_scale_tx[29..28]    - (RO) Records the Non-Posted header credit scale in Pcie Tx link
    npd_cred_scale_tx[31..30]    - (RO) Records the Non-Posted data credit scale in Pcie Tx link

 =====================================================================================*/
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_npd_cred_scale_tx_ADDR PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_npd_cred_scale_tx_MASK 0xC0000000u                // npd_cred_scale_tx[31..30]
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_npd_cred_scale_tx_SHFT 30u
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_nph_cred_scale_tx_ADDR PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_nph_cred_scale_tx_MASK 0x30000000u                // nph_cred_scale_tx[29..28]
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_nph_cred_scale_tx_SHFT 28u
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_npd_remain_cred_tx_ADDR PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_npd_remain_cred_tx_MASK 0x0FFFF000u                // npd_remain_cred_tx[27..12]
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_npd_remain_cred_tx_SHFT 12u
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_nph_remain_cred_tx_ADDR PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_nph_remain_cred_tx_MASK 0x00000FFFu                // nph_remain_cred_tx[11..0]
#define PCIE_MAC_IREG_NON_POSTED_TX_CREDIT_INFO_nph_remain_cred_tx_SHFT 0u

/* =====================================================================================

  ---CPL_TX_CREDIT_INFO (0x74040000 + 3628hu)---

    cplh_remain_cred_tx[11..0]   - (RO) Records the current number of header PCIe flow control credits available for Completion transactions in PCIe Tx link for VC0,Unit : 4DW
    cpld_remain_cred_tx[27..12]  - (RO) Records the current number of data PCIe flow control credits available for Completion transactions in PCIe Tx link for VC0,Unit : 4DW
    cplh_cred_scale_tx[29..28]   - (RO) Records the Completion header credit scale in Pcie Tx link
    cpld_cred_scale_tx[31..30]   - (RO) Records the Completion data credit scale in Pcie Tx link

 =====================================================================================*/
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cpld_cred_scale_tx_ADDR PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cpld_cred_scale_tx_MASK 0xC0000000u                // cpld_cred_scale_tx[31..30]
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cpld_cred_scale_tx_SHFT 30u
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cplh_cred_scale_tx_ADDR PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cplh_cred_scale_tx_MASK 0x30000000u                // cplh_cred_scale_tx[29..28]
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cplh_cred_scale_tx_SHFT 28u
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cpld_remain_cred_tx_ADDR PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cpld_remain_cred_tx_MASK 0x0FFFF000u                // cpld_remain_cred_tx[27..12]
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cpld_remain_cred_tx_SHFT 12u
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cplh_remain_cred_tx_ADDR PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cplh_remain_cred_tx_MASK 0x00000FFFu                // cplh_remain_cred_tx[11..0]
#define PCIE_MAC_IREG_CPL_TX_CREDIT_INFO_cplh_remain_cred_tx_SHFT 0u

/* =====================================================================================

  ---POSTED_RX_CREDIT_INFO (0x74040000 + 362Chu)---

    ph_remain_cred_rx[11..0]     - (RO) Records the CR(Calloc-Clast, the credits which not be reported by upfc) of header PCIe flow control for Posted transactions in PCIe Rx link for VC0,Unit : 4DW
                                     Note: if you want to calculate the the remain credits of it, then read the initial FC value from 0x90[7:0] and minus the CR.
    pd_remain_cred_rx[27..12]    - (RO) Records the CR(Calloc-Clast, the credits which not be reported by upfc) of data PCIe flow control for Posted transactions in PCIe Rx link for VC0,Unit : 4DW
                                     Note: if you want to calculate the the remain credits of it, then read the initial FC value from 0x90[19:8] and minus the CR.
    Reserved[31..28]             - (RO)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_Reserved_ADDR      PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_Reserved_MASK      0xF0000000u                // Reserved[31..28]
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_Reserved_SHFT      28u
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_pd_remain_cred_rx_ADDR PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_pd_remain_cred_rx_MASK 0x0FFFF000u                // pd_remain_cred_rx[27..12]
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_pd_remain_cred_rx_SHFT 12u
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ph_remain_cred_rx_ADDR PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ph_remain_cred_rx_MASK 0x00000FFFu                // ph_remain_cred_rx[11..0]
#define PCIE_MAC_IREG_POSTED_RX_CREDIT_INFO_ph_remain_cred_rx_SHFT 0u

/* =====================================================================================

  ---NON_POSTED_RX_CREDIT_INFO (0x74040000 + 3630hu)---

    nph_remain_cred_rx[11..0]    - (RO) Records the CR(Calloc-Clast, the credits which not be reported by upfc) of header PCIe flow control for Non-Posted transactions in PCIe Rx link for VC0,Unit : 4DW
                                     Note: if you want to calculate the the remain credits of it, then read the initial FC value from 0x90[27:20] and minus the CR.
    npd_remain_cred_rx[27..12]   - (RO) Records the CR(Calloc-Clast, the credits which not be reported by upfc) of data PCIe flow control for Non-Posted transactions in PCIe Rx link for VC0,Unit : 4DW
                                     Note: if you want to calculate the the remain credits of it, then read the initial FC value from {0x94[3:0],0x90[31:28]} and minus the CR.
    Reserved[31..28]             - (RO)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_Reserved_ADDR  PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_Reserved_MASK  0xF0000000u                // Reserved[31..28]
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_Reserved_SHFT  28u
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_npd_remain_cred_rx_ADDR PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_npd_remain_cred_rx_MASK 0x0FFFF000u                // npd_remain_cred_rx[27..12]
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_npd_remain_cred_rx_SHFT 12u
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_nph_remain_cred_rx_ADDR PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_nph_remain_cred_rx_MASK 0x00000FFFu                // nph_remain_cred_rx[11..0]
#define PCIE_MAC_IREG_NON_POSTED_RX_CREDIT_INFO_nph_remain_cred_rx_SHFT 0u

/* =====================================================================================

  ---CPL_RX_CREDIT_INFO (0x74040000 + 3634hu)---

    cplh_remain_cred_rx[11..0]   - (RO) Records the CR(Calloc-Clast, the credits which not be reported by upfc) of header PCIe flow control for Completion transactions in PCIe Rx link for VC0,Unit : 4DW
                                     Note: if you want to calculate the the remain credits of it, then read the initial FC value from 0x94[11:4] and minus the CR.
    cpld_remain_cred_rx[27..12]  - (RO) Records the CR(Calloc-Clast, the credits which not be reported by upfc) of data PCIe flow control for Completion transactions in PCIe Rx link for VC0,Unit : 4DW
                                     Note: if you want to calculate the the remain credits of it, then read the initial FC value from 0x94[23:12] and minus the CR.
    Reserved[31..28]             - (RO)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_Reserved_ADDR         PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_Reserved_MASK         0xF0000000u                // Reserved[31..28]
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_Reserved_SHFT         28u
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_cpld_remain_cred_rx_ADDR PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_cpld_remain_cred_rx_MASK 0x0FFFF000u                // cpld_remain_cred_rx[27..12]
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_cpld_remain_cred_rx_SHFT 12u
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_cplh_remain_cred_rx_ADDR PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_ADDR
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_cplh_remain_cred_rx_MASK 0x00000FFFu                // cplh_remain_cred_rx[11..0]
#define PCIE_MAC_IREG_CPL_RX_CREDIT_INFO_cplh_remain_cred_rx_SHFT 0u

/* =====================================================================================

  ---FC_TIMEOUT_COUNTER (0x74040000 + 3638hu)---

    fc_timeout_cnt[7..0]         - (W1C) The counter indicates the number of fc timeout(256us) for Rx Link.
                                     Write one to bit[0] will clear the counter.
    Reserved[31..8]              - (RO)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_Reserved_ADDR         PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_ADDR
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_Reserved_MASK         0xFFFFFF00u                // Reserved[31..8]
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_Reserved_SHFT         8u
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_fc_timeout_cnt_ADDR   PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_ADDR
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_fc_timeout_cnt_MASK   0x000000FFu                // fc_timeout_cnt[7..0]
#define PCIE_MAC_IREG_FC_TIMEOUT_COUNTER_fc_timeout_cnt_SHFT   0u

/* =====================================================================================

  ---PWR_PROFILE_CNT_SWITCH_SETTING_MSB (0x74040000 + 3800hu)---

    pwr_profile_cnt_switch_setting_msb[31..0] - (RW) Power profile counter switch setting 64bits mode Msb.
                                     Decide each power profile time interval. (Unit: reference clock period. Usually connect to 26MHz clock)
                                     Power profile time interval equal to pwr_profile_cnt_switch_setting+1.
                                     When 26MHz counter reach this setting. Hardware will assert power_profile_counter_overflow interrupt and update each state's entry and state counts.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_MSB_pwr_profile_cnt_switch_setting_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_MSB_pwr_profile_cnt_switch_setting_msb_MASK 0xFFFFFFFFu                // pwr_profile_cnt_switch_setting_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CNT_SWITCH_SETTING_MSB_pwr_profile_cnt_switch_setting_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0_STATE_CNT_MSB (0x74040000 + 3804hu)---

    pwr_l0_state_cnt_msb[31..0]  - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_MSB_pwr_l0_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_MSB_pwr_l0_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l0_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0_STATE_CNT_MSB_pwr_l0_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0S_STATE_CNT_MSB (0x74040000 + 3808hu)---

    pwr_l0s_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L0s state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_MSB_pwr_l0s_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_MSB_pwr_l0s_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l0s_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_STATE_CNT_MSB_pwr_l0s_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_STATE_CNT_MSB (0x74040000 + 380Chu)---

    pwr_l1p0_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L1.0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_MSB_pwr_l1p0_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_MSB_pwr_l1p0_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p0_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_STATE_CNT_MSB_pwr_l1p0_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_STATE_CNT_MSB (0x74040000 + 3810hu)---

    pwr_l1p1_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L1.1 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_MSB_pwr_l1p1_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_MSB_pwr_l1p1_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p1_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_STATE_CNT_MSB_pwr_l1p1_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_STATE_CNT_MSB (0x74040000 + 3814hu)---

    pwr_l1p2_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L1.2 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_MSB_pwr_l1p2_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_MSB_pwr_l1p2_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p2_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_STATE_CNT_MSB_pwr_l1p2_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L2_STATE_CNT_MSB (0x74040000 + 3818hu)---

    pwr_l2_state_cnt_msb[31..0]  - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in L2 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_MSB_pwr_l2_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_MSB_pwr_l2_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l2_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L2_STATE_CNT_MSB_pwr_l2_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_ASSERT_CNT_LSB (0x74040000 + 381Chu)---

    pwr_clkreq_assert_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the duration CLKREQ# asserted by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_LSB_pwr_clkreq_assert_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_LSB_pwr_clkreq_assert_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_clkreq_assert_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_LSB_pwr_clkreq_assert_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_ASSERT_CNT_MSB (0x74040000 + 3820hu)---

    pwr_clkreq_assert_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the duration CLKREQ# asserted by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_MSB_pwr_clkreq_assert_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_MSB_pwr_clkreq_assert_cnt_msb_MASK 0xFFFFFFFFu                // pwr_clkreq_assert_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_CNT_MSB_pwr_clkreq_assert_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_LSB (0x74040000 + 3824hu)---

    pwr_clkreq_assert_device_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the duration CLKREQ# asserted by device by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_LSB_pwr_clkreq_assert_device_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_LSB_pwr_clkreq_assert_device_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_clkreq_assert_device_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_LSB_pwr_clkreq_assert_device_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_MSB (0x74040000 + 3828hu)---

    pwr_clkreq_assert_device_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the duration CLKREQ# asserted by device by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_MSB_pwr_clkreq_assert_device_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_MSB_pwr_clkreq_assert_device_cnt_msb_MASK 0xFFFFFFFFu                // pwr_clkreq_assert_device_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_ASSERT_DEVICE_CNT_MSB_pwr_clkreq_assert_device_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_0 (0x74040000 + 382Chu)---

    pwr_func_d0_state_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_0_pwr_func_d0_state_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_0_pwr_func_d0_state_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_func_d0_state_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_0_pwr_func_d0_state_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_0 (0x74040000 + 3830hu)---

    pwr_func_d0_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_0_pwr_func_d0_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_0_pwr_func_d0_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_func_d0_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_0_pwr_func_d0_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_0 (0x74040000 + 3834hu)---

    pwr_func_d3_state_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D3 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_0_pwr_func_d3_state_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_0_pwr_func_d3_state_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_func_d3_state_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_0_pwr_func_d3_state_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_0 (0x74040000 + 3838hu)---

    pwr_func_d3_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D3 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_0_pwr_func_d3_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_0_pwr_func_d3_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_func_d3_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_0_pwr_func_d3_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0_EXIT_CNT_LSB (0x74040000 + 383Chu)---

    pwr_l0_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L0 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_LSB_pwr_l0_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_LSB_pwr_l0_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l0_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_LSB_pwr_l0_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0_EXIT_CNT_MSB (0x74040000 + 3840hu)---

    pwr_l0_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L0 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_MSB_pwr_l0_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_MSB_pwr_l0_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l0_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0_EXIT_CNT_MSB_pwr_l0_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0S_EXIT_CNT_LSB (0x74040000 + 3844hu)---

    pwr_l0s_exit_cnt_lsb[31..0]  - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L0s state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_LSB_pwr_l0s_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_LSB_pwr_l0s_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l0s_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_LSB_pwr_l0s_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L0S_EXIT_CNT_MSB (0x74040000 + 3848hu)---

    pwr_l0s_exit_cnt_msb[31..0]  - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L0s state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_MSB_pwr_l0s_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_MSB_pwr_l0s_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l0s_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L0S_EXIT_CNT_MSB_pwr_l0s_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_CNT_LSB (0x74040000 + 384Chu)---

    pwr_l1p0_exit_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_LSB_pwr_l1p0_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_LSB_pwr_l1p0_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_LSB_pwr_l1p0_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_CNT_MSB (0x74040000 + 3850hu)---

    pwr_l1p0_exit_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_MSB_pwr_l1p0_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_MSB_pwr_l1p0_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_CNT_MSB_pwr_l1p0_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_CNT_LSB (0x74040000 + 3854hu)---

    pwr_l1p1_exit_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_LSB_pwr_l1p1_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_LSB_pwr_l1p1_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_LSB_pwr_l1p1_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_CNT_MSB (0x74040000 + 3858hu)---

    pwr_l1p1_exit_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_MSB_pwr_l1p1_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_MSB_pwr_l1p1_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_CNT_MSB_pwr_l1p1_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_CNT_LSB (0x74040000 + 385Chu)---

    pwr_l1p2_exit_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_LSB_pwr_l1p2_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_LSB_pwr_l1p2_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_LSB_pwr_l1p2_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_CNT_MSB (0x74040000 + 3860hu)---

    pwr_l1p2_exit_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_MSB_pwr_l1p2_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_MSB_pwr_l1p2_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_CNT_MSB_pwr_l1p2_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L2_EXIT_CNT_LSB (0x74040000 + 3864hu)---

    pwr_l2_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L2 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_LSB_pwr_l2_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_LSB_pwr_l2_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l2_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_LSB_pwr_l2_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L2_EXIT_CNT_MSB (0x74040000 + 3868hu)---

    pwr_l2_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L2 state exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_MSB_pwr_l2_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_MSB_pwr_l2_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l2_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L2_EXIT_CNT_MSB_pwr_l2_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_EXIT_CNT_LSB (0x74040000 + 386Chu)---

    pwr_clkreq_exit_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  clkreq assert times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_LSB_pwr_clkreq_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_LSB_pwr_clkreq_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_clkreq_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_LSB_pwr_clkreq_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_EXIT_CNT_MSB (0x74040000 + 3870hu)---

    pwr_clkreq_exit_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  clkreq assert times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_MSB_pwr_clkreq_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_MSB_pwr_clkreq_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_clkreq_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_CNT_MSB_pwr_clkreq_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_LSB (0x74040000 + 3874hu)---

    pwr_clkreq_exit_device_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  clkreq assert by device times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_LSB_pwr_clkreq_exit_device_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_LSB_pwr_clkreq_exit_device_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_clkreq_exit_device_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_LSB_pwr_clkreq_exit_device_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_MSB (0x74040000 + 3878hu)---

    pwr_clkreq_exit_device_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  clkreq assert by device times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_MSB_pwr_clkreq_exit_device_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_MSB_pwr_clkreq_exit_device_cnt_msb_MASK 0xFFFFFFFFu                // pwr_clkreq_exit_device_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_CLKREQ_EXIT_DEVICE_CNT_MSB_pwr_clkreq_exit_device_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_0 (0x74040000 + 387Chu)---

    pwr_l1p0_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p0_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p0_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p0_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_0 (0x74040000 + 3880hu)---

    pwr_l1p0_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p0_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p0_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p0_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_0 (0x74040000 + 3884hu)---

    pwr_l1p1_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p1_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p1_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p1_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_0 (0x74040000 + 3888hu)---

    pwr_l1p1_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p1_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p1_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p1_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_0 (0x74040000 + 388Chu)---

    pwr_l1p2_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p2_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p2_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_0_pwr_l1p2_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_0 (0x74040000 + 3890hu)---

    pwr_l1p2_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p2_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p2_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_0_pwr_l1p2_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D0_EXIT_CNT_LSB_0 (0x74040000 + 3894hu)---

    pwr_d0_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D0 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_0_pwr_d0_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_0_pwr_d0_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_d0_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_0_pwr_d0_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D0_EXIT_CNT_MSB_0 (0x74040000 + 3898hu)---

    pwr_d0_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D0 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_0_pwr_d0_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_0_pwr_d0_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_d0_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_0_pwr_d0_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D3_EXIT_CNT_LSB_0 (0x74040000 + 389Chu)---

    pwr_d3_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D3 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_0_pwr_d3_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_0_pwr_d3_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_d3_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_0_pwr_d3_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D3_EXIT_CNT_MSB_0 (0x74040000 + 38A0hu)---

    pwr_d3_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D3 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_0_pwr_d3_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_0_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_0_pwr_d3_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_d3_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_0_pwr_d3_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_TLP_TX_CNT_LSB (0x74040000 + 38A4hu)---

    pwr_tlp_tx_cnt_lsb[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  TLP transmitted time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_LSB_pwr_tlp_tx_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_LSB_pwr_tlp_tx_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_tlp_tx_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_LSB_pwr_tlp_tx_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_TLP_TX_CNT_MSB (0x74040000 + 38A8hu)---

    pwr_tlp_tx_cnt_msb[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  TLP transmitted time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_MSB_pwr_tlp_tx_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_MSB_pwr_tlp_tx_cnt_msb_MASK 0xFFFFFFFFu                // pwr_tlp_tx_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_TX_CNT_MSB_pwr_tlp_tx_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_DLLP_TX_CNT_LSB (0x74040000 + 38AChu)---

    pwr_dllp_tx_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  DLLP transmitted time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_LSB_pwr_dllp_tx_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_LSB_pwr_dllp_tx_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_dllp_tx_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_LSB_pwr_dllp_tx_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_DLLP_TX_CNT_MSB (0x74040000 + 38B0hu)---

    pwr_dllp_tx_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  DLLP transmitted time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_MSB_pwr_dllp_tx_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_MSB_pwr_dllp_tx_cnt_msb_MASK 0xFFFFFFFFu                // pwr_dllp_tx_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_TX_CNT_MSB_pwr_dllp_tx_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_TLP_RX_CNT_LSB (0x74040000 + 38B4hu)---

    pwr_tlp_rx_cnt_lsb[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  TLP received time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_LSB_pwr_tlp_rx_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_LSB_pwr_tlp_rx_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_tlp_rx_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_LSB_pwr_tlp_rx_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_TLP_RX_CNT_MSB (0x74040000 + 38B8hu)---

    pwr_tlp_rx_cnt_msb[31..0]    - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  TLP received time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_MSB_pwr_tlp_rx_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_MSB_pwr_tlp_rx_cnt_msb_MASK 0xFFFFFFFFu                // pwr_tlp_rx_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_TLP_RX_CNT_MSB_pwr_tlp_rx_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_DLLP_RX_CNT_LSB (0x74040000 + 38BChu)---

    pwr_dllp_rx_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  DLLP received time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_LSB_pwr_dllp_rx_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_LSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_LSB_pwr_dllp_rx_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_dllp_rx_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_LSB_pwr_dllp_rx_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_DLLP_RX_CNT_MSB (0x74040000 + 38C0hu)---

    pwr_dllp_rx_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  DLLP received time count by pl_pclk.
                                     wait 10us before read this register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_MSB_pwr_dllp_rx_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_MSB_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_MSB_pwr_dllp_rx_cnt_msb_MASK 0xFFFFFFFFu                // pwr_dllp_rx_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_DLLP_RX_CNT_MSB_pwr_dllp_rx_cnt_msb_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_0 (0x74040000 + 38C4hu)---

    RESERVED_FOR_QINGAO_0[31..0] - (RO) RESERVED_FOR_QINGAO_0

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_0_RESERVED_FOR_QINGAO_0_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_0_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_0_RESERVED_FOR_QINGAO_0_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_0[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_0_RESERVED_FOR_QINGAO_0_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_1 (0x74040000 + 38C8hu)---

    RESERVED_FOR_QINGAO_1[31..0] - (RO) RESERVED_FOR_QINGAO_1

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_1_RESERVED_FOR_QINGAO_1_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_1_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_1_RESERVED_FOR_QINGAO_1_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_1[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_1_RESERVED_FOR_QINGAO_1_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_2 (0x74040000 + 38CChu)---

    RESERVED_FOR_QINGAO_2[31..0] - (RO) RESERVED_FOR_QINGAO_2

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_2_RESERVED_FOR_QINGAO_2_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_2_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_2_RESERVED_FOR_QINGAO_2_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_2[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_2_RESERVED_FOR_QINGAO_2_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_3 (0x74040000 + 38D0hu)---

    RESERVED_FOR_QINGAO_3[31..0] - (RO) RESERVED_FOR_QINGAO_3

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_3_RESERVED_FOR_QINGAO_3_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_3_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_3_RESERVED_FOR_QINGAO_3_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_3[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_3_RESERVED_FOR_QINGAO_3_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_4 (0x74040000 + 38D4hu)---

    RESERVED_FOR_QINGAO_0[31..0] - (RO) RESERVED_FOR_QINGAO_4

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_4_RESERVED_FOR_QINGAO_0_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_4_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_4_RESERVED_FOR_QINGAO_0_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_0[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_4_RESERVED_FOR_QINGAO_0_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_5 (0x74040000 + 38D8hu)---

    RESERVED_FOR_QINGAO_1[31..0] - (RO) RESERVED_FOR_QINGAO_5

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_5_RESERVED_FOR_QINGAO_1_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_5_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_5_RESERVED_FOR_QINGAO_1_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_1[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_5_RESERVED_FOR_QINGAO_1_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_6 (0x74040000 + 38DChu)---

    RESERVED_FOR_QINGAO_2[31..0] - (RO) RESERVED_FOR_QINGAO_6

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_6_RESERVED_FOR_QINGAO_2_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_6_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_6_RESERVED_FOR_QINGAO_2_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_2[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_6_RESERVED_FOR_QINGAO_2_SHFT 0u

/* =====================================================================================

  ---RESERVED_FOR_QINGAO_7 (0x74040000 + 38F0hu)---

    RESERVED_FOR_QINGAO_3[31..0] - (RO) RESERVED_FOR_QINGAO_7

 =====================================================================================*/
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_7_RESERVED_FOR_QINGAO_3_ADDR PCIE_MAC_IREG_RESERVED_FOR_QINGAO_7_ADDR
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_7_RESERVED_FOR_QINGAO_3_MASK 0xFFFFFFFFu                // RESERVED_FOR_QINGAO_3[31..0]
#define PCIE_MAC_IREG_RESERVED_FOR_QINGAO_7_RESERVED_FOR_QINGAO_3_SHFT 0u

/* =====================================================================================

  ---L1X_EXIT_LATENCY_TIMER_CLEAR (0x74040000 + 3900hu)---

    l10_exit_latency_timer_sw_clr[0] - (RW) L10 exit latency record timer sw clear
                                     1'b0: no clear
                                     1'b1: clear 0x3908-0x3910 L10 exit latency record register
    l11_exit_latency_timer_sw_clr[1] - (RW) L11 exit latency record timer sw clear
                                     1'b0: no clear
                                     1'b1: clear 0x3914-0x391C L10 exit latency record register
    l12_exit_latency_timer_sw_clr[2] - (RW) L12 exit latency record timer sw clear
                                     1'b0: no clear
                                     1'b1: clear 0x3920-0x3928 L10 exit latency record register
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_Reserved_ADDR PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_ADDR
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_Reserved_MASK 0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_Reserved_SHFT 3u
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l12_exit_latency_timer_sw_clr_ADDR PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_ADDR
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l12_exit_latency_timer_sw_clr_MASK 0x00000004u                // l12_exit_latency_timer_sw_clr[2]
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l12_exit_latency_timer_sw_clr_SHFT 2u
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l11_exit_latency_timer_sw_clr_ADDR PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_ADDR
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l11_exit_latency_timer_sw_clr_MASK 0x00000002u                // l11_exit_latency_timer_sw_clr[1]
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l11_exit_latency_timer_sw_clr_SHFT 1u
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l10_exit_latency_timer_sw_clr_ADDR PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_ADDR
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l10_exit_latency_timer_sw_clr_MASK 0x00000001u                // l10_exit_latency_timer_sw_clr[0]
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_CLEAR_l10_exit_latency_timer_sw_clr_SHFT 0u

/* =====================================================================================

  ---L1X_EXIT_LATENCY_TIMER_TIMEOUT (0x74040000 + 3904hu)---

    l1x_exit_latency_timer_timeout[31..0] - (RW) l1x exit latency counter timeout target,unit is 25ns

 =====================================================================================*/
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_TIMEOUT_l1x_exit_latency_timer_timeout_ADDR PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_TIMEOUT_ADDR
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_TIMEOUT_l1x_exit_latency_timer_timeout_MASK 0xFFFFFFFFu                // l1x_exit_latency_timer_timeout[31..0]
#define PCIE_MAC_IREG_L1X_EXIT_LATENCY_TIMER_TIMEOUT_l1x_exit_latency_timer_timeout_SHFT 0u

/* =====================================================================================

  ---L10_EXIT_LATENCY_TIMER_LATEST (0x74040000 + 3908hu)---

    l10_exit_latency_timer_latest[31..0] - (RO) l10 exit latency record timer, the latest exit L1.0 latency.

 =====================================================================================*/
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_LATEST_l10_exit_latency_timer_latest_ADDR PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_LATEST_ADDR
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_LATEST_l10_exit_latency_timer_latest_MASK 0xFFFFFFFFu                // l10_exit_latency_timer_latest[31..0]
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_LATEST_l10_exit_latency_timer_latest_SHFT 0u

/* =====================================================================================

  ---L10_EXIT_LATENCY_TIMER_MIN (0x74040000 + 390Chu)---

    l10_exit_latency_timer_min[31..0] - (RO) l10 exit latency record timer, the smallest of all L1.0 exits

 =====================================================================================*/
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MIN_l10_exit_latency_timer_min_ADDR PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MIN_ADDR
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MIN_l10_exit_latency_timer_min_MASK 0xFFFFFFFFu                // l10_exit_latency_timer_min[31..0]
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MIN_l10_exit_latency_timer_min_SHFT 0u

/* =====================================================================================

  ---L10_EXIT_LATENCY_TIMER_MAX (0x74040000 + 3910hu)---

    l10_exit_latency_timer_max[31..0] - (RO) l10 exit latency record timer, the biggest of all L1.0 exits

 =====================================================================================*/
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MAX_l10_exit_latency_timer_max_ADDR PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MAX_ADDR
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MAX_l10_exit_latency_timer_max_MASK 0xFFFFFFFFu                // l10_exit_latency_timer_max[31..0]
#define PCIE_MAC_IREG_L10_EXIT_LATENCY_TIMER_MAX_l10_exit_latency_timer_max_SHFT 0u

/* =====================================================================================

  ---L11_EXIT_LATENCY_TIMER_LATEST (0x74040000 + 3914hu)---

    l11_exit_latency_timer_latest[31..0] - (RO) l11 exit latency record timer, the latest exit L1.1 latency.

 =====================================================================================*/
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_LATEST_l11_exit_latency_timer_latest_ADDR PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_LATEST_ADDR
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_LATEST_l11_exit_latency_timer_latest_MASK 0xFFFFFFFFu                // l11_exit_latency_timer_latest[31..0]
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_LATEST_l11_exit_latency_timer_latest_SHFT 0u

/* =====================================================================================

  ---L11_EXIT_LATENCY_TIMER_MIN (0x74040000 + 3918hu)---

    l11_exit_latency_timer_min[31..0] - (RO) l11 exit latency record timer, the smallest of all L1.1 exits

 =====================================================================================*/
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MIN_l11_exit_latency_timer_min_ADDR PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MIN_ADDR
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MIN_l11_exit_latency_timer_min_MASK 0xFFFFFFFFu                // l11_exit_latency_timer_min[31..0]
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MIN_l11_exit_latency_timer_min_SHFT 0u

/* =====================================================================================

  ---L11_EXIT_LATENCY_TIMER_MAX (0x74040000 + 391Chu)---

    l11_exit_latency_timer_max[31..0] - (RO) l11 exit latency record timer, the biggest of all L1.1 exits

 =====================================================================================*/
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MAX_l11_exit_latency_timer_max_ADDR PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MAX_ADDR
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MAX_l11_exit_latency_timer_max_MASK 0xFFFFFFFFu                // l11_exit_latency_timer_max[31..0]
#define PCIE_MAC_IREG_L11_EXIT_LATENCY_TIMER_MAX_l11_exit_latency_timer_max_SHFT 0u

/* =====================================================================================

  ---L12_EXIT_LATENCY_TIMER_LATEST (0x74040000 + 3920hu)---

    l12_exit_latency_timer_latest[31..0] - (RO) l12 exit latency record timer, the latest exit L1.2 latency.

 =====================================================================================*/
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_LATEST_l12_exit_latency_timer_latest_ADDR PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_LATEST_ADDR
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_LATEST_l12_exit_latency_timer_latest_MASK 0xFFFFFFFFu                // l12_exit_latency_timer_latest[31..0]
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_LATEST_l12_exit_latency_timer_latest_SHFT 0u

/* =====================================================================================

  ---L12_EXIT_LATENCY_TIMER_MIN (0x74040000 + 3924hu)---

    l12_exit_latency_timer_min[31..0] - (RO) l12 exit latency record timer, the smallest of all L1.2 exits

 =====================================================================================*/
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MIN_l12_exit_latency_timer_min_ADDR PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MIN_ADDR
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MIN_l12_exit_latency_timer_min_MASK 0xFFFFFFFFu                // l12_exit_latency_timer_min[31..0]
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MIN_l12_exit_latency_timer_min_SHFT 0u

/* =====================================================================================

  ---L12_EXIT_LATENCY_TIMER_MAX (0x74040000 + 3928hu)---

    l12_exit_latency_timer_max[31..0] - (RO) l12 exit latency record timer, the biggest of all L1.2 exits

 =====================================================================================*/
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MAX_l12_exit_latency_timer_max_ADDR PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MAX_ADDR
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MAX_l12_exit_latency_timer_max_MASK 0xFFFFFFFFu                // l12_exit_latency_timer_max[31..0]
#define PCIE_MAC_IREG_L12_EXIT_LATENCY_TIMER_MAX_l12_exit_latency_timer_max_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_ENABLE_0 (0x74040000 + 392Chu)---

    msi_send_timestamp_record_enable[31..0] - (RW) Enable record msi vector send timestamp, per function
                                     1'b0:disbale
                                     1'b1:enable
                                     bit0:for functionx msi0
                                     bit1:for functionx msi1
                                     …......
                                     Bit30:for functionx msi30
                                     bit31:for functionx msi31

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_0_msi_send_timestamp_record_enable_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_0_msi_send_timestamp_record_enable_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_enable[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_0_msi_send_timestamp_record_enable_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_INFO_RECORD_CTRL_0 (0x74040000 + 3930hu)---

    msi_send_timestamp_sw_clr[0] - (RW) Record msi send timestamp,There are total of 16 registers covered by the loop, per function.
                                     1'b0:no clear
                                     1'b1:clear 16 timestamp record register 0x3940-0x39BC.
    msi_send_num_record_en[1]    - (RW) Enable record per msi send number, per function.
                                     1'b0:disable record per msi send number (0x3A10-0x3A8C per function)
                                     1'b1:enable record per msi send number.(0x3A10-0x3A8C per function)
    msi_send_num_record_sw_clr[2] - (RW) software clear record per msi send number, per function.
                                     1'b0:no clear per function
                                     1'b1:clear record per msi send number.(0x3A10-0x3A8C per function)
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_Reserved_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_Reserved_MASK 0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_Reserved_SHFT 3u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_num_record_sw_clr_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_num_record_sw_clr_MASK 0x00000004u                // msi_send_num_record_sw_clr[2]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_num_record_sw_clr_SHFT 2u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_num_record_en_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_num_record_en_MASK 0x00000002u                // msi_send_num_record_en[1]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_num_record_en_SHFT 1u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_timestamp_sw_clr_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_timestamp_sw_clr_MASK 0x00000001u                // msi_send_timestamp_sw_clr[0]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_0_msi_send_timestamp_sw_clr_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_LATEST_NUM (0x74040000 + 393Chu)---

    msi_send_timestamp_record_latest_num[3..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,record latest loop register number
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_LATEST_NUM_msi_send_timestamp_record_latest_num_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_LATEST_NUM_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_LATEST_NUM_msi_send_timestamp_record_latest_num_MASK 0x0000000Fu                // msi_send_timestamp_record_latest_num[3..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_LATEST_NUM_msi_send_timestamp_record_latest_num_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG0_LSB (0x74040000 + 3940hu)---

    msi_send_timestamp_record_reg0_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg0
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_LSB_msi_send_timestamp_record_reg0_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_LSB_msi_send_timestamp_record_reg0_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg0_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_LSB_msi_send_timestamp_record_reg0_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG0_MSB (0x74040000 + 3944hu)---

    msi_send_timestamp_record_reg0_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg0
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_MSB_msi_send_timestamp_record_reg0_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_MSB_msi_send_timestamp_record_reg0_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg0_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG0_MSB_msi_send_timestamp_record_reg0_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG1_LSB (0x74040000 + 3948hu)---

    msi_send_timestamp_record_reg1_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg1
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_LSB_msi_send_timestamp_record_reg1_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_LSB_msi_send_timestamp_record_reg1_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg1_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_LSB_msi_send_timestamp_record_reg1_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG1_MSB (0x74040000 + 394Chu)---

    msi_send_timestamp_record_reg1_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg1
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_MSB_msi_send_timestamp_record_reg1_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_MSB_msi_send_timestamp_record_reg1_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg1_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG1_MSB_msi_send_timestamp_record_reg1_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG2_LSB (0x74040000 + 3950hu)---

    msi_send_timestamp_record_reg2_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg2
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_LSB_msi_send_timestamp_record_reg2_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_LSB_msi_send_timestamp_record_reg2_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg2_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_LSB_msi_send_timestamp_record_reg2_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG2_MSB (0x74040000 + 3954hu)---

    msi_send_timestamp_record_reg2_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg2
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_MSB_msi_send_timestamp_record_reg2_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_MSB_msi_send_timestamp_record_reg2_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg2_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG2_MSB_msi_send_timestamp_record_reg2_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG3_LSB (0x74040000 + 3958hu)---

    msi_send_timestamp_record_reg3_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg3
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_LSB_msi_send_timestamp_record_reg3_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_LSB_msi_send_timestamp_record_reg3_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg3_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_LSB_msi_send_timestamp_record_reg3_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG3_MSB (0x74040000 + 395Chu)---

    msi_send_timestamp_record_reg3_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg3
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_MSB_msi_send_timestamp_record_reg3_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_MSB_msi_send_timestamp_record_reg3_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg3_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG3_MSB_msi_send_timestamp_record_reg3_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG4_LSB (0x74040000 + 3960hu)---

    msi_send_timestamp_record_reg4_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg4
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_LSB_msi_send_timestamp_record_reg4_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_LSB_msi_send_timestamp_record_reg4_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg4_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_LSB_msi_send_timestamp_record_reg4_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG4_MSB (0x74040000 + 3964hu)---

    msi_send_timestamp_record_reg4_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg4
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_MSB_msi_send_timestamp_record_reg4_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_MSB_msi_send_timestamp_record_reg4_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg4_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG4_MSB_msi_send_timestamp_record_reg4_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG5_LSB (0x74040000 + 3968hu)---

    msi_send_timestamp_record_reg5_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg5
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_LSB_msi_send_timestamp_record_reg5_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_LSB_msi_send_timestamp_record_reg5_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg5_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_LSB_msi_send_timestamp_record_reg5_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG5_MSB (0x74040000 + 396Chu)---

    msi_send_timestamp_record_reg5_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg5
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_MSB_msi_send_timestamp_record_reg5_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_MSB_msi_send_timestamp_record_reg5_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg5_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG5_MSB_msi_send_timestamp_record_reg5_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG6_LSB (0x74040000 + 3970hu)---

    msi_send_timestamp_record_reg6_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg6
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_LSB_msi_send_timestamp_record_reg6_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_LSB_msi_send_timestamp_record_reg6_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg6_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_LSB_msi_send_timestamp_record_reg6_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG6_MSB (0x74040000 + 3974hu)---

    msi_send_timestamp_record_reg6_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg6
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_MSB_msi_send_timestamp_record_reg6_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_MSB_msi_send_timestamp_record_reg6_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg6_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG6_MSB_msi_send_timestamp_record_reg6_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG7_LSB (0x74040000 + 3978hu)---

    msi_send_timestamp_record_reg7_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg7
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_LSB_msi_send_timestamp_record_reg7_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_LSB_msi_send_timestamp_record_reg7_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg7_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_LSB_msi_send_timestamp_record_reg7_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG7_MSB (0x74040000 + 397Chu)---

    msi_send_timestamp_record_reg7_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg7
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_MSB_msi_send_timestamp_record_reg7_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_MSB_msi_send_timestamp_record_reg7_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg7_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG7_MSB_msi_send_timestamp_record_reg7_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG8_LSB (0x74040000 + 3980hu)---

    msi_send_timestamp_record_reg8_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg8
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_LSB_msi_send_timestamp_record_reg8_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_LSB_msi_send_timestamp_record_reg8_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg8_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_LSB_msi_send_timestamp_record_reg8_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG8_MSB (0x74040000 + 3984hu)---

    msi_send_timestamp_record_reg8_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg8
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_MSB_msi_send_timestamp_record_reg8_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_MSB_msi_send_timestamp_record_reg8_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg8_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG8_MSB_msi_send_timestamp_record_reg8_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG9_LSB (0x74040000 + 3988hu)---

    msi_send_timestamp_record_reg9_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg9
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_LSB_msi_send_timestamp_record_reg9_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_LSB_msi_send_timestamp_record_reg9_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg9_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_LSB_msi_send_timestamp_record_reg9_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REG9_MSB (0x74040000 + 398Chu)---

    msi_send_timestamp_record_reg9_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is reg9
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_MSB_msi_send_timestamp_record_reg9_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_MSB_msi_send_timestamp_record_reg9_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_reg9_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REG9_MSB_msi_send_timestamp_record_reg9_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGA_LSB (0x74040000 + 3990hu)---

    msi_send_timestamp_record_rega_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is rega
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_LSB_msi_send_timestamp_record_rega_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_LSB_msi_send_timestamp_record_rega_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_rega_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_LSB_msi_send_timestamp_record_rega_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGA_MSB (0x74040000 + 3994hu)---

    msi_send_timestamp_record_rega_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is rega
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_MSB_msi_send_timestamp_record_rega_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_MSB_msi_send_timestamp_record_rega_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_rega_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGA_MSB_msi_send_timestamp_record_rega_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGB_LSB (0x74040000 + 3998hu)---

    msi_send_timestamp_record_regb_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regb
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_LSB_msi_send_timestamp_record_regb_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_LSB_msi_send_timestamp_record_regb_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regb_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_LSB_msi_send_timestamp_record_regb_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGB_MSB (0x74040000 + 399Chu)---

    msi_send_timestamp_record_regb_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regb
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_MSB_msi_send_timestamp_record_regb_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_MSB_msi_send_timestamp_record_regb_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regb_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGB_MSB_msi_send_timestamp_record_regb_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGC_LSB (0x74040000 + 39A0hu)---

    msi_send_timestamp_record_regc_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regc
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_LSB_msi_send_timestamp_record_regc_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_LSB_msi_send_timestamp_record_regc_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regc_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_LSB_msi_send_timestamp_record_regc_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGC_MSB (0x74040000 + 39A4hu)---

    msi_send_timestamp_record_regc_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regc
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_MSB_msi_send_timestamp_record_regc_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_MSB_msi_send_timestamp_record_regc_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regc_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGC_MSB_msi_send_timestamp_record_regc_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGD_LSB (0x74040000 + 39A8hu)---

    msi_send_timestamp_record_regd_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regd
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_LSB_msi_send_timestamp_record_regd_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_LSB_msi_send_timestamp_record_regd_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regd_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_LSB_msi_send_timestamp_record_regd_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGD_MSB (0x74040000 + 39AChu)---

    msi_send_timestamp_record_regd_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regd
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_MSB_msi_send_timestamp_record_regd_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_MSB_msi_send_timestamp_record_regd_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regd_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGD_MSB_msi_send_timestamp_record_regd_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGE_LSB (0x74040000 + 39B0hu)---

    msi_send_timestamp_record_rege_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is rege
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_LSB_msi_send_timestamp_record_rege_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_LSB_msi_send_timestamp_record_rege_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_rege_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_LSB_msi_send_timestamp_record_rege_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGE_MSB (0x74040000 + 39B4hu)---

    msi_send_timestamp_record_rege_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is rege
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_MSB_msi_send_timestamp_record_rege_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_MSB_msi_send_timestamp_record_rege_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_rege_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGE_MSB_msi_send_timestamp_record_rege_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGF_LSB (0x74040000 + 39B8hu)---

    msi_send_timestamp_record_regf_lsb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regf
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_LSB_msi_send_timestamp_record_regf_lsb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_LSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_LSB_msi_send_timestamp_record_regf_lsb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regf_lsb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_LSB_msi_send_timestamp_record_regf_lsb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_REGF_MSB (0x74040000 + 39BChu)---

    msi_send_timestamp_record_regf_msb[31..0] - (RO) Record msi send timestamp,There are total of 16 registers covered by the loop,this is regf
                                     [24:0]:local_sys_time[56:32]
                                     [29:25]:msi num
                                     [31:30]:function id

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_MSB_msi_send_timestamp_record_regf_msb_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_MSB_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_MSB_msi_send_timestamp_record_regf_msb_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_regf_msb[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_REGF_MSB_msi_send_timestamp_record_regf_msb_SHFT 0u

/* =====================================================================================

  ---PME_INFO_RECORD_CTRL_0 (0x74040000 + 39C0hu)---

    pme_send_timestamp_clr[0]    - (RW) Clear pme send timestamp record.(0x39C4-0x39C8), per function
                                     1'b0:no clear.
                                     1'b1:clear functionx pme  send timestamp record.
    Reserved[31..1]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_Reserved_ADDR     PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_Reserved_MASK     0xFFFFFFFEu                // Reserved[31..1]
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_Reserved_SHFT     1u
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_pme_send_timestamp_clr_ADDR PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_pme_send_timestamp_clr_MASK 0x00000001u                // pme_send_timestamp_clr[0]
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_0_pme_send_timestamp_clr_SHFT 0u

/* =====================================================================================

  ---PME_SEND_TIMESTAMP_RECORD_LSB_0 (0x74040000 + 39C4hu)---

    pme_send_timestamp_record_lsb[31..0] - (RO) Record pme send  timestamp
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_0_pme_send_timestamp_record_lsb_ADDR PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_0_ADDR
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_0_pme_send_timestamp_record_lsb_MASK 0xFFFFFFFFu                // pme_send_timestamp_record_lsb[31..0]
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_0_pme_send_timestamp_record_lsb_SHFT 0u

/* =====================================================================================

  ---PME_SEND_TIMESTAMP_RECORD_MSB_0 (0x74040000 + 39C8hu)---

    pme_send_timestamp_record_msb[31..0] - (RO) Record pme send  timestamp
                                     [31:0]:local_sys_time[63:32]

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_0_pme_send_timestamp_record_msb_ADDR PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_0_ADDR
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_0_pme_send_timestamp_record_msb_MASK 0xFFFFFFFFu                // pme_send_timestamp_record_msb[31..0]
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_0_pme_send_timestamp_record_msb_SHFT 0u

/* =====================================================================================

  ---PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_LSB (0x74040000 + 39CChu)---

    pad_wake_wakeup_send_timestamp_record_lsb[31..0] - (RO) Record PAD_WAKEN  wakeup timestamp
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_LSB_pad_wake_wakeup_send_timestamp_record_lsb_ADDR PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_LSB_ADDR
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_LSB_pad_wake_wakeup_send_timestamp_record_lsb_MASK 0xFFFFFFFFu                // pad_wake_wakeup_send_timestamp_record_lsb[31..0]
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_LSB_pad_wake_wakeup_send_timestamp_record_lsb_SHFT 0u

/* =====================================================================================

  ---PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_MSB (0x74040000 + 39D0hu)---

    pad_wake_wakeup_send_timestamp_record_msb[31..0] - (RO) Record PAD_WAKEN  wakeup timestamp
                                     [31:0]:local_sys_time[63:32]

 =====================================================================================*/
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_MSB_pad_wake_wakeup_send_timestamp_record_msb_ADDR PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_MSB_ADDR
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_MSB_pad_wake_wakeup_send_timestamp_record_msb_MASK 0xFFFFFFFFu                // pad_wake_wakeup_send_timestamp_record_msb[31..0]
#define PCIE_MAC_IREG_PAD_WAKE_WAKEUP_TIMESTAMP_RECORD_MSB_pad_wake_wakeup_send_timestamp_record_msb_SHFT 0u

/* =====================================================================================

  ---PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_LSB (0x74040000 + 39D4hu)---

    pad_perst_n_release_send_timestamp_record_lsb[31..0] - (RO) Record PAD_PERST_N  release timestamp
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_LSB_pad_perst_n_release_send_timestamp_record_lsb_ADDR PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_LSB_ADDR
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_LSB_pad_perst_n_release_send_timestamp_record_lsb_MASK 0xFFFFFFFFu                // pad_perst_n_release_send_timestamp_record_lsb[31..0]
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_LSB_pad_perst_n_release_send_timestamp_record_lsb_SHFT 0u

/* =====================================================================================

  ---PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_MSB (0x74040000 + 39D8hu)---

    pad_perst_n_release_send_timestamp_record_msb[31..0] - (RO) Record PAD_PERST_N release timestamp
                                     [31:0]:local_sys_time[63:32]

 =====================================================================================*/
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_MSB_pad_perst_n_release_send_timestamp_record_msb_ADDR PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_MSB_ADDR
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_MSB_pad_perst_n_release_send_timestamp_record_msb_MASK 0xFFFFFFFFu                // pad_perst_n_release_send_timestamp_record_msb[31..0]
#define PCIE_MAC_IREG_PAD_PERST_N_RELEASE_TIMESTAMP_RECORD_MSB_pad_perst_n_release_send_timestamp_record_msb_SHFT 0u

/* =====================================================================================

  ---WAKE_INFO_RECORD_CTRL_0 (0x74040000 + 39DChu)---

    pad_wake_timestamp_clr[0]    - (RW) Clear PAD_WAKEN  wakeup timestamp record.(0x39CC-0X39D0)
                                     1'b0:no clear.
                                     1'b1:clear PAD_WAKEN  wakeup timestamp record.
    pad_perst_n_timestamp_clr[1] - (RW) Clear  PAD_PERST_N  release timestamp record.(0x39D4-0X39D8)
                                     1'b0:no clear.
                                     1'b1:clear  PAD_PERST_N  release timestamp record.
    rg_sw_dbgsel_tl[2]           - (RW) Enable tl_ck on or off debug.
                                     1'b0:disable tl_ck on or off debug
                                     1'b1:enable tl_ck on or off debug
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_Reserved_ADDR    PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_Reserved_MASK    0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_Reserved_SHFT    3u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_rg_sw_dbgsel_tl_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_rg_sw_dbgsel_tl_MASK 0x00000004u                // rg_sw_dbgsel_tl[2]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_rg_sw_dbgsel_tl_SHFT 2u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_pad_perst_n_timestamp_clr_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_pad_perst_n_timestamp_clr_MASK 0x00000002u                // pad_perst_n_timestamp_clr[1]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_pad_perst_n_timestamp_clr_SHFT 1u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_pad_wake_timestamp_clr_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_pad_wake_timestamp_clr_MASK 0x00000001u                // pad_wake_timestamp_clr[0]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_0_pad_wake_timestamp_clr_SHFT 0u

/* =====================================================================================

  ---NAK_SENT_FOR_RCVD_TLP_SEQ (0x74040000 + 3A00hu)---

    rg_tlp_nak_match_cnt[5..0]   - (RW) case1: When rg_tlp_nak_match_cnt != 0,the nak sequence number is equal to received_sequence_number(latch when in the rising edge of rg_nak_test_en) + rg_tlp_nak_match_cnt -1, RC will send a nak and later will send an ack.
                                     case2: When rg_tlp_nak_match_cnt == 0,the nak sequence number is equal to received_sequence_number(latch when in the rising edge of rg_nak_test_en) + rg_tlp_nak_match_cnt, the nak will be sent and the nak_scheduled will be asserted until rg_nak_test_en is deasserted.
    rg_nak_test_en[6]            - (RW) the switch to send nak dllp for received tlp.
                                     1: enable send nak dllp for  received tlp
                                     0: disable send nak dllp for  received tlp
    rg_ack_rcv_num[12..7]        - (RW) the specific number of ack which would be replaced with a nak is equal to its value -1'b1. range from 6'd2 to 6'd63
    rg_ack_rcv_en[13]            - (RW) the switch to count for rcv ack
                                     1: enable counter for received ack
                                     0: disable counter for received ack
    Reserved[31..14]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_Reserved_ADDR  PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_ADDR
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_Reserved_MASK  0xFFFFC000u                // Reserved[31..14]
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_Reserved_SHFT  14u
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_ack_rcv_en_ADDR PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_ADDR
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_ack_rcv_en_MASK 0x00002000u                // rg_ack_rcv_en[13]
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_ack_rcv_en_SHFT 13u
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_ack_rcv_num_ADDR PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_ADDR
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_ack_rcv_num_MASK 0x00001F80u                // rg_ack_rcv_num[12..7]
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_ack_rcv_num_SHFT 7u
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_nak_test_en_ADDR PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_ADDR
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_nak_test_en_MASK 0x00000040u                // rg_nak_test_en[6]
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_nak_test_en_SHFT 6u
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_tlp_nak_match_cnt_ADDR PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_ADDR
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_tlp_nak_match_cnt_MASK 0x0000003Fu                // rg_tlp_nak_match_cnt[5..0]
#define PCIE_MAC_IREG_NAK_SENT_FOR_RCVD_TLP_SEQ_rg_tlp_nak_match_cnt_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI0_0 (0x74040000 + 3A10hu)---

    msi_send_num_record_msi0[31..0] - (RO) Record the number of msi0 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_0_msi_send_num_record_msi0_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_0_msi_send_num_record_msi0_MASK 0xFFFFFFFFu                // msi_send_num_record_msi0[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_0_msi_send_num_record_msi0_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI1_0 (0x74040000 + 3A14hu)---

    msi_send_num_record_msi1[31..0] - (RO) Record the number of msi1 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_0_msi_send_num_record_msi1_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_0_msi_send_num_record_msi1_MASK 0xFFFFFFFFu                // msi_send_num_record_msi1[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_0_msi_send_num_record_msi1_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI2_0 (0x74040000 + 3A18hu)---

    msi_send_num_record_msi2[31..0] - (RO) Record the number of msi2 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_0_msi_send_num_record_msi2_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_0_msi_send_num_record_msi2_MASK 0xFFFFFFFFu                // msi_send_num_record_msi2[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_0_msi_send_num_record_msi2_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI3_0 (0x74040000 + 3A1Chu)---

    msi_send_num_record_msi3[31..0] - (RO) Record the number of msi3 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_0_msi_send_num_record_msi3_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_0_msi_send_num_record_msi3_MASK 0xFFFFFFFFu                // msi_send_num_record_msi3[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_0_msi_send_num_record_msi3_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI4_0 (0x74040000 + 3A20hu)---

    msi_send_num_record_msi4[31..0] - (RO) Record the number of msi4 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_0_msi_send_num_record_msi4_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_0_msi_send_num_record_msi4_MASK 0xFFFFFFFFu                // msi_send_num_record_msi4[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_0_msi_send_num_record_msi4_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI5_0 (0x74040000 + 3A24hu)---

    msi_send_num_record_msi5[31..0] - (RO) Record the number of msi5 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_0_msi_send_num_record_msi5_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_0_msi_send_num_record_msi5_MASK 0xFFFFFFFFu                // msi_send_num_record_msi5[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_0_msi_send_num_record_msi5_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI6_0 (0x74040000 + 3A28hu)---

    msi_send_num_record_msi6[31..0] - (RO) Record the number of msi6 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_0_msi_send_num_record_msi6_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_0_msi_send_num_record_msi6_MASK 0xFFFFFFFFu                // msi_send_num_record_msi6[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_0_msi_send_num_record_msi6_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI7_0 (0x74040000 + 3A2Chu)---

    msi_send_num_record_msi7[31..0] - (RO) Record the number of msi7 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_0_msi_send_num_record_msi7_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_0_msi_send_num_record_msi7_MASK 0xFFFFFFFFu                // msi_send_num_record_msi7[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_0_msi_send_num_record_msi7_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI8_0 (0x74040000 + 3A30hu)---

    msi_send_num_record_msi8[31..0] - (RO) Record the number of msi8 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_0_msi_send_num_record_msi8_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_0_msi_send_num_record_msi8_MASK 0xFFFFFFFFu                // msi_send_num_record_msi8[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_0_msi_send_num_record_msi8_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI9_0 (0x74040000 + 3A34hu)---

    msi_send_num_record_msi9[31..0] - (RO) Record the number of msi9 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_0_msi_send_num_record_msi9_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_0_msi_send_num_record_msi9_MASK 0xFFFFFFFFu                // msi_send_num_record_msi9[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_0_msi_send_num_record_msi9_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI10_0 (0x74040000 + 3A38hu)---

    msi_send_num_record_msi10[31..0] - (RO) Record the number of msi10 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_0_msi_send_num_record_msi10_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_0_msi_send_num_record_msi10_MASK 0xFFFFFFFFu                // msi_send_num_record_msi10[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_0_msi_send_num_record_msi10_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI11_0 (0x74040000 + 3A3Chu)---

    msi_send_num_record_msi11[31..0] - (RO) Record the number of msi11 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_0_msi_send_num_record_msi11_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_0_msi_send_num_record_msi11_MASK 0xFFFFFFFFu                // msi_send_num_record_msi11[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_0_msi_send_num_record_msi11_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI12_0 (0x74040000 + 3A40hu)---

    msi_send_num_record_msi12[31..0] - (RO) Record the number of msi12 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_0_msi_send_num_record_msi12_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_0_msi_send_num_record_msi12_MASK 0xFFFFFFFFu                // msi_send_num_record_msi12[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_0_msi_send_num_record_msi12_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI13_0 (0x74040000 + 3A44hu)---

    msi_send_num_record_msi13[31..0] - (RO) Record the number of msi13 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_0_msi_send_num_record_msi13_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_0_msi_send_num_record_msi13_MASK 0xFFFFFFFFu                // msi_send_num_record_msi13[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_0_msi_send_num_record_msi13_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI14_0 (0x74040000 + 3A48hu)---

    msi_send_num_record_msi14[31..0] - (RO) Record the number of msi14 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_0_msi_send_num_record_msi14_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_0_msi_send_num_record_msi14_MASK 0xFFFFFFFFu                // msi_send_num_record_msi14[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_0_msi_send_num_record_msi14_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI15_0 (0x74040000 + 3A4Chu)---

    msi_send_num_record_msi15[31..0] - (RO) Record the number of msi15 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_0_msi_send_num_record_msi15_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_0_msi_send_num_record_msi15_MASK 0xFFFFFFFFu                // msi_send_num_record_msi15[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_0_msi_send_num_record_msi15_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI16_0 (0x74040000 + 3A50hu)---

    msi_send_num_record_msi16[31..0] - (RO) Record the number of msi16 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_0_msi_send_num_record_msi16_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_0_msi_send_num_record_msi16_MASK 0xFFFFFFFFu                // msi_send_num_record_msi16[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_0_msi_send_num_record_msi16_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI17_0 (0x74040000 + 3A54hu)---

    msi_send_num_record_msi17[31..0] - (RO) Record the number of msi17 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_0_msi_send_num_record_msi17_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_0_msi_send_num_record_msi17_MASK 0xFFFFFFFFu                // msi_send_num_record_msi17[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_0_msi_send_num_record_msi17_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI18_0 (0x74040000 + 3A58hu)---

    msi_send_num_record_msi18[31..0] - (RO) Record the number of msi18 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_0_msi_send_num_record_msi18_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_0_msi_send_num_record_msi18_MASK 0xFFFFFFFFu                // msi_send_num_record_msi18[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_0_msi_send_num_record_msi18_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI19_0 (0x74040000 + 3A5Chu)---

    msi_send_num_record_msi19[31..0] - (RO) Record the number of msi19 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_0_msi_send_num_record_msi19_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_0_msi_send_num_record_msi19_MASK 0xFFFFFFFFu                // msi_send_num_record_msi19[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_0_msi_send_num_record_msi19_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI20_0 (0x74040000 + 3A60hu)---

    msi_send_num_record_msi20[31..0] - (RO) Record the number of msi20 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_0_msi_send_num_record_msi20_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_0_msi_send_num_record_msi20_MASK 0xFFFFFFFFu                // msi_send_num_record_msi20[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_0_msi_send_num_record_msi20_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI21_0 (0x74040000 + 3A64hu)---

    msi_send_num_record_msi21[31..0] - (RO) Record the number of msi21 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_0_msi_send_num_record_msi21_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_0_msi_send_num_record_msi21_MASK 0xFFFFFFFFu                // msi_send_num_record_msi21[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_0_msi_send_num_record_msi21_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI22_0 (0x74040000 + 3A68hu)---

    msi_send_num_record_msi22[31..0] - (RO) Record the number of msi22 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_0_msi_send_num_record_msi22_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_0_msi_send_num_record_msi22_MASK 0xFFFFFFFFu                // msi_send_num_record_msi22[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_0_msi_send_num_record_msi22_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI23_0 (0x74040000 + 3A6Chu)---

    msi_send_num_record_msi23[31..0] - (RO) Record the number of msi23 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_0_msi_send_num_record_msi23_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_0_msi_send_num_record_msi23_MASK 0xFFFFFFFFu                // msi_send_num_record_msi23[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_0_msi_send_num_record_msi23_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI24_0 (0x74040000 + 3A70hu)---

    msi_send_num_record_msi24[31..0] - (RO) Record the number of msi24 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_0_msi_send_num_record_msi24_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_0_msi_send_num_record_msi24_MASK 0xFFFFFFFFu                // msi_send_num_record_msi24[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_0_msi_send_num_record_msi24_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI25_0 (0x74040000 + 3A74hu)---

    msi_send_num_record_msi25[31..0] - (RO) Record the number of msi25 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_0_msi_send_num_record_msi25_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_0_msi_send_num_record_msi25_MASK 0xFFFFFFFFu                // msi_send_num_record_msi25[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_0_msi_send_num_record_msi25_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI26_0 (0x74040000 + 3A78hu)---

    msi_send_num_record_msi26[31..0] - (RO) Record the number of msi26 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_0_msi_send_num_record_msi26_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_0_msi_send_num_record_msi26_MASK 0xFFFFFFFFu                // msi_send_num_record_msi26[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_0_msi_send_num_record_msi26_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI27_0 (0x74040000 + 3A7Chu)---

    msi_send_num_record_msi27[31..0] - (RO) Record the number of msi27 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_0_msi_send_num_record_msi27_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_0_msi_send_num_record_msi27_MASK 0xFFFFFFFFu                // msi_send_num_record_msi27[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_0_msi_send_num_record_msi27_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI28_0 (0x74040000 + 3A80hu)---

    msi_send_num_record_msi28[31..0] - (RO) Record the number of msi28 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_0_msi_send_num_record_msi28_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_0_msi_send_num_record_msi28_MASK 0xFFFFFFFFu                // msi_send_num_record_msi28[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_0_msi_send_num_record_msi28_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI29_0 (0x74040000 + 3A84hu)---

    msi_send_num_record_msi29[31..0] - (RO) Record the number of msi29 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_0_msi_send_num_record_msi29_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_0_msi_send_num_record_msi29_MASK 0xFFFFFFFFu                // msi_send_num_record_msi29[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_0_msi_send_num_record_msi29_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI30_0 (0x74040000 + 3A88hu)---

    msi_send_num_record_msi30[31..0] - (RO) Record the number of msi30 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_0_msi_send_num_record_msi30_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_0_msi_send_num_record_msi30_MASK 0xFFFFFFFFu                // msi_send_num_record_msi30[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_0_msi_send_num_record_msi30_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI31_0 (0x74040000 + 3A8Chu)---

    msi_send_num_record_msi31[31..0] - (RO) Record the number of msi31 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_0_msi_send_num_record_msi31_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_0_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_0_msi_send_num_record_msi31_MASK 0xFFFFFFFFu                // msi_send_num_record_msi31[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_0_msi_send_num_record_msi31_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_0_0 (0x74040000 + 4000hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_1_0 (0x74040000 + 4004hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_2_0 (0x74040000 + 4008hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_3_0 (0x74040000 + 400Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_0_0 (0x74040000 + 4010hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_1_0 (0x74040000 + 4014hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_2_0 (0x74040000 + 4018hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_3_0 (0x74040000 + 401Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_0_0 (0x74040000 + 4020hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_1_0 (0x74040000 + 4024hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_2_0 (0x74040000 + 4028hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_3_0 (0x74040000 + 402Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_0_0 (0x74040000 + 4030hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_1_0 (0x74040000 + 4034hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_2_0 (0x74040000 + 4038hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_3_0 (0x74040000 + 403Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_0_0 (0x74040000 + 4040hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_1_0 (0x74040000 + 4044hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_2_0 (0x74040000 + 4048hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_3_0 (0x74040000 + 404Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_0_0 (0x74040000 + 4050hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_1_0 (0x74040000 + 4054hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_2_0 (0x74040000 + 4058hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_3_0 (0x74040000 + 405Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_0_0 (0x74040000 + 4060hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_1_0 (0x74040000 + 4064hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_2_0 (0x74040000 + 4068hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_3_0 (0x74040000 + 406Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_0_0 (0x74040000 + 4070hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_1_0 (0x74040000 + 4074hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_2_0 (0x74040000 + 4078hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_3_0 (0x74040000 + 407Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_0_0 (0x74040000 + 4080hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_1_0 (0x74040000 + 4084hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_2_0 (0x74040000 + 4088hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_3_0 (0x74040000 + 408Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_0_0 (0x74040000 + 4090hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_1_0 (0x74040000 + 4094hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_2_0 (0x74040000 + 4098hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_3_0 (0x74040000 + 409Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_0_0 (0x74040000 + 40A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_1_0 (0x74040000 + 40A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_2_0 (0x74040000 + 40A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_3_0 (0x74040000 + 40AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_0_0 (0x74040000 + 40B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_1_0 (0x74040000 + 40B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_2_0 (0x74040000 + 40B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_3_0 (0x74040000 + 40BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_0_0 (0x74040000 + 40C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_1_0 (0x74040000 + 40C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_2_0 (0x74040000 + 40C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_3_0 (0x74040000 + 40CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_0_0 (0x74040000 + 40D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_1_0 (0x74040000 + 40D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_2_0 (0x74040000 + 40D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_3_0 (0x74040000 + 40DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_0_0 (0x74040000 + 40E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_1_0 (0x74040000 + 40E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_2_0 (0x74040000 + 40E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_3_0 (0x74040000 + 40EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_0_0 (0x74040000 + 40F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_1_0 (0x74040000 + 40F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_2_0 (0x74040000 + 40F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_3_0 (0x74040000 + 40FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_0_0 (0x74040000 + 4100hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_1_0 (0x74040000 + 4104hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_2_0 (0x74040000 + 4108hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_3_0 (0x74040000 + 410Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_0_0 (0x74040000 + 4110hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_1_0 (0x74040000 + 4114hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_2_0 (0x74040000 + 4118hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_3_0 (0x74040000 + 411Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_0_0 (0x74040000 + 4120hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_1_0 (0x74040000 + 4124hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_2_0 (0x74040000 + 4128hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_3_0 (0x74040000 + 412Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_0_0 (0x74040000 + 4130hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_1_0 (0x74040000 + 4134hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_2_0 (0x74040000 + 4138hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_3_0 (0x74040000 + 413Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_0_0 (0x74040000 + 4140hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_1_0 (0x74040000 + 4144hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_2_0 (0x74040000 + 4148hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_3_0 (0x74040000 + 414Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_0_0 (0x74040000 + 4150hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_1_0 (0x74040000 + 4154hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_2_0 (0x74040000 + 4158hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_3_0 (0x74040000 + 415Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_0_0 (0x74040000 + 4160hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_1_0 (0x74040000 + 4164hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_2_0 (0x74040000 + 4168hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_3_0 (0x74040000 + 416Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_0_0 (0x74040000 + 4170hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_1_0 (0x74040000 + 4174hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_2_0 (0x74040000 + 4178hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_3_0 (0x74040000 + 417Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_0_0 (0x74040000 + 4180hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_1_0 (0x74040000 + 4184hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_2_0 (0x74040000 + 4188hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_3_0 (0x74040000 + 418Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_0_0 (0x74040000 + 4190hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_1_0 (0x74040000 + 4194hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_2_0 (0x74040000 + 4198hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_3_0 (0x74040000 + 419Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_0_0 (0x74040000 + 41A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_1_0 (0x74040000 + 41A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_2_0 (0x74040000 + 41A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_3_0 (0x74040000 + 41AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_0_0 (0x74040000 + 41B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_1_0 (0x74040000 + 41B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_2_0 (0x74040000 + 41B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_3_0 (0x74040000 + 41BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_0_0 (0x74040000 + 41C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_1_0 (0x74040000 + 41C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_2_0 (0x74040000 + 41C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_3_0 (0x74040000 + 41CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_0_0 (0x74040000 + 41D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_1_0 (0x74040000 + 41D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_2_0 (0x74040000 + 41D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_3_0 (0x74040000 + 41DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_0_0 (0x74040000 + 41E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_1_0 (0x74040000 + 41E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_2_0 (0x74040000 + 41E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_3_0 (0x74040000 + 41EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_0_0 (0x74040000 + 41F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_1_0 (0x74040000 + 41F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_2_0 (0x74040000 + 41F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_3_0 (0x74040000 + 41FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_0_0 (0x74040000 + 4200hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_1_0 (0x74040000 + 4204hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_2_0 (0x74040000 + 4208hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_3_0 (0x74040000 + 420Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_0_0 (0x74040000 + 4210hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_1_0 (0x74040000 + 4214hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_2_0 (0x74040000 + 4218hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_3_0 (0x74040000 + 421Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_0_0 (0x74040000 + 4220hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_1_0 (0x74040000 + 4224hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_2_0 (0x74040000 + 4228hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_3_0 (0x74040000 + 422Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_0_0 (0x74040000 + 4230hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_1_0 (0x74040000 + 4234hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_2_0 (0x74040000 + 4238hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_3_0 (0x74040000 + 423Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_0_0 (0x74040000 + 4240hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_1_0 (0x74040000 + 4244hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_2_0 (0x74040000 + 4248hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_3_0 (0x74040000 + 424Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_0_0 (0x74040000 + 4250hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_1_0 (0x74040000 + 4254hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_2_0 (0x74040000 + 4258hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_3_0 (0x74040000 + 425Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_0_0 (0x74040000 + 4260hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_1_0 (0x74040000 + 4264hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_2_0 (0x74040000 + 4268hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_3_0 (0x74040000 + 426Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_0_0 (0x74040000 + 4270hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_1_0 (0x74040000 + 4274hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_2_0 (0x74040000 + 4278hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_3_0 (0x74040000 + 427Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_0_0 (0x74040000 + 4280hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_1_0 (0x74040000 + 4284hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_2_0 (0x74040000 + 4288hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_3_0 (0x74040000 + 428Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_0_0 (0x74040000 + 4290hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_1_0 (0x74040000 + 4294hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_2_0 (0x74040000 + 4298hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_3_0 (0x74040000 + 429Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_0_0 (0x74040000 + 42A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_1_0 (0x74040000 + 42A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_2_0 (0x74040000 + 42A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_3_0 (0x74040000 + 42AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_0_0 (0x74040000 + 42B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_1_0 (0x74040000 + 42B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_2_0 (0x74040000 + 42B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_3_0 (0x74040000 + 42BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_0_0 (0x74040000 + 42C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_1_0 (0x74040000 + 42C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_2_0 (0x74040000 + 42C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_3_0 (0x74040000 + 42CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_0_0 (0x74040000 + 42D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_1_0 (0x74040000 + 42D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_2_0 (0x74040000 + 42D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_3_0 (0x74040000 + 42DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_0_0 (0x74040000 + 42E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_1_0 (0x74040000 + 42E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_2_0 (0x74040000 + 42E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_3_0 (0x74040000 + 42EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_0_0 (0x74040000 + 42F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_1_0 (0x74040000 + 42F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_2_0 (0x74040000 + 42F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_3_0 (0x74040000 + 42FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_0_0 (0x74040000 + 4300hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_1_0 (0x74040000 + 4304hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_2_0 (0x74040000 + 4308hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_3_0 (0x74040000 + 430Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_0_0 (0x74040000 + 4310hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_1_0 (0x74040000 + 4314hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_2_0 (0x74040000 + 4318hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_3_0 (0x74040000 + 431Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_0_0 (0x74040000 + 4320hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_1_0 (0x74040000 + 4324hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_2_0 (0x74040000 + 4328hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_3_0 (0x74040000 + 432Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_0_0 (0x74040000 + 4330hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_1_0 (0x74040000 + 4334hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_2_0 (0x74040000 + 4338hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_3_0 (0x74040000 + 433Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_0_0 (0x74040000 + 4340hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_1_0 (0x74040000 + 4344hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_2_0 (0x74040000 + 4348hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_3_0 (0x74040000 + 434Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_0_0 (0x74040000 + 4350hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_1_0 (0x74040000 + 4354hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_2_0 (0x74040000 + 4358hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_3_0 (0x74040000 + 435Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_0_0 (0x74040000 + 4360hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_1_0 (0x74040000 + 4364hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_2_0 (0x74040000 + 4368hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_3_0 (0x74040000 + 436Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_0_0 (0x74040000 + 4370hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_1_0 (0x74040000 + 4374hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_2_0 (0x74040000 + 4378hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_3_0 (0x74040000 + 437Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_0_0 (0x74040000 + 4380hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_1_0 (0x74040000 + 4384hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_2_0 (0x74040000 + 4388hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_3_0 (0x74040000 + 438Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_0_0 (0x74040000 + 4390hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_1_0 (0x74040000 + 4394hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_2_0 (0x74040000 + 4398hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_3_0 (0x74040000 + 439Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_0_0 (0x74040000 + 43A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_1_0 (0x74040000 + 43A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_2_0 (0x74040000 + 43A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_3_0 (0x74040000 + 43AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_0_0 (0x74040000 + 43B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_1_0 (0x74040000 + 43B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_2_0 (0x74040000 + 43B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_3_0 (0x74040000 + 43BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_0_0 (0x74040000 + 43C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_1_0 (0x74040000 + 43C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_2_0 (0x74040000 + 43C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_3_0 (0x74040000 + 43CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_0_0 (0x74040000 + 43D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_1_0 (0x74040000 + 43D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_2_0 (0x74040000 + 43D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_3_0 (0x74040000 + 43DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_0_0 (0x74040000 + 43E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_1_0 (0x74040000 + 43E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_2_0 (0x74040000 + 43E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_3_0 (0x74040000 + 43EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_0_0 (0x74040000 + 43F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_1_0 (0x74040000 + 43F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_2_0 (0x74040000 + 43F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_3_0 (0x74040000 + 43FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_0_0 (0x74040000 + 4400hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_1_0 (0x74040000 + 4404hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_2_0 (0x74040000 + 4408hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_3_0 (0x74040000 + 440Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_0_0 (0x74040000 + 4410hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_1_0 (0x74040000 + 4414hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_2_0 (0x74040000 + 4418hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_3_0 (0x74040000 + 441Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_0_0 (0x74040000 + 4420hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_1_0 (0x74040000 + 4424hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_2_0 (0x74040000 + 4428hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_3_0 (0x74040000 + 442Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_0_0 (0x74040000 + 4430hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_1_0 (0x74040000 + 4434hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_2_0 (0x74040000 + 4438hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_3_0 (0x74040000 + 443Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_0_0 (0x74040000 + 4440hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_1_0 (0x74040000 + 4444hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_2_0 (0x74040000 + 4448hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_3_0 (0x74040000 + 444Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_0_0 (0x74040000 + 4450hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_1_0 (0x74040000 + 4454hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_2_0 (0x74040000 + 4458hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_3_0 (0x74040000 + 445Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_0_0 (0x74040000 + 4460hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_1_0 (0x74040000 + 4464hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_2_0 (0x74040000 + 4468hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_3_0 (0x74040000 + 446Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_0_0 (0x74040000 + 4470hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_1_0 (0x74040000 + 4474hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_2_0 (0x74040000 + 4478hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_3_0 (0x74040000 + 447Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_0_0 (0x74040000 + 4480hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_1_0 (0x74040000 + 4484hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_2_0 (0x74040000 + 4488hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_3_0 (0x74040000 + 448Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_0_0 (0x74040000 + 4490hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_1_0 (0x74040000 + 4494hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_2_0 (0x74040000 + 4498hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_3_0 (0x74040000 + 449Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_0_0 (0x74040000 + 44A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_1_0 (0x74040000 + 44A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_2_0 (0x74040000 + 44A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_3_0 (0x74040000 + 44AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_0_0 (0x74040000 + 44B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_1_0 (0x74040000 + 44B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_2_0 (0x74040000 + 44B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_3_0 (0x74040000 + 44BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_0_0 (0x74040000 + 44C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_1_0 (0x74040000 + 44C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_2_0 (0x74040000 + 44C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_3_0 (0x74040000 + 44CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_0_0 (0x74040000 + 44D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_1_0 (0x74040000 + 44D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_2_0 (0x74040000 + 44D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_3_0 (0x74040000 + 44DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_0_0 (0x74040000 + 44E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_1_0 (0x74040000 + 44E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_2_0 (0x74040000 + 44E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_3_0 (0x74040000 + 44EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_0_0 (0x74040000 + 44F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_1_0 (0x74040000 + 44F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_2_0 (0x74040000 + 44F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_3_0 (0x74040000 + 44FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_0_0 (0x74040000 + 4500hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_1_0 (0x74040000 + 4504hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_2_0 (0x74040000 + 4508hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_3_0 (0x74040000 + 450Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_0_0 (0x74040000 + 4510hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_1_0 (0x74040000 + 4514hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_2_0 (0x74040000 + 4518hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_3_0 (0x74040000 + 451Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_0_0 (0x74040000 + 4520hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_1_0 (0x74040000 + 4524hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_2_0 (0x74040000 + 4528hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_3_0 (0x74040000 + 452Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_0_0 (0x74040000 + 4530hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_1_0 (0x74040000 + 4534hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_2_0 (0x74040000 + 4538hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_3_0 (0x74040000 + 453Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_0_0 (0x74040000 + 4540hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_1_0 (0x74040000 + 4544hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_2_0 (0x74040000 + 4548hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_3_0 (0x74040000 + 454Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_0_0 (0x74040000 + 4550hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_1_0 (0x74040000 + 4554hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_2_0 (0x74040000 + 4558hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_3_0 (0x74040000 + 455Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_0_0 (0x74040000 + 4560hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_1_0 (0x74040000 + 4564hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_2_0 (0x74040000 + 4568hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_3_0 (0x74040000 + 456Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_0_0 (0x74040000 + 4570hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_1_0 (0x74040000 + 4574hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_2_0 (0x74040000 + 4578hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_3_0 (0x74040000 + 457Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_0_0 (0x74040000 + 4580hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_1_0 (0x74040000 + 4584hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_2_0 (0x74040000 + 4588hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_3_0 (0x74040000 + 458Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_0_0 (0x74040000 + 4590hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_1_0 (0x74040000 + 4594hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_2_0 (0x74040000 + 4598hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_3_0 (0x74040000 + 459Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_0_0 (0x74040000 + 45A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_1_0 (0x74040000 + 45A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_2_0 (0x74040000 + 45A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_3_0 (0x74040000 + 45AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_0_0 (0x74040000 + 45B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_1_0 (0x74040000 + 45B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_2_0 (0x74040000 + 45B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_3_0 (0x74040000 + 45BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_0_0 (0x74040000 + 45C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_1_0 (0x74040000 + 45C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_2_0 (0x74040000 + 45C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_3_0 (0x74040000 + 45CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_0_0 (0x74040000 + 45D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_1_0 (0x74040000 + 45D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_2_0 (0x74040000 + 45D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_3_0 (0x74040000 + 45DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_0_0 (0x74040000 + 45E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_1_0 (0x74040000 + 45E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_2_0 (0x74040000 + 45E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_3_0 (0x74040000 + 45EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_0_0 (0x74040000 + 45F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_1_0 (0x74040000 + 45F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_2_0 (0x74040000 + 45F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_3_0 (0x74040000 + 45FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_0_0 (0x74040000 + 4600hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_1_0 (0x74040000 + 4604hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_2_0 (0x74040000 + 4608hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_3_0 (0x74040000 + 460Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_0_0 (0x74040000 + 4610hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_1_0 (0x74040000 + 4614hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_2_0 (0x74040000 + 4618hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_3_0 (0x74040000 + 461Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_0_0 (0x74040000 + 4620hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_1_0 (0x74040000 + 4624hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_2_0 (0x74040000 + 4628hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_3_0 (0x74040000 + 462Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_0_0 (0x74040000 + 4630hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_1_0 (0x74040000 + 4634hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_2_0 (0x74040000 + 4638hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_3_0 (0x74040000 + 463Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_0_0 (0x74040000 + 4640hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_1_0 (0x74040000 + 4644hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_2_0 (0x74040000 + 4648hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_3_0 (0x74040000 + 464Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_0_0 (0x74040000 + 4650hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_1_0 (0x74040000 + 4654hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_2_0 (0x74040000 + 4658hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_3_0 (0x74040000 + 465Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_0_0 (0x74040000 + 4660hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_1_0 (0x74040000 + 4664hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_2_0 (0x74040000 + 4668hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_3_0 (0x74040000 + 466Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_0_0 (0x74040000 + 4670hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_1_0 (0x74040000 + 4674hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_2_0 (0x74040000 + 4678hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_3_0 (0x74040000 + 467Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_0_0 (0x74040000 + 4680hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_1_0 (0x74040000 + 4684hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_2_0 (0x74040000 + 4688hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_3_0 (0x74040000 + 468Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_0_0 (0x74040000 + 4690hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_1_0 (0x74040000 + 4694hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_2_0 (0x74040000 + 4698hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_3_0 (0x74040000 + 469Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_0_0 (0x74040000 + 46A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_1_0 (0x74040000 + 46A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_2_0 (0x74040000 + 46A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_3_0 (0x74040000 + 46AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_0_0 (0x74040000 + 46B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_1_0 (0x74040000 + 46B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_2_0 (0x74040000 + 46B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_3_0 (0x74040000 + 46BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_0_0 (0x74040000 + 46C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_1_0 (0x74040000 + 46C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_2_0 (0x74040000 + 46C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_3_0 (0x74040000 + 46CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_0_0 (0x74040000 + 46D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_1_0 (0x74040000 + 46D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_2_0 (0x74040000 + 46D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_3_0 (0x74040000 + 46DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_0_0 (0x74040000 + 46E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_1_0 (0x74040000 + 46E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_2_0 (0x74040000 + 46E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_3_0 (0x74040000 + 46EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_0_0 (0x74040000 + 46F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_1_0 (0x74040000 + 46F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_2_0 (0x74040000 + 46F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_3_0 (0x74040000 + 46FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_0_0 (0x74040000 + 4700hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_1_0 (0x74040000 + 4704hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_2_0 (0x74040000 + 4708hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_3_0 (0x74040000 + 470Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_0_0 (0x74040000 + 4710hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_1_0 (0x74040000 + 4714hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_2_0 (0x74040000 + 4718hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_3_0 (0x74040000 + 471Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_0_0 (0x74040000 + 4720hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_1_0 (0x74040000 + 4724hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_2_0 (0x74040000 + 4728hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_3_0 (0x74040000 + 472Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_0_0 (0x74040000 + 4730hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_1_0 (0x74040000 + 4734hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_2_0 (0x74040000 + 4738hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_3_0 (0x74040000 + 473Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_0_0 (0x74040000 + 4740hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_1_0 (0x74040000 + 4744hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_2_0 (0x74040000 + 4748hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_3_0 (0x74040000 + 474Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_0_0 (0x74040000 + 4750hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_1_0 (0x74040000 + 4754hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_2_0 (0x74040000 + 4758hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_3_0 (0x74040000 + 475Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_0_0 (0x74040000 + 4760hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_1_0 (0x74040000 + 4764hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_2_0 (0x74040000 + 4768hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_3_0 (0x74040000 + 476Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_0_0 (0x74040000 + 4770hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_1_0 (0x74040000 + 4774hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_2_0 (0x74040000 + 4778hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_3_0 (0x74040000 + 477Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_0_0 (0x74040000 + 4780hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_1_0 (0x74040000 + 4784hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_2_0 (0x74040000 + 4788hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_3_0 (0x74040000 + 478Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_0_0 (0x74040000 + 4790hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_1_0 (0x74040000 + 4794hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_2_0 (0x74040000 + 4798hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_3_0 (0x74040000 + 479Chu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_0_0 (0x74040000 + 47A0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_1_0 (0x74040000 + 47A4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_2_0 (0x74040000 + 47A8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_3_0 (0x74040000 + 47AChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_0_0 (0x74040000 + 47B0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_1_0 (0x74040000 + 47B4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_2_0 (0x74040000 + 47B8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_3_0 (0x74040000 + 47BChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_0_0 (0x74040000 + 47C0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_1_0 (0x74040000 + 47C4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_2_0 (0x74040000 + 47C8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_3_0 (0x74040000 + 47CChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_0_0 (0x74040000 + 47D0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_1_0 (0x74040000 + 47D4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_2_0 (0x74040000 + 47D8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_3_0 (0x74040000 + 47DChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_0_0 (0x74040000 + 47E0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_1_0 (0x74040000 + 47E4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_2_0 (0x74040000 + 47E8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_3_0 (0x74040000 + 47EChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_0_0 (0x74040000 + 47F0hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_1_0 (0x74040000 + 47F4hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_2_0 (0x74040000 + 47F8hu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_0_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_3_0 (0x74040000 + 47FChu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_0_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_0_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_0_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_0_msix_table_SHFT 0u

/* =====================================================================================

  ---PCIE_CFGCTRL_1 (0x74040000 + 0x00008084u)---

    Func_not_ready[0]            - (RW) Physical Function Configuration NOT Ready.
                                     If the local processor need more time to load PCIe configuration settings, it can assert this bit until all physical function configuration settings are properly set.
                                     0: Physical function configuration ready
                                     1: Physical function configuration not ready
                                     
                                     The register is per physical function register
    Virtual_Func_not_ready[1]    - (RW) Virtual function configuration not ready: if the local processor needs more time to load PCIe configuration settings, it can assert this bit until all virtual function configuration settings are properly set.
                                     The PCIe Core will reply to all virtual function configuration requests with Configuration Retry Status completions while this bit is asserted.
                                     
                                     The register is per physical function register
    Disable_LTSSM[2]             - (RW) this bit is deasserted (low) in normal conditions; however, it can be set to 1 at power-up to prevent LTSSM from exiting Detect.Quiet for as long as this register is asserted. 
                                     This is typically used to prevent LTSSM from moving to another state when the PHY or PIPE interface is not ready. This signal has no effect on LTSSM states other than Detect.Quiet.
    RSVD1[15..3]                 - (RO) Reserved
    Func_num[18..16]             - (RO) When several physical functions are implemented, it enables initializing the selected function PCIe configuration setting registers (0x0098 - 0x00BF, 0x00E0 - 0x00FF, 0x0120 - 0x013F). Otherwise this sub-field is reserved.
    RSVD2[23..19]                - (RO) Reserved
    Virtual_Channel_num[26..24]  - (RO) When several virtual channels are implemented, it enables initializing the selected virtual channel PCIe configuration setting registers (0x0090 - 0x0097). Otherwise this sub-field is reserved.
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD3_MASK                0xF8000000u                // RSVD3[31..27]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD3_SHFT                27u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Virtual_Channel_num_ADDR  PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Virtual_Channel_num_MASK  0x07000000u                // Virtual_Channel_num[26..24]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Virtual_Channel_num_SHFT  24u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD2_MASK                0x00F80000u                // RSVD2[23..19]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD2_SHFT                19u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Func_num_ADDR             PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Func_num_MASK             0x00070000u                // Func_num[18..16]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Func_num_SHFT             16u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD1_MASK                0x0000FFF8u                // RSVD1[15..3]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_RSVD1_SHFT                3u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Disable_LTSSM_ADDR        PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Disable_LTSSM_MASK        0x00000004u                // Disable_LTSSM[2]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Disable_LTSSM_SHFT        2u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Virtual_Func_not_ready_ADDR PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Virtual_Func_not_ready_MASK 0x00000002u                // Virtual_Func_not_ready[1]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Virtual_Func_not_ready_SHFT 1u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Func_not_ready_ADDR       PCIE_MAC_IREG_PCIE_CFGCTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Func_not_ready_MASK       0x00000001u                // Func_not_ready[0]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_1_Func_not_ready_SHFT       0u

/* =====================================================================================

  ---PCIE_PCI_IDS_0_1 (0x74040000 + 0x00008098u)---

    VendorID[15..0]              - (RW) Vendor ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[15:0]
                                     
                                     The register is per physical function register
    DeviceID[31..16]             - (RW) Device ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[31:16]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_DeviceID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_DeviceID_MASK           0xFFFF0000u                // DeviceID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_DeviceID_SHFT           16u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_VendorID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_VendorID_MASK           0x0000FFFFu                // VendorID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_1_VendorID_SHFT           0u

/* =====================================================================================

  ---PCIE_PCI_IDS_1_1 (0x74040000 + 0x0000809Cu)---

    RevisionID[7..0]             - (RW) Revision ID
                                     Backdoor access to PCIe Configuration Space Header(+08h)[7:0]
                                     
                                     The register is per physical function register
    Classcode[31..8]             - (RW) Class Code
                                     Backdoor access to PCIe Configuration Space Header(+08h)[31:8]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_Classcode_ADDR          PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_Classcode_MASK          0xFFFFFF00u                // Classcode[31..8]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_Classcode_SHFT          8u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_RevisionID_ADDR         PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_RevisionID_MASK         0x000000FFu                // RevisionID[7..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_1_RevisionID_SHFT         0u

/* =====================================================================================

  ---PCIE_PCI_IDS_2_1 (0x74040000 + 0x000080A0u)---

    Sub_system_vendor_ID[15..0]  - (RW) Sub-system vendor ID
                                     Only apply for type0 function. 
                                     Backdoor access to PCIe Configuration Space Header(+2C)[15:0]
                                     
                                     The register is per physical function register
    Sub_system_device_ID[31..16] - (RW) Sub-system device ID
                                     Only apply for type0 function.
                                     Backdoor access to PCIe Configuration Space Header(+2C)[31:16]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_Sub_system_device_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_Sub_system_device_ID_MASK 0xFFFF0000u                // Sub_system_device_ID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_Sub_system_device_ID_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_Sub_system_vendor_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_Sub_system_vendor_ID_MASK 0x0000FFFFu                // Sub_system_vendor_ID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_1_Sub_system_vendor_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_LPM_1 (0x74040000 + 0x000080A4u)---

    RSVD1[15..0]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    Adtr_support[16]             - (RW) Address Translation Service support
                                     
                                     The register is per physical function register
    Page_Req_If_support[17]      - (RW) Page Request Interface support
                                     
                                     The register is per physical function register
    Impl_Mcast[18]               - (RO) Implement Multicast capability
                                     
                                     The register is per physical function register
    RSVD2[19]                    - (RO) Reserved
                                     
                                     The register is per physical function register
    PMEDataSupport[20]           - (RW) PME Data Support
                                     Backdoor access to Power Management Control/Status Register (0x10FC[14:9][31:24])
                                     0: not supported
                                     1: supported
                                     
                                     The register is per physical function register
    DSI[21]                      - (RW) DSI(Device Specific Initialization)
                                     Backdoor access to Power Management Capability Structure(+00h)[21]
                                     
                                     The register is per physical function register
    AuxiliaryCurrent[24..22]     - (RW) Auxiliary Current
                                     Backdoor access to Power Management Capability Structure(+00h)[24:22]
                                     
                                     The register is per physical function register
    D1Support[25]                - (RW) D1 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[25]
                                     
                                     The register is per physical function register
    D2Support[26]                - (RW) D2 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[26]
                                     
                                     The register is per physical function register
    PMEsupport[31..27]           - (RW) PME Support
                                     Backdoor access to Power Management Capability Structure(+00h)[31:27]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_PMEsupport_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_PMEsupport_MASK           0xF8000000u                // PMEsupport[31..27]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_PMEsupport_SHFT           27u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_D2Support_ADDR            PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_D2Support_MASK            0x04000000u                // D2Support[26]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_D2Support_SHFT            26u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_D1Support_ADDR            PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_D1Support_MASK            0x02000000u                // D1Support[25]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_D1Support_SHFT            25u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_AuxiliaryCurrent_ADDR     PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_AuxiliaryCurrent_MASK     0x01C00000u                // AuxiliaryCurrent[24..22]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_AuxiliaryCurrent_SHFT     22u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_DSI_ADDR                  PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_DSI_MASK                  0x00200000u                // DSI[21]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_DSI_SHFT                  21u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_PMEDataSupport_ADDR       PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_PMEDataSupport_MASK       0x00100000u                // PMEDataSupport[20]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_PMEDataSupport_SHFT       20u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_RSVD2_MASK                0x00080000u                // RSVD2[19]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_RSVD2_SHFT                19u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Impl_Mcast_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Impl_Mcast_MASK           0x00040000u                // Impl_Mcast[18]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Impl_Mcast_SHFT           18u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Page_Req_If_support_ADDR  PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Page_Req_If_support_MASK  0x00020000u                // Page_Req_If_support[17]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Page_Req_If_support_SHFT  17u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Adtr_support_ADDR         PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Adtr_support_MASK         0x00010000u                // Adtr_support[16]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_Adtr_support_SHFT         16u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_PCI_LPM_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_RSVD1_MASK                0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_1_RSVD1_SHFT                0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_0_1 (0x74040000 + 0x000080A8u)---

    InterruptPin[2..0]           - (RW) Interrupt Pin:
                                     - 000: None
                                     - 001: INTA
                                     - 010: INTB
                                     - 011: INTC
                                     - 100: INTD
                                     Otherwise reserved.
                                     
                                     The register is per physical function register
    msi_cap_dis[3]               - (RW) MSI capability disable.
                                     0 : enable.
                                     1 : disable.
                                     
                                     The register is per physical function register
    MSI_no[6..4]                 - (RW) Message Control. Multiple Message Capable
                                     - 000: 1 MSI requested
                                     - 001: 2 MSI requested
                                     - 010: 4 MSI requested
                                     - 011: 8 MSI requested
                                     - 100: 16 MSI requested
                                     - 101: 32 MSI requested
                                     Otherwise reserved.
                                     
                                     The register is per physical function register
    MSI_per_vector_support[7]    - (RW) MSI per-vector masking support
                                     
                                     The register is per physical function register
    MSI_ext_data[8]              - (RW) MSI Extended message data capability
                                     0: disable
                                     1: enable
                                     
                                     The register is per physical function register
    RESERVED9[15..9]             - (RO) Reserved bits
    MSIX_Table_size[26..16]      - (RW) MSIX Table size
                                     
                                     The register is per physical function register
    RSVD3[30..27]                - (RW) Reserved
                                     
                                     The register is per physical function register
    Impl_MSIX_capability[31]     - (RW) Implement MSI-X capability
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_Impl_MSIX_capability_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_Impl_MSIX_capability_MASK 0x80000000u                // Impl_MSIX_capability[31]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_Impl_MSIX_capability_SHFT 31u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_RSVD3_MASK              0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_RSVD3_SHFT              27u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSIX_Table_size_ADDR    PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSIX_Table_size_MASK    0x07FF0000u                // MSIX_Table_size[26..16]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSIX_Table_size_SHFT    16u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_ext_data_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_ext_data_MASK       0x00000100u                // MSI_ext_data[8]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_ext_data_SHFT       8u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_per_vector_support_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_per_vector_support_MASK 0x00000080u                // MSI_per_vector_support[7]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_per_vector_support_SHFT 7u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_no_ADDR             PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_no_MASK             0x00000070u                // MSI_no[6..4]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_MSI_no_SHFT             4u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_msi_cap_dis_ADDR        PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_msi_cap_dis_MASK        0x00000008u                // msi_cap_dis[3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_msi_cap_dis_SHFT        3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_InterruptPin_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_InterruptPin_MASK       0x00000007u                // InterruptPin[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_1_InterruptPin_SHFT       0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_1_1 (0x74040000 + 0x000080ACu)---

    Table_BIR[2..0]              - (RW) Table BIR
                                     
                                     The register is per physical function register
    Table_offset[31..3]          - (RW) Table offset
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_Table_offset_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_Table_offset_MASK       0xFFFFFFF8u                // Table_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_Table_offset_SHFT       3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_Table_BIR_ADDR          PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_Table_BIR_MASK          0x00000007u                // Table_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_1_Table_BIR_SHFT          0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_2_1 (0x74040000 + 0x000080B0u)---

    PBA_BIR[2..0]                - (RW) PBA BIR
                                     
                                     The register is per physical function register
    PBA_offset[31..3]            - (RW) PBA offset
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_PBA_offset_ADDR         PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_PBA_offset_MASK         0xFFFFFFF8u                // PBA_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_PBA_offset_SHFT         3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_PBA_BIR_ADDR            PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_PBA_BIR_MASK            0x00000007u                // PBA_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_1_PBA_BIR_SHFT            0u

/* =====================================================================================

  ---PCIE_PCI_IOV_0_1 (0x74040000 + 0x000080B4u)---

    ATS_invalidate_queuedepth[4..0] - (RW) Maximum payload size. 
                                     Do not set the PCIe Maximum payload size to a value greater than the Bridge Maximum Payload size.
                                     
                                     The register is per physical function register
    ATS_page_aligned_req[5]      - (RW) reserved for phantom functions support
                                     
                                     The register is per physical function register
    TPH_NOST_MODE_SUP[6]         - (RW) THP NOST mode support
                                     
                                     The register is per physical function register
    RSVD1[15..7]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_Max_Grp[21..16]        - (RW) Multicast max group
                                     
                                     The register is per physical function register
    RSVD2[23..22]                - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_WIN_Size[29..24]       - (RW) Multicast window size
                                     
                                     The register is per physical function register
    RSVD3[30]                    - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_ECRC_REGEN_SUP[31]     - (RW) Multicast ECRC regen support
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_ECRC_REGEN_SUP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_ECRC_REGEN_SUP_MASK 0x80000000u                // MCAST_ECRC_REGEN_SUP[31]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_ECRC_REGEN_SUP_SHFT 31u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD3_MASK              0x40000000u                // RSVD3[30]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD3_SHFT              30u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_WIN_Size_ADDR     PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_WIN_Size_MASK     0x3F000000u                // MCAST_WIN_Size[29..24]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_WIN_Size_SHFT     24u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD2_MASK              0x00C00000u                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD2_SHFT              22u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_Max_Grp_ADDR      PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_Max_Grp_MASK      0x003F0000u                // MCAST_Max_Grp[21..16]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_MCAST_Max_Grp_SHFT      16u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD1_MASK              0x0000FF80u                // RSVD1[15..7]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_RSVD1_SHFT              7u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_TPH_NOST_MODE_SUP_ADDR  PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_TPH_NOST_MODE_SUP_MASK  0x00000040u                // TPH_NOST_MODE_SUP[6]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_TPH_NOST_MODE_SUP_SHFT  6u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ATS_page_aligned_req_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ATS_page_aligned_req_MASK 0x00000020u                // ATS_page_aligned_req[5]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ATS_page_aligned_req_SHFT 5u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ATS_invalidate_queuedepth_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ATS_invalidate_queuedepth_MASK 0x0000001Fu                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_1_ATS_invalidate_queuedepth_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_IOV_1_1 (0x74040000 + 0x000080B8u)---

    PRI_outstanding_page_REQ_CAP[19..0] - (RW) PRI outstanding page request capacity
                                     
                                     The register is per physical function register
    RSVD1[31..20]                - (RO) Reserved
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_RSVD1_MASK              0xFFF00000u                // RSVD1[31..20]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_RSVD1_SHFT              20u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_PRI_outstanding_page_REQ_CAP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_PRI_outstanding_page_REQ_CAP_MASK 0x000FFFFFu                // PRI_outstanding_page_REQ_CAP[19..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_1_PRI_outstanding_page_REQ_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_SW_TRIG_INT_1 (0x74040000 + 0x000080BCu)---

    sw_trig_intr_host[31..0]     - (RW) Software trigger interrupt for Endpoint mode.
                                     Software can use the register to send Interrupt message via PCIe controller.
                                      If some bits of the register are set to 1, corresponding bits in ISTATUS_HOST (0x18C) are also be set and PCIe controller will send interrupt message to host.
                                     0: clear interrupt.
                                     1: send interrupt.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_1_sw_trig_intr_host_ADDR PCIE_MAC_IREG_PCIE_SW_TRIG_INT_1_ADDR
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_1_sw_trig_intr_host_MASK 0xFFFFFFFFu                // sw_trig_intr_host[31..0]
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_1_sw_trig_intr_host_SHFT 0u

/* =====================================================================================

  ---PCIE_BAR_01_0_1 (0x74040000 + 0x000080E4u)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_01_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_01_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_01_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_1_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_01_1_1 (0x74040000 + 0x000080E8u)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 1 has same settings as BAR 0's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 0 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_1_1_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_01_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_1_1_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_01_1_1_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_23_0_1 (0x74040000 + 0x000080ECu)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_23_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_23_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_23_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_1_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_23_1_1 (0x74040000 + 0x000080F0u)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 3 has same settings as BAR 2's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 2 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_1_1_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_23_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_1_1_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_23_1_1_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_45_0_1 (0x74040000 + 0x000080F4u)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_45_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_45_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_45_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_1_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_45_1_1 (0x74040000 + 0x000080F8u)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 5 has same settings as BAR 4's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 4 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_1_1_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_45_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_1_1_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_45_1_1_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_WIN_1 (0x74040000 + 0x000080FCu)---

    IOWIN_IMPL[0]                - (RO) IO Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+1Ch)[15:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    IOWIN_32B[1]                 - (RO) IO Window 32-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+30h)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    PFWIN_IMPL[2]                - (RO) Prefetchable Memory Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+24h)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    PFWIN_64B[3]                 - (RO) Prefetchable Memory Window 64-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+28h)[31:0] & PCIe Configuration Space Header(+2C)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    RSVD1[10..4]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    EXP_ROM_SIZE[31..11]         - (RO) Reserved for Expansion ROM size mask
                                     Only for EP mode.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_EXP_ROM_SIZE_ADDR         PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_EXP_ROM_SIZE_MASK         0xFFFFF800u                // EXP_ROM_SIZE[31..11]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_EXP_ROM_SIZE_SHFT         11u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_RSVD1_MASK                0x000007F0u                // RSVD1[10..4]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_RSVD1_SHFT                4u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_PFWIN_64B_ADDR            PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_PFWIN_64B_MASK            0x00000008u                // PFWIN_64B[3]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_PFWIN_64B_SHFT            3u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_PFWIN_IMPL_ADDR           PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_PFWIN_IMPL_MASK           0x00000004u                // PFWIN_IMPL[2]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_PFWIN_IMPL_SHFT           2u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_IOWIN_32B_ADDR            PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_IOWIN_32B_MASK            0x00000002u                // IOWIN_32B[1]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_IOWIN_32B_SHFT            1u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_IOWIN_IMPL_ADDR           PCIE_MAC_IREG_PCIE_BAR_WIN_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_IOWIN_IMPL_MASK           0x00000001u                // IOWIN_IMPL[0]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_1_IOWIN_IMPL_SHFT           0u

/* =====================================================================================

  ---PCIE_SRIOV_0_1 (0x74040000 + 0x00008120u)---

    VF_dev_ID[15..0]             - (RW) VF device ID
                                     
                                     The register is per physical function register
    VF_subsystem_dev_ID[31..16]  - (RW) VF subsystem device ID
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_VF_subsystem_dev_ID_ADDR  PCIE_MAC_IREG_PCIE_SRIOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_VF_subsystem_dev_ID_MASK  0xFFFF0000u                // VF_subsystem_dev_ID[31..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_VF_subsystem_dev_ID_SHFT  16u
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_VF_dev_ID_ADDR            PCIE_MAC_IREG_PCIE_SRIOV_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_VF_dev_ID_MASK            0x0000FFFFu                // VF_dev_ID[15..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_1_VF_dev_ID_SHFT            0u

/* =====================================================================================

  ---PCIE_SRIOV_1_1 (0x74040000 + 0x00008124u)---

    page_sizes_supported[11..0]  - (RW) Supported page sizes (Mandatory page sizes are always supported regardless of the values specified here.)
                                     
                                     The register is per physical function register
    RSVD0[13..12]                - (RW) reserved
                                     
                                     The register is per physical function register
    VF_10B_TAG[14]               - (RW) VF 10-bit tag requester supported
    APP_SPEC_EXT_CAP_IMPL[15]    - (RW) Application-specific extended capabilities implementation:
                                     0: application-specific extended capability is not implemented
                                     1: application-specific extended capabilities are implemented, and the first capability is located at offset 800h of the Configuration Space.
                                     
                                     The register is per physical function register
    FUNC_DEPENDENCY[23..16]      - (RW) Function dependency (This value must be equal to the function ID if there is no dependency.)
                                     
                                     The register is per physical function register
    APP_SPEC_CAP_IMPL[31..24]    - (RW) Application-specific capabilities implementation:
                                     00h: application-specific capability is not implemented.
                                     40-7Ch: application-specific capabilities are implemented, and the value set here indicates the offset of the first capability in the Configuration Space.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_APP_SPEC_CAP_IMPL_ADDR    PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_APP_SPEC_CAP_IMPL_MASK    0xFF000000u                // APP_SPEC_CAP_IMPL[31..24]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_APP_SPEC_CAP_IMPL_SHFT    24u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_FUNC_DEPENDENCY_ADDR      PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_FUNC_DEPENDENCY_MASK      0x00FF0000u                // FUNC_DEPENDENCY[23..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_FUNC_DEPENDENCY_SHFT      16u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_APP_SPEC_EXT_CAP_IMPL_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_APP_SPEC_EXT_CAP_IMPL_MASK 0x00008000u                // APP_SPEC_EXT_CAP_IMPL[15]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_APP_SPEC_EXT_CAP_IMPL_SHFT 15u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_VF_10B_TAG_ADDR           PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_VF_10B_TAG_MASK           0x00004000u                // VF_10B_TAG[14]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_VF_10B_TAG_SHFT           14u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_RSVD0_ADDR                PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_RSVD0_MASK                0x00003000u                // RSVD0[13..12]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_RSVD0_SHFT                12u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_page_sizes_supported_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_page_sizes_supported_MASK 0x00000FFFu                // page_sizes_supported[11..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_1_page_sizes_supported_SHFT 0u

/* =====================================================================================

  ---PCIE_SRIOV_2_1 (0x74040000 + 0x00008128u)---

    VF_BAR0[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_2_1_VF_BAR0_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_2_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_2_1_VF_BAR0_MASK              0xFFFFFFFFu                // VF_BAR0[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_2_1_VF_BAR0_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_3_1 (0x74040000 + 0x0000812Cu)---

    VF_BAR1[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_3_1_VF_BAR1_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_3_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_3_1_VF_BAR1_MASK              0xFFFFFFFFu                // VF_BAR1[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_3_1_VF_BAR1_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_4_1 (0x74040000 + 0x00008130u)---

    VF_BAR2[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_4_1_VF_BAR2_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_4_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_4_1_VF_BAR2_MASK              0xFFFFFFFFu                // VF_BAR2[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_4_1_VF_BAR2_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_5_1 (0x74040000 + 0x00008134u)---

    VF_BAR3[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_5_1_VF_BAR3_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_5_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_5_1_VF_BAR3_MASK              0xFFFFFFFFu                // VF_BAR3[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_5_1_VF_BAR3_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_6_1 (0x74040000 + 0x00008138u)---

    VF_BAR4[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_6_1_VF_BAR4_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_6_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_6_1_VF_BAR4_MASK              0xFFFFFFFFu                // VF_BAR4[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_6_1_VF_BAR4_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_7_1 (0x74040000 + 0x0000813Cu)---

    VF_BAR5[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_7_1_VF_BAR5_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_7_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_7_1_VF_BAR5_MASK              0xFFFFFFFFu                // VF_BAR5[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_7_1_VF_BAR5_SHFT              0u

/* =====================================================================================

  ---PM_CONF_0_1 (0x74040000 + 0x00008174u)---

    RSVD1[15..0]                 - (RW) Reserved
    dat_scale_val0[17..16]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val1[19..18]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val2[21..20]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val3[23..22]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val4[25..24]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val5[27..26]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val6[29..28]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val7[31..30]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val7_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val7_MASK          0xC0000000u                // dat_scale_val7[31..30]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val7_SHFT          30u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val6_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val6_MASK          0x30000000u                // dat_scale_val6[29..28]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val6_SHFT          28u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val5_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val5_MASK          0x0C000000u                // dat_scale_val5[27..26]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val5_SHFT          26u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val4_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val4_MASK          0x03000000u                // dat_scale_val4[25..24]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val4_SHFT          24u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val3_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val3_MASK          0x00C00000u                // dat_scale_val3[23..22]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val3_SHFT          22u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val2_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val2_MASK          0x00300000u                // dat_scale_val2[21..20]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val2_SHFT          20u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val1_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val1_MASK          0x000C0000u                // dat_scale_val1[19..18]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val1_SHFT          18u
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val0_ADDR          PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val0_MASK          0x00030000u                // dat_scale_val0[17..16]
#define PCIE_MAC_IREG_PM_CONF_0_1_dat_scale_val0_SHFT          16u
#define PCIE_MAC_IREG_PM_CONF_0_1_RSVD1_ADDR                   PCIE_MAC_IREG_PM_CONF_0_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_1_RSVD1_MASK                   0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_IREG_PM_CONF_0_1_RSVD1_SHFT                   0u

/* =====================================================================================

  ---PM_CONF_1_1 (0x74040000 + 0x00008178u)---

    dat_register_val0[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val1[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val2[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val3[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val3_ADDR       PCIE_MAC_IREG_PM_CONF_1_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val3_MASK       0xFF000000u                // dat_register_val3[31..24]
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val3_SHFT       24u
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val2_ADDR       PCIE_MAC_IREG_PM_CONF_1_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val2_MASK       0x00FF0000u                // dat_register_val2[23..16]
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val2_SHFT       16u
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val1_ADDR       PCIE_MAC_IREG_PM_CONF_1_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val1_MASK       0x0000FF00u                // dat_register_val1[15..8]
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val1_SHFT       8u
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val0_ADDR       PCIE_MAC_IREG_PM_CONF_1_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val0_MASK       0x000000FFu                // dat_register_val0[7..0]
#define PCIE_MAC_IREG_PM_CONF_1_1_dat_register_val0_SHFT       0u

/* =====================================================================================

  ---PM_CONF_2_1 (0x74040000 + 0x0000817Cu)---

    dat_register_val4[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val5[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val6[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val7[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val7_ADDR       PCIE_MAC_IREG_PM_CONF_2_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val7_MASK       0xFF000000u                // dat_register_val7[31..24]
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val7_SHFT       24u
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val6_ADDR       PCIE_MAC_IREG_PM_CONF_2_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val6_MASK       0x00FF0000u                // dat_register_val6[23..16]
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val6_SHFT       16u
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val5_ADDR       PCIE_MAC_IREG_PM_CONF_2_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val5_MASK       0x0000FF00u                // dat_register_val5[15..8]
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val5_SHFT       8u
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val4_ADDR       PCIE_MAC_IREG_PM_CONF_2_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val4_MASK       0x000000FFu                // dat_register_val4[7..0]
#define PCIE_MAC_IREG_PM_CONF_2_1_dat_register_val4_SHFT       0u

/* =====================================================================================

  ---IMASK_HOST_1 (0x74040000 + 0x00008188u)---

    DMA_END_EN[7..0]             - (RW) See ISTATUS_HOST[7:0] for details of this register's bits
                                     
                                     The register is per physical function register
    DMA_ERR_EN[15..8]            - (RW) See ISTATUS_HOST[15:8] for details of this register's bits
                                     
                                     The register is per physical function register
    A_ATR_EVT_EN[19..16]         - (RW) See ISTATUS_HOST[19:16] for details of this register's bits
                                     
                                     The register is per physical function register
    P_ATR_EVT_EN[23..20]         - (RW) See ISTATUS_HOST[23:20] for details of this register's bits
                                     
                                     The register is per physical function register
    INT_REQUEST_EN[31..24]       - (RW) See ISTATUS_HOST[31:24] for details of this register's bits
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_1_INT_REQUEST_EN_ADDR         PCIE_MAC_IREG_IMASK_HOST_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_1_INT_REQUEST_EN_MASK         0xFF000000u                // INT_REQUEST_EN[31..24]
#define PCIE_MAC_IREG_IMASK_HOST_1_INT_REQUEST_EN_SHFT         24u
#define PCIE_MAC_IREG_IMASK_HOST_1_P_ATR_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_1_P_ATR_EVT_EN_MASK           0x00F00000u                // P_ATR_EVT_EN[23..20]
#define PCIE_MAC_IREG_IMASK_HOST_1_P_ATR_EVT_EN_SHFT           20u
#define PCIE_MAC_IREG_IMASK_HOST_1_A_ATR_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_1_A_ATR_EVT_EN_MASK           0x000F0000u                // A_ATR_EVT_EN[19..16]
#define PCIE_MAC_IREG_IMASK_HOST_1_A_ATR_EVT_EN_SHFT           16u
#define PCIE_MAC_IREG_IMASK_HOST_1_DMA_ERR_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_1_DMA_ERR_EN_MASK             0x0000FF00u                // DMA_ERR_EN[15..8]
#define PCIE_MAC_IREG_IMASK_HOST_1_DMA_ERR_EN_SHFT             8u
#define PCIE_MAC_IREG_IMASK_HOST_1_DMA_END_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_1_DMA_END_EN_MASK             0x000000FFu                // DMA_END_EN[7..0]
#define PCIE_MAC_IREG_IMASK_HOST_1_DMA_END_EN_SHFT             0u

/* =====================================================================================

  ---ISTATUS_HOST_1 (0x74040000 + 0x0000818Cu)---

    DMA_END[7..0]                - (W1C) Reports that a DMA transfer is ended. 
                                     Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[7:0] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    DMA_ERR[15..8]               - (W1C) Reports that an error occurred during a DMA transfer. 
                                     Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[15:8] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    A_ATR_EVT[19..16]            - (W1C) Reports AXI Address Translation events: the event can be disabled by set 0x1AC[19:16] to 1
                                     Bit [16]: AXI Post Error: asserted to indicate that an error occurred on an AXI write request
                                     Bit [17]: AXI Fetch Error: asserted to indicate that an error occurred on an AXI read request
                                     Bit [18]: AXI Discard Error: asserted to signal a completion timeout on an AXI read request
                                     Bit [19]: AXI Doorbell: asserted when an AXI request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[19:16] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    P_ATR_EVT[23..20]            - (W1C) Reports PCIe Address Translation events: the event can be disabled by set 0x1AC[23:20] to 1
                                     Bit [20]: PCIe Post Error: asserted to indicate that an error occurred on a PCIe write request
                                     Bit [21]: PCIe Fetch Error: asserted to indicate that an error occurred on a PCIe read request
                                     Bit [22]: PCIe Discard Error: asserted to signal a completion timeout on a PCIe read request
                                     Bit [23]: PCIe Doorbell: asserted when a PCIe request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[23:20] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    INT_REQUEST[31..24]          - (W1C) Reports external interrupt requests bit[31:24] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_1_INT_REQUEST_ADDR          PCIE_MAC_IREG_ISTATUS_HOST_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_1_INT_REQUEST_MASK          0xFF000000u                // INT_REQUEST[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_1_INT_REQUEST_SHFT          24u
#define PCIE_MAC_IREG_ISTATUS_HOST_1_P_ATR_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_1_P_ATR_EVT_MASK            0x00F00000u                // P_ATR_EVT[23..20]
#define PCIE_MAC_IREG_ISTATUS_HOST_1_P_ATR_EVT_SHFT            20u
#define PCIE_MAC_IREG_ISTATUS_HOST_1_A_ATR_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_1_A_ATR_EVT_MASK            0x000F0000u                // A_ATR_EVT[19..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_1_A_ATR_EVT_SHFT            16u
#define PCIE_MAC_IREG_ISTATUS_HOST_1_DMA_ERR_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_1_DMA_ERR_MASK              0x0000FF00u                // DMA_ERR[15..8]
#define PCIE_MAC_IREG_ISTATUS_HOST_1_DMA_ERR_SHFT              8u
#define PCIE_MAC_IREG_ISTATUS_HOST_1_DMA_END_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_1_DMA_END_MASK              0x000000FFu                // DMA_END[7..0]
#define PCIE_MAC_IREG_ISTATUS_HOST_1_DMA_END_SHFT              0u

/* =====================================================================================

  ---PCIE_LOW_POWER_CTRL_1 (0x74040000 + 0x00008194u)---

    dis_lowpwr_mask[3..0]        - (RW) Those registers can mask external ASPM control interface.
                                     0 : external ASPM control interface can not affect PCIe low power state.
                                     1 : external ASPM control interface can affect PCIe low power state.
                                     Bit[0] : L0s.
                                     Bit[1] : L1.
                                     Bit[2] : L1.1.
                                     Bit[3] : L1.2.
    en_l1_chk_int[4]             - (RW) Uncleaned interrupt status blocks PCIe enter L1 enable
                                     0: disable
                                     1: enable
    RESERVED5[7..5]              - (RO) Reserved bits
    force_dis_lowpwr[11..8]      - (RW) Disable Low Power State
                                     0: PCIe can enter to low power state.
                                     1: PCIe can not enter to low power state.
                                     Bit[0]: L0s (MAC will exit L0s if PCIe link is in L0s)
                                     Bit[1]: L1 ( MAC will exit L1 if PCIe link is in L1)
                                     Bit[2]: L1.1
                                     Bit[3]: L1.2
                                     
                                     The register is per physical function register
    l0l0s_lock_dbc_cnt[23..12]   - (RW) Debounce count for l0l0s_lock
                                     l0l0s_lock will refelt real L0 or L0s state after the debounce time.
                                     The unit of the count is 16T of tl_ck.
    L1_EXIT_NUM[30..24]          - (RW) L1 Exit Number
                                     The counter starts to count when clkreq_in_tl is high.
                                     lpm_state will request to exit L1 when the counter is met.
    L1_EXIT_EN[31]               - (RW) L1 Exit Enable
                                     0: disable to force L1 exit
                                     1: enable to force L1 exit

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_L1_EXIT_EN_ADDR    PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_L1_EXIT_EN_MASK    0x80000000u                // L1_EXIT_EN[31]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_L1_EXIT_EN_SHFT    31u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_L1_EXIT_NUM_ADDR   PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_L1_EXIT_NUM_MASK   0x7F000000u                // L1_EXIT_NUM[30..24]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_L1_EXIT_NUM_SHFT   24u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_l0l0s_lock_dbc_cnt_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_l0l0s_lock_dbc_cnt_MASK 0x00FFF000u                // l0l0s_lock_dbc_cnt[23..12]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_l0l0s_lock_dbc_cnt_SHFT 12u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_force_dis_lowpwr_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_force_dis_lowpwr_MASK 0x00000F00u                // force_dis_lowpwr[11..8]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_force_dis_lowpwr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_en_l1_chk_int_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_en_l1_chk_int_MASK 0x00000010u                // en_l1_chk_int[4]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_en_l1_chk_int_SHFT 4u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_dis_lowpwr_mask_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_dis_lowpwr_mask_MASK 0x0000000Fu                // dis_lowpwr_mask[3..0]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_1_dis_lowpwr_mask_SHFT 0u

/* =====================================================================================

  ---PCIE_ICMD_PM_1 (0x74040000 + 0x00008198u)---

    Send_PME[0]                  - (W1S) Send PME
                                     Local processor can write 1 to send PME bit command in order to generate a PME# event on the PCI Express link.
                                     This is used to ask PCI host processor to restore bridge to a fully functional legacy power state.
                                     Note that this bit is immediately cleared by the MAC : the local processor does not need to clear it.
                                     Note that the PME_En bit in the Power Management Control/Status register should be set to 1b to enable PME# to be asserted.
                                     
                                     The register is per physical function register
    ICMD_PME_TURN_OFF_HWCLR[1]   - (RW) For RC mode.
                                     0 : HW will not clear PME_TURN_OFF bit  automatically by HW when EP received receive PME TURN OFF message.
                                     1 : HW will clear PME_TURN_OFF bit  automatically by HW when EP received receive PME TURN OFF message.
    RSVD1[3..2]                  - (RO) Reserved
    Turn_Off_Link[4]             - (RO) Turn Off Link
                                     The local processor can send a Turn Off Link command in order to start L2 state entry negotiation. 
                                     If the Endpoint device is also ready to enter this state, then both devices will enter L2 state and this link will be turned off. 
                                     Deasserting this signal forces the Core to exit L2 state and wakes the link.
    RSVD2[7..5]                  - (RO) Reserved
    CLKREQ_Clock_control[8]      - (RW) Clock Request Control Capability for RC (RC legacy L1 clock power management)
                                     0: RC does not allow the reference clock to be removed in L1PM state. (RC will enter L1 with Powerdown is P1 for legacy L1 Clock Power Management)
                                     1: RC allows the reference clock to be removed L1PM state. (RC will enter L1 with Powerdown is P2 for legacy L1 Clock Power Management)
                                     The register is only used for RC.
    RSVD3[23..9]                 - (RO) Reserved
    OBFF_control[27..24]         - (RO) OBFF Control Register.
                                     For RC mode only.
                                     If OBFF (Optimized Buffer Flash Fill) is enabled, changing the value of this signal causes the Core to signal an OBFF status change to its link partner. Allowed values are:
                                     - 1111: CPU Active (default)
                                     - 0001: OBFF
                                     - 0000: Idle
                                     Either WAKE# or message signaling can be used, depending on which signaling method is enabled.
                                     If OBFF is not enabled then changing the value of this signal has no effect.
    OBFF_status[31..28]          - (RO) OBFF Status Register.
                                     For EP mode only.
                                     If OBFF is enabled, this signals reports the OBFF status received from the Core link partner. Possible values are:
                                     - 1111: CPU Active
                                     - 0001: OBFF
                                     - 0000: Idle
                                     Either WAKE# or message signaling can be used, depending on which signaling method is enabled.
                                     If OBFF is not enabled then the value of this signal is always "CPU Active".

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_OBFF_status_ADDR          PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_OBFF_status_MASK          0xF0000000u                // OBFF_status[31..28]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_OBFF_status_SHFT          28u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_OBFF_control_ADDR         PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_OBFF_control_MASK         0x0F000000u                // OBFF_control[27..24]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_OBFF_control_SHFT         24u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD3_MASK                0x00FFFE00u                // RSVD3[23..9]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD3_SHFT                9u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_CLKREQ_Clock_control_ADDR PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_CLKREQ_Clock_control_MASK 0x00000100u                // CLKREQ_Clock_control[8]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_CLKREQ_Clock_control_SHFT 8u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD2_MASK                0x000000E0u                // RSVD2[7..5]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD2_SHFT                5u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_Turn_Off_Link_ADDR        PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_Turn_Off_Link_MASK        0x00000010u                // Turn_Off_Link[4]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_Turn_Off_Link_SHFT        4u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD1_MASK                0x0000000Cu                // RSVD1[3..2]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_RSVD1_SHFT                2u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_ICMD_PME_TURN_OFF_HWCLR_ADDR PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_ICMD_PME_TURN_OFF_HWCLR_MASK 0x00000002u                // ICMD_PME_TURN_OFF_HWCLR[1]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_ICMD_PME_TURN_OFF_HWCLR_SHFT 1u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_Send_PME_ADDR             PCIE_MAC_IREG_PCIE_ICMD_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_Send_PME_MASK             0x00000001u                // Send_PME[0]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_1_Send_PME_SHFT             0u

/* =====================================================================================

  ---PCIE_ISTATUS_PM_1 (0x74040000 + 0x0000819Cu)---

    power_state[1..0]            - (RO) Power State
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot or D3cold
                                     
                                     The register is per physical function register
    RSVD1[7..2]                  - (RO) Reserved
    l1pm_sm[10..8]               - (RO) L1SS state machine.
                                     - 000b: L1.0
                                     - 001b: L1.1
                                     - 010b: L1.2 entry
                                     - 011b: L1.2 idle
                                     - 100b: L1.2 exit
    allow_tl_clk_gating[11]      - (RO) allow tl_clk gating when device is in L1 or L2.
    RSVD2[31..12]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_RSVD2_MASK             0xFFFFF000u                // RSVD2[31..12]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_RSVD2_SHFT             12u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_allow_tl_clk_gating_ADDR PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_allow_tl_clk_gating_MASK 0x00000800u                // allow_tl_clk_gating[11]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_allow_tl_clk_gating_SHFT 11u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_l1pm_sm_ADDR           PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_l1pm_sm_MASK           0x00000700u                // l1pm_sm[10..8]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_l1pm_sm_SHFT           8u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_RSVD1_MASK             0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_RSVD1_SHFT             2u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_power_state_ADDR       PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_power_state_MASK       0x00000003u                // power_state[1..0]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_1_power_state_SHFT       0u

/* =====================================================================================

  ---PCIE_LTR_VALUES_1 (0x74040000 + 0x000081A4u)---

    LTR_Max_Snoop_Latency[9..0]  - (RW) Along with the Max Snoop LatencyScale field, this register specifies the maximum snoop latency that a device is permitted to request.
    LTR_Max_Snoop_Latency_Scale[12..10] - (RW) This register provides a scale for the value contained within the Maximum Snoop LatencyValue field. 
                                     Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD1[14..13]                - (RO) Reserved
    LTR_Snoop_latency_requirement[15] - (RW) Snoop latency requirement
    LTR_Max_NonSnoop_Latency[25..16] - (RW) Along with the Max NonSnoop LatencyScale field, this register specifies the maximum nonsnoop latency that a device is permitted to request.
    LTR_Max_NonSnoop_Latency_Scale[28..26] - (RW) This register provides a scale for the value contained within the Maximum NonSnoop LatencyValue field. 
                                     Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD2[30..29]                - (RO) Reserved
    LTR_NonSnoop_latency_requirement[31] - (RW) No-Snoop latency requirement

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_NonSnoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_NonSnoop_latency_requirement_MASK 0x80000000u                // LTR_NonSnoop_latency_requirement[31]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_NonSnoop_latency_requirement_SHFT 31u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_RSVD2_MASK             0x60000000u                // RSVD2[30..29]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_RSVD2_SHFT             29u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_NonSnoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_NonSnoop_Latency_Scale_MASK 0x1C000000u                // LTR_Max_NonSnoop_Latency_Scale[28..26]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_NonSnoop_Latency_Scale_SHFT 26u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_NonSnoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_NonSnoop_Latency_MASK 0x03FF0000u                // LTR_Max_NonSnoop_Latency[25..16]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_NonSnoop_Latency_SHFT 16u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Snoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Snoop_latency_requirement_MASK 0x00008000u                // LTR_Snoop_latency_requirement[15]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Snoop_latency_requirement_SHFT 15u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_RSVD1_MASK             0x00006000u                // RSVD1[14..13]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_RSVD1_SHFT             13u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_Snoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_Snoop_Latency_Scale_MASK 0x00001C00u                // LTR_Max_Snoop_Latency_Scale[12..10]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_Snoop_Latency_Scale_SHFT 10u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_Snoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_1_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_Snoop_Latency_MASK 0x000003FFu                // LTR_Max_Snoop_Latency[9..0]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_1_LTR_Max_Snoop_Latency_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_SET_1 (0x74040000 + 0x000081F0u)---

    imask_host_set[31..0]        - (W1S) Write one to set register "IMASK_HOST" in  0x0188
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_SET_1_imask_host_set_ADDR     PCIE_MAC_IREG_IMASK_HOST_SET_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_SET_1_imask_host_set_MASK     0xFFFFFFFFu                // imask_host_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_SET_1_imask_host_set_SHFT     0u

/* =====================================================================================

  ---IMASK_HOST_CLR_1 (0x74040000 + 0x000081F4u)---

    imask_host_clr[31..0]        - (W1C) Write one to clear register "IMASK_HOST" in  0x0188
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_CLR_1_imask_host_clr_ADDR     PCIE_MAC_IREG_IMASK_HOST_CLR_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_CLR_1_imask_host_clr_MASK     0xFFFFFFFFu                // imask_host_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_CLR_1_imask_host_clr_SHFT     0u

/* =====================================================================================

  ---PCIE_DMA_DUMMY_0_1 (0x74040000 + 0x000081F8u)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_1_PCIE_DUMMY_ADDR       PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_1_PCIE_DUMMY_MASK       0xFFFFFFFFu                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_1_PCIE_DUMMY_SHFT       0u

/* =====================================================================================

  ---PCIE_DMA_DUMMY_1_1 (0x74040000 + 0x000081FCu)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_1_PCIE_DUMMY_ADDR       PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_1_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_1_PCIE_DUMMY_MASK       0xFFFFFFFFu                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_1_PCIE_DUMMY_SHFT       0u

/* =====================================================================================

  ---ISTATUS_HOST_CTRL_1 (0x74040000 + 0x0000831Cu)---

    ISTATUS_HOST_DIS[0]          - (RW) When the register is set to 1, all interrupt to Host will be disabled
                                     0 : Enable
                                     1 : Disable
                                     
                                     The register is per physical function register
    ISTATUS_HOST_EXT_CLR_DIS[1]  - (RW) When external interrupt in fall, it will clear ISTATUS_HOST status or not (0x18C)
                                     0 : Enable (external interrupt falling edge will clear corresponding bit of ISTATUS_HOST automatically) (MTK Proprietary Mode)
                                     1 : Disable (external interrupt falling edge will not clear corresponding bit of ISTATUS_HOST automatically) (Original PLDA mode)
    ISTATUS_HOST_DIS_LOCAL[2]    - (RW) When the register is set to 1, all interrupt to Host will be disabled, which is for EP CPU in local.
                                     0 : Enable
                                     1 : Disable
                                     
                                     The register is per physical function register
    RSVD1[15..3]                 - (RW) Reserved
    ISTATUS_HOST_ATR_DIS[23..16] - (RW) Host Processor ATR Interrupt Disable
                                     Bit [16] AXI Post Error Disable
                                     Bit [17] AXI Fetch Error Disable
                                     Bit [18] AXI Discard Error Disable
                                     Bit [19] AXI Doorbell Disable
                                     Bit [20] PCIe Post Error Disable
                                     Bit [21] PCIe Fetch Error Disable
                                     Bit [22] PCIe Discard Error Disable
                                     Bit [23] PCIe Doorbell Disable
    RSVD2[31..24]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_RSVD2_ADDR           PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_RSVD2_MASK           0xFF000000u                // RSVD2[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_RSVD2_SHFT           24u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_ATR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_ATR_DIS_MASK 0x00FF0000u                // ISTATUS_HOST_ATR_DIS[23..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_ATR_DIS_SHFT 16u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_RSVD1_ADDR           PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_RSVD1_MASK           0x0000FFF8u                // RSVD1[15..3]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_RSVD1_SHFT           3u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_DIS_LOCAL_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_DIS_LOCAL_MASK 0x00000004u                // ISTATUS_HOST_DIS_LOCAL[2]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_DIS_LOCAL_SHFT 2u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_EXT_CLR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_EXT_CLR_DIS_MASK 0x00000002u                // ISTATUS_HOST_EXT_CLR_DIS[1]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_EXT_CLR_DIS_SHFT 1u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_DIS_MASK 0x00000001u                // ISTATUS_HOST_DIS[0]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_1_ISTATUS_HOST_DIS_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_AUTO_CLR_1 (0x74040000 + 0x000083C4u)---

    SW_TRIG_AUTO_CLR[31..0]      - (RW) Auto clear sw trigger interrupt status when msi sent
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_1_SW_TRIG_AUTO_CLR_ADDR PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_1_ADDR
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_1_SW_TRIG_AUTO_CLR_MASK 0xFFFFFFFFu                // SW_TRIG_AUTO_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_1_SW_TRIG_AUTO_CLR_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_INTR_SET_1 (0x74040000 + 0x000083C8u)---

    SW_TRIG_INTR_SET[31..0]      - (W1S) Write one set register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_1_SW_TRIG_INTR_SET_ADDR PCIE_MAC_IREG_SW_TRIG_INTR_SET_1_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_1_SW_TRIG_INTR_SET_MASK 0xFFFFFFFFu                // SW_TRIG_INTR_SET[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_1_SW_TRIG_INTR_SET_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_INTR_CLR_1 (0x74040000 + 0x000083CCu)---

    SW_TRIG_INTR_CLR[31..0]      - (W1C) Write one clear register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_1_SW_TRIG_INTR_CLR_ADDR PCIE_MAC_IREG_SW_TRIG_INTR_CLR_1_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_1_SW_TRIG_INTR_CLR_MASK 0xFFFFFFFFu                // SW_TRIG_INTR_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_1_SW_TRIG_INTR_CLR_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_MSIX_1 (0x74040000 + 0x000083ECu)---

    cfg_msix_ctrl[3..0]          - (RW) Multiple MSIX message Enable
                                     System software writes to this field to indicate the number of allocated MSIX messages (equal to or less than the number of requested MSIX messages).
                                     The number of allocated messages is aligned to a power of two. 
                                     If a function requests four MSIX messages, system software can allocate either four, two, or one message by writing a 010b, 001b, or 000b to this field, respectively. 
                                     When MSIX is enabled, a device will be allocated at least 1 message.
                                     
                                     Bit[i*4+0] : Program to enable the MSI-X merging function
                                     0: disable
                                     1:enable
                                     
                                     Bit[i*4+1+:3] : Program a 3-bit value in this field indicating the actual number of MSI-X allocated.
                                     - 000b: 1 message allocated
                                     - 001b: 2 messages  allocated
                                     - 010b: 4 message  allocated
                                     - 011b: 8 messages  allocated
                                     - 100b: 16 message  allocated
                                     - 101b: 32 messages  allocated
                                     - 110b: 64 messages  allocated
                                     - 111b: 128 messages  allocated
                                     
                                     bit[3:0] : MSIX Group 0, each group has 128 MSIX vector
                                     
                                     The register is per physical function register
    int_sent_byp_istatus_host[4] - (RW) Bypass to check the condition of istatus_host when int_sent assert
                                     1'b0: enable to check the condition of istatus_host when int_sent assert.
                                     1'b1: bypass to check the condition of istatus_host when int_sent assert.
    intx_req_byp_all_sent[5]     - (RW) Bypass to check all int sent for intx req
                                     1'b0: enable
                                     1'b1: bypass
    int_sent_byp_msi_pending[6]  - (RW) Bypass to check msi pending when assert int sent
                                     1'b0: enable
                                     1'b1: bypass
    RESERVED7[31..7]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_int_sent_byp_msi_pending_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_int_sent_byp_msi_pending_MASK 0x00000040u                // int_sent_byp_msi_pending[6]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_int_sent_byp_msi_pending_SHFT 6u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_intx_req_byp_all_sent_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_intx_req_byp_all_sent_MASK 0x00000020u                // intx_req_byp_all_sent[5]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_intx_req_byp_all_sent_SHFT 5u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_int_sent_byp_istatus_host_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_int_sent_byp_istatus_host_MASK 0x00000010u                // int_sent_byp_istatus_host[4]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_int_sent_byp_istatus_host_SHFT 4u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_cfg_msix_ctrl_ADDR       PCIE_MAC_IREG_PCIE_CFG_MSIX_1_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_cfg_msix_ctrl_MASK       0x0000000Fu                // cfg_msix_ctrl[3..0]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_1_cfg_msix_ctrl_SHFT       0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_0_1 (0x74040000 + 0x00008E80u)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_1_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_1_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_1_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_1_1 (0x74040000 + 0x00008E84u)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i+32 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_1_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_1_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_1_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_2_1 (0x74040000 + 0x00008E88u)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet. Bit number i corresponds to Entry number i+64 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_1_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_1_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_1_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_3_1 (0x74040000 + 0x00008E8Cu)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i+96 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_1_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_1_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_1_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_0_1 (0x74040000 + 0x00008F00u)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_1_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_1_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_1_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_1_1 (0x74040000 + 0x00008F04u)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+32 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_1_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_1_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_1_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_2_1 (0x74040000 + 0x00008F08u)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+64 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_1_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_1_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_1_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_3_1 (0x74040000 + 0x00008F0Cu)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+96 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_1_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_1_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_1_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_0_1 (0x74040000 + 0x00008F80u)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_1_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_1_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_1_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_1_1 (0x74040000 + 0x00008F84u)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+32 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_1_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_1_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_1_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_2_1 (0x74040000 + 0x00008F88u)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+64 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_1_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_1_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_1_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_3_1 (0x74040000 + 0x00008F8Cu)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+96 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_1_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_1_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_1_msix_pba_SHFT          0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_0_1 (0x74040000 + 0x0000B000u)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_1_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_1_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_1_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_1_1 (0x74040000 + 0x0000B004u)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_1_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_1_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_1_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_2_1 (0x74040000 + 0x0000B008u)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_1_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_1_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_1_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_3_1 (0x74040000 + 0x0000B00Cu)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_1_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_1_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_1_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_0_1 (0x74040000 + 0x0000B080u)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_1_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_1_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_1_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_1_1 (0x74040000 + 0x0000B084u)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_1_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_1_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_1_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_2_1 (0x74040000 + 0x0000B088u)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_1_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_1_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_1_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_3_1 (0x74040000 + 0x0000B08Cu)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_1_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_1_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_1_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_0_1 (0x74040000 + 0x0000B100u)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_1_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_1_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_1_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_1_1 (0x74040000 + 0x0000B104u)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_1_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_1_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_1_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_2_1 (0x74040000 + 0x0000B108u)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_1_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_1_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_1_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_3_1 (0x74040000 + 0x0000B10Cu)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_1_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_1_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_1_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_1_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1 (0x74040000 + 0x0000B230u)---

    axi_slv_mem_rd_max_latency_by_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave read max、min and cur record by function
                                     Max axi slave memory read latency cycle  by function
    axi_slv_mem_rd_min_latency_by_func[31..16] - (W1C) Mine axi slave memory read latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_axi_slv_mem_rd_min_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_axi_slv_mem_rd_min_latency_by_func_MASK 0xFFFF0000u                // axi_slv_mem_rd_min_latency_by_func[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_axi_slv_mem_rd_min_latency_by_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_axi_slv_mem_rd_max_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_axi_slv_mem_rd_max_latency_by_func_MASK 0x0000FFFFu                // axi_slv_mem_rd_max_latency_by_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_1_axi_slv_mem_rd_max_latency_by_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1 (0x74040000 + 0x0000B234u)---

    axi_slv_mem_rd_cur_latency_by_func[15..0] - (W1C) Current axi slave memory read latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_axi_slv_mem_rd_cur_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_axi_slv_mem_rd_cur_latency_by_func_MASK 0x0000FFFFu                // axi_slv_mem_rd_cur_latency_by_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_1_axi_slv_mem_rd_cur_latency_by_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1 (0x74040000 + 0x0000B238u)---

    axi_slv_mem_wr_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave write max、min and cur record by function
                                     Max axi slave memory write latency cycle by function
    axi_slv_mem_wr_min_latency_func[31..16] - (W1C) Mine axi slave memory write latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_axi_slv_mem_wr_min_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_axi_slv_mem_wr_min_latency_func_MASK 0xFFFF0000u                // axi_slv_mem_wr_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_axi_slv_mem_wr_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_axi_slv_mem_wr_max_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_axi_slv_mem_wr_max_latency_func_MASK 0x0000FFFFu                // axi_slv_mem_wr_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_1_axi_slv_mem_wr_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1 (0x74040000 + 0x0000B23Cu)---

    axi_slv_mem_wr_cur_latency_func[15..0] - (W1C) Current axi slave memory write latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_axi_slv_mem_wr_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_axi_slv_mem_wr_cur_latency_func_MASK 0x0000FFFFu                // axi_slv_mem_wr_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_1_axi_slv_mem_wr_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_0_By_Func_1 (0x74040000 + 0x0000B240u)---

    axi_mst_mem_rd_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi master read max、min and cur record by function
                                     Max axi master memory read latency cycle by function
    axi_mst_mem_rd_min_latency_func[31..16] - (W1C) Mine axi master memory read latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_axi_mst_mem_rd_min_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_axi_mst_mem_rd_min_latency_func_MASK 0xFFFF0000u                // axi_mst_mem_rd_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_axi_mst_mem_rd_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_axi_mst_mem_rd_max_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_axi_mst_mem_rd_max_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_rd_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_1_axi_mst_mem_rd_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1 (0x74040000 + 0x0000B244u)---

    axi_mst_mem_rd_cur_latency_func[15..0] - (W1C) Current axi master memory read latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_axi_mst_mem_rd_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_axi_mst_mem_rd_cur_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_rd_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_1_axi_mst_mem_rd_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_0_By_Func_1 (0x74040000 + 0x0000B248u)---

    axi_mst_mem_wr_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi master write max、min and cur record by function
                                     Max axi master memory write latency cycle by function
    axi_mst_mem_wr_min_latency_func[31..16] - (W1C) Mine axi master memory write latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_axi_mst_mem_wr_min_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_axi_mst_mem_wr_min_latency_func_MASK 0xFFFF0000u                // axi_mst_mem_wr_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_axi_mst_mem_wr_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_axi_mst_mem_wr_max_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_axi_mst_mem_wr_max_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_wr_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_1_axi_mst_mem_wr_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_1_By_Func_1 (0x74040000 + 0x0000B24Cu)---

    axi_mst_mem_wr_cur_latency_func[15..0] - (W1C) Current axi master memory write latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_axi_mst_mem_wr_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_axi_mst_mem_wr_cur_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_wr_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_1_axi_mst_mem_wr_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1 (0x74040000 + 0x0000B394u)---

    pcie_mrd_req_by_func_latency_water_mark[15..0] - (RW) PCIe memory read request by func latency water mark setting
    pcie_mwr_req_by_func_latency_water_mark[31..16] - (RW) PCIe memory write request by func latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mwr_req_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mwr_req_by_func_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_req_by_func_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mwr_req_by_func_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mrd_req_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mrd_req_by_func_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_req_by_func_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mrd_req_by_func_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1 (0x74040000 + 0x0000B398u)---

    pcie_mrd_cpl_by_func_latency_water_mark[15..0] - (RW) PCIe memory read complete(like EP mode MMIO) by func latency water mark setting
    pcie_mwr_cpl_by_func_latency_water_mark[31..16] - (RW) PCIe memory write complete(like EP mode MMIO) by func latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mwr_cpl_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mwr_cpl_by_func_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_cpl_by_func_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mwr_cpl_by_func_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mrd_cpl_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mrd_cpl_by_func_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_cpl_by_func_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_1_pcie_mrd_cpl_by_func_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_LOCAL_T1A_LO_1 (0x74040000 + 0x0000B540u)---

    pcie_ptm_rx_t_local_t1_a_lo[31..0] - (RO) HW PTM t1' local time stamp low 32bits register
                                     this register records the local t1' time stamp low 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_1_pcie_ptm_rx_t_local_t1_a_lo_ADDR PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_1_pcie_ptm_rx_t_local_t1_a_lo_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_local_t1_a_lo[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_1_pcie_ptm_rx_t_local_t1_a_lo_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_LOCAL_T1A_HI_1 (0x74040000 + 0x0000B544u)---

    pcie_ptm_rx_t_local_t1_a_hi[31..0] - (RO) HW PTM t1' local time stamp high 32bits register
                                     this register records the local t1' time stamp high 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_1_pcie_ptm_rx_t_local_t1_a_hi_ADDR PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_1_pcie_ptm_rx_t_local_t1_a_hi_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_local_t1_a_hi[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_1_pcie_ptm_rx_t_local_t1_a_hi_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_MASTER_T1A_LO_1 (0x74040000 + 0x0000B548u)---

    pcie_ptm_rx_t_mst_t1_a_lo[31..0] - (RO) HW PTM master t1' time stamp low 32bits register
                                     this register will reflect the master t1' time stamp low 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_1_pcie_ptm_rx_t_mst_t1_a_lo_ADDR PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_1_pcie_ptm_rx_t_mst_t1_a_lo_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_mst_t1_a_lo[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_1_pcie_ptm_rx_t_mst_t1_a_lo_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_MASTER_T1A_HI_1 (0x74040000 + 0x0000B54Cu)---

    pcie_ptm_rx_t_mst_t1_a_hi[31..0] - (RO) HW PTM t1' master time stamp high 32bits register
                                     this register will reflect the master t1' time stamp high 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_1_pcie_ptm_rx_t_mst_t1_a_hi_ADDR PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_1_pcie_ptm_rx_t_mst_t1_a_hi_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_mst_t1_a_hi[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_1_pcie_ptm_rx_t_mst_t1_a_hi_SHFT 0u

/* =====================================================================================

  ---HW_PTM_INFO_VALID_1 (0x74040000 + 0x0000B550u)---

    Reserved[3..0]               - (RO) Reserved
    pcie_ptm_handshake_round_fail_count[6..4] - (RO) HW PTM get the handshake round fail count for EP trigger mode
                                     Max value of this count is 7, HW will trigger pcie_ep_ptm_handshake_fail assert. During pcie_ep_ptm_handshake_fail assertion, the value could keep to 7.
                                     this count could clear to 0 when pcie_ep_ptm_handshake_fail deassert or pcie_ep_ptm_calculated_mst_time_valid assert.
    RESERVED7[7]                 - (RO) Reserved bits
    pcie_ptm_last_rspd_rcv[8]    - (RO) HW PTM received a ResponseD packet for the last packet
                                     1'b1: last received ptm packet is ResponseD
                                     1'b0: last received ptm packet is not ResponseD
    ptm_handshake_round_valid_count[10..9] - (RO) HW PTM get the valid handshake round count for EP mode
    RESERVED11[11]               - (RO) Reserved bits
    ptm_valid_t2_t3[12]          - (RO) HW PTM get the valid t2,t3 value for RC mode
                                     1'b1: get the valid t2, t3 value
                                     1'b0: get the invalid t2, t3 value
    RESERVED13[14..13]           - (RO) Reserved bits
    pcie_ep_ptm_trigger_mode[15] - (RW) HW PTM trigger mode select for EP mode
                                     1'b0: send PTM request packet by periodically when enable PTM
                                     1'b1: send PTM request packet by SW trigger "pcie_hw_ptm_rqst_dis" when enable PTM
    pcie_ep_ptm_handshake_fail[23..16] - (W1C) HW PTM dialog handshake round indicator for EP mode per function
                                     1'b1: the handshake round fail count is more or equal 7
                                     1'b0: the handshake round fail count is less than 7
    pcie_ep_ptm_calculated_mst_time_valid[31..24] - (W1C) HW PTM calculated master time t1' is valid for EP mode per function
                                     1'b1: HW calculated master time t1' is valid per function
                                     1'b0: HW calculated master time t1' is not valid per function

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_calculated_mst_time_valid_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_calculated_mst_time_valid_MASK 0xFF000000u                // pcie_ep_ptm_calculated_mst_time_valid[31..24]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_calculated_mst_time_valid_SHFT 24u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_handshake_fail_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_handshake_fail_MASK 0x00FF0000u                // pcie_ep_ptm_handshake_fail[23..16]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_handshake_fail_SHFT 16u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_trigger_mode_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_trigger_mode_MASK 0x00008000u                // pcie_ep_ptm_trigger_mode[15]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ep_ptm_trigger_mode_SHFT 15u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ptm_valid_t2_t3_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ptm_valid_t2_t3_MASK 0x00001000u                // ptm_valid_t2_t3[12]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ptm_valid_t2_t3_SHFT 12u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ptm_handshake_round_valid_count_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ptm_handshake_round_valid_count_MASK 0x00000600u                // ptm_handshake_round_valid_count[10..9]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ptm_handshake_round_valid_count_SHFT 9u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ptm_last_rspd_rcv_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ptm_last_rspd_rcv_MASK 0x00000100u                // pcie_ptm_last_rspd_rcv[8]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ptm_last_rspd_rcv_SHFT 8u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ptm_handshake_round_fail_count_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ptm_handshake_round_fail_count_MASK 0x00000070u                // pcie_ptm_handshake_round_fail_count[6..4]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_pcie_ptm_handshake_round_fail_count_SHFT 4u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_Reserved_ADDR        PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_Reserved_MASK        0x0000000Fu                // Reserved[3..0]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_1_Reserved_SHFT        0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_1 (0x74040000 + 0x0000B82Cu)---

    pwr_func_d0_state_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_1_pwr_func_d0_state_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_1_pwr_func_d0_state_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_func_d0_state_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_1_pwr_func_d0_state_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_1 (0x74040000 + 0x0000B830u)---

    pwr_func_d0_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_1_pwr_func_d0_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_1_pwr_func_d0_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_func_d0_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_1_pwr_func_d0_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_1 (0x74040000 + 0x0000B834u)---

    pwr_func_d3_state_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D3 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_1_pwr_func_d3_state_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_1_pwr_func_d3_state_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_func_d3_state_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_1_pwr_func_d3_state_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_1 (0x74040000 + 0x0000B838u)---

    pwr_func_d3_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D3 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_1_pwr_func_d3_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_1_pwr_func_d3_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_func_d3_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_1_pwr_func_d3_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_1 (0x74040000 + 0x0000B87Cu)---

    pwr_l1p0_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p0_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p0_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p0_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_1 (0x74040000 + 0x0000B880u)---

    pwr_l1p0_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p0_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p0_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p0_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_1 (0x74040000 + 0x0000B884u)---

    pwr_l1p1_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p1_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p1_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p1_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_1 (0x74040000 + 0x0000B888u)---

    pwr_l1p1_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p1_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p1_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p1_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_1 (0x74040000 + 0x0000B88Cu)---

    pwr_l1p2_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p2_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p2_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_1_pwr_l1p2_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_1 (0x74040000 + 0x0000B890u)---

    pwr_l1p2_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p2_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p2_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_1_pwr_l1p2_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D0_EXIT_CNT_LSB_1 (0x74040000 + 0x0000B894u)---

    pwr_d0_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D0 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_1_pwr_d0_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_1_pwr_d0_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_d0_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_1_pwr_d0_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D0_EXIT_CNT_MSB_1 (0x74040000 + 0x0000B898u)---

    pwr_d0_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D0 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_1_pwr_d0_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_1_pwr_d0_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_d0_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_1_pwr_d0_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D3_EXIT_CNT_LSB_1 (0x74040000 + 0x0000B89Cu)---

    pwr_d3_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D3 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_1_pwr_d3_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_1_pwr_d3_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_d3_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_1_pwr_d3_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D3_EXIT_CNT_MSB_1 (0x74040000 + 0x0000B8A0u)---

    pwr_d3_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D3 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_1_pwr_d3_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_1_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_1_pwr_d3_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_d3_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_1_pwr_d3_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_ENABLE_1 (0x74040000 + 0x0000B92Cu)---

    msi_send_timestamp_record_enable[31..0] - (RW) Enable record msi vector send timestamp, per function
                                     1'b0:disbale
                                     1'b1:enable
                                     bit0:for functionx msi0
                                     bit1:for functionx msi1
                                     …......
                                     Bit30:for functionx msi30
                                     bit31:for functionx msi31

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_1_msi_send_timestamp_record_enable_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_1_msi_send_timestamp_record_enable_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_enable[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_1_msi_send_timestamp_record_enable_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_INFO_RECORD_CTRL_1 (0x74040000 + 0x0000B930u)---

    msi_send_timestamp_sw_clr[0] - (RW) Record msi send timestamp,There are total of 16 registers covered by the loop, per function.
                                     1'b0:no clear
                                     1'b1:clear 16 timestamp record register 0x3940-0x39BC.
    msi_send_num_record_en[1]    - (RW) Enable record per msi send number, per function.
                                     1'b0:disable record per msi send number (0x3A10-0x3A8C per function)
                                     1'b1:enable record per msi send number.(0x3A10-0x3A8C per function)
    msi_send_num_record_sw_clr[2] - (RW) software clear record per msi send number, per function.
                                     1'b0:no clear per function
                                     1'b1:clear record per msi send number.(0x3A10-0x3A8C per function)
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_Reserved_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_Reserved_MASK 0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_Reserved_SHFT 3u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_num_record_sw_clr_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_num_record_sw_clr_MASK 0x00000004u                // msi_send_num_record_sw_clr[2]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_num_record_sw_clr_SHFT 2u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_num_record_en_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_num_record_en_MASK 0x00000002u                // msi_send_num_record_en[1]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_num_record_en_SHFT 1u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_timestamp_sw_clr_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_timestamp_sw_clr_MASK 0x00000001u                // msi_send_timestamp_sw_clr[0]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_1_msi_send_timestamp_sw_clr_SHFT 0u

/* =====================================================================================

  ---PME_INFO_RECORD_CTRL_1 (0x74040000 + 0x0000B9C0u)---

    pme_send_timestamp_clr[0]    - (RW) Clear pme send timestamp record.(0x39C4-0x39C8), per function
                                     1'b0:no clear.
                                     1'b1:clear functionx pme  send timestamp record.
    Reserved[31..1]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_Reserved_ADDR     PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_Reserved_MASK     0xFFFFFFFEu                // Reserved[31..1]
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_Reserved_SHFT     1u
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_pme_send_timestamp_clr_ADDR PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_pme_send_timestamp_clr_MASK 0x00000001u                // pme_send_timestamp_clr[0]
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_1_pme_send_timestamp_clr_SHFT 0u

/* =====================================================================================

  ---PME_SEND_TIMESTAMP_RECORD_LSB_1 (0x74040000 + 0x0000B9C4u)---

    pme_send_timestamp_record_lsb[31..0] - (RO) Record pme send  timestamp
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_1_pme_send_timestamp_record_lsb_ADDR PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_1_ADDR
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_1_pme_send_timestamp_record_lsb_MASK 0xFFFFFFFFu                // pme_send_timestamp_record_lsb[31..0]
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_1_pme_send_timestamp_record_lsb_SHFT 0u

/* =====================================================================================

  ---PME_SEND_TIMESTAMP_RECORD_MSB_1 (0x74040000 + 0x0000B9C8u)---

    pme_send_timestamp_record_msb[31..0] - (RO) Record pme send  timestamp
                                     [31:0]:local_sys_time[63:32]

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_1_pme_send_timestamp_record_msb_ADDR PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_1_ADDR
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_1_pme_send_timestamp_record_msb_MASK 0xFFFFFFFFu                // pme_send_timestamp_record_msb[31..0]
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_1_pme_send_timestamp_record_msb_SHFT 0u

/* =====================================================================================

  ---WAKE_INFO_RECORD_CTRL_1 (0x74040000 + 0x0000B9DCu)---

    pad_wake_timestamp_clr[0]    - (RW) Clear PAD_WAKEN  wakeup timestamp record.(0x39CC-0X39D0)
                                     1'b0:no clear.
                                     1'b1:clear PAD_WAKEN  wakeup timestamp record.
    pad_perst_n_timestamp_clr[1] - (RW) Clear  PAD_PERST_N  release timestamp record.(0x39D4-0X39D8)
                                     1'b0:no clear.
                                     1'b1:clear  PAD_PERST_N  release timestamp record.
    rg_sw_dbgsel_tl[2]           - (RW) Enable tl_ck on or off debug.
                                     1'b0:disable tl_ck on or off debug
                                     1'b1:enable tl_ck on or off debug
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_Reserved_ADDR    PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_Reserved_MASK    0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_Reserved_SHFT    3u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_rg_sw_dbgsel_tl_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_rg_sw_dbgsel_tl_MASK 0x00000004u                // rg_sw_dbgsel_tl[2]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_rg_sw_dbgsel_tl_SHFT 2u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_pad_perst_n_timestamp_clr_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_pad_perst_n_timestamp_clr_MASK 0x00000002u                // pad_perst_n_timestamp_clr[1]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_pad_perst_n_timestamp_clr_SHFT 1u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_pad_wake_timestamp_clr_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_pad_wake_timestamp_clr_MASK 0x00000001u                // pad_wake_timestamp_clr[0]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_1_pad_wake_timestamp_clr_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI0_1 (0x74040000 + 0x0000BA10u)---

    msi_send_num_record_msi0[31..0] - (RO) Record the number of msi0 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_1_msi_send_num_record_msi0_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_1_msi_send_num_record_msi0_MASK 0xFFFFFFFFu                // msi_send_num_record_msi0[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_1_msi_send_num_record_msi0_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI1_1 (0x74040000 + 0x0000BA14u)---

    msi_send_num_record_msi1[31..0] - (RO) Record the number of msi1 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_1_msi_send_num_record_msi1_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_1_msi_send_num_record_msi1_MASK 0xFFFFFFFFu                // msi_send_num_record_msi1[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_1_msi_send_num_record_msi1_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI2_1 (0x74040000 + 0x0000BA18u)---

    msi_send_num_record_msi2[31..0] - (RO) Record the number of msi2 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_1_msi_send_num_record_msi2_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_1_msi_send_num_record_msi2_MASK 0xFFFFFFFFu                // msi_send_num_record_msi2[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_1_msi_send_num_record_msi2_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI3_1 (0x74040000 + 0x0000BA1Cu)---

    msi_send_num_record_msi3[31..0] - (RO) Record the number of msi3 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_1_msi_send_num_record_msi3_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_1_msi_send_num_record_msi3_MASK 0xFFFFFFFFu                // msi_send_num_record_msi3[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_1_msi_send_num_record_msi3_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI4_1 (0x74040000 + 0x0000BA20u)---

    msi_send_num_record_msi4[31..0] - (RO) Record the number of msi4 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_1_msi_send_num_record_msi4_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_1_msi_send_num_record_msi4_MASK 0xFFFFFFFFu                // msi_send_num_record_msi4[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_1_msi_send_num_record_msi4_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI5_1 (0x74040000 + 0x0000BA24u)---

    msi_send_num_record_msi5[31..0] - (RO) Record the number of msi5 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_1_msi_send_num_record_msi5_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_1_msi_send_num_record_msi5_MASK 0xFFFFFFFFu                // msi_send_num_record_msi5[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_1_msi_send_num_record_msi5_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI6_1 (0x74040000 + 0x0000BA28u)---

    msi_send_num_record_msi6[31..0] - (RO) Record the number of msi6 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_1_msi_send_num_record_msi6_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_1_msi_send_num_record_msi6_MASK 0xFFFFFFFFu                // msi_send_num_record_msi6[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_1_msi_send_num_record_msi6_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI7_1 (0x74040000 + 0x0000BA2Cu)---

    msi_send_num_record_msi7[31..0] - (RO) Record the number of msi7 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_1_msi_send_num_record_msi7_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_1_msi_send_num_record_msi7_MASK 0xFFFFFFFFu                // msi_send_num_record_msi7[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_1_msi_send_num_record_msi7_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI8_1 (0x74040000 + 0x0000BA30u)---

    msi_send_num_record_msi8[31..0] - (RO) Record the number of msi8 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_1_msi_send_num_record_msi8_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_1_msi_send_num_record_msi8_MASK 0xFFFFFFFFu                // msi_send_num_record_msi8[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_1_msi_send_num_record_msi8_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI9_1 (0x74040000 + 0x0000BA34u)---

    msi_send_num_record_msi9[31..0] - (RO) Record the number of msi9 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_1_msi_send_num_record_msi9_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_1_msi_send_num_record_msi9_MASK 0xFFFFFFFFu                // msi_send_num_record_msi9[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_1_msi_send_num_record_msi9_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI10_1 (0x74040000 + 0x0000BA38u)---

    msi_send_num_record_msi10[31..0] - (RO) Record the number of msi10 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_1_msi_send_num_record_msi10_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_1_msi_send_num_record_msi10_MASK 0xFFFFFFFFu                // msi_send_num_record_msi10[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_1_msi_send_num_record_msi10_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI11_1 (0x74040000 + 0x0000BA3Cu)---

    msi_send_num_record_msi11[31..0] - (RO) Record the number of msi11 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_1_msi_send_num_record_msi11_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_1_msi_send_num_record_msi11_MASK 0xFFFFFFFFu                // msi_send_num_record_msi11[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_1_msi_send_num_record_msi11_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI12_1 (0x74040000 + 0x0000BA40u)---

    msi_send_num_record_msi12[31..0] - (RO) Record the number of msi12 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_1_msi_send_num_record_msi12_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_1_msi_send_num_record_msi12_MASK 0xFFFFFFFFu                // msi_send_num_record_msi12[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_1_msi_send_num_record_msi12_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI13_1 (0x74040000 + 0x0000BA44u)---

    msi_send_num_record_msi13[31..0] - (RO) Record the number of msi13 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_1_msi_send_num_record_msi13_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_1_msi_send_num_record_msi13_MASK 0xFFFFFFFFu                // msi_send_num_record_msi13[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_1_msi_send_num_record_msi13_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI14_1 (0x74040000 + 0x0000BA48u)---

    msi_send_num_record_msi14[31..0] - (RO) Record the number of msi14 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_1_msi_send_num_record_msi14_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_1_msi_send_num_record_msi14_MASK 0xFFFFFFFFu                // msi_send_num_record_msi14[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_1_msi_send_num_record_msi14_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI15_1 (0x74040000 + 0x0000BA4Cu)---

    msi_send_num_record_msi15[31..0] - (RO) Record the number of msi15 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_1_msi_send_num_record_msi15_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_1_msi_send_num_record_msi15_MASK 0xFFFFFFFFu                // msi_send_num_record_msi15[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_1_msi_send_num_record_msi15_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI16_1 (0x74040000 + 0x0000BA50u)---

    msi_send_num_record_msi16[31..0] - (RO) Record the number of msi16 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_1_msi_send_num_record_msi16_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_1_msi_send_num_record_msi16_MASK 0xFFFFFFFFu                // msi_send_num_record_msi16[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_1_msi_send_num_record_msi16_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI17_1 (0x74040000 + 0x0000BA54u)---

    msi_send_num_record_msi17[31..0] - (RO) Record the number of msi17 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_1_msi_send_num_record_msi17_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_1_msi_send_num_record_msi17_MASK 0xFFFFFFFFu                // msi_send_num_record_msi17[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_1_msi_send_num_record_msi17_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI18_1 (0x74040000 + 0x0000BA58u)---

    msi_send_num_record_msi18[31..0] - (RO) Record the number of msi18 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_1_msi_send_num_record_msi18_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_1_msi_send_num_record_msi18_MASK 0xFFFFFFFFu                // msi_send_num_record_msi18[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_1_msi_send_num_record_msi18_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI19_1 (0x74040000 + 0x0000BA5Cu)---

    msi_send_num_record_msi19[31..0] - (RO) Record the number of msi19 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_1_msi_send_num_record_msi19_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_1_msi_send_num_record_msi19_MASK 0xFFFFFFFFu                // msi_send_num_record_msi19[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_1_msi_send_num_record_msi19_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI20_1 (0x74040000 + 0x0000BA60u)---

    msi_send_num_record_msi20[31..0] - (RO) Record the number of msi20 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_1_msi_send_num_record_msi20_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_1_msi_send_num_record_msi20_MASK 0xFFFFFFFFu                // msi_send_num_record_msi20[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_1_msi_send_num_record_msi20_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI21_1 (0x74040000 + 0x0000BA64u)---

    msi_send_num_record_msi21[31..0] - (RO) Record the number of msi21 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_1_msi_send_num_record_msi21_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_1_msi_send_num_record_msi21_MASK 0xFFFFFFFFu                // msi_send_num_record_msi21[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_1_msi_send_num_record_msi21_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI22_1 (0x74040000 + 0x0000BA68u)---

    msi_send_num_record_msi22[31..0] - (RO) Record the number of msi22 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_1_msi_send_num_record_msi22_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_1_msi_send_num_record_msi22_MASK 0xFFFFFFFFu                // msi_send_num_record_msi22[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_1_msi_send_num_record_msi22_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI23_1 (0x74040000 + 0x0000BA6Cu)---

    msi_send_num_record_msi23[31..0] - (RO) Record the number of msi23 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_1_msi_send_num_record_msi23_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_1_msi_send_num_record_msi23_MASK 0xFFFFFFFFu                // msi_send_num_record_msi23[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_1_msi_send_num_record_msi23_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI24_1 (0x74040000 + 0x0000BA70u)---

    msi_send_num_record_msi24[31..0] - (RO) Record the number of msi24 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_1_msi_send_num_record_msi24_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_1_msi_send_num_record_msi24_MASK 0xFFFFFFFFu                // msi_send_num_record_msi24[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_1_msi_send_num_record_msi24_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI25_1 (0x74040000 + 0x0000BA74u)---

    msi_send_num_record_msi25[31..0] - (RO) Record the number of msi25 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_1_msi_send_num_record_msi25_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_1_msi_send_num_record_msi25_MASK 0xFFFFFFFFu                // msi_send_num_record_msi25[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_1_msi_send_num_record_msi25_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI26_1 (0x74040000 + 0x0000BA78u)---

    msi_send_num_record_msi26[31..0] - (RO) Record the number of msi26 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_1_msi_send_num_record_msi26_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_1_msi_send_num_record_msi26_MASK 0xFFFFFFFFu                // msi_send_num_record_msi26[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_1_msi_send_num_record_msi26_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI27_1 (0x74040000 + 0x0000BA7Cu)---

    msi_send_num_record_msi27[31..0] - (RO) Record the number of msi27 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_1_msi_send_num_record_msi27_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_1_msi_send_num_record_msi27_MASK 0xFFFFFFFFu                // msi_send_num_record_msi27[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_1_msi_send_num_record_msi27_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI28_1 (0x74040000 + 0x0000BA80u)---

    msi_send_num_record_msi28[31..0] - (RO) Record the number of msi28 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_1_msi_send_num_record_msi28_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_1_msi_send_num_record_msi28_MASK 0xFFFFFFFFu                // msi_send_num_record_msi28[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_1_msi_send_num_record_msi28_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI29_1 (0x74040000 + 0x0000BA84u)---

    msi_send_num_record_msi29[31..0] - (RO) Record the number of msi29 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_1_msi_send_num_record_msi29_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_1_msi_send_num_record_msi29_MASK 0xFFFFFFFFu                // msi_send_num_record_msi29[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_1_msi_send_num_record_msi29_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI30_1 (0x74040000 + 0x0000BA88u)---

    msi_send_num_record_msi30[31..0] - (RO) Record the number of msi30 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_1_msi_send_num_record_msi30_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_1_msi_send_num_record_msi30_MASK 0xFFFFFFFFu                // msi_send_num_record_msi30[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_1_msi_send_num_record_msi30_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI31_1 (0x74040000 + 0x0000BA8Cu)---

    msi_send_num_record_msi31[31..0] - (RO) Record the number of msi31 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_1_msi_send_num_record_msi31_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_1_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_1_msi_send_num_record_msi31_MASK 0xFFFFFFFFu                // msi_send_num_record_msi31[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_1_msi_send_num_record_msi31_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_0_1 (0x74040000 + 0x0000C000u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_1_1 (0x74040000 + 0x0000C004u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_2_1 (0x74040000 + 0x0000C008u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_3_1 (0x74040000 + 0x0000C00Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_0_1 (0x74040000 + 0x0000C010u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_1_1 (0x74040000 + 0x0000C014u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_2_1 (0x74040000 + 0x0000C018u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_3_1 (0x74040000 + 0x0000C01Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_0_1 (0x74040000 + 0x0000C020u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_1_1 (0x74040000 + 0x0000C024u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_2_1 (0x74040000 + 0x0000C028u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_3_1 (0x74040000 + 0x0000C02Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_0_1 (0x74040000 + 0x0000C030u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_1_1 (0x74040000 + 0x0000C034u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_2_1 (0x74040000 + 0x0000C038u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_3_1 (0x74040000 + 0x0000C03Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_0_1 (0x74040000 + 0x0000C040u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_1_1 (0x74040000 + 0x0000C044u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_2_1 (0x74040000 + 0x0000C048u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_3_1 (0x74040000 + 0x0000C04Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_0_1 (0x74040000 + 0x0000C050u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_1_1 (0x74040000 + 0x0000C054u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_2_1 (0x74040000 + 0x0000C058u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_3_1 (0x74040000 + 0x0000C05Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_0_1 (0x74040000 + 0x0000C060u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_1_1 (0x74040000 + 0x0000C064u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_2_1 (0x74040000 + 0x0000C068u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_3_1 (0x74040000 + 0x0000C06Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_0_1 (0x74040000 + 0x0000C070u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_1_1 (0x74040000 + 0x0000C074u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_2_1 (0x74040000 + 0x0000C078u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_3_1 (0x74040000 + 0x0000C07Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_0_1 (0x74040000 + 0x0000C080u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_1_1 (0x74040000 + 0x0000C084u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_2_1 (0x74040000 + 0x0000C088u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_3_1 (0x74040000 + 0x0000C08Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_0_1 (0x74040000 + 0x0000C090u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_1_1 (0x74040000 + 0x0000C094u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_2_1 (0x74040000 + 0x0000C098u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_3_1 (0x74040000 + 0x0000C09Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_0_1 (0x74040000 + 0x0000C0A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_1_1 (0x74040000 + 0x0000C0A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_2_1 (0x74040000 + 0x0000C0A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_3_1 (0x74040000 + 0x0000C0ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_0_1 (0x74040000 + 0x0000C0B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_1_1 (0x74040000 + 0x0000C0B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_2_1 (0x74040000 + 0x0000C0B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_3_1 (0x74040000 + 0x0000C0BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_0_1 (0x74040000 + 0x0000C0C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_1_1 (0x74040000 + 0x0000C0C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_2_1 (0x74040000 + 0x0000C0C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_3_1 (0x74040000 + 0x0000C0CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_0_1 (0x74040000 + 0x0000C0D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_1_1 (0x74040000 + 0x0000C0D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_2_1 (0x74040000 + 0x0000C0D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_3_1 (0x74040000 + 0x0000C0DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_0_1 (0x74040000 + 0x0000C0E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_1_1 (0x74040000 + 0x0000C0E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_2_1 (0x74040000 + 0x0000C0E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_3_1 (0x74040000 + 0x0000C0ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_0_1 (0x74040000 + 0x0000C0F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_1_1 (0x74040000 + 0x0000C0F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_2_1 (0x74040000 + 0x0000C0F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_3_1 (0x74040000 + 0x0000C0FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_0_1 (0x74040000 + 0x0000C100u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_1_1 (0x74040000 + 0x0000C104u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_2_1 (0x74040000 + 0x0000C108u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_3_1 (0x74040000 + 0x0000C10Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_0_1 (0x74040000 + 0x0000C110u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_1_1 (0x74040000 + 0x0000C114u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_2_1 (0x74040000 + 0x0000C118u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_3_1 (0x74040000 + 0x0000C11Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_0_1 (0x74040000 + 0x0000C120u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_1_1 (0x74040000 + 0x0000C124u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_2_1 (0x74040000 + 0x0000C128u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_3_1 (0x74040000 + 0x0000C12Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_0_1 (0x74040000 + 0x0000C130u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_1_1 (0x74040000 + 0x0000C134u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_2_1 (0x74040000 + 0x0000C138u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_3_1 (0x74040000 + 0x0000C13Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_0_1 (0x74040000 + 0x0000C140u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_1_1 (0x74040000 + 0x0000C144u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_2_1 (0x74040000 + 0x0000C148u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_3_1 (0x74040000 + 0x0000C14Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_0_1 (0x74040000 + 0x0000C150u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_1_1 (0x74040000 + 0x0000C154u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_2_1 (0x74040000 + 0x0000C158u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_3_1 (0x74040000 + 0x0000C15Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_0_1 (0x74040000 + 0x0000C160u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_1_1 (0x74040000 + 0x0000C164u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_2_1 (0x74040000 + 0x0000C168u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_3_1 (0x74040000 + 0x0000C16Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_0_1 (0x74040000 + 0x0000C170u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_1_1 (0x74040000 + 0x0000C174u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_2_1 (0x74040000 + 0x0000C178u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_3_1 (0x74040000 + 0x0000C17Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_0_1 (0x74040000 + 0x0000C180u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_1_1 (0x74040000 + 0x0000C184u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_2_1 (0x74040000 + 0x0000C188u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_3_1 (0x74040000 + 0x0000C18Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_0_1 (0x74040000 + 0x0000C190u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_1_1 (0x74040000 + 0x0000C194u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_2_1 (0x74040000 + 0x0000C198u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_3_1 (0x74040000 + 0x0000C19Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_0_1 (0x74040000 + 0x0000C1A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_1_1 (0x74040000 + 0x0000C1A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_2_1 (0x74040000 + 0x0000C1A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_3_1 (0x74040000 + 0x0000C1ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_0_1 (0x74040000 + 0x0000C1B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_1_1 (0x74040000 + 0x0000C1B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_2_1 (0x74040000 + 0x0000C1B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_3_1 (0x74040000 + 0x0000C1BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_0_1 (0x74040000 + 0x0000C1C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_1_1 (0x74040000 + 0x0000C1C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_2_1 (0x74040000 + 0x0000C1C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_3_1 (0x74040000 + 0x0000C1CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_0_1 (0x74040000 + 0x0000C1D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_1_1 (0x74040000 + 0x0000C1D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_2_1 (0x74040000 + 0x0000C1D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_3_1 (0x74040000 + 0x0000C1DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_0_1 (0x74040000 + 0x0000C1E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_1_1 (0x74040000 + 0x0000C1E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_2_1 (0x74040000 + 0x0000C1E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_3_1 (0x74040000 + 0x0000C1ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_0_1 (0x74040000 + 0x0000C1F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_1_1 (0x74040000 + 0x0000C1F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_2_1 (0x74040000 + 0x0000C1F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_3_1 (0x74040000 + 0x0000C1FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_0_1 (0x74040000 + 0x0000C200u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_1_1 (0x74040000 + 0x0000C204u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_2_1 (0x74040000 + 0x0000C208u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_3_1 (0x74040000 + 0x0000C20Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_0_1 (0x74040000 + 0x0000C210u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_1_1 (0x74040000 + 0x0000C214u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_2_1 (0x74040000 + 0x0000C218u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_3_1 (0x74040000 + 0x0000C21Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_0_1 (0x74040000 + 0x0000C220u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_1_1 (0x74040000 + 0x0000C224u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_2_1 (0x74040000 + 0x0000C228u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_3_1 (0x74040000 + 0x0000C22Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_0_1 (0x74040000 + 0x0000C230u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_1_1 (0x74040000 + 0x0000C234u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_2_1 (0x74040000 + 0x0000C238u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_3_1 (0x74040000 + 0x0000C23Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_0_1 (0x74040000 + 0x0000C240u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_1_1 (0x74040000 + 0x0000C244u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_2_1 (0x74040000 + 0x0000C248u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_3_1 (0x74040000 + 0x0000C24Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_0_1 (0x74040000 + 0x0000C250u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_1_1 (0x74040000 + 0x0000C254u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_2_1 (0x74040000 + 0x0000C258u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_3_1 (0x74040000 + 0x0000C25Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_0_1 (0x74040000 + 0x0000C260u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_1_1 (0x74040000 + 0x0000C264u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_2_1 (0x74040000 + 0x0000C268u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_3_1 (0x74040000 + 0x0000C26Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_0_1 (0x74040000 + 0x0000C270u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_1_1 (0x74040000 + 0x0000C274u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_2_1 (0x74040000 + 0x0000C278u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_3_1 (0x74040000 + 0x0000C27Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_0_1 (0x74040000 + 0x0000C280u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_1_1 (0x74040000 + 0x0000C284u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_2_1 (0x74040000 + 0x0000C288u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_3_1 (0x74040000 + 0x0000C28Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_0_1 (0x74040000 + 0x0000C290u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_1_1 (0x74040000 + 0x0000C294u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_2_1 (0x74040000 + 0x0000C298u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_3_1 (0x74040000 + 0x0000C29Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_0_1 (0x74040000 + 0x0000C2A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_1_1 (0x74040000 + 0x0000C2A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_2_1 (0x74040000 + 0x0000C2A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_3_1 (0x74040000 + 0x0000C2ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_0_1 (0x74040000 + 0x0000C2B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_1_1 (0x74040000 + 0x0000C2B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_2_1 (0x74040000 + 0x0000C2B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_3_1 (0x74040000 + 0x0000C2BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_0_1 (0x74040000 + 0x0000C2C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_1_1 (0x74040000 + 0x0000C2C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_2_1 (0x74040000 + 0x0000C2C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_3_1 (0x74040000 + 0x0000C2CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_0_1 (0x74040000 + 0x0000C2D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_1_1 (0x74040000 + 0x0000C2D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_2_1 (0x74040000 + 0x0000C2D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_3_1 (0x74040000 + 0x0000C2DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_0_1 (0x74040000 + 0x0000C2E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_1_1 (0x74040000 + 0x0000C2E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_2_1 (0x74040000 + 0x0000C2E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_3_1 (0x74040000 + 0x0000C2ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_0_1 (0x74040000 + 0x0000C2F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_1_1 (0x74040000 + 0x0000C2F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_2_1 (0x74040000 + 0x0000C2F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_3_1 (0x74040000 + 0x0000C2FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_0_1 (0x74040000 + 0x0000C300u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_1_1 (0x74040000 + 0x0000C304u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_2_1 (0x74040000 + 0x0000C308u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_3_1 (0x74040000 + 0x0000C30Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_0_1 (0x74040000 + 0x0000C310u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_1_1 (0x74040000 + 0x0000C314u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_2_1 (0x74040000 + 0x0000C318u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_3_1 (0x74040000 + 0x0000C31Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_0_1 (0x74040000 + 0x0000C320u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_1_1 (0x74040000 + 0x0000C324u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_2_1 (0x74040000 + 0x0000C328u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_3_1 (0x74040000 + 0x0000C32Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_0_1 (0x74040000 + 0x0000C330u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_1_1 (0x74040000 + 0x0000C334u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_2_1 (0x74040000 + 0x0000C338u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_3_1 (0x74040000 + 0x0000C33Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_0_1 (0x74040000 + 0x0000C340u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_1_1 (0x74040000 + 0x0000C344u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_2_1 (0x74040000 + 0x0000C348u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_3_1 (0x74040000 + 0x0000C34Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_0_1 (0x74040000 + 0x0000C350u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_1_1 (0x74040000 + 0x0000C354u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_2_1 (0x74040000 + 0x0000C358u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_3_1 (0x74040000 + 0x0000C35Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_0_1 (0x74040000 + 0x0000C360u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_1_1 (0x74040000 + 0x0000C364u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_2_1 (0x74040000 + 0x0000C368u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_3_1 (0x74040000 + 0x0000C36Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_0_1 (0x74040000 + 0x0000C370u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_1_1 (0x74040000 + 0x0000C374u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_2_1 (0x74040000 + 0x0000C378u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_3_1 (0x74040000 + 0x0000C37Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_0_1 (0x74040000 + 0x0000C380u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_1_1 (0x74040000 + 0x0000C384u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_2_1 (0x74040000 + 0x0000C388u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_3_1 (0x74040000 + 0x0000C38Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_0_1 (0x74040000 + 0x0000C390u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_1_1 (0x74040000 + 0x0000C394u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_2_1 (0x74040000 + 0x0000C398u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_3_1 (0x74040000 + 0x0000C39Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_0_1 (0x74040000 + 0x0000C3A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_1_1 (0x74040000 + 0x0000C3A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_2_1 (0x74040000 + 0x0000C3A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_3_1 (0x74040000 + 0x0000C3ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_0_1 (0x74040000 + 0x0000C3B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_1_1 (0x74040000 + 0x0000C3B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_2_1 (0x74040000 + 0x0000C3B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_3_1 (0x74040000 + 0x0000C3BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_0_1 (0x74040000 + 0x0000C3C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_1_1 (0x74040000 + 0x0000C3C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_2_1 (0x74040000 + 0x0000C3C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_3_1 (0x74040000 + 0x0000C3CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_0_1 (0x74040000 + 0x0000C3D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_1_1 (0x74040000 + 0x0000C3D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_2_1 (0x74040000 + 0x0000C3D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_3_1 (0x74040000 + 0x0000C3DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_0_1 (0x74040000 + 0x0000C3E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_1_1 (0x74040000 + 0x0000C3E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_2_1 (0x74040000 + 0x0000C3E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_3_1 (0x74040000 + 0x0000C3ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_0_1 (0x74040000 + 0x0000C3F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_1_1 (0x74040000 + 0x0000C3F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_2_1 (0x74040000 + 0x0000C3F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_3_1 (0x74040000 + 0x0000C3FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_0_1 (0x74040000 + 0x0000C400u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_1_1 (0x74040000 + 0x0000C404u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_2_1 (0x74040000 + 0x0000C408u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_3_1 (0x74040000 + 0x0000C40Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_0_1 (0x74040000 + 0x0000C410u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_1_1 (0x74040000 + 0x0000C414u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_2_1 (0x74040000 + 0x0000C418u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_3_1 (0x74040000 + 0x0000C41Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_0_1 (0x74040000 + 0x0000C420u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_1_1 (0x74040000 + 0x0000C424u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_2_1 (0x74040000 + 0x0000C428u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_3_1 (0x74040000 + 0x0000C42Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_0_1 (0x74040000 + 0x0000C430u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_1_1 (0x74040000 + 0x0000C434u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_2_1 (0x74040000 + 0x0000C438u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_3_1 (0x74040000 + 0x0000C43Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_0_1 (0x74040000 + 0x0000C440u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_1_1 (0x74040000 + 0x0000C444u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_2_1 (0x74040000 + 0x0000C448u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_3_1 (0x74040000 + 0x0000C44Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_0_1 (0x74040000 + 0x0000C450u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_1_1 (0x74040000 + 0x0000C454u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_2_1 (0x74040000 + 0x0000C458u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_3_1 (0x74040000 + 0x0000C45Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_0_1 (0x74040000 + 0x0000C460u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_1_1 (0x74040000 + 0x0000C464u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_2_1 (0x74040000 + 0x0000C468u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_3_1 (0x74040000 + 0x0000C46Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_0_1 (0x74040000 + 0x0000C470u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_1_1 (0x74040000 + 0x0000C474u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_2_1 (0x74040000 + 0x0000C478u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_3_1 (0x74040000 + 0x0000C47Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_0_1 (0x74040000 + 0x0000C480u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_1_1 (0x74040000 + 0x0000C484u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_2_1 (0x74040000 + 0x0000C488u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_3_1 (0x74040000 + 0x0000C48Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_0_1 (0x74040000 + 0x0000C490u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_1_1 (0x74040000 + 0x0000C494u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_2_1 (0x74040000 + 0x0000C498u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_3_1 (0x74040000 + 0x0000C49Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_0_1 (0x74040000 + 0x0000C4A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_1_1 (0x74040000 + 0x0000C4A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_2_1 (0x74040000 + 0x0000C4A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_3_1 (0x74040000 + 0x0000C4ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_0_1 (0x74040000 + 0x0000C4B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_1_1 (0x74040000 + 0x0000C4B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_2_1 (0x74040000 + 0x0000C4B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_3_1 (0x74040000 + 0x0000C4BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_0_1 (0x74040000 + 0x0000C4C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_1_1 (0x74040000 + 0x0000C4C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_2_1 (0x74040000 + 0x0000C4C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_3_1 (0x74040000 + 0x0000C4CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_0_1 (0x74040000 + 0x0000C4D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_1_1 (0x74040000 + 0x0000C4D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_2_1 (0x74040000 + 0x0000C4D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_3_1 (0x74040000 + 0x0000C4DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_0_1 (0x74040000 + 0x0000C4E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_1_1 (0x74040000 + 0x0000C4E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_2_1 (0x74040000 + 0x0000C4E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_3_1 (0x74040000 + 0x0000C4ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_0_1 (0x74040000 + 0x0000C4F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_1_1 (0x74040000 + 0x0000C4F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_2_1 (0x74040000 + 0x0000C4F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_3_1 (0x74040000 + 0x0000C4FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_0_1 (0x74040000 + 0x0000C500u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_1_1 (0x74040000 + 0x0000C504u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_2_1 (0x74040000 + 0x0000C508u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_3_1 (0x74040000 + 0x0000C50Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_0_1 (0x74040000 + 0x0000C510u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_1_1 (0x74040000 + 0x0000C514u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_2_1 (0x74040000 + 0x0000C518u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_3_1 (0x74040000 + 0x0000C51Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_0_1 (0x74040000 + 0x0000C520u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_1_1 (0x74040000 + 0x0000C524u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_2_1 (0x74040000 + 0x0000C528u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_3_1 (0x74040000 + 0x0000C52Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_0_1 (0x74040000 + 0x0000C530u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_1_1 (0x74040000 + 0x0000C534u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_2_1 (0x74040000 + 0x0000C538u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_3_1 (0x74040000 + 0x0000C53Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_0_1 (0x74040000 + 0x0000C540u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_1_1 (0x74040000 + 0x0000C544u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_2_1 (0x74040000 + 0x0000C548u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_3_1 (0x74040000 + 0x0000C54Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_0_1 (0x74040000 + 0x0000C550u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_1_1 (0x74040000 + 0x0000C554u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_2_1 (0x74040000 + 0x0000C558u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_3_1 (0x74040000 + 0x0000C55Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_0_1 (0x74040000 + 0x0000C560u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_1_1 (0x74040000 + 0x0000C564u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_2_1 (0x74040000 + 0x0000C568u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_3_1 (0x74040000 + 0x0000C56Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_0_1 (0x74040000 + 0x0000C570u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_1_1 (0x74040000 + 0x0000C574u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_2_1 (0x74040000 + 0x0000C578u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_3_1 (0x74040000 + 0x0000C57Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_0_1 (0x74040000 + 0x0000C580u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_1_1 (0x74040000 + 0x0000C584u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_2_1 (0x74040000 + 0x0000C588u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_3_1 (0x74040000 + 0x0000C58Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_0_1 (0x74040000 + 0x0000C590u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_1_1 (0x74040000 + 0x0000C594u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_2_1 (0x74040000 + 0x0000C598u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_3_1 (0x74040000 + 0x0000C59Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_0_1 (0x74040000 + 0x0000C5A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_1_1 (0x74040000 + 0x0000C5A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_2_1 (0x74040000 + 0x0000C5A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_3_1 (0x74040000 + 0x0000C5ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_0_1 (0x74040000 + 0x0000C5B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_1_1 (0x74040000 + 0x0000C5B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_2_1 (0x74040000 + 0x0000C5B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_3_1 (0x74040000 + 0x0000C5BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_0_1 (0x74040000 + 0x0000C5C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_1_1 (0x74040000 + 0x0000C5C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_2_1 (0x74040000 + 0x0000C5C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_3_1 (0x74040000 + 0x0000C5CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_0_1 (0x74040000 + 0x0000C5D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_1_1 (0x74040000 + 0x0000C5D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_2_1 (0x74040000 + 0x0000C5D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_3_1 (0x74040000 + 0x0000C5DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_0_1 (0x74040000 + 0x0000C5E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_1_1 (0x74040000 + 0x0000C5E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_2_1 (0x74040000 + 0x0000C5E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_3_1 (0x74040000 + 0x0000C5ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_0_1 (0x74040000 + 0x0000C5F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_1_1 (0x74040000 + 0x0000C5F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_2_1 (0x74040000 + 0x0000C5F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_3_1 (0x74040000 + 0x0000C5FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_0_1 (0x74040000 + 0x0000C600u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_1_1 (0x74040000 + 0x0000C604u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_2_1 (0x74040000 + 0x0000C608u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_3_1 (0x74040000 + 0x0000C60Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_0_1 (0x74040000 + 0x0000C610u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_1_1 (0x74040000 + 0x0000C614u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_2_1 (0x74040000 + 0x0000C618u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_3_1 (0x74040000 + 0x0000C61Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_0_1 (0x74040000 + 0x0000C620u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_1_1 (0x74040000 + 0x0000C624u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_2_1 (0x74040000 + 0x0000C628u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_3_1 (0x74040000 + 0x0000C62Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_0_1 (0x74040000 + 0x0000C630u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_1_1 (0x74040000 + 0x0000C634u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_2_1 (0x74040000 + 0x0000C638u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_3_1 (0x74040000 + 0x0000C63Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_0_1 (0x74040000 + 0x0000C640u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_1_1 (0x74040000 + 0x0000C644u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_2_1 (0x74040000 + 0x0000C648u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_3_1 (0x74040000 + 0x0000C64Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_0_1 (0x74040000 + 0x0000C650u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_1_1 (0x74040000 + 0x0000C654u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_2_1 (0x74040000 + 0x0000C658u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_3_1 (0x74040000 + 0x0000C65Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_0_1 (0x74040000 + 0x0000C660u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_1_1 (0x74040000 + 0x0000C664u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_2_1 (0x74040000 + 0x0000C668u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_3_1 (0x74040000 + 0x0000C66Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_0_1 (0x74040000 + 0x0000C670u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_1_1 (0x74040000 + 0x0000C674u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_2_1 (0x74040000 + 0x0000C678u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_3_1 (0x74040000 + 0x0000C67Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_0_1 (0x74040000 + 0x0000C680u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_1_1 (0x74040000 + 0x0000C684u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_2_1 (0x74040000 + 0x0000C688u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_3_1 (0x74040000 + 0x0000C68Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_0_1 (0x74040000 + 0x0000C690u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_1_1 (0x74040000 + 0x0000C694u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_2_1 (0x74040000 + 0x0000C698u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_3_1 (0x74040000 + 0x0000C69Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_0_1 (0x74040000 + 0x0000C6A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_1_1 (0x74040000 + 0x0000C6A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_2_1 (0x74040000 + 0x0000C6A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_3_1 (0x74040000 + 0x0000C6ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_0_1 (0x74040000 + 0x0000C6B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_1_1 (0x74040000 + 0x0000C6B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_2_1 (0x74040000 + 0x0000C6B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_3_1 (0x74040000 + 0x0000C6BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_0_1 (0x74040000 + 0x0000C6C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_1_1 (0x74040000 + 0x0000C6C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_2_1 (0x74040000 + 0x0000C6C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_3_1 (0x74040000 + 0x0000C6CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_0_1 (0x74040000 + 0x0000C6D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_1_1 (0x74040000 + 0x0000C6D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_2_1 (0x74040000 + 0x0000C6D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_3_1 (0x74040000 + 0x0000C6DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_0_1 (0x74040000 + 0x0000C6E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_1_1 (0x74040000 + 0x0000C6E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_2_1 (0x74040000 + 0x0000C6E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_3_1 (0x74040000 + 0x0000C6ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_0_1 (0x74040000 + 0x0000C6F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_1_1 (0x74040000 + 0x0000C6F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_2_1 (0x74040000 + 0x0000C6F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_3_1 (0x74040000 + 0x0000C6FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_0_1 (0x74040000 + 0x0000C700u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_1_1 (0x74040000 + 0x0000C704u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_2_1 (0x74040000 + 0x0000C708u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_3_1 (0x74040000 + 0x0000C70Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_0_1 (0x74040000 + 0x0000C710u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_1_1 (0x74040000 + 0x0000C714u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_2_1 (0x74040000 + 0x0000C718u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_3_1 (0x74040000 + 0x0000C71Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_0_1 (0x74040000 + 0x0000C720u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_1_1 (0x74040000 + 0x0000C724u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_2_1 (0x74040000 + 0x0000C728u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_3_1 (0x74040000 + 0x0000C72Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_0_1 (0x74040000 + 0x0000C730u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_1_1 (0x74040000 + 0x0000C734u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_2_1 (0x74040000 + 0x0000C738u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_3_1 (0x74040000 + 0x0000C73Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_0_1 (0x74040000 + 0x0000C740u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_1_1 (0x74040000 + 0x0000C744u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_2_1 (0x74040000 + 0x0000C748u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_3_1 (0x74040000 + 0x0000C74Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_0_1 (0x74040000 + 0x0000C750u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_1_1 (0x74040000 + 0x0000C754u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_2_1 (0x74040000 + 0x0000C758u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_3_1 (0x74040000 + 0x0000C75Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_0_1 (0x74040000 + 0x0000C760u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_1_1 (0x74040000 + 0x0000C764u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_2_1 (0x74040000 + 0x0000C768u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_3_1 (0x74040000 + 0x0000C76Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_0_1 (0x74040000 + 0x0000C770u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_1_1 (0x74040000 + 0x0000C774u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_2_1 (0x74040000 + 0x0000C778u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_3_1 (0x74040000 + 0x0000C77Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_0_1 (0x74040000 + 0x0000C780u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_1_1 (0x74040000 + 0x0000C784u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_2_1 (0x74040000 + 0x0000C788u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_3_1 (0x74040000 + 0x0000C78Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_0_1 (0x74040000 + 0x0000C790u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_1_1 (0x74040000 + 0x0000C794u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_2_1 (0x74040000 + 0x0000C798u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_3_1 (0x74040000 + 0x0000C79Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_0_1 (0x74040000 + 0x0000C7A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_1_1 (0x74040000 + 0x0000C7A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_2_1 (0x74040000 + 0x0000C7A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_3_1 (0x74040000 + 0x0000C7ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_0_1 (0x74040000 + 0x0000C7B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_1_1 (0x74040000 + 0x0000C7B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_2_1 (0x74040000 + 0x0000C7B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_3_1 (0x74040000 + 0x0000C7BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_0_1 (0x74040000 + 0x0000C7C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_1_1 (0x74040000 + 0x0000C7C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_2_1 (0x74040000 + 0x0000C7C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_3_1 (0x74040000 + 0x0000C7CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_0_1 (0x74040000 + 0x0000C7D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_1_1 (0x74040000 + 0x0000C7D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_2_1 (0x74040000 + 0x0000C7D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_3_1 (0x74040000 + 0x0000C7DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_0_1 (0x74040000 + 0x0000C7E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_1_1 (0x74040000 + 0x0000C7E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_2_1 (0x74040000 + 0x0000C7E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_3_1 (0x74040000 + 0x0000C7ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_0_1 (0x74040000 + 0x0000C7F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_1_1 (0x74040000 + 0x0000C7F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_2_1 (0x74040000 + 0x0000C7F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_1_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_3_1 (0x74040000 + 0x0000C7FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_1_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_1_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_1_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_1_msix_table_SHFT 0u

/* =====================================================================================

  ---PCIE_CFGCTRL_2 (0x74040000 + 0x00010084u)---

    Func_not_ready[0]            - (RW) Physical Function Configuration NOT Ready.
                                     If the local processor need more time to load PCIe configuration settings, it can assert this bit until all physical function configuration settings are properly set.
                                     0: Physical function configuration ready
                                     1: Physical function configuration not ready
                                     
                                     The register is per physical function register
    Virtual_Func_not_ready[1]    - (RW) Virtual function configuration not ready: if the local processor needs more time to load PCIe configuration settings, it can assert this bit until all virtual function configuration settings are properly set.
                                     The PCIe Core will reply to all virtual function configuration requests with Configuration Retry Status completions while this bit is asserted.
                                     
                                     The register is per physical function register
    Disable_LTSSM[2]             - (RW) this bit is deasserted (low) in normal conditions; however, it can be set to 1 at power-up to prevent LTSSM from exiting Detect.Quiet for as long as this register is asserted. 
                                     This is typically used to prevent LTSSM from moving to another state when the PHY or PIPE interface is not ready. This signal has no effect on LTSSM states other than Detect.Quiet.
    RSVD1[15..3]                 - (RO) Reserved
    Func_num[18..16]             - (RO) When several physical functions are implemented, it enables initializing the selected function PCIe configuration setting registers (0x0098 - 0x00BF, 0x00E0 - 0x00FF, 0x0120 - 0x013F). Otherwise this sub-field is reserved.
    RSVD2[23..19]                - (RO) Reserved
    Virtual_Channel_num[26..24]  - (RO) When several virtual channels are implemented, it enables initializing the selected virtual channel PCIe configuration setting registers (0x0090 - 0x0097). Otherwise this sub-field is reserved.
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD3_MASK                0xF8000000u                // RSVD3[31..27]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD3_SHFT                27u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Virtual_Channel_num_ADDR  PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Virtual_Channel_num_MASK  0x07000000u                // Virtual_Channel_num[26..24]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Virtual_Channel_num_SHFT  24u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD2_MASK                0x00F80000u                // RSVD2[23..19]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD2_SHFT                19u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Func_num_ADDR             PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Func_num_MASK             0x00070000u                // Func_num[18..16]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Func_num_SHFT             16u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD1_MASK                0x0000FFF8u                // RSVD1[15..3]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_RSVD1_SHFT                3u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Disable_LTSSM_ADDR        PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Disable_LTSSM_MASK        0x00000004u                // Disable_LTSSM[2]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Disable_LTSSM_SHFT        2u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Virtual_Func_not_ready_ADDR PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Virtual_Func_not_ready_MASK 0x00000002u                // Virtual_Func_not_ready[1]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Virtual_Func_not_ready_SHFT 1u
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Func_not_ready_ADDR       PCIE_MAC_IREG_PCIE_CFGCTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Func_not_ready_MASK       0x00000001u                // Func_not_ready[0]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_2_Func_not_ready_SHFT       0u

/* =====================================================================================

  ---PCIE_PCI_IDS_0_2 (0x74040000 + 0x00010098u)---

    VendorID[15..0]              - (RW) Vendor ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[15:0]
                                     
                                     The register is per physical function register
    DeviceID[31..16]             - (RW) Device ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[31:16]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_DeviceID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_DeviceID_MASK           0xFFFF0000u                // DeviceID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_DeviceID_SHFT           16u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_VendorID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_VendorID_MASK           0x0000FFFFu                // VendorID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_2_VendorID_SHFT           0u

/* =====================================================================================

  ---PCIE_PCI_IDS_1_2 (0x74040000 + 0x0001009Cu)---

    RevisionID[7..0]             - (RW) Revision ID
                                     Backdoor access to PCIe Configuration Space Header(+08h)[7:0]
                                     
                                     The register is per physical function register
    Classcode[31..8]             - (RW) Class Code
                                     Backdoor access to PCIe Configuration Space Header(+08h)[31:8]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_Classcode_ADDR          PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_Classcode_MASK          0xFFFFFF00u                // Classcode[31..8]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_Classcode_SHFT          8u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_RevisionID_ADDR         PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_RevisionID_MASK         0x000000FFu                // RevisionID[7..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_2_RevisionID_SHFT         0u

/* =====================================================================================

  ---PCIE_PCI_IDS_2_2 (0x74040000 + 0x000100A0u)---

    Sub_system_vendor_ID[15..0]  - (RW) Sub-system vendor ID
                                     Only apply for type0 function. 
                                     Backdoor access to PCIe Configuration Space Header(+2C)[15:0]
                                     
                                     The register is per physical function register
    Sub_system_device_ID[31..16] - (RW) Sub-system device ID
                                     Only apply for type0 function.
                                     Backdoor access to PCIe Configuration Space Header(+2C)[31:16]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_Sub_system_device_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_Sub_system_device_ID_MASK 0xFFFF0000u                // Sub_system_device_ID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_Sub_system_device_ID_SHFT 16u
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_Sub_system_vendor_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_Sub_system_vendor_ID_MASK 0x0000FFFFu                // Sub_system_vendor_ID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_2_Sub_system_vendor_ID_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_LPM_2 (0x74040000 + 0x000100A4u)---

    RSVD1[15..0]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    Adtr_support[16]             - (RW) Address Translation Service support
                                     
                                     The register is per physical function register
    Page_Req_If_support[17]      - (RW) Page Request Interface support
                                     
                                     The register is per physical function register
    Impl_Mcast[18]               - (RO) Implement Multicast capability
                                     
                                     The register is per physical function register
    RSVD2[19]                    - (RO) Reserved
                                     
                                     The register is per physical function register
    PMEDataSupport[20]           - (RW) PME Data Support
                                     Backdoor access to Power Management Control/Status Register (0x10FC[14:9][31:24])
                                     0: not supported
                                     1: supported
                                     
                                     The register is per physical function register
    DSI[21]                      - (RW) DSI(Device Specific Initialization)
                                     Backdoor access to Power Management Capability Structure(+00h)[21]
                                     
                                     The register is per physical function register
    AuxiliaryCurrent[24..22]     - (RW) Auxiliary Current
                                     Backdoor access to Power Management Capability Structure(+00h)[24:22]
                                     
                                     The register is per physical function register
    D1Support[25]                - (RW) D1 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[25]
                                     
                                     The register is per physical function register
    D2Support[26]                - (RW) D2 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[26]
                                     
                                     The register is per physical function register
    PMEsupport[31..27]           - (RW) PME Support
                                     Backdoor access to Power Management Capability Structure(+00h)[31:27]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_PMEsupport_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_PMEsupport_MASK           0xF8000000u                // PMEsupport[31..27]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_PMEsupport_SHFT           27u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_D2Support_ADDR            PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_D2Support_MASK            0x04000000u                // D2Support[26]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_D2Support_SHFT            26u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_D1Support_ADDR            PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_D1Support_MASK            0x02000000u                // D1Support[25]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_D1Support_SHFT            25u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_AuxiliaryCurrent_ADDR     PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_AuxiliaryCurrent_MASK     0x01C00000u                // AuxiliaryCurrent[24..22]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_AuxiliaryCurrent_SHFT     22u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_DSI_ADDR                  PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_DSI_MASK                  0x00200000u                // DSI[21]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_DSI_SHFT                  21u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_PMEDataSupport_ADDR       PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_PMEDataSupport_MASK       0x00100000u                // PMEDataSupport[20]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_PMEDataSupport_SHFT       20u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_RSVD2_MASK                0x00080000u                // RSVD2[19]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_RSVD2_SHFT                19u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Impl_Mcast_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Impl_Mcast_MASK           0x00040000u                // Impl_Mcast[18]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Impl_Mcast_SHFT           18u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Page_Req_If_support_ADDR  PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Page_Req_If_support_MASK  0x00020000u                // Page_Req_If_support[17]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Page_Req_If_support_SHFT  17u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Adtr_support_ADDR         PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Adtr_support_MASK         0x00010000u                // Adtr_support[16]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_Adtr_support_SHFT         16u
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_PCI_LPM_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_RSVD1_MASK                0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_2_RSVD1_SHFT                0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_0_2 (0x74040000 + 0x000100A8u)---

    InterruptPin[2..0]           - (RW) Interrupt Pin:
                                     - 000: None
                                     - 001: INTA
                                     - 010: INTB
                                     - 011: INTC
                                     - 100: INTD
                                     Otherwise reserved.
                                     
                                     The register is per physical function register
    msi_cap_dis[3]               - (RW) MSI capability disable.
                                     0 : enable.
                                     1 : disable.
                                     
                                     The register is per physical function register
    MSI_no[6..4]                 - (RW) Message Control. Multiple Message Capable
                                     - 000: 1 MSI requested
                                     - 001: 2 MSI requested
                                     - 010: 4 MSI requested
                                     - 011: 8 MSI requested
                                     - 100: 16 MSI requested
                                     - 101: 32 MSI requested
                                     Otherwise reserved.
                                     
                                     The register is per physical function register
    MSI_per_vector_support[7]    - (RW) MSI per-vector masking support
                                     
                                     The register is per physical function register
    MSI_ext_data[8]              - (RW) MSI Extended message data capability
                                     0: disable
                                     1: enable
                                     
                                     The register is per physical function register
    RESERVED9[15..9]             - (RO) Reserved bits
    MSIX_Table_size[26..16]      - (RW) MSIX Table size
                                     
                                     The register is per physical function register
    RSVD3[30..27]                - (RW) Reserved
                                     
                                     The register is per physical function register
    Impl_MSIX_capability[31]     - (RW) Implement MSI-X capability
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_Impl_MSIX_capability_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_Impl_MSIX_capability_MASK 0x80000000u                // Impl_MSIX_capability[31]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_Impl_MSIX_capability_SHFT 31u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_RSVD3_MASK              0x78000000u                // RSVD3[30..27]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_RSVD3_SHFT              27u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSIX_Table_size_ADDR    PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSIX_Table_size_MASK    0x07FF0000u                // MSIX_Table_size[26..16]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSIX_Table_size_SHFT    16u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_ext_data_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_ext_data_MASK       0x00000100u                // MSI_ext_data[8]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_ext_data_SHFT       8u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_per_vector_support_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_per_vector_support_MASK 0x00000080u                // MSI_per_vector_support[7]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_per_vector_support_SHFT 7u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_no_ADDR             PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_no_MASK             0x00000070u                // MSI_no[6..4]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_MSI_no_SHFT             4u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_msi_cap_dis_ADDR        PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_msi_cap_dis_MASK        0x00000008u                // msi_cap_dis[3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_msi_cap_dis_SHFT        3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_InterruptPin_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_InterruptPin_MASK       0x00000007u                // InterruptPin[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_2_InterruptPin_SHFT       0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_1_2 (0x74040000 + 0x000100ACu)---

    Table_BIR[2..0]              - (RW) Table BIR
                                     
                                     The register is per physical function register
    Table_offset[31..3]          - (RW) Table offset
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_Table_offset_ADDR       PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_Table_offset_MASK       0xFFFFFFF8u                // Table_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_Table_offset_SHFT       3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_Table_BIR_ADDR          PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_Table_BIR_MASK          0x00000007u                // Table_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_2_Table_BIR_SHFT          0u

/* =====================================================================================

  ---PCIE_PCI_IRQ_2_2 (0x74040000 + 0x000100B0u)---

    PBA_BIR[2..0]                - (RW) PBA BIR
                                     
                                     The register is per physical function register
    PBA_offset[31..3]            - (RW) PBA offset
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_PBA_offset_ADDR         PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_PBA_offset_MASK         0xFFFFFFF8u                // PBA_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_PBA_offset_SHFT         3u
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_PBA_BIR_ADDR            PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_PBA_BIR_MASK            0x00000007u                // PBA_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_2_PBA_BIR_SHFT            0u

/* =====================================================================================

  ---PCIE_PCI_IOV_0_2 (0x74040000 + 0x000100B4u)---

    ATS_invalidate_queuedepth[4..0] - (RW) Maximum payload size. 
                                     Do not set the PCIe Maximum payload size to a value greater than the Bridge Maximum Payload size.
                                     
                                     The register is per physical function register
    ATS_page_aligned_req[5]      - (RW) reserved for phantom functions support
                                     
                                     The register is per physical function register
    TPH_NOST_MODE_SUP[6]         - (RW) THP NOST mode support
                                     
                                     The register is per physical function register
    RSVD1[15..7]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_Max_Grp[21..16]        - (RW) Multicast max group
                                     
                                     The register is per physical function register
    RSVD2[23..22]                - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_WIN_Size[29..24]       - (RW) Multicast window size
                                     
                                     The register is per physical function register
    RSVD3[30]                    - (RO) Reserved
                                     
                                     The register is per physical function register
    MCAST_ECRC_REGEN_SUP[31]     - (RW) Multicast ECRC regen support
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_ECRC_REGEN_SUP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_ECRC_REGEN_SUP_MASK 0x80000000u                // MCAST_ECRC_REGEN_SUP[31]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_ECRC_REGEN_SUP_SHFT 31u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD3_MASK              0x40000000u                // RSVD3[30]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD3_SHFT              30u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_WIN_Size_ADDR     PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_WIN_Size_MASK     0x3F000000u                // MCAST_WIN_Size[29..24]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_WIN_Size_SHFT     24u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD2_MASK              0x00C00000u                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD2_SHFT              22u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_Max_Grp_ADDR      PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_Max_Grp_MASK      0x003F0000u                // MCAST_Max_Grp[21..16]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_MCAST_Max_Grp_SHFT      16u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD1_MASK              0x0000FF80u                // RSVD1[15..7]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_RSVD1_SHFT              7u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_TPH_NOST_MODE_SUP_ADDR  PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_TPH_NOST_MODE_SUP_MASK  0x00000040u                // TPH_NOST_MODE_SUP[6]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_TPH_NOST_MODE_SUP_SHFT  6u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ATS_page_aligned_req_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ATS_page_aligned_req_MASK 0x00000020u                // ATS_page_aligned_req[5]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ATS_page_aligned_req_SHFT 5u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ATS_invalidate_queuedepth_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ATS_invalidate_queuedepth_MASK 0x0000001Fu                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_2_ATS_invalidate_queuedepth_SHFT 0u

/* =====================================================================================

  ---PCIE_PCI_IOV_1_2 (0x74040000 + 0x000100B8u)---

    PRI_outstanding_page_REQ_CAP[19..0] - (RW) PRI outstanding page request capacity
                                     
                                     The register is per physical function register
    RSVD1[31..20]                - (RO) Reserved
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_RSVD1_MASK              0xFFF00000u                // RSVD1[31..20]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_RSVD1_SHFT              20u
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_PRI_outstanding_page_REQ_CAP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_PRI_outstanding_page_REQ_CAP_MASK 0x000FFFFFu                // PRI_outstanding_page_REQ_CAP[19..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_2_PRI_outstanding_page_REQ_CAP_SHFT 0u

/* =====================================================================================

  ---PCIE_SW_TRIG_INT_2 (0x74040000 + 0x000100BCu)---

    sw_trig_intr_host[31..0]     - (RW) Software trigger interrupt for Endpoint mode.
                                     Software can use the register to send Interrupt message via PCIe controller.
                                      If some bits of the register are set to 1, corresponding bits in ISTATUS_HOST (0x18C) are also be set and PCIe controller will send interrupt message to host.
                                     0: clear interrupt.
                                     1: send interrupt.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_2_sw_trig_intr_host_ADDR PCIE_MAC_IREG_PCIE_SW_TRIG_INT_2_ADDR
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_2_sw_trig_intr_host_MASK 0xFFFFFFFFu                // sw_trig_intr_host[31..0]
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_2_sw_trig_intr_host_SHFT 0u

/* =====================================================================================

  ---PCIE_BAR_01_0_2 (0x74040000 + 0x000100E4u)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_01_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_01_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_01_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_2_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_01_1_2 (0x74040000 + 0x000100E8u)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 1 has same settings as BAR 0's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 0 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_1_2_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_01_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_1_2_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_01_1_2_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_23_0_2 (0x74040000 + 0x000100ECu)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_23_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_23_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_23_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_2_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_23_1_2 (0x74040000 + 0x000100F0u)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 3 has same settings as BAR 2's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 2 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_1_2_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_23_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_1_2_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_23_1_2_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_45_0_2 (0x74040000 + 0x000100F4u)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
                                     
                                     The register is per physical function register
    BAR_resized[1]               - (RW) BAR resized
                                     
                                     The register is per physical function register
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_Bar_size_mask_lsb_ADDR   PCIE_MAC_IREG_PCIE_BAR_45_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_Bar_size_mask_lsb_MASK   0xFFFFFFFCu                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_Bar_size_mask_lsb_SHFT   2u
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_BAR_resized_ADDR         PCIE_MAC_IREG_PCIE_BAR_45_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_BAR_resized_MASK         0x00000002u                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_BAR_resized_SHFT         1u
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_BAR_type_ADDR            PCIE_MAC_IREG_PCIE_BAR_45_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_BAR_type_MASK            0x00000001u                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_2_BAR_type_SHFT            0u

/* =====================================================================================

  ---PCIE_BAR_45_1_2 (0x74040000 + 0x000100F8u)---

    Bar_size_mask_msb[31..0]     - (RW) Bit[2] equal to 0: BAR 5 has same settings as BAR 4's Bits [31:0]; 
                                     Bit[2] equal to 1: BAR 4 size mask[63:32]
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_1_2_Bar_size_mask_msb_ADDR   PCIE_MAC_IREG_PCIE_BAR_45_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_1_2_Bar_size_mask_msb_MASK   0xFFFFFFFFu                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_45_1_2_Bar_size_mask_msb_SHFT   0u

/* =====================================================================================

  ---PCIE_BAR_WIN_2 (0x74040000 + 0x000100FCu)---

    IOWIN_IMPL[0]                - (RO) IO Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+1Ch)[15:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    IOWIN_32B[1]                 - (RO) IO Window 32-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+30h)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    PFWIN_IMPL[2]                - (RO) Prefetchable Memory Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+24h)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    PFWIN_64B[3]                 - (RO) Prefetchable Memory Window 64-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+28h)[31:0] & PCIe Configuration Space Header(+2C)[31:0]
                                     Only for RC mode.
                                     
                                     The register is per physical function register
    RSVD1[10..4]                 - (RO) Reserved
                                     
                                     The register is per physical function register
    EXP_ROM_SIZE[31..11]         - (RO) Reserved for Expansion ROM size mask
                                     Only for EP mode.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_EXP_ROM_SIZE_ADDR         PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_EXP_ROM_SIZE_MASK         0xFFFFF800u                // EXP_ROM_SIZE[31..11]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_EXP_ROM_SIZE_SHFT         11u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_RSVD1_MASK                0x000007F0u                // RSVD1[10..4]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_RSVD1_SHFT                4u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_PFWIN_64B_ADDR            PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_PFWIN_64B_MASK            0x00000008u                // PFWIN_64B[3]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_PFWIN_64B_SHFT            3u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_PFWIN_IMPL_ADDR           PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_PFWIN_IMPL_MASK           0x00000004u                // PFWIN_IMPL[2]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_PFWIN_IMPL_SHFT           2u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_IOWIN_32B_ADDR            PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_IOWIN_32B_MASK            0x00000002u                // IOWIN_32B[1]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_IOWIN_32B_SHFT            1u
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_IOWIN_IMPL_ADDR           PCIE_MAC_IREG_PCIE_BAR_WIN_2_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_IOWIN_IMPL_MASK           0x00000001u                // IOWIN_IMPL[0]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_2_IOWIN_IMPL_SHFT           0u

/* =====================================================================================

  ---PCIE_SRIOV_0_2 (0x74040000 + 0x00010120u)---

    VF_dev_ID[15..0]             - (RW) VF device ID
                                     
                                     The register is per physical function register
    VF_subsystem_dev_ID[31..16]  - (RW) VF subsystem device ID
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_VF_subsystem_dev_ID_ADDR  PCIE_MAC_IREG_PCIE_SRIOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_VF_subsystem_dev_ID_MASK  0xFFFF0000u                // VF_subsystem_dev_ID[31..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_VF_subsystem_dev_ID_SHFT  16u
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_VF_dev_ID_ADDR            PCIE_MAC_IREG_PCIE_SRIOV_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_VF_dev_ID_MASK            0x0000FFFFu                // VF_dev_ID[15..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_2_VF_dev_ID_SHFT            0u

/* =====================================================================================

  ---PCIE_SRIOV_1_2 (0x74040000 + 0x00010124u)---

    page_sizes_supported[11..0]  - (RW) Supported page sizes (Mandatory page sizes are always supported regardless of the values specified here.)
                                     
                                     The register is per physical function register
    RSVD0[13..12]                - (RW) reserved
                                     
                                     The register is per physical function register
    VF_10B_TAG[14]               - (RW) VF 10-bit tag requester supported
    APP_SPEC_EXT_CAP_IMPL[15]    - (RW) Application-specific extended capabilities implementation:
                                     0: application-specific extended capability is not implemented
                                     1: application-specific extended capabilities are implemented, and the first capability is located at offset 800h of the Configuration Space.
                                     
                                     The register is per physical function register
    FUNC_DEPENDENCY[23..16]      - (RW) Function dependency (This value must be equal to the function ID if there is no dependency.)
                                     
                                     The register is per physical function register
    APP_SPEC_CAP_IMPL[31..24]    - (RW) Application-specific capabilities implementation:
                                     00h: application-specific capability is not implemented.
                                     40-7Ch: application-specific capabilities are implemented, and the value set here indicates the offset of the first capability in the Configuration Space.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_APP_SPEC_CAP_IMPL_ADDR    PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_APP_SPEC_CAP_IMPL_MASK    0xFF000000u                // APP_SPEC_CAP_IMPL[31..24]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_APP_SPEC_CAP_IMPL_SHFT    24u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_FUNC_DEPENDENCY_ADDR      PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_FUNC_DEPENDENCY_MASK      0x00FF0000u                // FUNC_DEPENDENCY[23..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_FUNC_DEPENDENCY_SHFT      16u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_APP_SPEC_EXT_CAP_IMPL_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_APP_SPEC_EXT_CAP_IMPL_MASK 0x00008000u                // APP_SPEC_EXT_CAP_IMPL[15]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_APP_SPEC_EXT_CAP_IMPL_SHFT 15u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_VF_10B_TAG_ADDR           PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_VF_10B_TAG_MASK           0x00004000u                // VF_10B_TAG[14]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_VF_10B_TAG_SHFT           14u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_RSVD0_ADDR                PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_RSVD0_MASK                0x00003000u                // RSVD0[13..12]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_RSVD0_SHFT                12u
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_page_sizes_supported_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_page_sizes_supported_MASK 0x00000FFFu                // page_sizes_supported[11..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_2_page_sizes_supported_SHFT 0u

/* =====================================================================================

  ---PCIE_SRIOV_2_2 (0x74040000 + 0x00010128u)---

    VF_BAR0[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_2_2_VF_BAR0_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_2_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_2_2_VF_BAR0_MASK              0xFFFFFFFFu                // VF_BAR0[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_2_2_VF_BAR0_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_3_2 (0x74040000 + 0x0001012Cu)---

    VF_BAR1[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_3_2_VF_BAR1_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_3_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_3_2_VF_BAR1_MASK              0xFFFFFFFFu                // VF_BAR1[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_3_2_VF_BAR1_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_4_2 (0x74040000 + 0x00010130u)---

    VF_BAR2[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_4_2_VF_BAR2_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_4_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_4_2_VF_BAR2_MASK              0xFFFFFFFFu                // VF_BAR2[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_4_2_VF_BAR2_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_5_2 (0x74040000 + 0x00010134u)---

    VF_BAR3[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_5_2_VF_BAR3_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_5_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_5_2_VF_BAR3_MASK              0xFFFFFFFFu                // VF_BAR3[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_5_2_VF_BAR3_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_6_2 (0x74040000 + 0x00010138u)---

    VF_BAR4[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_6_2_VF_BAR4_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_6_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_6_2_VF_BAR4_MASK              0xFFFFFFFFu                // VF_BAR4[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_6_2_VF_BAR4_SHFT              0u

/* =====================================================================================

  ---PCIE_SRIOV_7_2 (0x74040000 + 0x0001013Cu)---

    VF_BAR5[31..0]               - (RW) Bit 0: reserved
                                     Bits[2:1]: memory space type (10: 64-bit address, 00: 32-bit address)
                                     Bit[3]: prefetchable
                                     Bits[11:4]: reserved
                                     Bits[31:12]: BAR size mask
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_7_2_VF_BAR5_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_7_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_7_2_VF_BAR5_MASK              0xFFFFFFFFu                // VF_BAR5[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_7_2_VF_BAR5_SHFT              0u

/* =====================================================================================

  ---PM_CONF_0_2 (0x74040000 + 0x00010174u)---

    RSVD1[15..0]                 - (RW) Reserved
    dat_scale_val0[17..16]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val1[19..18]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val2[21..20]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val3[23..22]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val4[25..24]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val5[27..26]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val6[29..28]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_scale_val7[31..30]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val7_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val7_MASK          0xC0000000u                // dat_scale_val7[31..30]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val7_SHFT          30u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val6_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val6_MASK          0x30000000u                // dat_scale_val6[29..28]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val6_SHFT          28u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val5_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val5_MASK          0x0C000000u                // dat_scale_val5[27..26]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val5_SHFT          26u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val4_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val4_MASK          0x03000000u                // dat_scale_val4[25..24]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val4_SHFT          24u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val3_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val3_MASK          0x00C00000u                // dat_scale_val3[23..22]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val3_SHFT          22u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val2_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val2_MASK          0x00300000u                // dat_scale_val2[21..20]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val2_SHFT          20u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val1_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val1_MASK          0x000C0000u                // dat_scale_val1[19..18]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val1_SHFT          18u
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val0_ADDR          PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val0_MASK          0x00030000u                // dat_scale_val0[17..16]
#define PCIE_MAC_IREG_PM_CONF_0_2_dat_scale_val0_SHFT          16u
#define PCIE_MAC_IREG_PM_CONF_0_2_RSVD1_ADDR                   PCIE_MAC_IREG_PM_CONF_0_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_2_RSVD1_MASK                   0x0000FFFFu                // RSVD1[15..0]
#define PCIE_MAC_IREG_PM_CONF_0_2_RSVD1_SHFT                   0u

/* =====================================================================================

  ---PM_CONF_1_2 (0x74040000 + 0x00010178u)---

    dat_register_val0[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val1[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val2[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val3[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val3_ADDR       PCIE_MAC_IREG_PM_CONF_1_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val3_MASK       0xFF000000u                // dat_register_val3[31..24]
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val3_SHFT       24u
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val2_ADDR       PCIE_MAC_IREG_PM_CONF_1_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val2_MASK       0x00FF0000u                // dat_register_val2[23..16]
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val2_SHFT       16u
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val1_ADDR       PCIE_MAC_IREG_PM_CONF_1_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val1_MASK       0x0000FF00u                // dat_register_val1[15..8]
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val1_SHFT       8u
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val0_ADDR       PCIE_MAC_IREG_PM_CONF_1_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val0_MASK       0x000000FFu                // dat_register_val0[7..0]
#define PCIE_MAC_IREG_PM_CONF_1_2_dat_register_val0_SHFT       0u

/* =====================================================================================

  ---PM_CONF_2_2 (0x74040000 + 0x0001017Cu)---

    dat_register_val4[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val5[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val6[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register
    dat_register_val7[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. 
                                     It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val7_ADDR       PCIE_MAC_IREG_PM_CONF_2_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val7_MASK       0xFF000000u                // dat_register_val7[31..24]
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val7_SHFT       24u
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val6_ADDR       PCIE_MAC_IREG_PM_CONF_2_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val6_MASK       0x00FF0000u                // dat_register_val6[23..16]
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val6_SHFT       16u
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val5_ADDR       PCIE_MAC_IREG_PM_CONF_2_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val5_MASK       0x0000FF00u                // dat_register_val5[15..8]
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val5_SHFT       8u
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val4_ADDR       PCIE_MAC_IREG_PM_CONF_2_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val4_MASK       0x000000FFu                // dat_register_val4[7..0]
#define PCIE_MAC_IREG_PM_CONF_2_2_dat_register_val4_SHFT       0u

/* =====================================================================================

  ---IMASK_HOST_2 (0x74040000 + 0x00010188u)---

    DMA_END_EN[7..0]             - (RW) See ISTATUS_HOST[7:0] for details of this register's bits
                                     
                                     The register is per physical function register
    DMA_ERR_EN[15..8]            - (RW) See ISTATUS_HOST[15:8] for details of this register's bits
                                     
                                     The register is per physical function register
    A_ATR_EVT_EN[19..16]         - (RW) See ISTATUS_HOST[19:16] for details of this register's bits
                                     
                                     The register is per physical function register
    P_ATR_EVT_EN[23..20]         - (RW) See ISTATUS_HOST[23:20] for details of this register's bits
                                     
                                     The register is per physical function register
    INT_REQUEST_EN[31..24]       - (RW) See ISTATUS_HOST[31:24] for details of this register's bits
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_2_INT_REQUEST_EN_ADDR         PCIE_MAC_IREG_IMASK_HOST_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_2_INT_REQUEST_EN_MASK         0xFF000000u                // INT_REQUEST_EN[31..24]
#define PCIE_MAC_IREG_IMASK_HOST_2_INT_REQUEST_EN_SHFT         24u
#define PCIE_MAC_IREG_IMASK_HOST_2_P_ATR_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_2_P_ATR_EVT_EN_MASK           0x00F00000u                // P_ATR_EVT_EN[23..20]
#define PCIE_MAC_IREG_IMASK_HOST_2_P_ATR_EVT_EN_SHFT           20u
#define PCIE_MAC_IREG_IMASK_HOST_2_A_ATR_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_2_A_ATR_EVT_EN_MASK           0x000F0000u                // A_ATR_EVT_EN[19..16]
#define PCIE_MAC_IREG_IMASK_HOST_2_A_ATR_EVT_EN_SHFT           16u
#define PCIE_MAC_IREG_IMASK_HOST_2_DMA_ERR_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_2_DMA_ERR_EN_MASK             0x0000FF00u                // DMA_ERR_EN[15..8]
#define PCIE_MAC_IREG_IMASK_HOST_2_DMA_ERR_EN_SHFT             8u
#define PCIE_MAC_IREG_IMASK_HOST_2_DMA_END_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_2_DMA_END_EN_MASK             0x000000FFu                // DMA_END_EN[7..0]
#define PCIE_MAC_IREG_IMASK_HOST_2_DMA_END_EN_SHFT             0u

/* =====================================================================================

  ---ISTATUS_HOST_2 (0x74040000 + 0x0001018Cu)---

    DMA_END[7..0]                - (W1C) Reports that a DMA transfer is ended. 
                                     Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[7:0] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    DMA_ERR[15..8]               - (W1C) Reports that an error occurred during a DMA transfer. 
                                     Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[15:8] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    A_ATR_EVT[19..16]            - (W1C) Reports AXI Address Translation events: the event can be disabled by set 0x1AC[19:16] to 1
                                     Bit [16]: AXI Post Error: asserted to indicate that an error occurred on an AXI write request
                                     Bit [17]: AXI Fetch Error: asserted to indicate that an error occurred on an AXI read request
                                     Bit [18]: AXI Discard Error: asserted to signal a completion timeout on an AXI read request
                                     Bit [19]: AXI Doorbell: asserted when an AXI request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[19:16] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    P_ATR_EVT[23..20]            - (W1C) Reports PCIe Address Translation events: the event can be disabled by set 0x1AC[23:20] to 1
                                     Bit [20]: PCIe Post Error: asserted to indicate that an error occurred on a PCIe write request
                                     Bit [21]: PCIe Fetch Error: asserted to indicate that an error occurred on a PCIe read request
                                     Bit [22]: PCIe Discard Error: asserted to signal a completion timeout on a PCIe read request
                                     Bit [23]: PCIe Doorbell: asserted when a PCIe request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[23:20] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register
    INT_REQUEST[31..24]          - (W1C) Reports external interrupt requests bit[31:24] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_2_INT_REQUEST_ADDR          PCIE_MAC_IREG_ISTATUS_HOST_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_2_INT_REQUEST_MASK          0xFF000000u                // INT_REQUEST[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_2_INT_REQUEST_SHFT          24u
#define PCIE_MAC_IREG_ISTATUS_HOST_2_P_ATR_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_2_P_ATR_EVT_MASK            0x00F00000u                // P_ATR_EVT[23..20]
#define PCIE_MAC_IREG_ISTATUS_HOST_2_P_ATR_EVT_SHFT            20u
#define PCIE_MAC_IREG_ISTATUS_HOST_2_A_ATR_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_2_A_ATR_EVT_MASK            0x000F0000u                // A_ATR_EVT[19..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_2_A_ATR_EVT_SHFT            16u
#define PCIE_MAC_IREG_ISTATUS_HOST_2_DMA_ERR_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_2_DMA_ERR_MASK              0x0000FF00u                // DMA_ERR[15..8]
#define PCIE_MAC_IREG_ISTATUS_HOST_2_DMA_ERR_SHFT              8u
#define PCIE_MAC_IREG_ISTATUS_HOST_2_DMA_END_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_2_DMA_END_MASK              0x000000FFu                // DMA_END[7..0]
#define PCIE_MAC_IREG_ISTATUS_HOST_2_DMA_END_SHFT              0u

/* =====================================================================================

  ---PCIE_LOW_POWER_CTRL_2 (0x74040000 + 0x00010194u)---

    dis_lowpwr_mask[3..0]        - (RW) Those registers can mask external ASPM control interface.
                                     0 : external ASPM control interface can not affect PCIe low power state.
                                     1 : external ASPM control interface can affect PCIe low power state.
                                     Bit[0] : L0s.
                                     Bit[1] : L1.
                                     Bit[2] : L1.1.
                                     Bit[3] : L1.2.
    en_l1_chk_int[4]             - (RW) Uncleaned interrupt status blocks PCIe enter L1 enable
                                     0: disable
                                     1: enable
    RESERVED5[7..5]              - (RO) Reserved bits
    force_dis_lowpwr[11..8]      - (RW) Disable Low Power State
                                     0: PCIe can enter to low power state.
                                     1: PCIe can not enter to low power state.
                                     Bit[0]: L0s (MAC will exit L0s if PCIe link is in L0s)
                                     Bit[1]: L1 ( MAC will exit L1 if PCIe link is in L1)
                                     Bit[2]: L1.1
                                     Bit[3]: L1.2
                                     
                                     The register is per physical function register
    l0l0s_lock_dbc_cnt[23..12]   - (RW) Debounce count for l0l0s_lock
                                     l0l0s_lock will refelt real L0 or L0s state after the debounce time.
                                     The unit of the count is 16T of tl_ck.
    L1_EXIT_NUM[30..24]          - (RW) L1 Exit Number
                                     The counter starts to count when clkreq_in_tl is high.
                                     lpm_state will request to exit L1 when the counter is met.
    L1_EXIT_EN[31]               - (RW) L1 Exit Enable
                                     0: disable to force L1 exit
                                     1: enable to force L1 exit

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_L1_EXIT_EN_ADDR    PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_L1_EXIT_EN_MASK    0x80000000u                // L1_EXIT_EN[31]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_L1_EXIT_EN_SHFT    31u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_L1_EXIT_NUM_ADDR   PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_L1_EXIT_NUM_MASK   0x7F000000u                // L1_EXIT_NUM[30..24]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_L1_EXIT_NUM_SHFT   24u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_l0l0s_lock_dbc_cnt_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_l0l0s_lock_dbc_cnt_MASK 0x00FFF000u                // l0l0s_lock_dbc_cnt[23..12]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_l0l0s_lock_dbc_cnt_SHFT 12u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_force_dis_lowpwr_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_force_dis_lowpwr_MASK 0x00000F00u                // force_dis_lowpwr[11..8]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_force_dis_lowpwr_SHFT 8u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_en_l1_chk_int_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_en_l1_chk_int_MASK 0x00000010u                // en_l1_chk_int[4]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_en_l1_chk_int_SHFT 4u
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_dis_lowpwr_mask_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_dis_lowpwr_mask_MASK 0x0000000Fu                // dis_lowpwr_mask[3..0]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_2_dis_lowpwr_mask_SHFT 0u

/* =====================================================================================

  ---PCIE_ICMD_PM_2 (0x74040000 + 0x00010198u)---

    Send_PME[0]                  - (W1S) Send PME
                                     Local processor can write 1 to send PME bit command in order to generate a PME# event on the PCI Express link.
                                     This is used to ask PCI host processor to restore bridge to a fully functional legacy power state.
                                     Note that this bit is immediately cleared by the MAC : the local processor does not need to clear it.
                                     Note that the PME_En bit in the Power Management Control/Status register should be set to 1b to enable PME# to be asserted.
                                     
                                     The register is per physical function register
    ICMD_PME_TURN_OFF_HWCLR[1]   - (RW) For RC mode.
                                     0 : HW will not clear PME_TURN_OFF bit  automatically by HW when EP received receive PME TURN OFF message.
                                     1 : HW will clear PME_TURN_OFF bit  automatically by HW when EP received receive PME TURN OFF message.
    RSVD1[3..2]                  - (RO) Reserved
    Turn_Off_Link[4]             - (RO) Turn Off Link
                                     The local processor can send a Turn Off Link command in order to start L2 state entry negotiation. 
                                     If the Endpoint device is also ready to enter this state, then both devices will enter L2 state and this link will be turned off. 
                                     Deasserting this signal forces the Core to exit L2 state and wakes the link.
    RSVD2[7..5]                  - (RO) Reserved
    CLKREQ_Clock_control[8]      - (RW) Clock Request Control Capability for RC (RC legacy L1 clock power management)
                                     0: RC does not allow the reference clock to be removed in L1PM state. (RC will enter L1 with Powerdown is P1 for legacy L1 Clock Power Management)
                                     1: RC allows the reference clock to be removed L1PM state. (RC will enter L1 with Powerdown is P2 for legacy L1 Clock Power Management)
                                     The register is only used for RC.
    RSVD3[23..9]                 - (RO) Reserved
    OBFF_control[27..24]         - (RO) OBFF Control Register.
                                     For RC mode only.
                                     If OBFF (Optimized Buffer Flash Fill) is enabled, changing the value of this signal causes the Core to signal an OBFF status change to its link partner. Allowed values are:
                                     - 1111: CPU Active (default)
                                     - 0001: OBFF
                                     - 0000: Idle
                                     Either WAKE# or message signaling can be used, depending on which signaling method is enabled.
                                     If OBFF is not enabled then changing the value of this signal has no effect.
    OBFF_status[31..28]          - (RO) OBFF Status Register.
                                     For EP mode only.
                                     If OBFF is enabled, this signals reports the OBFF status received from the Core link partner. Possible values are:
                                     - 1111: CPU Active
                                     - 0001: OBFF
                                     - 0000: Idle
                                     Either WAKE# or message signaling can be used, depending on which signaling method is enabled.
                                     If OBFF is not enabled then the value of this signal is always "CPU Active".

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_OBFF_status_ADDR          PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_OBFF_status_MASK          0xF0000000u                // OBFF_status[31..28]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_OBFF_status_SHFT          28u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_OBFF_control_ADDR         PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_OBFF_control_MASK         0x0F000000u                // OBFF_control[27..24]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_OBFF_control_SHFT         24u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD3_MASK                0x00FFFE00u                // RSVD3[23..9]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD3_SHFT                9u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_CLKREQ_Clock_control_ADDR PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_CLKREQ_Clock_control_MASK 0x00000100u                // CLKREQ_Clock_control[8]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_CLKREQ_Clock_control_SHFT 8u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD2_MASK                0x000000E0u                // RSVD2[7..5]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD2_SHFT                5u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_Turn_Off_Link_ADDR        PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_Turn_Off_Link_MASK        0x00000010u                // Turn_Off_Link[4]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_Turn_Off_Link_SHFT        4u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD1_MASK                0x0000000Cu                // RSVD1[3..2]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_RSVD1_SHFT                2u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_ICMD_PME_TURN_OFF_HWCLR_ADDR PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_ICMD_PME_TURN_OFF_HWCLR_MASK 0x00000002u                // ICMD_PME_TURN_OFF_HWCLR[1]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_ICMD_PME_TURN_OFF_HWCLR_SHFT 1u
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_Send_PME_ADDR             PCIE_MAC_IREG_PCIE_ICMD_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_Send_PME_MASK             0x00000001u                // Send_PME[0]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_2_Send_PME_SHFT             0u

/* =====================================================================================

  ---PCIE_ISTATUS_PM_2 (0x74040000 + 0x0001019Cu)---

    power_state[1..0]            - (RO) Power State
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot or D3cold
                                     
                                     The register is per physical function register
    RSVD1[7..2]                  - (RO) Reserved
    l1pm_sm[10..8]               - (RO) L1SS state machine.
                                     - 000b: L1.0
                                     - 001b: L1.1
                                     - 010b: L1.2 entry
                                     - 011b: L1.2 idle
                                     - 100b: L1.2 exit
    allow_tl_clk_gating[11]      - (RO) allow tl_clk gating when device is in L1 or L2.
    RSVD2[31..12]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_RSVD2_MASK             0xFFFFF000u                // RSVD2[31..12]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_RSVD2_SHFT             12u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_allow_tl_clk_gating_ADDR PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_allow_tl_clk_gating_MASK 0x00000800u                // allow_tl_clk_gating[11]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_allow_tl_clk_gating_SHFT 11u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_l1pm_sm_ADDR           PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_l1pm_sm_MASK           0x00000700u                // l1pm_sm[10..8]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_l1pm_sm_SHFT           8u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_RSVD1_MASK             0x000000FCu                // RSVD1[7..2]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_RSVD1_SHFT             2u
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_power_state_ADDR       PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_power_state_MASK       0x00000003u                // power_state[1..0]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_2_power_state_SHFT       0u

/* =====================================================================================

  ---PCIE_LTR_VALUES_2 (0x74040000 + 0x000101A4u)---

    LTR_Max_Snoop_Latency[9..0]  - (RW) Along with the Max Snoop LatencyScale field, this register specifies the maximum snoop latency that a device is permitted to request.
    LTR_Max_Snoop_Latency_Scale[12..10] - (RW) This register provides a scale for the value contained within the Maximum Snoop LatencyValue field. 
                                     Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD1[14..13]                - (RO) Reserved
    LTR_Snoop_latency_requirement[15] - (RW) Snoop latency requirement
    LTR_Max_NonSnoop_Latency[25..16] - (RW) Along with the Max NonSnoop LatencyScale field, this register specifies the maximum nonsnoop latency that a device is permitted to request.
    LTR_Max_NonSnoop_Latency_Scale[28..26] - (RW) This register provides a scale for the value contained within the Maximum NonSnoop LatencyValue field. 
                                     Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD2[30..29]                - (RO) Reserved
    LTR_NonSnoop_latency_requirement[31] - (RW) No-Snoop latency requirement

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_NonSnoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_NonSnoop_latency_requirement_MASK 0x80000000u                // LTR_NonSnoop_latency_requirement[31]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_NonSnoop_latency_requirement_SHFT 31u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_RSVD2_MASK             0x60000000u                // RSVD2[30..29]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_RSVD2_SHFT             29u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_NonSnoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_NonSnoop_Latency_Scale_MASK 0x1C000000u                // LTR_Max_NonSnoop_Latency_Scale[28..26]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_NonSnoop_Latency_Scale_SHFT 26u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_NonSnoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_NonSnoop_Latency_MASK 0x03FF0000u                // LTR_Max_NonSnoop_Latency[25..16]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_NonSnoop_Latency_SHFT 16u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Snoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Snoop_latency_requirement_MASK 0x00008000u                // LTR_Snoop_latency_requirement[15]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Snoop_latency_requirement_SHFT 15u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_RSVD1_MASK             0x00006000u                // RSVD1[14..13]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_RSVD1_SHFT             13u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_Snoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_Snoop_Latency_Scale_MASK 0x00001C00u                // LTR_Max_Snoop_Latency_Scale[12..10]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_Snoop_Latency_Scale_SHFT 10u
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_Snoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_2_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_Snoop_Latency_MASK 0x000003FFu                // LTR_Max_Snoop_Latency[9..0]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_2_LTR_Max_Snoop_Latency_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_SET_2 (0x74040000 + 0x000101F0u)---

    imask_host_set[31..0]        - (W1S) Write one to set register "IMASK_HOST" in  0x0188
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_SET_2_imask_host_set_ADDR     PCIE_MAC_IREG_IMASK_HOST_SET_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_SET_2_imask_host_set_MASK     0xFFFFFFFFu                // imask_host_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_SET_2_imask_host_set_SHFT     0u

/* =====================================================================================

  ---IMASK_HOST_CLR_2 (0x74040000 + 0x000101F4u)---

    imask_host_clr[31..0]        - (W1C) Write one to clear register "IMASK_HOST" in  0x0188
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_CLR_2_imask_host_clr_ADDR     PCIE_MAC_IREG_IMASK_HOST_CLR_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_CLR_2_imask_host_clr_MASK     0xFFFFFFFFu                // imask_host_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_CLR_2_imask_host_clr_SHFT     0u

/* =====================================================================================

  ---PCIE_DMA_DUMMY_0_2 (0x74040000 + 0x000101F8u)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_2_PCIE_DUMMY_ADDR       PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_2_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_2_PCIE_DUMMY_MASK       0xFFFFFFFFu                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_2_PCIE_DUMMY_SHFT       0u

/* =====================================================================================

  ---PCIE_DMA_DUMMY_1_2 (0x74040000 + 0x000101FCu)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_2_PCIE_DUMMY_ADDR       PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_2_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_2_PCIE_DUMMY_MASK       0xFFFFFFFFu                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_2_PCIE_DUMMY_SHFT       0u

/* =====================================================================================

  ---ISTATUS_HOST_CTRL_2 (0x74040000 + 0x0001031Cu)---

    ISTATUS_HOST_DIS[0]          - (RW) When the register is set to 1, all interrupt to Host will be disabled
                                     0 : Enable
                                     1 : Disable
                                     
                                     The register is per physical function register
    ISTATUS_HOST_EXT_CLR_DIS[1]  - (RW) When external interrupt in fall, it will clear ISTATUS_HOST status or not (0x18C)
                                     0 : Enable (external interrupt falling edge will clear corresponding bit of ISTATUS_HOST automatically) (MTK Proprietary Mode)
                                     1 : Disable (external interrupt falling edge will not clear corresponding bit of ISTATUS_HOST automatically) (Original PLDA mode)
    ISTATUS_HOST_DIS_LOCAL[2]    - (RW) When the register is set to 1, all interrupt to Host will be disabled, which is for EP CPU in local.
                                     0 : Enable
                                     1 : Disable
                                     
                                     The register is per physical function register
    RSVD1[15..3]                 - (RW) Reserved
    ISTATUS_HOST_ATR_DIS[23..16] - (RW) Host Processor ATR Interrupt Disable
                                     Bit [16] AXI Post Error Disable
                                     Bit [17] AXI Fetch Error Disable
                                     Bit [18] AXI Discard Error Disable
                                     Bit [19] AXI Doorbell Disable
                                     Bit [20] PCIe Post Error Disable
                                     Bit [21] PCIe Fetch Error Disable
                                     Bit [22] PCIe Discard Error Disable
                                     Bit [23] PCIe Doorbell Disable
    RSVD2[31..24]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_RSVD2_ADDR           PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_RSVD2_MASK           0xFF000000u                // RSVD2[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_RSVD2_SHFT           24u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_ATR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_ATR_DIS_MASK 0x00FF0000u                // ISTATUS_HOST_ATR_DIS[23..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_ATR_DIS_SHFT 16u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_RSVD1_ADDR           PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_RSVD1_MASK           0x0000FFF8u                // RSVD1[15..3]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_RSVD1_SHFT           3u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_DIS_LOCAL_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_DIS_LOCAL_MASK 0x00000004u                // ISTATUS_HOST_DIS_LOCAL[2]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_DIS_LOCAL_SHFT 2u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_EXT_CLR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_EXT_CLR_DIS_MASK 0x00000002u                // ISTATUS_HOST_EXT_CLR_DIS[1]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_EXT_CLR_DIS_SHFT 1u
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_DIS_MASK 0x00000001u                // ISTATUS_HOST_DIS[0]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_2_ISTATUS_HOST_DIS_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_AUTO_CLR_2 (0x74040000 + 0x000103C4u)---

    SW_TRIG_AUTO_CLR[31..0]      - (RW) Auto clear sw trigger interrupt status when msi sent
                                     0: disable
                                     1: enable

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_2_SW_TRIG_AUTO_CLR_ADDR PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_2_ADDR
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_2_SW_TRIG_AUTO_CLR_MASK 0xFFFFFFFFu                // SW_TRIG_AUTO_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_AUTO_CLR_2_SW_TRIG_AUTO_CLR_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_INTR_SET_2 (0x74040000 + 0x000103C8u)---

    SW_TRIG_INTR_SET[31..0]      - (W1S) Write one set register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_2_SW_TRIG_INTR_SET_ADDR PCIE_MAC_IREG_SW_TRIG_INTR_SET_2_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_2_SW_TRIG_INTR_SET_MASK 0xFFFFFFFFu                // SW_TRIG_INTR_SET[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_2_SW_TRIG_INTR_SET_SHFT 0u

/* =====================================================================================

  ---SW_TRIG_INTR_CLR_2 (0x74040000 + 0x000103CCu)---

    SW_TRIG_INTR_CLR[31..0]      - (W1C) Write one clear register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_2_SW_TRIG_INTR_CLR_ADDR PCIE_MAC_IREG_SW_TRIG_INTR_CLR_2_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_2_SW_TRIG_INTR_CLR_MASK 0xFFFFFFFFu                // SW_TRIG_INTR_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_2_SW_TRIG_INTR_CLR_SHFT 0u

/* =====================================================================================

  ---PCIE_CFG_MSIX_2 (0x74040000 + 0x000103ECu)---

    cfg_msix_ctrl[3..0]          - (RW) Multiple MSIX message Enable
                                     System software writes to this field to indicate the number of allocated MSIX messages (equal to or less than the number of requested MSIX messages).
                                     The number of allocated messages is aligned to a power of two. 
                                     If a function requests four MSIX messages, system software can allocate either four, two, or one message by writing a 010b, 001b, or 000b to this field, respectively. 
                                     When MSIX is enabled, a device will be allocated at least 1 message.
                                     
                                     Bit[i*4+0] : Program to enable the MSI-X merging function
                                     0: disable
                                     1:enable
                                     
                                     Bit[i*4+1+:3] : Program a 3-bit value in this field indicating the actual number of MSI-X allocated.
                                     - 000b: 1 message allocated
                                     - 001b: 2 messages  allocated
                                     - 010b: 4 message  allocated
                                     - 011b: 8 messages  allocated
                                     - 100b: 16 message  allocated
                                     - 101b: 32 messages  allocated
                                     - 110b: 64 messages  allocated
                                     - 111b: 128 messages  allocated
                                     
                                     bit[3:0] : MSIX Group 0, each group has 128 MSIX vector
                                     
                                     The register is per physical function register
    int_sent_byp_istatus_host[4] - (RW) Bypass to check the condition of istatus_host when int_sent assert
                                     1'b0: enable to check the condition of istatus_host when int_sent assert.
                                     1'b1: bypass to check the condition of istatus_host when int_sent assert.
    intx_req_byp_all_sent[5]     - (RW) Bypass to check all int sent for intx req
                                     1'b0: enable
                                     1'b1: bypass
    int_sent_byp_msi_pending[6]  - (RW) Bypass to check msi pending when assert int sent
                                     1'b0: enable
                                     1'b1: bypass
    RESERVED7[31..7]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_int_sent_byp_msi_pending_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_int_sent_byp_msi_pending_MASK 0x00000040u                // int_sent_byp_msi_pending[6]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_int_sent_byp_msi_pending_SHFT 6u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_intx_req_byp_all_sent_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_intx_req_byp_all_sent_MASK 0x00000020u                // intx_req_byp_all_sent[5]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_intx_req_byp_all_sent_SHFT 5u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_int_sent_byp_istatus_host_ADDR PCIE_MAC_IREG_PCIE_CFG_MSIX_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_int_sent_byp_istatus_host_MASK 0x00000010u                // int_sent_byp_istatus_host[4]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_int_sent_byp_istatus_host_SHFT 4u
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_cfg_msix_ctrl_ADDR       PCIE_MAC_IREG_PCIE_CFG_MSIX_2_ADDR
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_cfg_msix_ctrl_MASK       0x0000000Fu                // cfg_msix_ctrl[3..0]
#define PCIE_MAC_IREG_PCIE_CFG_MSIX_2_cfg_msix_ctrl_SHFT       0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_0_2 (0x74040000 + 0x00010E80u)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_2_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_2_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_0_2_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_1_2 (0x74040000 + 0x00010E84u)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i+32 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_2_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_2_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_1_2_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_2_2 (0x74040000 + 0x00010E88u)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet. Bit number i corresponds to Entry number i+64 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_2_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_2_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_2_2_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_SW_TRIG_SET_GRP0_3_2 (0x74040000 + 0x00010E8Cu)---

    msix_sw_trig_set[31..0]      - (W1S) MSIX Software Trigger Set Register.
                                     Software can write one to the register bit to trigger a MSI-X packet.  Bit number i corresponds to Entry number i+96 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_2_msix_sw_trig_set_ADDR PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_2_msix_sw_trig_set_MASK 0xFFFFFFFFu                // msix_sw_trig_set[31..0]
#define PCIE_MAC_IREG_MSIX_SW_TRIG_SET_GRP0_3_2_msix_sw_trig_set_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_0_2 (0x74040000 + 0x00010F00u)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_2_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_2_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_0_2_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_1_2 (0x74040000 + 0x00010F04u)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+32 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_2_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_2_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_1_2_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_2_2 (0x74040000 + 0x00010F08u)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+64 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_2_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_2_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_2_2_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_ISTATUS_HOST_GRP0_3_2 (0x74040000 + 0x00010F0Cu)---

    msix_istatus_host[31..0]     - (W1C) Reports the MSI-X interrupt source is asserted. Bit number i corresponds to Entry number i+96 of the group.
                                     It is reserved when the PCIe is Rootport.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_2_msix_istatus_host_ADDR PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_2_msix_istatus_host_MASK 0xFFFFFFFFu                // msix_istatus_host[31..0]
#define PCIE_MAC_IREG_MSIX_ISTATUS_HOST_GRP0_3_2_msix_istatus_host_SHFT 0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_0_2 (0x74040000 + 0x00010F80u)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_2_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_2_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_0_2_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_1_2 (0x74040000 + 0x00010F84u)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+32 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_2_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_2_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_1_2_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_2_2 (0x74040000 + 0x00010F88u)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+64 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_2_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_2_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_2_2_msix_pba_SHFT          0u

/* =====================================================================================

  ---MSIX_PBA_GRP0_3_2 (0x74040000 + 0x00010F8Cu)---

    msix_pba[31..0]              - (RO) Indicate MSI-X Pending Bit Status.  Bit number i corresponds to Entry number i+96 of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_2_msix_pba_ADDR          PCIE_MAC_IREG_MSIX_PBA_GRP0_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_2_msix_pba_MASK          0xFFFFFFFFu                // msix_pba[31..0]
#define PCIE_MAC_IREG_MSIX_PBA_GRP0_3_2_msix_pba_SHFT          0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_0_2 (0x74040000 + 0x00013000u)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_2_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_2_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_0_2_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_1_2 (0x74040000 + 0x00013004u)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_2_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_2_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_1_2_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_2_2 (0x74040000 + 0x00013008u)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_2_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_2_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_2_2_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_SET_GRP0_3_2 (0x74040000 + 0x0001300Cu)---

    imask_host_msix_set[31..0]   - (W1S) Write one to set corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_2_imask_host_msix_set_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_2_imask_host_msix_set_MASK 0xFFFFFFFFu                // imask_host_msix_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_SET_GRP0_3_2_imask_host_msix_set_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_0_2 (0x74040000 + 0x00013080u)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_2_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_2_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_0_2_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_1_2 (0x74040000 + 0x00013084u)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_2_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_2_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_1_2_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_2_2 (0x74040000 + 0x00013088u)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_2_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_2_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_2_2_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_CLR_GRP0_3_2 (0x74040000 + 0x0001308Cu)---

    imask_host_msix_clr[31..0]   - (W1C) Write one to clear corresponding MSIX Proprietary Mask Bit which is during 0x3100 ~ 0x317F.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_2_imask_host_msix_clr_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_2_imask_host_msix_clr_MASK 0xFFFFFFFFu                // imask_host_msix_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_CLR_GRP0_3_2_imask_host_msix_clr_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_0_2 (0x74040000 + 0x00013100u)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_2_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_2_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_0_2_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_1_2 (0x74040000 + 0x00013104u)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_2_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_2_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_1_2_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_2_2 (0x74040000 + 0x00013108u)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_2_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_2_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_2_2_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---IMASK_HOST_MSIX_GRP0_3_2 (0x74040000 + 0x0001310Cu)---

    imask_host_msix[31..0]       - (RO) MSIX Proprietary Mask Bit for Host Processor.
                                     Setting a bit enables the associated interrupt source of MSIX and clearing a bit masks the interrpt source of MSIX.
                                     Bit number i corresponds to Entry number i of the group.
                                     
                                     0 : Disable Interrupt
                                     1 : Enable Interrupt
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_2_imask_host_msix_ADDR PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_2_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_2_imask_host_msix_MASK 0xFFFFFFFFu                // imask_host_msix[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_MSIX_GRP0_3_2_imask_host_msix_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2 (0x74040000 + 0x00013230u)---

    axi_slv_mem_rd_max_latency_by_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave read max、min and cur record by function
                                     Max axi slave memory read latency cycle  by function
    axi_slv_mem_rd_min_latency_by_func[31..16] - (W1C) Mine axi slave memory read latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_axi_slv_mem_rd_min_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_axi_slv_mem_rd_min_latency_by_func_MASK 0xFFFF0000u                // axi_slv_mem_rd_min_latency_by_func[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_axi_slv_mem_rd_min_latency_by_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_axi_slv_mem_rd_max_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_axi_slv_mem_rd_max_latency_by_func_MASK 0x0000FFFFu                // axi_slv_mem_rd_max_latency_by_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_0_By_Func_2_axi_slv_mem_rd_max_latency_by_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2 (0x74040000 + 0x00013234u)---

    axi_slv_mem_rd_cur_latency_by_func[15..0] - (W1C) Current axi slave memory read latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_axi_slv_mem_rd_cur_latency_by_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_axi_slv_mem_rd_cur_latency_by_func_MASK 0x0000FFFFu                // axi_slv_mem_rd_cur_latency_by_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_Latency_Record_1_By_Func_2_axi_slv_mem_rd_cur_latency_by_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2 (0x74040000 + 0x00013238u)---

    axi_slv_mem_wr_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi slave write max、min and cur record by function
                                     Max axi slave memory write latency cycle by function
    axi_slv_mem_wr_min_latency_func[31..16] - (W1C) Mine axi slave memory write latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_axi_slv_mem_wr_min_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_axi_slv_mem_wr_min_latency_func_MASK 0xFFFF0000u                // axi_slv_mem_wr_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_axi_slv_mem_wr_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_axi_slv_mem_wr_max_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_axi_slv_mem_wr_max_latency_func_MASK 0x0000FFFFu                // axi_slv_mem_wr_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_0_By_Func_2_axi_slv_mem_wr_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2 (0x74040000 + 0x0001323Cu)---

    axi_slv_mem_wr_cur_latency_func[15..0] - (W1C) Current axi slave memory write latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_Reserved_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_axi_slv_mem_wr_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_axi_slv_mem_wr_cur_latency_func_MASK 0x0000FFFFu                // axi_slv_mem_wr_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_WR_Latency_Record_1_By_Func_2_axi_slv_mem_wr_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_0_By_Func_2 (0x74040000 + 0x00013240u)---

    axi_mst_mem_rd_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi master read max、min and cur record by function
                                     Max axi master memory read latency cycle by function
    axi_mst_mem_rd_min_latency_func[31..16] - (W1C) Mine axi master memory read latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_axi_mst_mem_rd_min_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_axi_mst_mem_rd_min_latency_func_MASK 0xFFFF0000u                // axi_mst_mem_rd_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_axi_mst_mem_rd_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_axi_mst_mem_rd_max_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_axi_mst_mem_rd_max_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_rd_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_0_By_Func_2_axi_mst_mem_rd_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2 (0x74040000 + 0x00013244u)---

    axi_mst_mem_rd_cur_latency_func[15..0] - (W1C) Current axi master memory read latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_axi_mst_mem_rd_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_axi_mst_mem_rd_cur_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_rd_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_RD_Latency_Record_1_By_Fun_2_axi_mst_mem_rd_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_0_By_Func_2 (0x74040000 + 0x00013248u)---

    axi_mst_mem_wr_max_latency_func[15..0] - (W1C) when write bit0 to 1'b1.it will clear axi master write max、min and cur record by function
                                     Max axi master memory write latency cycle by function
    axi_mst_mem_wr_min_latency_func[31..16] - (W1C) Mine axi master memory write latency cycle by function

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_axi_mst_mem_wr_min_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_axi_mst_mem_wr_min_latency_func_MASK 0xFFFF0000u                // axi_mst_mem_wr_min_latency_func[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_axi_mst_mem_wr_min_latency_func_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_axi_mst_mem_wr_max_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_axi_mst_mem_wr_max_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_wr_max_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_0_By_Func_2_axi_mst_mem_wr_max_latency_func_SHFT 0u

/* =====================================================================================

  ---AXI_MST_PERF_WR_Latency_Record_1_By_Func_2 (0x74040000 + 0x0001324Cu)---

    axi_mst_mem_wr_cur_latency_func[15..0] - (W1C) Current axi master memory write latency cycle by function
    Reserved[31..16]             - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_Reserved_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_Reserved_MASK 0xFFFF0000u                // Reserved[31..16]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_Reserved_SHFT 16u
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_axi_mst_mem_wr_cur_latency_func_ADDR PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_ADDR
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_axi_mst_mem_wr_cur_latency_func_MASK 0x0000FFFFu                // axi_mst_mem_wr_cur_latency_func[15..0]
#define PCIE_MAC_IREG_AXI_MST_PERF_WR_Latency_Record_1_By_Func_2_axi_mst_mem_wr_cur_latency_func_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2 (0x74040000 + 0x00013394u)---

    pcie_mrd_req_by_func_latency_water_mark[15..0] - (RW) PCIe memory read request by func latency water mark setting
    pcie_mwr_req_by_func_latency_water_mark[31..16] - (RW) PCIe memory write request by func latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mwr_req_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mwr_req_by_func_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_req_by_func_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mwr_req_by_func_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mrd_req_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mrd_req_by_func_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_req_by_func_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_REQ_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mrd_req_by_func_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2 (0x74040000 + 0x00013398u)---

    pcie_mrd_cpl_by_func_latency_water_mark[15..0] - (RW) PCIe memory read complete(like EP mode MMIO) by func latency water mark setting
    pcie_mwr_cpl_by_func_latency_water_mark[31..16] - (RW) PCIe memory write complete(like EP mode MMIO) by func latency water mark setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mwr_cpl_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mwr_cpl_by_func_latency_water_mark_MASK 0xFFFF0000u                // pcie_mwr_cpl_by_func_latency_water_mark[31..16]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mwr_cpl_by_func_latency_water_mark_SHFT 16u
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mrd_cpl_by_func_latency_water_mark_ADDR PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_ADDR
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mrd_cpl_by_func_latency_water_mark_MASK 0x0000FFFFu                // pcie_mrd_cpl_by_func_latency_water_mark[15..0]
#define PCIE_MAC_IREG_PCIE_MEM_CPL_BY_FUNC_LATENCY_WATER_MARK_2_pcie_mrd_cpl_by_func_latency_water_mark_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_LOCAL_T1A_LO_2 (0x74040000 + 0x00013540u)---

    pcie_ptm_rx_t_local_t1_a_lo[31..0] - (RO) HW PTM t1' local time stamp low 32bits register
                                     this register records the local t1' time stamp low 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_2_pcie_ptm_rx_t_local_t1_a_lo_ADDR PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_2_pcie_ptm_rx_t_local_t1_a_lo_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_local_t1_a_lo[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_LO_2_pcie_ptm_rx_t_local_t1_a_lo_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_LOCAL_T1A_HI_2 (0x74040000 + 0x00013544u)---

    pcie_ptm_rx_t_local_t1_a_hi[31..0] - (RO) HW PTM t1' local time stamp high 32bits register
                                     this register records the local t1' time stamp high 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_2_pcie_ptm_rx_t_local_t1_a_hi_ADDR PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_2_pcie_ptm_rx_t_local_t1_a_hi_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_local_t1_a_hi[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_LOCAL_T1A_HI_2_pcie_ptm_rx_t_local_t1_a_hi_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_MASTER_T1A_LO_2 (0x74040000 + 0x00013548u)---

    pcie_ptm_rx_t_mst_t1_a_lo[31..0] - (RO) HW PTM master t1' time stamp low 32bits register
                                     this register will reflect the master t1' time stamp low 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_2_pcie_ptm_rx_t_mst_t1_a_lo_ADDR PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_2_pcie_ptm_rx_t_mst_t1_a_lo_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_mst_t1_a_lo[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_LO_2_pcie_ptm_rx_t_mst_t1_a_lo_SHFT 0u

/* =====================================================================================

  ---HW_PTM_EP_MASTER_T1A_HI_2 (0x74040000 + 0x0001354Cu)---

    pcie_ptm_rx_t_mst_t1_a_hi[31..0] - (RO) HW PTM t1' master time stamp high 32bits register
                                     this register will reflect the master t1' time stamp high 32bits.

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_2_pcie_ptm_rx_t_mst_t1_a_hi_ADDR PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_2_pcie_ptm_rx_t_mst_t1_a_hi_MASK 0xFFFFFFFFu                // pcie_ptm_rx_t_mst_t1_a_hi[31..0]
#define PCIE_MAC_IREG_HW_PTM_EP_MASTER_T1A_HI_2_pcie_ptm_rx_t_mst_t1_a_hi_SHFT 0u

/* =====================================================================================

  ---HW_PTM_INFO_VALID_2 (0x74040000 + 0x00013550u)---

    Reserved[3..0]               - (RO) Reserved
    pcie_ptm_handshake_round_fail_count[6..4] - (RO) HW PTM get the handshake round fail count for EP trigger mode
                                     Max value of this count is 7, HW will trigger pcie_ep_ptm_handshake_fail assert. During pcie_ep_ptm_handshake_fail assertion, the value could keep to 7.
                                     this count could clear to 0 when pcie_ep_ptm_handshake_fail deassert or pcie_ep_ptm_calculated_mst_time_valid assert.
    RESERVED7[7]                 - (RO) Reserved bits
    pcie_ptm_last_rspd_rcv[8]    - (RO) HW PTM received a ResponseD packet for the last packet
                                     1'b1: last received ptm packet is ResponseD
                                     1'b0: last received ptm packet is not ResponseD
    ptm_handshake_round_valid_count[10..9] - (RO) HW PTM get the valid handshake round count for EP mode
    RESERVED11[11]               - (RO) Reserved bits
    ptm_valid_t2_t3[12]          - (RO) HW PTM get the valid t2,t3 value for RC mode
                                     1'b1: get the valid t2, t3 value
                                     1'b0: get the invalid t2, t3 value
    RESERVED13[14..13]           - (RO) Reserved bits
    pcie_ep_ptm_trigger_mode[15] - (RW) HW PTM trigger mode select for EP mode
                                     1'b0: send PTM request packet by periodically when enable PTM
                                     1'b1: send PTM request packet by SW trigger "pcie_hw_ptm_rqst_dis" when enable PTM
    pcie_ep_ptm_handshake_fail[23..16] - (W1C) HW PTM dialog handshake round indicator for EP mode per function
                                     1'b1: the handshake round fail count is more or equal 7
                                     1'b0: the handshake round fail count is less than 7
    pcie_ep_ptm_calculated_mst_time_valid[31..24] - (W1C) HW PTM calculated master time t1' is valid for EP mode per function
                                     1'b1: HW calculated master time t1' is valid per function
                                     1'b0: HW calculated master time t1' is not valid per function

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_calculated_mst_time_valid_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_calculated_mst_time_valid_MASK 0xFF000000u                // pcie_ep_ptm_calculated_mst_time_valid[31..24]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_calculated_mst_time_valid_SHFT 24u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_handshake_fail_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_handshake_fail_MASK 0x00FF0000u                // pcie_ep_ptm_handshake_fail[23..16]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_handshake_fail_SHFT 16u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_trigger_mode_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_trigger_mode_MASK 0x00008000u                // pcie_ep_ptm_trigger_mode[15]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ep_ptm_trigger_mode_SHFT 15u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ptm_valid_t2_t3_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ptm_valid_t2_t3_MASK 0x00001000u                // ptm_valid_t2_t3[12]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ptm_valid_t2_t3_SHFT 12u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ptm_handshake_round_valid_count_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ptm_handshake_round_valid_count_MASK 0x00000600u                // ptm_handshake_round_valid_count[10..9]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ptm_handshake_round_valid_count_SHFT 9u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ptm_last_rspd_rcv_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ptm_last_rspd_rcv_MASK 0x00000100u                // pcie_ptm_last_rspd_rcv[8]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ptm_last_rspd_rcv_SHFT 8u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ptm_handshake_round_fail_count_ADDR PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ptm_handshake_round_fail_count_MASK 0x00000070u                // pcie_ptm_handshake_round_fail_count[6..4]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_pcie_ptm_handshake_round_fail_count_SHFT 4u
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_Reserved_ADDR        PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_ADDR
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_Reserved_MASK        0x0000000Fu                // Reserved[3..0]
#define PCIE_MAC_IREG_HW_PTM_INFO_VALID_2_Reserved_SHFT        0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_2 (0x74040000 + 0x0001382Cu)---

    pwr_func_d0_state_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_2_pwr_func_d0_state_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_2_pwr_func_d0_state_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_func_d0_state_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_LSB_2_pwr_func_d0_state_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_2 (0x74040000 + 0x00013830u)---

    pwr_func_d0_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D0 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_2_pwr_func_d0_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_2_pwr_func_d0_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_func_d0_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D0_STATE_CNT_MSB_2_pwr_func_d0_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_2 (0x74040000 + 0x00013834u)---

    pwr_func_d3_state_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D3 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_2_pwr_func_d3_state_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_2_pwr_func_d3_state_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_func_d3_state_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_LSB_2_pwr_func_d3_state_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_2 (0x74040000 + 0x00013838u)---

    pwr_func_d3_state_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the stay time in D3 state by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_2_pwr_func_d3_state_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_2_pwr_func_d3_state_cnt_msb_MASK 0xFFFFFFFFu                // pwr_func_d3_state_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_FUNC_D3_STATE_CNT_MSB_2_pwr_func_d3_state_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_2 (0x74040000 + 0x0001387Cu)---

    pwr_l1p0_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p0_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p0_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p0_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_2 (0x74040000 + 0x00013880u)---

    pwr_l1p0_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.0 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p0_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p0_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p0_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P0_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p0_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_2 (0x74040000 + 0x00013884u)---

    pwr_l1p1_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p1_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p1_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p1_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_2 (0x74040000 + 0x00013888u)---

    pwr_l1p1_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.1 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p1_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p1_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p1_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P1_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p1_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_2 (0x74040000 + 0x0001388Cu)---

    pwr_l1p2_exit_by_func_cnt_lsb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p2_exit_by_func_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p2_exit_by_func_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_by_func_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_LSB_2_pwr_l1p2_exit_by_func_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_2 (0x74040000 + 0x00013890u)---

    pwr_l1p2_exit_by_func_cnt_msb[31..0] - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  L1.2 state exit by function times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p2_exit_by_func_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p2_exit_by_func_cnt_msb_MASK 0xFFFFFFFFu                // pwr_l1p2_exit_by_func_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_L1P2_EXIT_BY_FUNC_CNT_MSB_2_pwr_l1p2_exit_by_func_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D0_EXIT_CNT_LSB_2 (0x74040000 + 0x00013894u)---

    pwr_d0_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D0 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_2_pwr_d0_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_2_pwr_d0_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_d0_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_LSB_2_pwr_d0_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D0_EXIT_CNT_MSB_2 (0x74040000 + 0x00013898u)---

    pwr_d0_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D0 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_2_pwr_d0_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_2_pwr_d0_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_d0_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D0_EXIT_CNT_MSB_2_pwr_d0_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D3_EXIT_CNT_LSB_2 (0x74040000 + 0x0001389Cu)---

    pwr_d3_exit_cnt_lsb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D3 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_2_pwr_d3_exit_cnt_lsb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_2_pwr_d3_exit_cnt_lsb_MASK 0xFFFFFFFFu                // pwr_d3_exit_cnt_lsb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_LSB_2_pwr_d3_exit_cnt_lsb_SHFT 0u

/* =====================================================================================

  ---PWR_PROFILE_D3_EXIT_CNT_MSB_2 (0x74040000 + 0x000138A0u)---

    pwr_d3_exit_cnt_msb[31..0]   - (RO) After power profile function is enabled & counter overflow IRQ is asserted.
                                     This read only counter records the  D3 exit times counts by 26MHz clock in the pre-define time period which decided by 0x3444 & 0x3800 setting.
                                     wait 10us before read this register.
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_2_pwr_d3_exit_cnt_msb_ADDR PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_2_ADDR
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_2_pwr_d3_exit_cnt_msb_MASK 0xFFFFFFFFu                // pwr_d3_exit_cnt_msb[31..0]
#define PCIE_MAC_IREG_PWR_PROFILE_D3_EXIT_CNT_MSB_2_pwr_d3_exit_cnt_msb_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_TIMESTAMP_RECORD_ENABLE_2 (0x74040000 + 0x0001392Cu)---

    msi_send_timestamp_record_enable[31..0] - (RW) Enable record msi vector send timestamp, per function
                                     1'b0:disbale
                                     1'b1:enable
                                     bit0:for functionx msi0
                                     bit1:for functionx msi1
                                     …......
                                     Bit30:for functionx msi30
                                     bit31:for functionx msi31

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_2_msi_send_timestamp_record_enable_ADDR PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_2_msi_send_timestamp_record_enable_MASK 0xFFFFFFFFu                // msi_send_timestamp_record_enable[31..0]
#define PCIE_MAC_IREG_MSI_SEND_TIMESTAMP_RECORD_ENABLE_2_msi_send_timestamp_record_enable_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_INFO_RECORD_CTRL_2 (0x74040000 + 0x00013930u)---

    msi_send_timestamp_sw_clr[0] - (RW) Record msi send timestamp,There are total of 16 registers covered by the loop, per function.
                                     1'b0:no clear
                                     1'b1:clear 16 timestamp record register 0x3940-0x39BC.
    msi_send_num_record_en[1]    - (RW) Enable record per msi send number, per function.
                                     1'b0:disable record per msi send number (0x3A10-0x3A8C per function)
                                     1'b1:enable record per msi send number.(0x3A10-0x3A8C per function)
    msi_send_num_record_sw_clr[2] - (RW) software clear record per msi send number, per function.
                                     1'b0:no clear per function
                                     1'b1:clear record per msi send number.(0x3A10-0x3A8C per function)
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_Reserved_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_Reserved_MASK 0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_Reserved_SHFT 3u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_num_record_sw_clr_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_num_record_sw_clr_MASK 0x00000004u                // msi_send_num_record_sw_clr[2]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_num_record_sw_clr_SHFT 2u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_num_record_en_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_num_record_en_MASK 0x00000002u                // msi_send_num_record_en[1]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_num_record_en_SHFT 1u
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_timestamp_sw_clr_ADDR PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_timestamp_sw_clr_MASK 0x00000001u                // msi_send_timestamp_sw_clr[0]
#define PCIE_MAC_IREG_MSI_SEND_INFO_RECORD_CTRL_2_msi_send_timestamp_sw_clr_SHFT 0u

/* =====================================================================================

  ---PME_INFO_RECORD_CTRL_2 (0x74040000 + 0x000139C0u)---

    pme_send_timestamp_clr[0]    - (RW) Clear pme send timestamp record.(0x39C4-0x39C8), per function
                                     1'b0:no clear.
                                     1'b1:clear functionx pme  send timestamp record.
    Reserved[31..1]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_Reserved_ADDR     PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_Reserved_MASK     0xFFFFFFFEu                // Reserved[31..1]
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_Reserved_SHFT     1u
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_pme_send_timestamp_clr_ADDR PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_pme_send_timestamp_clr_MASK 0x00000001u                // pme_send_timestamp_clr[0]
#define PCIE_MAC_IREG_PME_INFO_RECORD_CTRL_2_pme_send_timestamp_clr_SHFT 0u

/* =====================================================================================

  ---PME_SEND_TIMESTAMP_RECORD_LSB_2 (0x74040000 + 0x000139C4u)---

    pme_send_timestamp_record_lsb[31..0] - (RO) Record pme send  timestamp
                                     [31:0]:local_sys_time[31:0]

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_2_pme_send_timestamp_record_lsb_ADDR PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_2_ADDR
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_2_pme_send_timestamp_record_lsb_MASK 0xFFFFFFFFu                // pme_send_timestamp_record_lsb[31..0]
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_LSB_2_pme_send_timestamp_record_lsb_SHFT 0u

/* =====================================================================================

  ---PME_SEND_TIMESTAMP_RECORD_MSB_2 (0x74040000 + 0x000139C8u)---

    pme_send_timestamp_record_msb[31..0] - (RO) Record pme send  timestamp
                                     [31:0]:local_sys_time[63:32]

 =====================================================================================*/
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_2_pme_send_timestamp_record_msb_ADDR PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_2_ADDR
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_2_pme_send_timestamp_record_msb_MASK 0xFFFFFFFFu                // pme_send_timestamp_record_msb[31..0]
#define PCIE_MAC_IREG_PME_SEND_TIMESTAMP_RECORD_MSB_2_pme_send_timestamp_record_msb_SHFT 0u

/* =====================================================================================

  ---WAKE_INFO_RECORD_CTRL_2 (0x74040000 + 0x000139DCu)---

    pad_wake_timestamp_clr[0]    - (RW) Clear PAD_WAKEN  wakeup timestamp record.(0x39CC-0X39D0)
                                     1'b0:no clear.
                                     1'b1:clear PAD_WAKEN  wakeup timestamp record.
    pad_perst_n_timestamp_clr[1] - (RW) Clear  PAD_PERST_N  release timestamp record.(0x39D4-0X39D8)
                                     1'b0:no clear.
                                     1'b1:clear  PAD_PERST_N  release timestamp record.
    rg_sw_dbgsel_tl[2]           - (RW) Enable tl_ck on or off debug.
                                     1'b0:disable tl_ck on or off debug
                                     1'b1:enable tl_ck on or off debug
    Reserved[31..3]              - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_Reserved_ADDR    PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_Reserved_MASK    0xFFFFFFF8u                // Reserved[31..3]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_Reserved_SHFT    3u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_rg_sw_dbgsel_tl_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_rg_sw_dbgsel_tl_MASK 0x00000004u                // rg_sw_dbgsel_tl[2]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_rg_sw_dbgsel_tl_SHFT 2u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_pad_perst_n_timestamp_clr_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_pad_perst_n_timestamp_clr_MASK 0x00000002u                // pad_perst_n_timestamp_clr[1]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_pad_perst_n_timestamp_clr_SHFT 1u
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_pad_wake_timestamp_clr_ADDR PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_ADDR
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_pad_wake_timestamp_clr_MASK 0x00000001u                // pad_wake_timestamp_clr[0]
#define PCIE_MAC_IREG_WAKE_INFO_RECORD_CTRL_2_pad_wake_timestamp_clr_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI0_2 (0x74040000 + 0x00013A10u)---

    msi_send_num_record_msi0[31..0] - (RO) Record the number of msi0 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_2_msi_send_num_record_msi0_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_2_msi_send_num_record_msi0_MASK 0xFFFFFFFFu                // msi_send_num_record_msi0[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI0_2_msi_send_num_record_msi0_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI1_2 (0x74040000 + 0x00013A14u)---

    msi_send_num_record_msi1[31..0] - (RO) Record the number of msi1 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_2_msi_send_num_record_msi1_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_2_msi_send_num_record_msi1_MASK 0xFFFFFFFFu                // msi_send_num_record_msi1[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI1_2_msi_send_num_record_msi1_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI2_2 (0x74040000 + 0x00013A18u)---

    msi_send_num_record_msi2[31..0] - (RO) Record the number of msi2 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_2_msi_send_num_record_msi2_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_2_msi_send_num_record_msi2_MASK 0xFFFFFFFFu                // msi_send_num_record_msi2[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI2_2_msi_send_num_record_msi2_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI3_2 (0x74040000 + 0x00013A1Cu)---

    msi_send_num_record_msi3[31..0] - (RO) Record the number of msi3 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_2_msi_send_num_record_msi3_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_2_msi_send_num_record_msi3_MASK 0xFFFFFFFFu                // msi_send_num_record_msi3[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI3_2_msi_send_num_record_msi3_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI4_2 (0x74040000 + 0x00013A20u)---

    msi_send_num_record_msi4[31..0] - (RO) Record the number of msi4 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_2_msi_send_num_record_msi4_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_2_msi_send_num_record_msi4_MASK 0xFFFFFFFFu                // msi_send_num_record_msi4[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI4_2_msi_send_num_record_msi4_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI5_2 (0x74040000 + 0x00013A24u)---

    msi_send_num_record_msi5[31..0] - (RO) Record the number of msi5 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_2_msi_send_num_record_msi5_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_2_msi_send_num_record_msi5_MASK 0xFFFFFFFFu                // msi_send_num_record_msi5[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI5_2_msi_send_num_record_msi5_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI6_2 (0x74040000 + 0x00013A28u)---

    msi_send_num_record_msi6[31..0] - (RO) Record the number of msi6 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_2_msi_send_num_record_msi6_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_2_msi_send_num_record_msi6_MASK 0xFFFFFFFFu                // msi_send_num_record_msi6[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI6_2_msi_send_num_record_msi6_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI7_2 (0x74040000 + 0x00013A2Cu)---

    msi_send_num_record_msi7[31..0] - (RO) Record the number of msi7 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_2_msi_send_num_record_msi7_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_2_msi_send_num_record_msi7_MASK 0xFFFFFFFFu                // msi_send_num_record_msi7[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI7_2_msi_send_num_record_msi7_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI8_2 (0x74040000 + 0x00013A30u)---

    msi_send_num_record_msi8[31..0] - (RO) Record the number of msi8 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_2_msi_send_num_record_msi8_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_2_msi_send_num_record_msi8_MASK 0xFFFFFFFFu                // msi_send_num_record_msi8[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI8_2_msi_send_num_record_msi8_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI9_2 (0x74040000 + 0x00013A34u)---

    msi_send_num_record_msi9[31..0] - (RO) Record the number of msi9 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_2_msi_send_num_record_msi9_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_2_msi_send_num_record_msi9_MASK 0xFFFFFFFFu                // msi_send_num_record_msi9[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI9_2_msi_send_num_record_msi9_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI10_2 (0x74040000 + 0x00013A38u)---

    msi_send_num_record_msi10[31..0] - (RO) Record the number of msi10 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_2_msi_send_num_record_msi10_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_2_msi_send_num_record_msi10_MASK 0xFFFFFFFFu                // msi_send_num_record_msi10[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI10_2_msi_send_num_record_msi10_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI11_2 (0x74040000 + 0x00013A3Cu)---

    msi_send_num_record_msi11[31..0] - (RO) Record the number of msi11 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_2_msi_send_num_record_msi11_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_2_msi_send_num_record_msi11_MASK 0xFFFFFFFFu                // msi_send_num_record_msi11[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI11_2_msi_send_num_record_msi11_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI12_2 (0x74040000 + 0x00013A40u)---

    msi_send_num_record_msi12[31..0] - (RO) Record the number of msi12 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_2_msi_send_num_record_msi12_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_2_msi_send_num_record_msi12_MASK 0xFFFFFFFFu                // msi_send_num_record_msi12[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI12_2_msi_send_num_record_msi12_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI13_2 (0x74040000 + 0x00013A44u)---

    msi_send_num_record_msi13[31..0] - (RO) Record the number of msi13 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_2_msi_send_num_record_msi13_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_2_msi_send_num_record_msi13_MASK 0xFFFFFFFFu                // msi_send_num_record_msi13[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI13_2_msi_send_num_record_msi13_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI14_2 (0x74040000 + 0x00013A48u)---

    msi_send_num_record_msi14[31..0] - (RO) Record the number of msi14 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_2_msi_send_num_record_msi14_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_2_msi_send_num_record_msi14_MASK 0xFFFFFFFFu                // msi_send_num_record_msi14[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI14_2_msi_send_num_record_msi14_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI15_2 (0x74040000 + 0x00013A4Cu)---

    msi_send_num_record_msi15[31..0] - (RO) Record the number of msi15 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_2_msi_send_num_record_msi15_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_2_msi_send_num_record_msi15_MASK 0xFFFFFFFFu                // msi_send_num_record_msi15[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI15_2_msi_send_num_record_msi15_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI16_2 (0x74040000 + 0x00013A50u)---

    msi_send_num_record_msi16[31..0] - (RO) Record the number of msi16 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_2_msi_send_num_record_msi16_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_2_msi_send_num_record_msi16_MASK 0xFFFFFFFFu                // msi_send_num_record_msi16[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI16_2_msi_send_num_record_msi16_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI17_2 (0x74040000 + 0x00013A54u)---

    msi_send_num_record_msi17[31..0] - (RO) Record the number of msi17 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_2_msi_send_num_record_msi17_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_2_msi_send_num_record_msi17_MASK 0xFFFFFFFFu                // msi_send_num_record_msi17[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI17_2_msi_send_num_record_msi17_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI18_2 (0x74040000 + 0x00013A58u)---

    msi_send_num_record_msi18[31..0] - (RO) Record the number of msi18 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_2_msi_send_num_record_msi18_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_2_msi_send_num_record_msi18_MASK 0xFFFFFFFFu                // msi_send_num_record_msi18[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI18_2_msi_send_num_record_msi18_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI19_2 (0x74040000 + 0x00013A5Cu)---

    msi_send_num_record_msi19[31..0] - (RO) Record the number of msi19 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_2_msi_send_num_record_msi19_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_2_msi_send_num_record_msi19_MASK 0xFFFFFFFFu                // msi_send_num_record_msi19[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI19_2_msi_send_num_record_msi19_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI20_2 (0x74040000 + 0x00013A60u)---

    msi_send_num_record_msi20[31..0] - (RO) Record the number of msi20 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_2_msi_send_num_record_msi20_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_2_msi_send_num_record_msi20_MASK 0xFFFFFFFFu                // msi_send_num_record_msi20[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI20_2_msi_send_num_record_msi20_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI21_2 (0x74040000 + 0x00013A64u)---

    msi_send_num_record_msi21[31..0] - (RO) Record the number of msi21 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_2_msi_send_num_record_msi21_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_2_msi_send_num_record_msi21_MASK 0xFFFFFFFFu                // msi_send_num_record_msi21[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI21_2_msi_send_num_record_msi21_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI22_2 (0x74040000 + 0x00013A68u)---

    msi_send_num_record_msi22[31..0] - (RO) Record the number of msi22 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_2_msi_send_num_record_msi22_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_2_msi_send_num_record_msi22_MASK 0xFFFFFFFFu                // msi_send_num_record_msi22[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI22_2_msi_send_num_record_msi22_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI23_2 (0x74040000 + 0x00013A6Cu)---

    msi_send_num_record_msi23[31..0] - (RO) Record the number of msi23 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_2_msi_send_num_record_msi23_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_2_msi_send_num_record_msi23_MASK 0xFFFFFFFFu                // msi_send_num_record_msi23[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI23_2_msi_send_num_record_msi23_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI24_2 (0x74040000 + 0x00013A70u)---

    msi_send_num_record_msi24[31..0] - (RO) Record the number of msi24 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_2_msi_send_num_record_msi24_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_2_msi_send_num_record_msi24_MASK 0xFFFFFFFFu                // msi_send_num_record_msi24[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI24_2_msi_send_num_record_msi24_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI25_2 (0x74040000 + 0x00013A74u)---

    msi_send_num_record_msi25[31..0] - (RO) Record the number of msi25 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_2_msi_send_num_record_msi25_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_2_msi_send_num_record_msi25_MASK 0xFFFFFFFFu                // msi_send_num_record_msi25[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI25_2_msi_send_num_record_msi25_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI26_2 (0x74040000 + 0x00013A78u)---

    msi_send_num_record_msi26[31..0] - (RO) Record the number of msi26 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_2_msi_send_num_record_msi26_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_2_msi_send_num_record_msi26_MASK 0xFFFFFFFFu                // msi_send_num_record_msi26[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI26_2_msi_send_num_record_msi26_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI27_2 (0x74040000 + 0x00013A7Cu)---

    msi_send_num_record_msi27[31..0] - (RO) Record the number of msi27 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_2_msi_send_num_record_msi27_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_2_msi_send_num_record_msi27_MASK 0xFFFFFFFFu                // msi_send_num_record_msi27[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI27_2_msi_send_num_record_msi27_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI28_2 (0x74040000 + 0x00013A80u)---

    msi_send_num_record_msi28[31..0] - (RO) Record the number of msi28 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_2_msi_send_num_record_msi28_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_2_msi_send_num_record_msi28_MASK 0xFFFFFFFFu                // msi_send_num_record_msi28[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI28_2_msi_send_num_record_msi28_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI29_2 (0x74040000 + 0x00013A84u)---

    msi_send_num_record_msi29[31..0] - (RO) Record the number of msi29 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_2_msi_send_num_record_msi29_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_2_msi_send_num_record_msi29_MASK 0xFFFFFFFFu                // msi_send_num_record_msi29[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI29_2_msi_send_num_record_msi29_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI30_2 (0x74040000 + 0x00013A88u)---

    msi_send_num_record_msi30[31..0] - (RO) Record the number of msi30 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_2_msi_send_num_record_msi30_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_2_msi_send_num_record_msi30_MASK 0xFFFFFFFFu                // msi_send_num_record_msi30[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI30_2_msi_send_num_record_msi30_SHFT 0u

/* =====================================================================================

  ---MSI_SEND_NUM_RECORD_MSI31_2 (0x74040000 + 0x00013A8Cu)---

    msi_send_num_record_msi31[31..0] - (RO) Record the number of msi31 send

 =====================================================================================*/
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_2_msi_send_num_record_msi31_ADDR PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_2_ADDR
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_2_msi_send_num_record_msi31_MASK 0xFFFFFFFFu                // msi_send_num_record_msi31[31..0]
#define PCIE_MAC_IREG_MSI_SEND_NUM_RECORD_MSI31_2_msi_send_num_record_msi31_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_0_2 (0x74040000 + 0x00014000u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_1_2 (0x74040000 + 0x00014004u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_2_2 (0x74040000 + 0x00014008u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_0_3_2 (0x74040000 + 0x0001400Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_0_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_0_2 (0x74040000 + 0x00014010u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_1_2 (0x74040000 + 0x00014014u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_2_2 (0x74040000 + 0x00014018u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1_3_2 (0x74040000 + 0x0001401Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_0_2 (0x74040000 + 0x00014020u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_1_2 (0x74040000 + 0x00014024u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_2_2 (0x74040000 + 0x00014028u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2_3_2 (0x74040000 + 0x0001402Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_0_2 (0x74040000 + 0x00014030u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_1_2 (0x74040000 + 0x00014034u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_2_2 (0x74040000 + 0x00014038u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3_3_2 (0x74040000 + 0x0001403Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_0_2 (0x74040000 + 0x00014040u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_1_2 (0x74040000 + 0x00014044u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_2_2 (0x74040000 + 0x00014048u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4_3_2 (0x74040000 + 0x0001404Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_0_2 (0x74040000 + 0x00014050u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_1_2 (0x74040000 + 0x00014054u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_2_2 (0x74040000 + 0x00014058u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5_3_2 (0x74040000 + 0x0001405Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_0_2 (0x74040000 + 0x00014060u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_1_2 (0x74040000 + 0x00014064u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_2_2 (0x74040000 + 0x00014068u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6_3_2 (0x74040000 + 0x0001406Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_0_2 (0x74040000 + 0x00014070u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_1_2 (0x74040000 + 0x00014074u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_2_2 (0x74040000 + 0x00014078u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7_3_2 (0x74040000 + 0x0001407Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_0_2 (0x74040000 + 0x00014080u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_1_2 (0x74040000 + 0x00014084u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_2_2 (0x74040000 + 0x00014088u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_8_3_2 (0x74040000 + 0x0001408Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_8_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_0_2 (0x74040000 + 0x00014090u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_1_2 (0x74040000 + 0x00014094u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_2_2 (0x74040000 + 0x00014098u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_9_3_2 (0x74040000 + 0x0001409Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_9_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_0_2 (0x74040000 + 0x000140A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_1_2 (0x74040000 + 0x000140A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_2_2 (0x74040000 + 0x000140A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_A_3_2 (0x74040000 + 0x000140ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_0_2 (0x74040000 + 0x000140B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_1_2 (0x74040000 + 0x000140B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_2_2 (0x74040000 + 0x000140B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_B_3_2 (0x74040000 + 0x000140BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_0_2 (0x74040000 + 0x000140C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_1_2 (0x74040000 + 0x000140C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_2_2 (0x74040000 + 0x000140C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_C_3_2 (0x74040000 + 0x000140CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_0_2 (0x74040000 + 0x000140D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_1_2 (0x74040000 + 0x000140D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_2_2 (0x74040000 + 0x000140D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_D_3_2 (0x74040000 + 0x000140DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_0_2 (0x74040000 + 0x000140E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_1_2 (0x74040000 + 0x000140E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_2_2 (0x74040000 + 0x000140E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_E_3_2 (0x74040000 + 0x000140ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_0_2 (0x74040000 + 0x000140F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_1_2 (0x74040000 + 0x000140F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_2_2 (0x74040000 + 0x000140F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_F_3_2 (0x74040000 + 0x000140FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_0_2 (0x74040000 + 0x00014100u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_1_2 (0x74040000 + 0x00014104u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_2_2 (0x74040000 + 0x00014108u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_10_3_2 (0x74040000 + 0x0001410Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_10_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_0_2 (0x74040000 + 0x00014110u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_1_2 (0x74040000 + 0x00014114u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_2_2 (0x74040000 + 0x00014118u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_11_3_2 (0x74040000 + 0x0001411Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_11_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_0_2 (0x74040000 + 0x00014120u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_1_2 (0x74040000 + 0x00014124u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_2_2 (0x74040000 + 0x00014128u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_12_3_2 (0x74040000 + 0x0001412Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_12_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_0_2 (0x74040000 + 0x00014130u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_1_2 (0x74040000 + 0x00014134u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_2_2 (0x74040000 + 0x00014138u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_13_3_2 (0x74040000 + 0x0001413Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_13_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_0_2 (0x74040000 + 0x00014140u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_1_2 (0x74040000 + 0x00014144u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_2_2 (0x74040000 + 0x00014148u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_14_3_2 (0x74040000 + 0x0001414Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_14_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_0_2 (0x74040000 + 0x00014150u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_1_2 (0x74040000 + 0x00014154u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_2_2 (0x74040000 + 0x00014158u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_15_3_2 (0x74040000 + 0x0001415Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_15_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_0_2 (0x74040000 + 0x00014160u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_1_2 (0x74040000 + 0x00014164u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_2_2 (0x74040000 + 0x00014168u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_16_3_2 (0x74040000 + 0x0001416Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_16_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_0_2 (0x74040000 + 0x00014170u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_1_2 (0x74040000 + 0x00014174u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_2_2 (0x74040000 + 0x00014178u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_17_3_2 (0x74040000 + 0x0001417Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_17_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_0_2 (0x74040000 + 0x00014180u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_1_2 (0x74040000 + 0x00014184u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_2_2 (0x74040000 + 0x00014188u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_18_3_2 (0x74040000 + 0x0001418Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_18_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_0_2 (0x74040000 + 0x00014190u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_1_2 (0x74040000 + 0x00014194u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_2_2 (0x74040000 + 0x00014198u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_19_3_2 (0x74040000 + 0x0001419Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_19_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_0_2 (0x74040000 + 0x000141A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_1_2 (0x74040000 + 0x000141A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_2_2 (0x74040000 + 0x000141A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1A_3_2 (0x74040000 + 0x000141ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_0_2 (0x74040000 + 0x000141B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_1_2 (0x74040000 + 0x000141B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_2_2 (0x74040000 + 0x000141B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1B_3_2 (0x74040000 + 0x000141BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_0_2 (0x74040000 + 0x000141C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_1_2 (0x74040000 + 0x000141C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_2_2 (0x74040000 + 0x000141C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1C_3_2 (0x74040000 + 0x000141CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_0_2 (0x74040000 + 0x000141D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_1_2 (0x74040000 + 0x000141D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_2_2 (0x74040000 + 0x000141D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1D_3_2 (0x74040000 + 0x000141DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_0_2 (0x74040000 + 0x000141E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_1_2 (0x74040000 + 0x000141E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_2_2 (0x74040000 + 0x000141E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1E_3_2 (0x74040000 + 0x000141ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_0_2 (0x74040000 + 0x000141F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_1_2 (0x74040000 + 0x000141F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_2_2 (0x74040000 + 0x000141F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_1F_3_2 (0x74040000 + 0x000141FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_1F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_0_2 (0x74040000 + 0x00014200u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_1_2 (0x74040000 + 0x00014204u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_2_2 (0x74040000 + 0x00014208u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_20_3_2 (0x74040000 + 0x0001420Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_20_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_0_2 (0x74040000 + 0x00014210u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_1_2 (0x74040000 + 0x00014214u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_2_2 (0x74040000 + 0x00014218u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_21_3_2 (0x74040000 + 0x0001421Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_21_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_0_2 (0x74040000 + 0x00014220u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_1_2 (0x74040000 + 0x00014224u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_2_2 (0x74040000 + 0x00014228u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_22_3_2 (0x74040000 + 0x0001422Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_22_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_0_2 (0x74040000 + 0x00014230u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_1_2 (0x74040000 + 0x00014234u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_2_2 (0x74040000 + 0x00014238u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_23_3_2 (0x74040000 + 0x0001423Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_23_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_0_2 (0x74040000 + 0x00014240u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_1_2 (0x74040000 + 0x00014244u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_2_2 (0x74040000 + 0x00014248u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_24_3_2 (0x74040000 + 0x0001424Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_24_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_0_2 (0x74040000 + 0x00014250u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_1_2 (0x74040000 + 0x00014254u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_2_2 (0x74040000 + 0x00014258u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_25_3_2 (0x74040000 + 0x0001425Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_25_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_0_2 (0x74040000 + 0x00014260u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_1_2 (0x74040000 + 0x00014264u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_2_2 (0x74040000 + 0x00014268u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_26_3_2 (0x74040000 + 0x0001426Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_26_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_0_2 (0x74040000 + 0x00014270u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_1_2 (0x74040000 + 0x00014274u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_2_2 (0x74040000 + 0x00014278u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_27_3_2 (0x74040000 + 0x0001427Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_27_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_0_2 (0x74040000 + 0x00014280u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_1_2 (0x74040000 + 0x00014284u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_2_2 (0x74040000 + 0x00014288u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_28_3_2 (0x74040000 + 0x0001428Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_28_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_0_2 (0x74040000 + 0x00014290u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_1_2 (0x74040000 + 0x00014294u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_2_2 (0x74040000 + 0x00014298u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_29_3_2 (0x74040000 + 0x0001429Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_29_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_0_2 (0x74040000 + 0x000142A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_1_2 (0x74040000 + 0x000142A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_2_2 (0x74040000 + 0x000142A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2A_3_2 (0x74040000 + 0x000142ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_0_2 (0x74040000 + 0x000142B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_1_2 (0x74040000 + 0x000142B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_2_2 (0x74040000 + 0x000142B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2B_3_2 (0x74040000 + 0x000142BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_0_2 (0x74040000 + 0x000142C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_1_2 (0x74040000 + 0x000142C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_2_2 (0x74040000 + 0x000142C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2C_3_2 (0x74040000 + 0x000142CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_0_2 (0x74040000 + 0x000142D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_1_2 (0x74040000 + 0x000142D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_2_2 (0x74040000 + 0x000142D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2D_3_2 (0x74040000 + 0x000142DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_0_2 (0x74040000 + 0x000142E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_1_2 (0x74040000 + 0x000142E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_2_2 (0x74040000 + 0x000142E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2E_3_2 (0x74040000 + 0x000142ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_0_2 (0x74040000 + 0x000142F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_1_2 (0x74040000 + 0x000142F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_2_2 (0x74040000 + 0x000142F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_2F_3_2 (0x74040000 + 0x000142FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_2F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_0_2 (0x74040000 + 0x00014300u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_1_2 (0x74040000 + 0x00014304u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_2_2 (0x74040000 + 0x00014308u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_30_3_2 (0x74040000 + 0x0001430Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_30_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_0_2 (0x74040000 + 0x00014310u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_1_2 (0x74040000 + 0x00014314u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_2_2 (0x74040000 + 0x00014318u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_31_3_2 (0x74040000 + 0x0001431Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_31_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_0_2 (0x74040000 + 0x00014320u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_1_2 (0x74040000 + 0x00014324u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_2_2 (0x74040000 + 0x00014328u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_32_3_2 (0x74040000 + 0x0001432Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_32_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_0_2 (0x74040000 + 0x00014330u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_1_2 (0x74040000 + 0x00014334u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_2_2 (0x74040000 + 0x00014338u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_33_3_2 (0x74040000 + 0x0001433Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_33_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_0_2 (0x74040000 + 0x00014340u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_1_2 (0x74040000 + 0x00014344u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_2_2 (0x74040000 + 0x00014348u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_34_3_2 (0x74040000 + 0x0001434Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_34_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_0_2 (0x74040000 + 0x00014350u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_1_2 (0x74040000 + 0x00014354u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_2_2 (0x74040000 + 0x00014358u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_35_3_2 (0x74040000 + 0x0001435Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_35_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_0_2 (0x74040000 + 0x00014360u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_1_2 (0x74040000 + 0x00014364u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_2_2 (0x74040000 + 0x00014368u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_36_3_2 (0x74040000 + 0x0001436Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_36_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_0_2 (0x74040000 + 0x00014370u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_1_2 (0x74040000 + 0x00014374u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_2_2 (0x74040000 + 0x00014378u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_37_3_2 (0x74040000 + 0x0001437Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_37_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_0_2 (0x74040000 + 0x00014380u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_1_2 (0x74040000 + 0x00014384u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_2_2 (0x74040000 + 0x00014388u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_38_3_2 (0x74040000 + 0x0001438Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_38_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_0_2 (0x74040000 + 0x00014390u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_1_2 (0x74040000 + 0x00014394u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_2_2 (0x74040000 + 0x00014398u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_39_3_2 (0x74040000 + 0x0001439Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_39_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_0_2 (0x74040000 + 0x000143A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_1_2 (0x74040000 + 0x000143A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_2_2 (0x74040000 + 0x000143A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3A_3_2 (0x74040000 + 0x000143ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_0_2 (0x74040000 + 0x000143B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_1_2 (0x74040000 + 0x000143B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_2_2 (0x74040000 + 0x000143B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3B_3_2 (0x74040000 + 0x000143BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_0_2 (0x74040000 + 0x000143C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_1_2 (0x74040000 + 0x000143C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_2_2 (0x74040000 + 0x000143C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3C_3_2 (0x74040000 + 0x000143CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_0_2 (0x74040000 + 0x000143D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_1_2 (0x74040000 + 0x000143D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_2_2 (0x74040000 + 0x000143D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3D_3_2 (0x74040000 + 0x000143DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_0_2 (0x74040000 + 0x000143E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_1_2 (0x74040000 + 0x000143E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_2_2 (0x74040000 + 0x000143E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3E_3_2 (0x74040000 + 0x000143ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_0_2 (0x74040000 + 0x000143F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_1_2 (0x74040000 + 0x000143F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_2_2 (0x74040000 + 0x000143F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_3F_3_2 (0x74040000 + 0x000143FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_3F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_0_2 (0x74040000 + 0x00014400u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_1_2 (0x74040000 + 0x00014404u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_2_2 (0x74040000 + 0x00014408u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_40_3_2 (0x74040000 + 0x0001440Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_40_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_0_2 (0x74040000 + 0x00014410u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_1_2 (0x74040000 + 0x00014414u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_2_2 (0x74040000 + 0x00014418u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_41_3_2 (0x74040000 + 0x0001441Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_41_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_0_2 (0x74040000 + 0x00014420u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_1_2 (0x74040000 + 0x00014424u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_2_2 (0x74040000 + 0x00014428u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_42_3_2 (0x74040000 + 0x0001442Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_42_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_0_2 (0x74040000 + 0x00014430u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_1_2 (0x74040000 + 0x00014434u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_2_2 (0x74040000 + 0x00014438u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_43_3_2 (0x74040000 + 0x0001443Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_43_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_0_2 (0x74040000 + 0x00014440u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_1_2 (0x74040000 + 0x00014444u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_2_2 (0x74040000 + 0x00014448u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_44_3_2 (0x74040000 + 0x0001444Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_44_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_0_2 (0x74040000 + 0x00014450u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_1_2 (0x74040000 + 0x00014454u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_2_2 (0x74040000 + 0x00014458u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_45_3_2 (0x74040000 + 0x0001445Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_45_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_0_2 (0x74040000 + 0x00014460u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_1_2 (0x74040000 + 0x00014464u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_2_2 (0x74040000 + 0x00014468u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_46_3_2 (0x74040000 + 0x0001446Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_46_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_0_2 (0x74040000 + 0x00014470u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_1_2 (0x74040000 + 0x00014474u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_2_2 (0x74040000 + 0x00014478u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_47_3_2 (0x74040000 + 0x0001447Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_47_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_0_2 (0x74040000 + 0x00014480u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_1_2 (0x74040000 + 0x00014484u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_2_2 (0x74040000 + 0x00014488u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_48_3_2 (0x74040000 + 0x0001448Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_48_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_0_2 (0x74040000 + 0x00014490u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_1_2 (0x74040000 + 0x00014494u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_2_2 (0x74040000 + 0x00014498u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_49_3_2 (0x74040000 + 0x0001449Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_49_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_0_2 (0x74040000 + 0x000144A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_1_2 (0x74040000 + 0x000144A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_2_2 (0x74040000 + 0x000144A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4A_3_2 (0x74040000 + 0x000144ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_0_2 (0x74040000 + 0x000144B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_1_2 (0x74040000 + 0x000144B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_2_2 (0x74040000 + 0x000144B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4B_3_2 (0x74040000 + 0x000144BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_0_2 (0x74040000 + 0x000144C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_1_2 (0x74040000 + 0x000144C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_2_2 (0x74040000 + 0x000144C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4C_3_2 (0x74040000 + 0x000144CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_0_2 (0x74040000 + 0x000144D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_1_2 (0x74040000 + 0x000144D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_2_2 (0x74040000 + 0x000144D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4D_3_2 (0x74040000 + 0x000144DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_0_2 (0x74040000 + 0x000144E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_1_2 (0x74040000 + 0x000144E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_2_2 (0x74040000 + 0x000144E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4E_3_2 (0x74040000 + 0x000144ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_0_2 (0x74040000 + 0x000144F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_1_2 (0x74040000 + 0x000144F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_2_2 (0x74040000 + 0x000144F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_4F_3_2 (0x74040000 + 0x000144FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_4F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_0_2 (0x74040000 + 0x00014500u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_1_2 (0x74040000 + 0x00014504u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_2_2 (0x74040000 + 0x00014508u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_50_3_2 (0x74040000 + 0x0001450Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_50_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_0_2 (0x74040000 + 0x00014510u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_1_2 (0x74040000 + 0x00014514u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_2_2 (0x74040000 + 0x00014518u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_51_3_2 (0x74040000 + 0x0001451Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_51_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_0_2 (0x74040000 + 0x00014520u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_1_2 (0x74040000 + 0x00014524u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_2_2 (0x74040000 + 0x00014528u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_52_3_2 (0x74040000 + 0x0001452Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_52_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_0_2 (0x74040000 + 0x00014530u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_1_2 (0x74040000 + 0x00014534u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_2_2 (0x74040000 + 0x00014538u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_53_3_2 (0x74040000 + 0x0001453Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_53_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_0_2 (0x74040000 + 0x00014540u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_1_2 (0x74040000 + 0x00014544u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_2_2 (0x74040000 + 0x00014548u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_54_3_2 (0x74040000 + 0x0001454Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_54_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_0_2 (0x74040000 + 0x00014550u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_1_2 (0x74040000 + 0x00014554u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_2_2 (0x74040000 + 0x00014558u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_55_3_2 (0x74040000 + 0x0001455Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_55_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_0_2 (0x74040000 + 0x00014560u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_1_2 (0x74040000 + 0x00014564u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_2_2 (0x74040000 + 0x00014568u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_56_3_2 (0x74040000 + 0x0001456Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_56_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_0_2 (0x74040000 + 0x00014570u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_1_2 (0x74040000 + 0x00014574u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_2_2 (0x74040000 + 0x00014578u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_57_3_2 (0x74040000 + 0x0001457Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_57_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_0_2 (0x74040000 + 0x00014580u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_1_2 (0x74040000 + 0x00014584u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_2_2 (0x74040000 + 0x00014588u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_58_3_2 (0x74040000 + 0x0001458Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_58_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_0_2 (0x74040000 + 0x00014590u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_1_2 (0x74040000 + 0x00014594u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_2_2 (0x74040000 + 0x00014598u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_59_3_2 (0x74040000 + 0x0001459Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_59_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_0_2 (0x74040000 + 0x000145A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_1_2 (0x74040000 + 0x000145A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_2_2 (0x74040000 + 0x000145A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5A_3_2 (0x74040000 + 0x000145ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_0_2 (0x74040000 + 0x000145B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_1_2 (0x74040000 + 0x000145B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_2_2 (0x74040000 + 0x000145B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5B_3_2 (0x74040000 + 0x000145BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_0_2 (0x74040000 + 0x000145C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_1_2 (0x74040000 + 0x000145C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_2_2 (0x74040000 + 0x000145C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5C_3_2 (0x74040000 + 0x000145CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_0_2 (0x74040000 + 0x000145D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_1_2 (0x74040000 + 0x000145D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_2_2 (0x74040000 + 0x000145D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5D_3_2 (0x74040000 + 0x000145DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_0_2 (0x74040000 + 0x000145E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_1_2 (0x74040000 + 0x000145E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_2_2 (0x74040000 + 0x000145E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5E_3_2 (0x74040000 + 0x000145ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_0_2 (0x74040000 + 0x000145F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_1_2 (0x74040000 + 0x000145F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_2_2 (0x74040000 + 0x000145F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_5F_3_2 (0x74040000 + 0x000145FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_5F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_0_2 (0x74040000 + 0x00014600u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_1_2 (0x74040000 + 0x00014604u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_2_2 (0x74040000 + 0x00014608u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_60_3_2 (0x74040000 + 0x0001460Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_60_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_0_2 (0x74040000 + 0x00014610u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_1_2 (0x74040000 + 0x00014614u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_2_2 (0x74040000 + 0x00014618u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_61_3_2 (0x74040000 + 0x0001461Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_61_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_0_2 (0x74040000 + 0x00014620u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_1_2 (0x74040000 + 0x00014624u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_2_2 (0x74040000 + 0x00014628u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_62_3_2 (0x74040000 + 0x0001462Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_62_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_0_2 (0x74040000 + 0x00014630u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_1_2 (0x74040000 + 0x00014634u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_2_2 (0x74040000 + 0x00014638u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_63_3_2 (0x74040000 + 0x0001463Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_63_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_0_2 (0x74040000 + 0x00014640u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_1_2 (0x74040000 + 0x00014644u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_2_2 (0x74040000 + 0x00014648u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_64_3_2 (0x74040000 + 0x0001464Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_64_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_0_2 (0x74040000 + 0x00014650u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_1_2 (0x74040000 + 0x00014654u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_2_2 (0x74040000 + 0x00014658u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_65_3_2 (0x74040000 + 0x0001465Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_65_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_0_2 (0x74040000 + 0x00014660u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_1_2 (0x74040000 + 0x00014664u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_2_2 (0x74040000 + 0x00014668u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_66_3_2 (0x74040000 + 0x0001466Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_66_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_0_2 (0x74040000 + 0x00014670u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_1_2 (0x74040000 + 0x00014674u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_2_2 (0x74040000 + 0x00014678u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_67_3_2 (0x74040000 + 0x0001467Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_67_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_0_2 (0x74040000 + 0x00014680u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_1_2 (0x74040000 + 0x00014684u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_2_2 (0x74040000 + 0x00014688u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_68_3_2 (0x74040000 + 0x0001468Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_68_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_0_2 (0x74040000 + 0x00014690u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_1_2 (0x74040000 + 0x00014694u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_2_2 (0x74040000 + 0x00014698u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_69_3_2 (0x74040000 + 0x0001469Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_69_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_0_2 (0x74040000 + 0x000146A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_1_2 (0x74040000 + 0x000146A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_2_2 (0x74040000 + 0x000146A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6A_3_2 (0x74040000 + 0x000146ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_0_2 (0x74040000 + 0x000146B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_1_2 (0x74040000 + 0x000146B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_2_2 (0x74040000 + 0x000146B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6B_3_2 (0x74040000 + 0x000146BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_0_2 (0x74040000 + 0x000146C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_1_2 (0x74040000 + 0x000146C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_2_2 (0x74040000 + 0x000146C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6C_3_2 (0x74040000 + 0x000146CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_0_2 (0x74040000 + 0x000146D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_1_2 (0x74040000 + 0x000146D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_2_2 (0x74040000 + 0x000146D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6D_3_2 (0x74040000 + 0x000146DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_0_2 (0x74040000 + 0x000146E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_1_2 (0x74040000 + 0x000146E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_2_2 (0x74040000 + 0x000146E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6E_3_2 (0x74040000 + 0x000146ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_0_2 (0x74040000 + 0x000146F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_1_2 (0x74040000 + 0x000146F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_2_2 (0x74040000 + 0x000146F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_6F_3_2 (0x74040000 + 0x000146FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_6F_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_0_2 (0x74040000 + 0x00014700u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_1_2 (0x74040000 + 0x00014704u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_2_2 (0x74040000 + 0x00014708u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_70_3_2 (0x74040000 + 0x0001470Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_70_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_0_2 (0x74040000 + 0x00014710u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_1_2 (0x74040000 + 0x00014714u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_2_2 (0x74040000 + 0x00014718u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_71_3_2 (0x74040000 + 0x0001471Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_71_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_0_2 (0x74040000 + 0x00014720u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_1_2 (0x74040000 + 0x00014724u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_2_2 (0x74040000 + 0x00014728u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_72_3_2 (0x74040000 + 0x0001472Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_72_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_0_2 (0x74040000 + 0x00014730u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_1_2 (0x74040000 + 0x00014734u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_2_2 (0x74040000 + 0x00014738u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_73_3_2 (0x74040000 + 0x0001473Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_73_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_0_2 (0x74040000 + 0x00014740u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_1_2 (0x74040000 + 0x00014744u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_2_2 (0x74040000 + 0x00014748u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_74_3_2 (0x74040000 + 0x0001474Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_74_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_0_2 (0x74040000 + 0x00014750u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_1_2 (0x74040000 + 0x00014754u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_2_2 (0x74040000 + 0x00014758u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_75_3_2 (0x74040000 + 0x0001475Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_75_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_0_2 (0x74040000 + 0x00014760u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_1_2 (0x74040000 + 0x00014764u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_2_2 (0x74040000 + 0x00014768u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_76_3_2 (0x74040000 + 0x0001476Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_76_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_0_2 (0x74040000 + 0x00014770u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_1_2 (0x74040000 + 0x00014774u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_2_2 (0x74040000 + 0x00014778u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_77_3_2 (0x74040000 + 0x0001477Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_77_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_0_2 (0x74040000 + 0x00014780u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_1_2 (0x74040000 + 0x00014784u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_2_2 (0x74040000 + 0x00014788u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_78_3_2 (0x74040000 + 0x0001478Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_78_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_0_2 (0x74040000 + 0x00014790u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_1_2 (0x74040000 + 0x00014794u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_2_2 (0x74040000 + 0x00014798u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_79_3_2 (0x74040000 + 0x0001479Cu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_79_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_0_2 (0x74040000 + 0x000147A0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_1_2 (0x74040000 + 0x000147A4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_2_2 (0x74040000 + 0x000147A8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7A_3_2 (0x74040000 + 0x000147ACu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7A_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_0_2 (0x74040000 + 0x000147B0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_1_2 (0x74040000 + 0x000147B4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_2_2 (0x74040000 + 0x000147B8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7B_3_2 (0x74040000 + 0x000147BCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7B_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_0_2 (0x74040000 + 0x000147C0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_1_2 (0x74040000 + 0x000147C4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_2_2 (0x74040000 + 0x000147C8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7C_3_2 (0x74040000 + 0x000147CCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7C_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_0_2 (0x74040000 + 0x000147D0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_1_2 (0x74040000 + 0x000147D4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_2_2 (0x74040000 + 0x000147D8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7D_3_2 (0x74040000 + 0x000147DCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7D_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_0_2 (0x74040000 + 0x000147E0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_1_2 (0x74040000 + 0x000147E4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_2_2 (0x74040000 + 0x000147E8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7E_3_2 (0x74040000 + 0x000147ECu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7E_3_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_0_2 (0x74040000 + 0x000147F0u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW0 
                                     MSI-X Lower Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_0_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_1_2 (0x74040000 + 0x000147F4u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW1
                                     MSI-X Upper Address
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_1_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_2_2 (0x74040000 + 0x000147F8u)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW2
                                     MSI-X Message Data
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_2_2_msix_table_SHFT 0u

/* =====================================================================================

  ---MSIX_TABLE_GRP0_ENT_7F_3_2 (0x74040000 + 0x000147FCu)---

    msix_table[31..0]            - (RW) MSI-X Table Entry DW3
                                     MSI-X Vector Control
                                     
                                     The register is per physical function register

 =====================================================================================*/
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_2_msix_table_ADDR PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_2_ADDR
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_2_msix_table_MASK 0xFFFFFFFFu                // msix_table[31..0]
#define PCIE_MAC_IREG_MSIX_TABLE_GRP0_ENT_7F_3_2_msix_table_SHFT 0u

#ifdef __cplusplus
}
#endif

#endif // __PCIE_MAC_IREG_REGS_H__
