/* SPDX-License-Identifier: BSD-2-Clause */
/*
 * Copyright (c) 2021 MediaTek Inc.
 */

//[File]            : wf2ap_conn_infra_on_ccif4.h
//[Revision time]   : Thu Oct 26 10:54:13 2023
//[Description]     : This file is auto generated by CODA
//[Copyright]       : Copyright (C) 2023 Mediatek Incorportion. All rights reserved.

#ifndef __WF2AP_CONN_INFRA_ON_CCIF4_REGS_H__
#define __WF2AP_CONN_INFRA_ON_CCIF4_REGS_H__

#include "hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif


//****************************************************************************
//
//                     WF2AP_CONN_INFRA_ON_CCIF4 CR Definitions
//
//****************************************************************************

#define WF2AP_CONN_INFRA_ON_CCIF4_BASE                         (0x1803C000 + CONN_INFRA_ON_REMAPPING_OFFSET)

#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_BUSY_ADDR        (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0004) // C004
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_START_ADDR       (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0008) // C008
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_TCHNUM_ADDR      (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x000C) // C00C
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_RCHNUM_ADDR      (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0010) // C010
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_ACK_ADDR         (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0014) // C014
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ0_MASK_ADDR   (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0018) // C018
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ1_MASK_ADDR   (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x001C) // C01C
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY1_ADDR      (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0020) // C020
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY2_ADDR      (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0024) // C024
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW1_ADDR           (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0030) // C030
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW2_ADDR           (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0034) // C034
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_EINT_MASK_ADDR   (WF2AP_CONN_INFRA_ON_CCIF4_BASE + 0x0040) // C040




/* =====================================================================================

  ---WF2AP_PCCIF_BUSY (0x1803C000 + 0x0004)---

    BUSY[7..0]                   - (RW) Indicates which channel operation is in process
                                     It will de-assert when AP finishes fetching channel data and then write acknowledgement for according channel. BUSY [7] refers to the busy status of channel 7 and so on. DO NOT use the read-modified-write procedure to set up the BUSY register. It will result in some channels being busy all the time and cannot be cleared by the other side. The root cause is that the processing channels may be cleared during the read-modified-write procedure. The safe APy to set up the BUSY register is to only set up the channel you would like to occupy, e.g. if you are to use channel 3 for data transfer, set the BUSY register to 0x4 no matter what the current BUSY register is. (write bit n to 1 to assert busy for channel n; write 0 has no effect)
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_BUSY_BUSY_ADDR   WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_BUSY_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_BUSY_BUSY_MASK   0x000000FF                // BUSY[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_BUSY_BUSY_SHFT   0

/* =====================================================================================

  ---WF2AP_PCCIF_START (0x1803C000 + 0x0008)---

    START[7..0]                  - (RU) Indicates the state of completed transmitted channel number, not receiving acknowledgement. It will assert when writing TCHNUM by WF.
                                     It will de-assert when writing acknowledgement for according channel by AP. START [0] represents the start status of channel 0 and so on.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_START_START_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_START_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_START_START_MASK 0x000000FF                // START[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_START_START_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_TCHNUM (0x1803C000 + 0x000C)---

    TCHNUM[2..0]                 - (WO) The 3-bit channel number represents which channel (channel 7-0) is to be used for transmitting data to AP.
    RESERVED3[31..3]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_TCHNUM_TCHNUM_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_TCHNUM_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_TCHNUM_TCHNUM_MASK 0x00000007                // TCHNUM[2..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_TCHNUM_TCHNUM_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_RCHNUM (0x1803C000 + 0x0010)---

    RCHNUM[7..0]                 - (RO) Bit0 to Bit7 will report the read status of each channel.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_RCHNUM_RCHNUM_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_RCHNUM_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_RCHNUM_RCHNUM_MASK 0x000000FF                // RCHNUM[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_RCHNUM_RCHNUM_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_ACK (0x1803C000 + 0x0014)---

    ACK[7..0]                    - (W1C) Acknowledgment
                                     It is write-cleared and set by WF_MCU for clearing interrupt status and BUSY/START states of AP CPU-CPU interface according channel. Writing ACK is the last step to end one channel transfer.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_ACK_ACK_ADDR     WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_ACK_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_ACK_ACK_MASK     0x000000FF                // ACK[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_ACK_ACK_SHFT     0

/* =====================================================================================

  ---WF2AP_PCCIF_IRQ0_MASK (0x1803C000 + 0x0018)---

    IRQ0_MASK[7..0]              - (RW) IRQ0 mask is used to mask the channel start event to signal pin IRQ0.
                                     If the register is set to 8'hff, all the 8ch start event will generate the IRQ0.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ0_MASK_IRQ0_MASK_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ0_MASK_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ0_MASK_IRQ0_MASK_MASK 0x000000FF                // IRQ0_MASK[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ0_MASK_IRQ0_MASK_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_IRQ1_MASK (0x1803C000 + 0x001C)---

    IRQ1_MASK[7..0]              - (RW) IRQ1 mask is used to mask the channel start event to signal pin IRQ1.
                                     If the register is set to  8'hff, all the 8ch start event will generate the IRQ1.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ1_MASK_IRQ1_MASK_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ1_MASK_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ1_MASK_IRQ1_MASK_MASK 0x000000FF                // IRQ1_MASK[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_IRQ1_MASK_IRQ1_MASK_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_DUMMY1 (0x1803C000 + 0x0020)---

    WF2AP_PCCIF_DUMMY1[31..0]    - (RW) This register is WF side dummy register  for SW debug purpose only, WF can R/W and AP can read only.

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY1_WF2AP_PCCIF_DUMMY1_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY1_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY1_WF2AP_PCCIF_DUMMY1_MASK 0xFFFFFFFF                // WF2AP_PCCIF_DUMMY1[31..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY1_WF2AP_PCCIF_DUMMY1_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_DUMMY2 (0x1803C000 + 0x0024)---

    WF2AP_PCCIF_DUMMY2[31..0]    - (RW) This register is WF side dummy register  for SW debug purpose only, WF can R/W and AP can read only.

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY2_WF2AP_PCCIF_DUMMY2_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY2_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY2_WF2AP_PCCIF_DUMMY2_MASK 0xFFFFFFFF                // WF2AP_PCCIF_DUMMY2[31..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_DUMMY2_WF2AP_PCCIF_DUMMY2_SHFT 0

/* =====================================================================================

  ---AP2WF_SHADOW1 (0x1803C000 + 0x0030)---

    AP2WF_SHADOW1[31..0]         - (RO) This register is AP side register shadow by WF side , WF can read only.

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW1_AP2WF_SHADOW1_ADDR WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW1_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW1_AP2WF_SHADOW1_MASK 0xFFFFFFFF                // AP2WF_SHADOW1[31..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW1_AP2WF_SHADOW1_SHFT 0

/* =====================================================================================

  ---AP2WF_SHADOW2 (0x1803C000 + 0x0034)---

    AP2WF_SHADOW2[31..0]         - (RO) This register is AP side register shadow by WF side , WF can read only.

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW2_AP2WF_SHADOW2_ADDR WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW2_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW2_AP2WF_SHADOW2_MASK 0xFFFFFFFF                // AP2WF_SHADOW2[31..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_AP2WF_SHADOW2_AP2WF_SHADOW2_SHFT 0

/* =====================================================================================

  ---WF2AP_PCCIF_EINT_MASK (0x1803C000 + 0x0040)---

    EINT_MASK[7..0]              - (RW) EINT mask is used to mask the channel start event to signal pin EINT.
                                     If the register is set to 8'hff, all the 8ch start event will generate the EINT.
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_EINT_MASK_EINT_MASK_ADDR WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_EINT_MASK_ADDR
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_EINT_MASK_EINT_MASK_MASK 0x000000FF                // EINT_MASK[7..0]
#define WF2AP_CONN_INFRA_ON_CCIF4_WF2AP_PCCIF_EINT_MASK_EINT_MASK_SHFT 0

#ifdef __cplusplus
}
#endif

#endif // __WF2AP_CONN_INFRA_ON_CCIF4_REGS_H__
