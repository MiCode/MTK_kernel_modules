// SPDX-License-Identifier: BSD-2-Clause
//[File]            : cb_dma_top.h
//[Revision time]   : Sun Apr 16 17:13:59 2023
//[Description]     : This file is auto generated by CODA
//[Copyright]       : Copyright (C) 2023 Mediatek Incorportion. All rights reserved.

#ifndef __CB_DMA_TOP_REGS_H__
#define __CB_DMA_TOP_REGS_H__

#include "hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif


//****************************************************************************
//
//                     CB_DMA_TOP CR Definitions                     
//
//****************************************************************************

#define CB_DMA_TOP_BASE                                        0x74138000

#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x0000) // 8000
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x0004) // 8004
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_EN_ADDR                    (CB_DMA_TOP_BASE + 0x0008) // 8008
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_ADDR                   (CB_DMA_TOP_BASE + 0x000C) // 800C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x0010) // 8010
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x0014) // 8014
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR                   (CB_DMA_TOP_BASE + 0x0018) // 8018
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x001C) // 801C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0020) // 8020
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x0024) // 8024
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x0028) // 8028
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x002C) // 802C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x0030) // 8030
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x0034) // 8034
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x0038) // 8038
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x003C) // 803C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0040) // 8040
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x0044) // 8044
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x0048) // 8048
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x0050) // 8050
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0060) // 8060
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0064) // 8064
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x0068) // 8068
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x0100) // 8100
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x0104) // 8104
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_EN_ADDR                    (CB_DMA_TOP_BASE + 0x0108) // 8108
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_ADDR                   (CB_DMA_TOP_BASE + 0x010C) // 810C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x0110) // 8110
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x0114) // 8114
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR                   (CB_DMA_TOP_BASE + 0x0118) // 8118
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x011C) // 811C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0120) // 8120
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x0124) // 8124
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x0128) // 8128
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x012C) // 812C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x0130) // 8130
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x0134) // 8134
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x0138) // 8138
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x013C) // 813C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0140) // 8140
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x0144) // 8144
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x0148) // 8148
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x0150) // 8150
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0160) // 8160
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0164) // 8164
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x0168) // 8168
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x0200) // 8200
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x0204) // 8204
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_EN_ADDR                    (CB_DMA_TOP_BASE + 0x0208) // 8208
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_ADDR                   (CB_DMA_TOP_BASE + 0x020C) // 820C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x0210) // 8210
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x0214) // 8214
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR                   (CB_DMA_TOP_BASE + 0x0218) // 8218
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_SRC_ADDR_ADDR                (CB_DMA_TOP_BASE + 0x021C) // 821C
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR_ADDR                (CB_DMA_TOP_BASE + 0x0220) // 8220
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN1_ADDR                    (CB_DMA_TOP_BASE + 0x0224) // 8224
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN2_ADDR                    (CB_DMA_TOP_BASE + 0x0228) // 8228
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_JUMP_ADDR_ADDR               (CB_DMA_TOP_BASE + 0x022C) // 822C
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_INT_BUF_SIZE_ADDR            (CB_DMA_TOP_BASE + 0x0230) // 8230
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_ADDR                 (CB_DMA_TOP_BASE + 0x0234) // 8234
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_ADDR                 (CB_DMA_TOP_BASE + 0x0238) // 8238
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x023C) // 823C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0240) // 8240
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x0244) // 8244
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x0248) // 8248
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR                   (CB_DMA_TOP_BASE + 0x0250) // 8250
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0260) // 8260
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR2_ADDR               (CB_DMA_TOP_BASE + 0x0264) // 8264
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x0268) // 8268
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x0300) // 8300
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x0304) // 8304
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_EN_ADDR                    (CB_DMA_TOP_BASE + 0x0308) // 8308
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_ADDR                   (CB_DMA_TOP_BASE + 0x030C) // 830C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x0310) // 8310
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x0314) // 8314
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR                   (CB_DMA_TOP_BASE + 0x0318) // 8318
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x031C) // 831C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0320) // 8320
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x0324) // 8324
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x0328) // 8328
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x032C) // 832C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x0330) // 8330
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x0334) // 8334
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x0338) // 8338
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x033C) // 833C
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x0340) // 8340
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x0344) // 8344
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x0348) // 8348
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x0350) // 8350
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0360) // 8360
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x0364) // 8364
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x0368) // 8368
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x1000) // 9000
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x1004) // 9004
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_EN_ADDR                    (CB_DMA_TOP_BASE + 0x1008) // 9008
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_ADDR                   (CB_DMA_TOP_BASE + 0x100C) // 900C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x1010) // 9010
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x1014) // 9014
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR                   (CB_DMA_TOP_BASE + 0x1018) // 9018
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x101C) // 901C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1020) // 9020
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x1024) // 9024
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x1028) // 9028
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x102C) // 902C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x1030) // 9030
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x1034) // 9034
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x1038) // 9038
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x103C) // 903C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1040) // 9040
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x1044) // 9044
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x1048) // 9048
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x1050) // 9050
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1060) // 9060
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1064) // 9064
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x1068) // 9068
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x1100) // 9100
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x1104) // 9104
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_EN_ADDR                    (CB_DMA_TOP_BASE + 0x1108) // 9108
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_ADDR                   (CB_DMA_TOP_BASE + 0x110C) // 910C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x1110) // 9110
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x1114) // 9114
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR                   (CB_DMA_TOP_BASE + 0x1118) // 9118
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x111C) // 911C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1120) // 9120
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x1124) // 9124
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x1128) // 9128
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x112C) // 912C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x1130) // 9130
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x1134) // 9134
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x1138) // 9138
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x113C) // 913C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1140) // 9140
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x1144) // 9144
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x1148) // 9148
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x1150) // 9150
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1160) // 9160
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1164) // 9164
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x1168) // 9168
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x1200) // 9200
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x1204) // 9204
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_EN_ADDR                    (CB_DMA_TOP_BASE + 0x1208) // 9208
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_ADDR                   (CB_DMA_TOP_BASE + 0x120C) // 920C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x1210) // 9210
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x1214) // 9214
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR                   (CB_DMA_TOP_BASE + 0x1218) // 9218
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x121C) // 921C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1220) // 9220
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x1224) // 9224
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x1228) // 9228
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x122C) // 922C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x1230) // 9230
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x1234) // 9234
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x1238) // 9238
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x123C) // 923C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1240) // 9240
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x1244) // 9244
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x1248) // 9248
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x1250) // 9250
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1260) // 9260
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1264) // 9264
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x1268) // 9268
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_FLAG_ADDR              (CB_DMA_TOP_BASE + 0x1300) // 9300
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_EN_ADDR                (CB_DMA_TOP_BASE + 0x1304) // 9304
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_EN_ADDR                    (CB_DMA_TOP_BASE + 0x1308) // 9308
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_ADDR                   (CB_DMA_TOP_BASE + 0x130C) // 930C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_ADDR                  (CB_DMA_TOP_BASE + 0x1310) // 9310
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_FLUSH_ADDR                 (CB_DMA_TOP_BASE + 0x1314) // 9314
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR                   (CB_DMA_TOP_BASE + 0x1318) // 9318
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x131C) // 931C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1320) // 9320
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN1_ADDR                  (CB_DMA_TOP_BASE + 0x1324) // 9324
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN2_ADDR                  (CB_DMA_TOP_BASE + 0x1328) // 9328
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR_ADDR             (CB_DMA_TOP_BASE + 0x132C) // 932C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_BUF_SIZE_ADDR          (CB_DMA_TOP_BASE + 0x1330) // 9330
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_ADDR               (CB_DMA_TOP_BASE + 0x1334) // 9334
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_ADDR               (CB_DMA_TOP_BASE + 0x1338) // 9338
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_ADDR             (CB_DMA_TOP_BASE + 0x133C) // 933C
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LAT_ADDR_ADDR              (CB_DMA_TOP_BASE + 0x1340) // 9340
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_ADDR              (CB_DMA_TOP_BASE + 0x1344) // 9344
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DCM_EN_ADDR                (CB_DMA_TOP_BASE + 0x1348) // 9348
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR                 (CB_DMA_TOP_BASE + 0x1350) // 9350
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1360) // 9360
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR2_ADDR             (CB_DMA_TOP_BASE + 0x1364) // 9364
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR2_ADDR            (CB_DMA_TOP_BASE + 0x1368) // 9368
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_L_ADDR           (CB_DMA_TOP_BASE + 0x2000) // A000
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_H_ADDR           (CB_DMA_TOP_BASE + 0x2004) // A004
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_STA_ADDR             (CB_DMA_TOP_BASE + 0x2008) // A008
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_ERR_ADDR             (CB_DMA_TOP_BASE + 0x200C) // A00C
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_L_ADDR           (CB_DMA_TOP_BASE + 0x2010) // A010
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_H_ADDR           (CB_DMA_TOP_BASE + 0x2014) // A014
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_STA_ADDR             (CB_DMA_TOP_BASE + 0x2018) // A018
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_ERR_ADDR             (CB_DMA_TOP_BASE + 0x201C) // A01C
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_L_ADDR           (CB_DMA_TOP_BASE + 0x2020) // A020
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_H_ADDR           (CB_DMA_TOP_BASE + 0x2024) // A024
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_STA_ADDR             (CB_DMA_TOP_BASE + 0x2028) // A028
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_ERR_ADDR             (CB_DMA_TOP_BASE + 0x202C) // A02C
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_L_ADDR           (CB_DMA_TOP_BASE + 0x2030) // A030
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_H_ADDR           (CB_DMA_TOP_BASE + 0x2034) // A034
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_STA_ADDR             (CB_DMA_TOP_BASE + 0x2038) // A038
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_ERR_ADDR             (CB_DMA_TOP_BASE + 0x203C) // A03C
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_0_ADDR                  (CB_DMA_TOP_BASE + 0x3000) // B000
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_1_ADDR                  (CB_DMA_TOP_BASE + 0x3004) // B004
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_2_ADDR                  (CB_DMA_TOP_BASE + 0x3008) // B008
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_3_ADDR                  (CB_DMA_TOP_BASE + 0x300C) // B00C
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_4_ADDR                  (CB_DMA_TOP_BASE + 0x3010) // B010
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_5_ADDR                  (CB_DMA_TOP_BASE + 0x3014) // B014
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_6_ADDR                  (CB_DMA_TOP_BASE + 0x3018) // B018
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_7_ADDR                  (CB_DMA_TOP_BASE + 0x301C) // B01C
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_8_ADDR                  (CB_DMA_TOP_BASE + 0x3020) // B020
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_9_ADDR                  (CB_DMA_TOP_BASE + 0x3024) // B024
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_10_ADDR                 (CB_DMA_TOP_BASE + 0x3028) // B028
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_11_ADDR                 (CB_DMA_TOP_BASE + 0x302C) // B02C
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_12_ADDR                 (CB_DMA_TOP_BASE + 0x3030) // B030
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_13_ADDR                 (CB_DMA_TOP_BASE + 0x3034) // B034
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_14_ADDR                 (CB_DMA_TOP_BASE + 0x3038) // B038
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_15_ADDR                 (CB_DMA_TOP_BASE + 0x303C) // B03C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_0_ADDR               (CB_DMA_TOP_BASE + 0x4000) // C000
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_0_ADDR             (CB_DMA_TOP_BASE + 0x4004) // C004
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_0_ADDR              (CB_DMA_TOP_BASE + 0x4008) // C008
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_0_ADDR              (CB_DMA_TOP_BASE + 0x400C) // C00C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_1_ADDR               (CB_DMA_TOP_BASE + 0x4010) // C010
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_1_ADDR             (CB_DMA_TOP_BASE + 0x4014) // C014
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_1_ADDR              (CB_DMA_TOP_BASE + 0x4018) // C018
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_1_ADDR              (CB_DMA_TOP_BASE + 0x401C) // C01C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_2_ADDR               (CB_DMA_TOP_BASE + 0x4020) // C020
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_2_ADDR             (CB_DMA_TOP_BASE + 0x4024) // C024
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_2_ADDR              (CB_DMA_TOP_BASE + 0x4028) // C028
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_2_ADDR              (CB_DMA_TOP_BASE + 0x402C) // C02C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_3_ADDR               (CB_DMA_TOP_BASE + 0x4030) // C030
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_3_ADDR             (CB_DMA_TOP_BASE + 0x4034) // C034
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_3_ADDR              (CB_DMA_TOP_BASE + 0x4038) // C038
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_3_ADDR              (CB_DMA_TOP_BASE + 0x403C) // C03C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_4_ADDR               (CB_DMA_TOP_BASE + 0x4040) // C040
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_4_ADDR             (CB_DMA_TOP_BASE + 0x4044) // C044
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_4_ADDR              (CB_DMA_TOP_BASE + 0x4048) // C048
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_4_ADDR              (CB_DMA_TOP_BASE + 0x404C) // C04C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_5_ADDR               (CB_DMA_TOP_BASE + 0x4050) // C050
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_5_ADDR             (CB_DMA_TOP_BASE + 0x4054) // C054
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_5_ADDR              (CB_DMA_TOP_BASE + 0x4058) // C058
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_5_ADDR              (CB_DMA_TOP_BASE + 0x405C) // C05C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_6_ADDR               (CB_DMA_TOP_BASE + 0x4060) // C060
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_6_ADDR             (CB_DMA_TOP_BASE + 0x4064) // C064
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_6_ADDR              (CB_DMA_TOP_BASE + 0x4068) // C068
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_6_ADDR              (CB_DMA_TOP_BASE + 0x406C) // C06C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_7_ADDR               (CB_DMA_TOP_BASE + 0x4070) // C070
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_7_ADDR             (CB_DMA_TOP_BASE + 0x4074) // C074
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_7_ADDR              (CB_DMA_TOP_BASE + 0x4078) // C078
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_7_ADDR              (CB_DMA_TOP_BASE + 0x407C) // C07C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_8_ADDR               (CB_DMA_TOP_BASE + 0x4080) // C080
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_8_ADDR             (CB_DMA_TOP_BASE + 0x4084) // C084
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_8_ADDR              (CB_DMA_TOP_BASE + 0x4088) // C088
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_8_ADDR              (CB_DMA_TOP_BASE + 0x408C) // C08C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_9_ADDR               (CB_DMA_TOP_BASE + 0x4090) // C090
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_9_ADDR             (CB_DMA_TOP_BASE + 0x4094) // C094
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_9_ADDR              (CB_DMA_TOP_BASE + 0x4098) // C098
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_9_ADDR              (CB_DMA_TOP_BASE + 0x409C) // C09C
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_10_ADDR              (CB_DMA_TOP_BASE + 0x40A0) // C0A0
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_10_ADDR            (CB_DMA_TOP_BASE + 0x40A4) // C0A4
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_10_ADDR             (CB_DMA_TOP_BASE + 0x40A8) // C0A8
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_10_ADDR             (CB_DMA_TOP_BASE + 0x40AC) // C0AC
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_11_ADDR              (CB_DMA_TOP_BASE + 0x40B0) // C0B0
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_11_ADDR            (CB_DMA_TOP_BASE + 0x40B4) // C0B4
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_11_ADDR             (CB_DMA_TOP_BASE + 0x40B8) // C0B8
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_11_ADDR             (CB_DMA_TOP_BASE + 0x40BC) // C0BC
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_12_ADDR              (CB_DMA_TOP_BASE + 0x40C0) // C0C0
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_12_ADDR            (CB_DMA_TOP_BASE + 0x40C4) // C0C4
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_12_ADDR             (CB_DMA_TOP_BASE + 0x40C8) // C0C8
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_12_ADDR             (CB_DMA_TOP_BASE + 0x40CC) // C0CC
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_13_ADDR              (CB_DMA_TOP_BASE + 0x40D0) // C0D0
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_13_ADDR            (CB_DMA_TOP_BASE + 0x40D4) // C0D4
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_13_ADDR             (CB_DMA_TOP_BASE + 0x40D8) // C0D8
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_13_ADDR             (CB_DMA_TOP_BASE + 0x40DC) // C0DC
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_14_ADDR              (CB_DMA_TOP_BASE + 0x40E0) // C0E0
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_14_ADDR            (CB_DMA_TOP_BASE + 0x40E4) // C0E4
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_14_ADDR             (CB_DMA_TOP_BASE + 0x40E8) // C0E8
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_14_ADDR             (CB_DMA_TOP_BASE + 0x40EC) // C0EC
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_15_ADDR              (CB_DMA_TOP_BASE + 0x40F0) // C0F0
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_15_ADDR            (CB_DMA_TOP_BASE + 0x40F4) // C0F4
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_15_ADDR             (CB_DMA_TOP_BASE + 0x40F8) // C0F8
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_15_ADDR             (CB_DMA_TOP_BASE + 0x40FC) // C0FC
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_0_ADDR                     (CB_DMA_TOP_BASE + 0x5000) // D000
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_1_ADDR                     (CB_DMA_TOP_BASE + 0x5004) // D004
#define CB_DMA_TOP_CB_INFRA_MBU_RMP_ADDR                       (CB_DMA_TOP_BASE + 0x5008) // D008
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_ADDR                    (CB_DMA_TOP_BASE + 0x500C) // D00C
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_CMD_PTR_ADDR            (CB_DMA_TOP_BASE + 0x5010) // D010
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_DATA_PTR_ADDR           (CB_DMA_TOP_BASE + 0x5014) // D014
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_CMD_PTR_ADDR            (CB_DMA_TOP_BASE + 0x5018) // D018
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_DATA_PTR_ADDR           (CB_DMA_TOP_BASE + 0x501C) // D01C
#define CB_DMA_TOP_CB_INFRA_MBU_FBA_ADDR                       (CB_DMA_TOP_BASE + 0x5020) // D020
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_0_ADDR                 (CB_DMA_TOP_BASE + 0x5024) // D024
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_1_ADDR                 (CB_DMA_TOP_BASE + 0x5028) // D028
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_0_ADDR                  (CB_DMA_TOP_BASE + 0x6000) // E000
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_1_ADDR                  (CB_DMA_TOP_BASE + 0x6004) // E004
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_2_ADDR                  (CB_DMA_TOP_BASE + 0x6008) // E008
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_3_ADDR                  (CB_DMA_TOP_BASE + 0x600C) // E00C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_4_ADDR                  (CB_DMA_TOP_BASE + 0x6010) // E010
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_5_ADDR                  (CB_DMA_TOP_BASE + 0x6014) // E014
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_6_ADDR                  (CB_DMA_TOP_BASE + 0x6018) // E018
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_7_ADDR                  (CB_DMA_TOP_BASE + 0x601C) // E01C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_8_ADDR                  (CB_DMA_TOP_BASE + 0x6020) // E020
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_9_ADDR                  (CB_DMA_TOP_BASE + 0x6024) // E024
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_10_ADDR                 (CB_DMA_TOP_BASE + 0x6028) // E028
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_11_ADDR                 (CB_DMA_TOP_BASE + 0x602C) // E02C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_12_ADDR                 (CB_DMA_TOP_BASE + 0x6030) // E030
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_13_ADDR                 (CB_DMA_TOP_BASE + 0x6034) // E034
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_14_ADDR                 (CB_DMA_TOP_BASE + 0x6038) // E038
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_15_ADDR                 (CB_DMA_TOP_BASE + 0x603C) // E03C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_16_ADDR                 (CB_DMA_TOP_BASE + 0x6040) // E040
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_17_ADDR                 (CB_DMA_TOP_BASE + 0x6044) // E044
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_18_ADDR                 (CB_DMA_TOP_BASE + 0x6048) // E048
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_19_ADDR                 (CB_DMA_TOP_BASE + 0x604C) // E04C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_20_ADDR                 (CB_DMA_TOP_BASE + 0x6050) // E050
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_21_ADDR                 (CB_DMA_TOP_BASE + 0x6054) // E054
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_22_ADDR                 (CB_DMA_TOP_BASE + 0x6058) // E058
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_23_ADDR                 (CB_DMA_TOP_BASE + 0x605C) // E05C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_24_ADDR                 (CB_DMA_TOP_BASE + 0x6060) // E060
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_25_ADDR                 (CB_DMA_TOP_BASE + 0x6064) // E064
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_26_ADDR                 (CB_DMA_TOP_BASE + 0x6068) // E068
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_27_ADDR                 (CB_DMA_TOP_BASE + 0x606C) // E06C
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_28_ADDR                 (CB_DMA_TOP_BASE + 0x6070) // E070
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_29_ADDR                 (CB_DMA_TOP_BASE + 0x6074) // E074
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_30_ADDR                 (CB_DMA_TOP_BASE + 0x6078) // E078
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_31_ADDR                 (CB_DMA_TOP_BASE + 0x607C) // E07C




/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_INT_FLAG (0x74138000 + 0x0000)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_INT_EN (0x74138000 + 0x0004)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_EN (0x74138000 + 0x0008)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_0_G_DMA_0_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_RST (0x74138000 + 0x000C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_STOP (0x74138000 + 0x0010)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_FLUSH (0x74138000 + 0x0014)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_0_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_CON (0x74138000 + 0x0018)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_SRC_ADDR (0x74138000 + 0x001C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_DST_ADDR (0x74138000 + 0x0020)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_LEN1 (0x74138000 + 0x0024)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_LEN2 (0x74138000 + 0x0028)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_JUMP_ADDR (0x74138000 + 0x002C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_INT_BUF_SIZE (0x74138000 + 0x0030)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_CONNECT (0x74138000 + 0x0034)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_AXIATTR (0x74138000 + 0x0038)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_AXIDOMAIN (0x74138000 + 0x003C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_LAT_ADDR (0x74138000 + 0x0040)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_0_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_SECURITY (0x74138000 + 0x0044)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_DCM_EN (0x74138000 + 0x0048)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_DEBUG (0x74138000 + 0x0050)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_SRC_ADDR2 (0x74138000 + 0x0060)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_DST_ADDR2 (0x74138000 + 0x0064)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_0_JUMP_ADDR2 (0x74138000 + 0x0068)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_0_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_INT_FLAG (0x74138000 + 0x0100)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_INT_EN (0x74138000 + 0x0104)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_EN (0x74138000 + 0x0108)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_0_G_DMA_1_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_RST (0x74138000 + 0x010C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_STOP (0x74138000 + 0x0110)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_FLUSH (0x74138000 + 0x0114)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_1_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_CON (0x74138000 + 0x0118)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_SRC_ADDR (0x74138000 + 0x011C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_DST_ADDR (0x74138000 + 0x0120)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_LEN1 (0x74138000 + 0x0124)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_LEN2 (0x74138000 + 0x0128)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_JUMP_ADDR (0x74138000 + 0x012C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_INT_BUF_SIZE (0x74138000 + 0x0130)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_CONNECT (0x74138000 + 0x0134)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_AXIATTR (0x74138000 + 0x0138)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_AXIDOMAIN (0x74138000 + 0x013C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_LAT_ADDR (0x74138000 + 0x0140)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_1_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_SECURITY (0x74138000 + 0x0144)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_DCM_EN (0x74138000 + 0x0148)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_DEBUG (0x74138000 + 0x0150)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_SRC_ADDR2 (0x74138000 + 0x0160)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_DST_ADDR2 (0x74138000 + 0x0164)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_1_JUMP_ADDR2 (0x74138000 + 0x0168)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_1_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_INT_FLAG (0x74138000 + 0x0200)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_INT_EN (0x74138000 + 0x0204)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_EN (0x74138000 + 0x0208)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_0_G_DMA_2_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_RST (0x74138000 + 0x020C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_STOP (0x74138000 + 0x0210)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_FLUSH (0x74138000 + 0x0214)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_2_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_CON (0x74138000 + 0x0218)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_SRC_ADDR (0x74138000 + 0x021C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_SRC_ADDR_SRC_ADDR_ADDR       CB_DMA_TOP_CQ_DMA_G_DMA_2_SRC_ADDR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_SRC_ADDR_SRC_ADDR_MASK       0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_SRC_ADDR_SRC_ADDR_SHFT       0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_DST_ADDR (0x74138000 + 0x0220)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR_DST_ADDR_ADDR       CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR_DST_ADDR_MASK       0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR_DST_ADDR_SHFT       0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_LEN1 (0x74138000 + 0x0224)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN1_LEN1_ADDR               CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN1_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN1_LEN1_MASK               0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN1_LEN1_SHFT               0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_LEN2 (0x74138000 + 0x0228)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN2_LEN2_ADDR               CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN2_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN2_LEN2_MASK               0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_LEN2_LEN2_SHFT               0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_JUMP_ADDR (0x74138000 + 0x022C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_JUMP_ADDR_JUMP_ADDR_ADDR     CB_DMA_TOP_CQ_DMA_G_DMA_2_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_JUMP_ADDR_JUMP_ADDR_MASK     0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_JUMP_ADDR_JUMP_ADDR_SHFT     0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_INT_BUF_SIZE (0x74138000 + 0x0230)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CQ_DMA_G_DMA_2_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_CONNECT (0x74138000 + 0x0234)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_RATIO_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_RATIO_MASK           0x00000008                // RATIO[3]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_RATIO_SHFT           3
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_DIR_ADDR             CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_DIR_MASK             0x00000004                // DIR[2]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_DIR_SHFT             2
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_CONNECT_ADDR         CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_CONNECT_MASK         0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_CONNECT_CONNECT_SHFT         0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_AXIATTR (0x74138000 + 0x0238)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_WUSER_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_WUSER_MASK           0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_WUSER_SHFT           20
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_WCACHE_ADDR          CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_WCACHE_MASK          0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_WCACHE_SHFT          16
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_RUSER_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_RUSER_MASK           0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_RUSER_SHFT           4
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_RCACHE_ADDR          CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_RCACHE_MASK          0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_AXIATTR_RCACHE_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_AXIDOMAIN (0x74138000 + 0x023C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_LAT_ADDR (0x74138000 + 0x0240)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_2_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_SECURITY (0x74138000 + 0x0244)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_DCM_EN (0x74138000 + 0x0248)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_2_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_DEBUG (0x74138000 + 0x0250)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_RADDR_D_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_RADDR_D_MASK           0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_RADDR_D_SHFT           24
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WADDR_D_LH_ADDR        CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WADDR_D_LH_MASK        0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WADDR_D_LH_SHFT        16
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WADDR_D_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WADDR_D_MASK           0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WADDR_D_SHFT           8
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_R_CLR_ADDR             CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_R_CLR_MASK             0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_R_CLR_SHFT             4
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WREQ_ADDR              CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WREQ_MASK              0x00000008                // WREQ[3]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_WREQ_SHFT              3
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_RREQ_ADDR              CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_RREQ_MASK              0x00000004                // RREQ[2]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_RREQ_SHFT              2
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_W_Q_CLR_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_W_Q_CLR_MASK           0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_W_Q_CLR_SHFT           1
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_R_Q_CLR_ADDR           CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_R_Q_CLR_MASK           0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DEBUG_R_Q_CLR_SHFT           0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_SRC_ADDR2 (0x74138000 + 0x0260)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_2_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CQ_DMA_G_DMA_2_DST_ADDR2 (0x74138000 + 0x0264)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR2_DST_ADDR2_ADDR     CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR2_ADDR
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR2_DST_ADDR2_MASK     0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CQ_DMA_G_DMA_2_DST_ADDR2_DST_ADDR2_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_2_JUMP_ADDR2 (0x74138000 + 0x0268)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_2_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_2_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_INT_FLAG (0x74138000 + 0x0300)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_INT_EN (0x74138000 + 0x0304)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_EN (0x74138000 + 0x0308)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_0_G_DMA_3_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_RST (0x74138000 + 0x030C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_STOP (0x74138000 + 0x0310)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_FLUSH (0x74138000 + 0x0314)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_3_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_CON (0x74138000 + 0x0318)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_SRC_ADDR (0x74138000 + 0x031C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_DST_ADDR (0x74138000 + 0x0320)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_LEN1 (0x74138000 + 0x0324)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_LEN2 (0x74138000 + 0x0328)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_JUMP_ADDR (0x74138000 + 0x032C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_INT_BUF_SIZE (0x74138000 + 0x0330)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_CONNECT (0x74138000 + 0x0334)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_AXIATTR (0x74138000 + 0x0338)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_AXIDOMAIN (0x74138000 + 0x033C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_LAT_ADDR (0x74138000 + 0x0340)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_0_G_DMA_3_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_SECURITY (0x74138000 + 0x0344)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_DCM_EN (0x74138000 + 0x0348)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_DEBUG (0x74138000 + 0x0350)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_SRC_ADDR2 (0x74138000 + 0x0360)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_DST_ADDR2 (0x74138000 + 0x0364)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_0_G_DMA_3_JUMP_ADDR2 (0x74138000 + 0x0368)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_0_G_DMA_3_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_INT_FLAG (0x74138000 + 0x1000)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_INT_EN (0x74138000 + 0x1004)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_EN (0x74138000 + 0x1008)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_1_G_DMA_0_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_RST (0x74138000 + 0x100C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_STOP (0x74138000 + 0x1010)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_FLUSH (0x74138000 + 0x1014)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_0_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_CON (0x74138000 + 0x1018)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_SRC_ADDR (0x74138000 + 0x101C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_DST_ADDR (0x74138000 + 0x1020)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_LEN1 (0x74138000 + 0x1024)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_LEN2 (0x74138000 + 0x1028)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_JUMP_ADDR (0x74138000 + 0x102C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_INT_BUF_SIZE (0x74138000 + 0x1030)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_CONNECT (0x74138000 + 0x1034)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_AXIATTR (0x74138000 + 0x1038)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_AXIDOMAIN (0x74138000 + 0x103C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_LAT_ADDR (0x74138000 + 0x1040)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_0_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_SECURITY (0x74138000 + 0x1044)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_DCM_EN (0x74138000 + 0x1048)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_DEBUG (0x74138000 + 0x1050)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_SRC_ADDR2 (0x74138000 + 0x1060)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_DST_ADDR2 (0x74138000 + 0x1064)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_0_JUMP_ADDR2 (0x74138000 + 0x1068)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_0_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_INT_FLAG (0x74138000 + 0x1100)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_INT_EN (0x74138000 + 0x1104)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_EN (0x74138000 + 0x1108)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_1_G_DMA_1_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_RST (0x74138000 + 0x110C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_STOP (0x74138000 + 0x1110)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_FLUSH (0x74138000 + 0x1114)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_1_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_CON (0x74138000 + 0x1118)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_SRC_ADDR (0x74138000 + 0x111C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_DST_ADDR (0x74138000 + 0x1120)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_LEN1 (0x74138000 + 0x1124)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_LEN2 (0x74138000 + 0x1128)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_JUMP_ADDR (0x74138000 + 0x112C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_INT_BUF_SIZE (0x74138000 + 0x1130)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_CONNECT (0x74138000 + 0x1134)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_AXIATTR (0x74138000 + 0x1138)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_AXIDOMAIN (0x74138000 + 0x113C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_LAT_ADDR (0x74138000 + 0x1140)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_1_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_SECURITY (0x74138000 + 0x1144)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_DCM_EN (0x74138000 + 0x1148)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_DEBUG (0x74138000 + 0x1150)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_SRC_ADDR2 (0x74138000 + 0x1160)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_DST_ADDR2 (0x74138000 + 0x1164)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_1_JUMP_ADDR2 (0x74138000 + 0x1168)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_1_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_INT_FLAG (0x74138000 + 0x1200)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_INT_EN (0x74138000 + 0x1204)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_EN (0x74138000 + 0x1208)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_1_G_DMA_2_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_RST (0x74138000 + 0x120C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_STOP (0x74138000 + 0x1210)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_FLUSH (0x74138000 + 0x1214)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_2_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_CON (0x74138000 + 0x1218)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_SRC_ADDR (0x74138000 + 0x121C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_DST_ADDR (0x74138000 + 0x1220)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_LEN1 (0x74138000 + 0x1224)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_LEN2 (0x74138000 + 0x1228)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_JUMP_ADDR (0x74138000 + 0x122C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_INT_BUF_SIZE (0x74138000 + 0x1230)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_CONNECT (0x74138000 + 0x1234)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_AXIATTR (0x74138000 + 0x1238)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_AXIDOMAIN (0x74138000 + 0x123C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_LAT_ADDR (0x74138000 + 0x1240)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_2_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_SECURITY (0x74138000 + 0x1244)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_DCM_EN (0x74138000 + 0x1248)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_DEBUG (0x74138000 + 0x1250)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_SRC_ADDR2 (0x74138000 + 0x1260)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_DST_ADDR2 (0x74138000 + 0x1264)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_2_JUMP_ADDR2 (0x74138000 + 0x1268)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_2_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_INT_FLAG (0x74138000 + 0x1300)---

    FLAG[0]                      - (RW) This flag will be raised when DMA is finished.
                                     Write 0 to clear it. 
                                     1. When normal operation is done, EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     2. Set STOP=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     3. Set FLUSH=1 and operation will be done, then EN will be set from 1 to 0, and the interrupt flag will be set to 1.
                                     4. Set WARM_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
                                     5. Set HARD_RST=1 and operation will be done, then EN will be set from 1 to 0, but the interrupt flag will not be set to 1.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_FLAG_FLAG_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_FLAG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_FLAG_FLAG_MASK         0x00000001                // FLAG[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_FLAG_FLAG_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_INT_EN (0x74138000 + 0x1304)---

    INTEN[0]                     - (RW) Controls interrupt enable
                                     Only when this bit is set to 1 will the interrupt be sent to CPU to receive this interrupt. However, even without this bit set to 1, the flag can still be set to 1 when DMA is finished.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_EN_INTEN_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_EN_INTEN_MASK          0x00000001                // INTEN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_EN_INTEN_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_EN (0x74138000 + 0x1308)---

    EN[0]                        - (RW) Enables general DMA
                                     Set EN to 1 to start DMA. When DMA is busy, EN will always be 1. When DMA is finished, EN will be set to 0. When warm reset is set, EN will be 0 after the nearest transaction is finished, and all statuses in DMA will be reset. When hard reset is set, EN will immediately become 0, and all statuses in DMA will be reset.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_EN_EN_ADDR                 CB_DMA_TOP_CB_DMA_1_G_DMA_3_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_EN_EN_MASK                 0x00000001                // EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_EN_EN_SHFT                 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_RST (0x74138000 + 0x130C)---

    WARM_RST[0]                  - (RW) General DMA warm reset (after the current transaction) 
                                     SW sets WARM_RST to 1 and waits for EN to be 0, and HW auto sets WARM_RST back to 0 to finish the reset mechanism.
    HARD_RST[1]                  - (RW) General DMA hard reset (regardless of the current transaction)
                                     SW sets HARD_RST to 1 then back to 0 to finish the reset mechanism.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_HARD_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_HARD_RST_MASK          0x00000002                // HARD_RST[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_HARD_RST_SHFT          1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_WARM_RST_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_WARM_RST_MASK          0x00000001                // WARM_RST[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_RST_WARM_RST_SHFT          0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_STOP (0x74138000 + 0x1310)---

    STOP[0]                      - (RW) Stops general DMA
                                     Set STOP to 1 to stop DMA and wait for EN to become 0 then set STOP back to 0 to finish the stop mechanism.
                                     When DMA is set to stop, it will finish the current transaction. After that, EN will become 0 without resetting any status in DMA.
    PAUSE[1]                     - (RW) Pauses general DMA
                                     Set PAUSE to 1 to pause DMA and back to 0 to resume DMA.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_PAUSE_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_PAUSE_MASK            0x00000002                // PAUSE[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_PAUSE_SHFT            1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_STOP_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_STOP_MASK             0x00000001                // STOP[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_STOP_STOP_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_FLUSH (0x74138000 + 0x1314)---

    FLUSH[0]                     - (RW) Flushes general DMA
                                     Set FLUSH to 1 to stop DMA and allow DMA to flush its internal buffer residual data to the outer memory. After flush is finished, DMA will set EN to 0 to stop DMA. There may still be data not transferred (len may not be 0 after EN = 0). 
                                     SW sets FLUSH to 1 and waits for EN to become 0 then set FLUSH back to 0 to finish the flush mechanism.
                                     Note: STOP and FLUSH cannot be set to 1 in the same operation.
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_FLUSH_FLUSH_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_3_FLUSH_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_FLUSH_FLUSH_MASK           0x00000001                // FLUSH[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_FLUSH_FLUSH_SHFT           0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_CON (0x74138000 + 0x1318)---

    RESERVED0[0]                 - (RO) Reserved bits
    FIX_EN[1]                    - (RW) General DMA repeat inserting fixed pattern
                                     Its priority is higher than RADDR_FIX_EN, i.e. when FIX_EN=1, RADDR_FIX_EN will be ignored.
    SLOW_EN[2]                   - (RW) Enables general DMA slow-down
    WADDR_FIX_EN[3]              - (RW) General DMA fixed write address
                                     When "WRAP_EN=1 and WRAP_SEL=1", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. dst_addr must be 8-byte aligned. 
                                     2. The write transaction size depends on WSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    RADDR_FIX_EN[4]              - (RW) General DMA fixed read address
                                     When FIX_EN=1 or "WRAP_EN=1 and WRAP_SEL=0", this bit will not function. When this function is enabled, note the following limits on DMA:
                                     1. src_addr must be 8-byte aligned.
                                     2. The read transaction size depends on RSIZE.
                                     3. The burst length is always single.
                                     4. dst_addr must not be at EMI.
    SLOW_CNT[14..5]              - (RW) General DMA slow-down counter
                                     Only slows down the read side; the overall throughput will also be reduced. Supports up to 1,023 cycles.
    WRAP_EN[15]                  - (RW) Enables general DMA wrap or double buffer
                                     Its priority is higher than RADDR_FIX_EN or WADDR_FIX_EN. If WRAP_EN=1 and WRAP_SEL=1, WADDR_FIX_EN will have no function. Likewise, if WRAP_EN=1 and WRAP_SEL=0, RADDR_FIX_EN will have no function. When FIX_EN=1 and WRAP_EN=1, WRAP_SEL can only be set to 1. The read side cannot be set to wrap.
    BURST_LEN[18..16]            - (RW) General DMA burst length
                                     Valid value: 0~7. The best case is to set it to 3 (4-8).
    RESERVED19[19]               - (RO) Reserved bits
    WRAP_SEL[20]                 - (RW) Selects general DMA wrap
    RESERVED21[23..21]           - (RO) Reserved bits
    WSIZE[25..24]                - (RW) General DMA write size
                                     Only valid when WADDR_FIX_EN = 1.
    RESERVED26[27..26]           - (RO) Reserved bits
    RSIZE[29..28]                - (RW) General DMA read size
                                     Only valid when RADDR_FIX_EN = 1.
    FLAG_ST[30]                  - (RW) This flag will be raised when DMA is finished (without inten).
    RESERVED31[31]               - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_FLAG_ST_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_FLAG_ST_MASK           0x40000000                // FLAG_ST[30]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_FLAG_ST_SHFT           30
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_RSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_RSIZE_MASK             0x30000000                // RSIZE[29..28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_RSIZE_SHFT             28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WSIZE_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WSIZE_MASK             0x03000000                // WSIZE[25..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WSIZE_SHFT             24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WRAP_SEL_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WRAP_SEL_MASK          0x00100000                // WRAP_SEL[20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WRAP_SEL_SHFT          20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_BURST_LEN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_BURST_LEN_MASK         0x00070000                // BURST_LEN[18..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_BURST_LEN_SHFT         16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WRAP_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WRAP_EN_MASK           0x00008000                // WRAP_EN[15]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WRAP_EN_SHFT           15
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_SLOW_CNT_ADDR          CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_SLOW_CNT_MASK          0x00007FE0                // SLOW_CNT[14..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_SLOW_CNT_SHFT          5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_RADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_RADDR_FIX_EN_MASK      0x00000010                // RADDR_FIX_EN[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_RADDR_FIX_EN_SHFT      4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WADDR_FIX_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WADDR_FIX_EN_MASK      0x00000008                // WADDR_FIX_EN[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_WADDR_FIX_EN_SHFT      3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_SLOW_EN_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_SLOW_EN_MASK           0x00000004                // SLOW_EN[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_SLOW_EN_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_FIX_EN_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_FIX_EN_MASK            0x00000002                // FIX_EN[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CON_FIX_EN_SHFT            1

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_SRC_ADDR (0x74138000 + 0x131C)---

    SRC_ADDR[31..0]              - (RW) General DMA source address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR_SRC_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR_SRC_ADDR_MASK     0xFFFFFFFF                // SRC_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR_SRC_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_DST_ADDR (0x74138000 + 0x1320)---

    DST_ADDR[31..0]              - (RW) General DMA destination address
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR_DST_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR_DST_ADDR_MASK     0xFFFFFFFF                // DST_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR_DST_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_LEN1 (0x74138000 + 0x1324)---

    LEN1[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
                                     When read fix and write wrap is set, LEN1 must be a multiple number of the byte number indicated by RSIZE.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN1_LEN1_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN1_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN1_LEN1_MASK             0x0FFFFFFF                // LEN1[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN1_LEN1_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_LEN2 (0x74138000 + 0x1328)---

    LEN2[27..0]                  - (RW) General DMA transfer length
                                     Can be any byte alignment. This number will decrease when data are fetched from the source side. This number also indicates how many data have not been delivered.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN2_LEN2_ADDR             CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN2_LEN2_MASK             0x0FFFFFFF                // LEN2[27..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LEN2_LEN2_SHFT             0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_JUMP_ADDR (0x74138000 + 0x132C)---

    JUMP_ADDR[31..0]             - (RW) General DMA end address
                                     Can be any byte alignment. Only valid when wrap_en = 1.

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR_JUMP_ADDR_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR_JUMP_ADDR_MASK   0xFFFFFFFF                // JUMP_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR_JUMP_ADDR_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_INT_BUF_SIZE (0x74138000 + 0x1330)---

    INT_BUF_SIZE[7..0]           - (RO) General DMA size of data in internal buffer
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_BUF_SIZE_INT_BUF_SIZE_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_BUF_SIZE_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_BUF_SIZE_INT_BUF_SIZE_MASK 0x000000FF                // INT_BUF_SIZE[7..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_INT_BUF_SIZE_INT_BUF_SIZE_SHFT 0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_CONNECT (0x74138000 + 0x1334)---

    CONNECT[1..0]                - (RW) General DMA request/ack connection
                                     1, 2 and 3 are only valid when WADDR_FIX_EN = 1 or RADDR_FIX_EN = 1.
    DIR[2]                       - (RW) General DMA request/ack connection direction
    RATIO[3]                     - (RW) General DMA request/ack connection ratio
    RESERVED4[31..4]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_RATIO_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_RATIO_MASK         0x00000008                // RATIO[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_RATIO_SHFT         3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_DIR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_DIR_MASK           0x00000004                // DIR[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_DIR_SHFT           2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_CONNECT_ADDR       CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_CONNECT_MASK       0x00000003                // CONNECT[1..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_CONNECT_CONNECT_SHFT       0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_AXIATTR (0x74138000 + 0x1338)---

    RCACHE[3..0]                 - (RW) General DMA AXI ARCACHE signal
    RUSER[7..4]                  - (RW) General DMA AXI ARUSER signal
    RESERVED8[15..8]             - (RO) Reserved bits
    WCACHE[19..16]               - (RW) General DMA AXI AWCACHE signal
    WUSER[23..20]                - (RW) General DMA AXI AWUSER signal
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_WUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_WUSER_MASK         0x00F00000                // WUSER[23..20]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_WUSER_SHFT         20
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_WCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_WCACHE_MASK        0x000F0000                // WCACHE[19..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_WCACHE_SHFT        16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_RUSER_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_RUSER_MASK         0x000000F0                // RUSER[7..4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_RUSER_SHFT         4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_RCACHE_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_RCACHE_MASK        0x0000000F                // RCACHE[3..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIATTR_RCACHE_SHFT        0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_AXIDOMAIN (0x74138000 + 0x133C)---

    SEC_EN[0]                    - (RW)  xxx 
    DOMAIN_CFG[4..1]             - (RW)  xxx 
    PDOMAIN_CFG[8..5]            - (RW)  xxx 
    DOMAIN_EN[9]                 - (RW)  xxx 
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_DOMAIN_EN_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_DOMAIN_EN_MASK   0x00000200                // DOMAIN_EN[9]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_DOMAIN_EN_SHFT   9
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_PDOMAIN_CFG_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_PDOMAIN_CFG_MASK 0x000001E0                // PDOMAIN_CFG[8..5]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_PDOMAIN_CFG_SHFT 5
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_DOMAIN_CFG_ADDR  CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_DOMAIN_CFG_MASK  0x0000001E                // DOMAIN_CFG[4..1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_DOMAIN_CFG_SHFT  1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_SEC_EN_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_SEC_EN_MASK      0x00000001                // SEC_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_AXIDOMAIN_SEC_EN_SHFT      0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_LAT_ADDR (0x74138000 + 0x1340)---

    LAT_ADDR[31..0]              - (RO) latch current paddr (12-bit) when enable

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LAT_ADDR_LAT_ADDR_ADDR     CB_DMA_TOP_CB_DMA_1_G_DMA_3_LAT_ADDR_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LAT_ADDR_LAT_ADDR_MASK     0xFFFFFFFF                // LAT_ADDR[31..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_LAT_ADDR_LAT_ADDR_SHFT     0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_SECURITY (0x74138000 + 0x1344)---

    RESERVED0[23..0]             - (RO) Reserved bits
    APB_ABORT[24]                - (RO)  xxx 
    RESERVED25[27..25]           - (RO) Reserved bits
    W_VID[28]                    - (RO)  xxx 
    R_VID[29]                    - (RO)  xxx 
    RESERVED30[31..30]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_R_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_R_VID_MASK        0x20000000                // R_VID[29]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_R_VID_SHFT        29
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_W_VID_ADDR        CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_W_VID_MASK        0x10000000                // W_VID[28]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_W_VID_SHFT        28
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_APB_ABORT_ADDR    CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_APB_ABORT_MASK    0x01000000                // APB_ABORT[24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SECURITY_APB_ABORT_SHFT    24

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_DCM_EN (0x74138000 + 0x1348)---

    DCM_EN[0]                    - (RW)  xxx 
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DCM_EN_DCM_EN_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_DCM_EN_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DCM_EN_DCM_EN_MASK         0x00000001                // DCM_EN[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DCM_EN_DCM_EN_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_DEBUG (0x74138000 + 0x1350)---

    R_Q_CLR[0]                   - (RO)  xxx 
    W_Q_CLR[1]                   - (RO)  xxx 
    RREQ[2]                      - (RO)  xxx 
    WREQ[3]                      - (RO)  xxx 
    R_CLR[4]                     - (RO)  xxx 
    RESERVED5[7..5]              - (RO) Reserved bits
    WADDR_D[15..8]               - (RO)  xxx 
    WADDR_D_LH[23..16]           - (RO)  xxx 
    RADDR_D[31..24]              - (RO)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_RADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_RADDR_D_MASK         0xFF000000                // RADDR_D[31..24]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_RADDR_D_SHFT         24
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WADDR_D_LH_ADDR      CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WADDR_D_LH_MASK      0x00FF0000                // WADDR_D_LH[23..16]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WADDR_D_LH_SHFT      16
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WADDR_D_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WADDR_D_MASK         0x0000FF00                // WADDR_D[15..8]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WADDR_D_SHFT         8
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_R_CLR_ADDR           CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_R_CLR_MASK           0x00000010                // R_CLR[4]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_R_CLR_SHFT           4
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WREQ_MASK            0x00000008                // WREQ[3]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_WREQ_SHFT            3
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_RREQ_ADDR            CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_RREQ_MASK            0x00000004                // RREQ[2]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_RREQ_SHFT            2
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_W_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_W_Q_CLR_MASK         0x00000002                // W_Q_CLR[1]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_W_Q_CLR_SHFT         1
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_R_Q_CLR_ADDR         CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_R_Q_CLR_MASK         0x00000001                // R_Q_CLR[0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DEBUG_R_Q_CLR_SHFT         0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_SRC_ADDR2 (0x74138000 + 0x1360)---

    SRC_ADDR2[5..0]              - (RW) General DMA source address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when RADDR_FIX_EN = 1, src_addr must be 8-byte aligned. When FIX_EN = 1, SRC_ADDR will be treated as FIX_PATTERN.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR2_SRC_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR2_SRC_ADDR2_MASK   0x0000003F                // SRC_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_SRC_ADDR2_SRC_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_DST_ADDR2 (0x74138000 + 0x1364)---

    DST_ADDR2[5..0]              - (RW) General DMA destination address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, dst_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR2_DST_ADDR2_ADDR   CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR2_DST_ADDR2_MASK   0x0000003F                // DST_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_DST_ADDR2_DST_ADDR2_SHFT   0

/* =====================================================================================

  ---CB_DMA_1_G_DMA_3_JUMP_ADDR2 (0x74138000 + 0x1368)---

    JUMP_ADDR2[5..0]             - (RW) General DMA jump address [37:32]
                                     Can be any byte alignment. This address will be changed after each bus transaction. However, when WADDR_FIX_EN = 1, jump_addr must be 8-byte aligned.
    RESERVED6[31..6]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR2_JUMP_ADDR2_ADDR CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR2_ADDR
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR2_JUMP_ADDR2_MASK 0x0000003F                // JUMP_ADDR2[5..0]
#define CB_DMA_TOP_CB_DMA_1_G_DMA_3_JUMP_ADDR2_JUMP_ADDR2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_0_CMD_L (0x74138000 + 0x2000)---

    CB_INFRA_MBU_MAILBOX_0_CMD_L[31..0] - (RW) cb_infra MBU mailbox #0 cmd_l

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_L_CB_INFRA_MBU_MAILBOX_0_CMD_L_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_L_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_L_CB_INFRA_MBU_MAILBOX_0_CMD_L_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_0_CMD_L[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_L_CB_INFRA_MBU_MAILBOX_0_CMD_L_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_0_CMD_H (0x74138000 + 0x2004)---

    CB_INFRA_MBU_MAILBOX_0_CMD_H[31..0] - (RW) cb_infra MBU mailbox #0 cmd_h

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_H_CB_INFRA_MBU_MAILBOX_0_CMD_H_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_H_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_H_CB_INFRA_MBU_MAILBOX_0_CMD_H_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_0_CMD_H[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_CMD_H_CB_INFRA_MBU_MAILBOX_0_CMD_H_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_0_STA (0x74138000 + 0x2008)---

    CB_INFRA_MBU_MAILBOX_0_STA[0] - (W1C) cb_infra MBU mailbox #0 status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_STA_CB_INFRA_MBU_MAILBOX_0_STA_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_STA_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_STA_CB_INFRA_MBU_MAILBOX_0_STA_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_0_STA[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_STA_CB_INFRA_MBU_MAILBOX_0_STA_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_0_ERR (0x74138000 + 0x200C)---

    CB_INFRA_MBU_MAILBOX_0_ERR[0] - (W1C) cb_infra MBU mailbox #0 error
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_ERR_CB_INFRA_MBU_MAILBOX_0_ERR_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_ERR_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_ERR_CB_INFRA_MBU_MAILBOX_0_ERR_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_0_ERR[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_0_ERR_CB_INFRA_MBU_MAILBOX_0_ERR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_1_CMD_L (0x74138000 + 0x2010)---

    CB_INFRA_MBU_MAILBOX_1_CMD_L[31..0] - (RW) cb_infra MBU mailbox #1 cmd_l

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_L_CB_INFRA_MBU_MAILBOX_1_CMD_L_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_L_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_L_CB_INFRA_MBU_MAILBOX_1_CMD_L_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_1_CMD_L[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_L_CB_INFRA_MBU_MAILBOX_1_CMD_L_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_1_CMD_H (0x74138000 + 0x2014)---

    CB_INFRA_MBU_MAILBOX_1_CMD_H[31..0] - (RW) cb_infra MBU mailbox #1 cmd_h

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_H_CB_INFRA_MBU_MAILBOX_1_CMD_H_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_H_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_H_CB_INFRA_MBU_MAILBOX_1_CMD_H_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_1_CMD_H[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_CMD_H_CB_INFRA_MBU_MAILBOX_1_CMD_H_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_1_STA (0x74138000 + 0x2018)---

    CB_INFRA_MBU_MAILBOX_1_STA[0] - (W1C) cb_infra MBU mailbox #1 status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_STA_CB_INFRA_MBU_MAILBOX_1_STA_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_STA_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_STA_CB_INFRA_MBU_MAILBOX_1_STA_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_1_STA[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_STA_CB_INFRA_MBU_MAILBOX_1_STA_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_1_ERR (0x74138000 + 0x201C)---

    CB_INFRA_MBU_MAILBOX_1_ERR[0] - (W1C) cb_infra MBU mailbox #1 error
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_ERR_CB_INFRA_MBU_MAILBOX_1_ERR_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_ERR_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_ERR_CB_INFRA_MBU_MAILBOX_1_ERR_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_1_ERR[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_1_ERR_CB_INFRA_MBU_MAILBOX_1_ERR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_2_CMD_L (0x74138000 + 0x2020)---

    CB_INFRA_MBU_MAILBOX_2_CMD_L[31..0] - (RW) cb_infra MBU mailbox #2 cmd_l

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_L_CB_INFRA_MBU_MAILBOX_2_CMD_L_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_L_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_L_CB_INFRA_MBU_MAILBOX_2_CMD_L_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_2_CMD_L[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_L_CB_INFRA_MBU_MAILBOX_2_CMD_L_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_2_CMD_H (0x74138000 + 0x2024)---

    CB_INFRA_MBU_MAILBOX_2_CMD_H[31..0] - (RW) cb_infra MBU mailbox #2 cmd_h

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_H_CB_INFRA_MBU_MAILBOX_2_CMD_H_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_H_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_H_CB_INFRA_MBU_MAILBOX_2_CMD_H_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_2_CMD_H[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_CMD_H_CB_INFRA_MBU_MAILBOX_2_CMD_H_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_2_STA (0x74138000 + 0x2028)---

    CB_INFRA_MBU_MAILBOX_2_STA[0] - (W1C) cb_infra MBU mailbox #2 status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_STA_CB_INFRA_MBU_MAILBOX_2_STA_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_STA_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_STA_CB_INFRA_MBU_MAILBOX_2_STA_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_2_STA[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_STA_CB_INFRA_MBU_MAILBOX_2_STA_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_2_ERR (0x74138000 + 0x202C)---

    CB_INFRA_MBU_MAILBOX_2_ERR[0] - (W1C) cb_infra MBU mailbox #2 error
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_ERR_CB_INFRA_MBU_MAILBOX_2_ERR_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_ERR_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_ERR_CB_INFRA_MBU_MAILBOX_2_ERR_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_2_ERR[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_2_ERR_CB_INFRA_MBU_MAILBOX_2_ERR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_3_CMD_L (0x74138000 + 0x2030)---

    CB_INFRA_MBU_MAILBOX_3_CMD_L[31..0] - (RW) cb_infra MBU mailbox #3 cmd_l

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_L_CB_INFRA_MBU_MAILBOX_3_CMD_L_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_L_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_L_CB_INFRA_MBU_MAILBOX_3_CMD_L_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_3_CMD_L[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_L_CB_INFRA_MBU_MAILBOX_3_CMD_L_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_3_CMD_H (0x74138000 + 0x2034)---

    CB_INFRA_MBU_MAILBOX_3_CMD_H[31..0] - (RW) cb_infra MBU mailbox #3 cmd_h

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_H_CB_INFRA_MBU_MAILBOX_3_CMD_H_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_H_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_H_CB_INFRA_MBU_MAILBOX_3_CMD_H_MASK 0xFFFFFFFF                // CB_INFRA_MBU_MAILBOX_3_CMD_H[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_CMD_H_CB_INFRA_MBU_MAILBOX_3_CMD_H_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_3_STA (0x74138000 + 0x2038)---

    CB_INFRA_MBU_MAILBOX_3_STA[0] - (W1C) cb_infra MBU mailbox #3 status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_STA_CB_INFRA_MBU_MAILBOX_3_STA_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_STA_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_STA_CB_INFRA_MBU_MAILBOX_3_STA_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_3_STA[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_STA_CB_INFRA_MBU_MAILBOX_3_STA_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_MAILBOX_3_ERR (0x74138000 + 0x203C)---

    CB_INFRA_MBU_MAILBOX_3_ERR[0] - (W1C) cb_infra MBU mailbox #3 error
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_ERR_CB_INFRA_MBU_MAILBOX_3_ERR_ADDR CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_ERR_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_ERR_CB_INFRA_MBU_MAILBOX_3_ERR_MASK 0x00000001                // CB_INFRA_MBU_MAILBOX_3_ERR[0]
#define CB_DMA_TOP_CB_INFRA_MBU_MAILBOX_3_ERR_CB_INFRA_MBU_MAILBOX_3_ERR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_0 (0x74138000 + 0x3000)---

    CB_INFRA_MBU_INTREG_0[31..0] - (RW) cb_infra_mbu_intreg_0

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_0_CB_INFRA_MBU_INTREG_0_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_0_CB_INFRA_MBU_INTREG_0_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_0[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_0_CB_INFRA_MBU_INTREG_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_1 (0x74138000 + 0x3004)---

    CB_INFRA_MBU_INTREG_1[31..0] - (RW) cb_infra_mbu_intreg_1

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_1_CB_INFRA_MBU_INTREG_1_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_1_CB_INFRA_MBU_INTREG_1_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_1[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_1_CB_INFRA_MBU_INTREG_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_2 (0x74138000 + 0x3008)---

    CB_INFRA_MBU_INTREG_2[31..0] - (RW) cb_infra_mbu_intreg_2

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_2_CB_INFRA_MBU_INTREG_2_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_2_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_2_CB_INFRA_MBU_INTREG_2_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_2[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_2_CB_INFRA_MBU_INTREG_2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_3 (0x74138000 + 0x300C)---

    CB_INFRA_MBU_INTREG_3[31..0] - (RW) cb_infra_mbu_intreg_3

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_3_CB_INFRA_MBU_INTREG_3_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_3_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_3_CB_INFRA_MBU_INTREG_3_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_3[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_3_CB_INFRA_MBU_INTREG_3_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_4 (0x74138000 + 0x3010)---

    CB_INFRA_MBU_INTREG_4[31..0] - (RW) cb_infra_mbu_intreg_4

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_4_CB_INFRA_MBU_INTREG_4_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_4_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_4_CB_INFRA_MBU_INTREG_4_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_4[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_4_CB_INFRA_MBU_INTREG_4_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_5 (0x74138000 + 0x3014)---

    CB_INFRA_MBU_INTREG_5[31..0] - (RW) cb_infra_mbu_intreg_5

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_5_CB_INFRA_MBU_INTREG_5_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_5_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_5_CB_INFRA_MBU_INTREG_5_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_5[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_5_CB_INFRA_MBU_INTREG_5_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_6 (0x74138000 + 0x3018)---

    CB_INFRA_MBU_INTREG_6[31..0] - (RW) cb_infra_mbu_intreg_6

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_6_CB_INFRA_MBU_INTREG_6_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_6_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_6_CB_INFRA_MBU_INTREG_6_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_6[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_6_CB_INFRA_MBU_INTREG_6_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_7 (0x74138000 + 0x301C)---

    CB_INFRA_MBU_INTREG_7[31..0] - (RW) cb_infra_mbu_intreg_7

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_7_CB_INFRA_MBU_INTREG_7_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_7_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_7_CB_INFRA_MBU_INTREG_7_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_7[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_7_CB_INFRA_MBU_INTREG_7_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_8 (0x74138000 + 0x3020)---

    CB_INFRA_MBU_INTREG_8[31..0] - (RW) cb_infra_mbu_intreg_8

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_8_CB_INFRA_MBU_INTREG_8_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_8_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_8_CB_INFRA_MBU_INTREG_8_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_8[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_8_CB_INFRA_MBU_INTREG_8_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_9 (0x74138000 + 0x3024)---

    CB_INFRA_MBU_INTREG_9[31..0] - (RW) cb_infra_mbu_intreg_9

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_9_CB_INFRA_MBU_INTREG_9_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_9_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_9_CB_INFRA_MBU_INTREG_9_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_9[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_9_CB_INFRA_MBU_INTREG_9_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_10 (0x74138000 + 0x3028)---

    CB_INFRA_MBU_INTREG_10[31..0] - (RW) cb_infra_mbu_intreg_10

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_10_CB_INFRA_MBU_INTREG_10_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_10_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_10_CB_INFRA_MBU_INTREG_10_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_10[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_10_CB_INFRA_MBU_INTREG_10_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_11 (0x74138000 + 0x302C)---

    CB_INFRA_MBU_INTREG_11[31..0] - (RW) cb_infra_mbu_intreg_11

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_11_CB_INFRA_MBU_INTREG_11_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_11_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_11_CB_INFRA_MBU_INTREG_11_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_11[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_11_CB_INFRA_MBU_INTREG_11_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_12 (0x74138000 + 0x3030)---

    CB_INFRA_MBU_INTREG_12[31..0] - (RW) cb_infra_mbu_intreg_12

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_12_CB_INFRA_MBU_INTREG_12_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_12_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_12_CB_INFRA_MBU_INTREG_12_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_12[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_12_CB_INFRA_MBU_INTREG_12_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_13 (0x74138000 + 0x3034)---

    CB_INFRA_MBU_INTREG_13[31..0] - (RW) cb_infra_mbu_intreg_13

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_13_CB_INFRA_MBU_INTREG_13_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_13_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_13_CB_INFRA_MBU_INTREG_13_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_13[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_13_CB_INFRA_MBU_INTREG_13_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_14 (0x74138000 + 0x3038)---

    CB_INFRA_MBU_INTREG_14[31..0] - (RW) cb_infra_mbu_intreg_14

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_14_CB_INFRA_MBU_INTREG_14_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_14_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_14_CB_INFRA_MBU_INTREG_14_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_14[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_14_CB_INFRA_MBU_INTREG_14_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_INTREG_15 (0x74138000 + 0x303C)---

    CB_INFRA_MBU_INTREG_15[31..0] - (RW) cb_infra_mbu_intreg_15

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_15_CB_INFRA_MBU_INTREG_15_ADDR CB_DMA_TOP_CB_INFRA_MBU_INTREG_15_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_15_CB_INFRA_MBU_INTREG_15_MASK 0xFFFFFFFF                // CB_INFRA_MBU_INTREG_15[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_INTREG_15_CB_INFRA_MBU_INTREG_15_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_0 (0x74138000 + 0x4000)---

    CB_INFRA_MSI_MIRROR_EN_0[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_0_CB_INFRA_MSI_MIRROR_EN_0_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_0_CB_INFRA_MSI_MIRROR_EN_0_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_0[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_0_CB_INFRA_MSI_MIRROR_EN_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_0 (0x74138000 + 0x4004)---

    CB_INFRA_MSI_MIRROR_MODE_0[0] - (RW) msi mirror mode
                                     0: direct mirror 1: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_0_CB_INFRA_MSI_MIRROR_MODE_0_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_0_CB_INFRA_MSI_MIRROR_MODE_0_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_0[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_0_CB_INFRA_MSI_MIRROR_MODE_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_0 (0x74138000 + 0x4008)---

    CB_INFRA_MSI_MIRROR_STA_0[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_0_CB_INFRA_MSI_MIRROR_STA_0_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_0_CB_INFRA_MSI_MIRROR_STA_0_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_0[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_0_CB_INFRA_MSI_MIRROR_STA_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_0 (0x74138000 + 0x400C)---

    CB_INFRA_MSI_MIRROR_VAL_0[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_0_CB_INFRA_MSI_MIRROR_VAL_0_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_0_CB_INFRA_MSI_MIRROR_VAL_0_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_0[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_0_CB_INFRA_MSI_MIRROR_VAL_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_1 (0x74138000 + 0x4010)---

    CB_INFRA_MSI_MIRROR_EN_1[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_1_CB_INFRA_MSI_MIRROR_EN_1_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_1_CB_INFRA_MSI_MIRROR_EN_1_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_1[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_1_CB_INFRA_MSI_MIRROR_EN_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_1 (0x74138000 + 0x4014)---

    CB_INFRA_MSI_MIRROR_MODE_1[0] - (RW) msi mirror mode
                                     0: direct mirror 2: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_1_CB_INFRA_MSI_MIRROR_MODE_1_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_1_CB_INFRA_MSI_MIRROR_MODE_1_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_1[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_1_CB_INFRA_MSI_MIRROR_MODE_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_1 (0x74138000 + 0x4018)---

    CB_INFRA_MSI_MIRROR_STA_1[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_1_CB_INFRA_MSI_MIRROR_STA_1_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_1_CB_INFRA_MSI_MIRROR_STA_1_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_1[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_1_CB_INFRA_MSI_MIRROR_STA_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_1 (0x74138000 + 0x401C)---

    CB_INFRA_MSI_MIRROR_VAL_1[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_1_CB_INFRA_MSI_MIRROR_VAL_1_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_1_CB_INFRA_MSI_MIRROR_VAL_1_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_1[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_1_CB_INFRA_MSI_MIRROR_VAL_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_2 (0x74138000 + 0x4020)---

    CB_INFRA_MSI_MIRROR_EN_2[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_2_CB_INFRA_MSI_MIRROR_EN_2_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_2_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_2_CB_INFRA_MSI_MIRROR_EN_2_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_2[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_2_CB_INFRA_MSI_MIRROR_EN_2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_2 (0x74138000 + 0x4024)---

    CB_INFRA_MSI_MIRROR_MODE_2[0] - (RW) msi mirror mode
                                     0: direct mirror 2: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_2_CB_INFRA_MSI_MIRROR_MODE_2_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_2_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_2_CB_INFRA_MSI_MIRROR_MODE_2_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_2[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_2_CB_INFRA_MSI_MIRROR_MODE_2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_2 (0x74138000 + 0x4028)---

    CB_INFRA_MSI_MIRROR_STA_2[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_2_CB_INFRA_MSI_MIRROR_STA_2_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_2_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_2_CB_INFRA_MSI_MIRROR_STA_2_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_2[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_2_CB_INFRA_MSI_MIRROR_STA_2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_2 (0x74138000 + 0x402C)---

    CB_INFRA_MSI_MIRROR_VAL_2[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_2_CB_INFRA_MSI_MIRROR_VAL_2_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_2_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_2_CB_INFRA_MSI_MIRROR_VAL_2_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_2[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_2_CB_INFRA_MSI_MIRROR_VAL_2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_3 (0x74138000 + 0x4030)---

    CB_INFRA_MSI_MIRROR_EN_3[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_3_CB_INFRA_MSI_MIRROR_EN_3_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_3_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_3_CB_INFRA_MSI_MIRROR_EN_3_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_3[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_3_CB_INFRA_MSI_MIRROR_EN_3_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_3 (0x74138000 + 0x4034)---

    CB_INFRA_MSI_MIRROR_MODE_3[0] - (RW) msi mirror mode
                                     0: direct mirror 3: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_3_CB_INFRA_MSI_MIRROR_MODE_3_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_3_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_3_CB_INFRA_MSI_MIRROR_MODE_3_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_3[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_3_CB_INFRA_MSI_MIRROR_MODE_3_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_3 (0x74138000 + 0x4038)---

    CB_INFRA_MSI_MIRROR_STA_3[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_3_CB_INFRA_MSI_MIRROR_STA_3_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_3_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_3_CB_INFRA_MSI_MIRROR_STA_3_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_3[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_3_CB_INFRA_MSI_MIRROR_STA_3_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_3 (0x74138000 + 0x403C)---

    CB_INFRA_MSI_MIRROR_VAL_3[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_3_CB_INFRA_MSI_MIRROR_VAL_3_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_3_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_3_CB_INFRA_MSI_MIRROR_VAL_3_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_3[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_3_CB_INFRA_MSI_MIRROR_VAL_3_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_4 (0x74138000 + 0x4040)---

    CB_INFRA_MSI_MIRROR_EN_4[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_4_CB_INFRA_MSI_MIRROR_EN_4_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_4_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_4_CB_INFRA_MSI_MIRROR_EN_4_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_4[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_4_CB_INFRA_MSI_MIRROR_EN_4_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_4 (0x74138000 + 0x4044)---

    CB_INFRA_MSI_MIRROR_MODE_4[0] - (RW) msi mirror mode
                                     0: direct mirror 3: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_4_CB_INFRA_MSI_MIRROR_MODE_4_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_4_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_4_CB_INFRA_MSI_MIRROR_MODE_4_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_4[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_4_CB_INFRA_MSI_MIRROR_MODE_4_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_4 (0x74138000 + 0x4048)---

    CB_INFRA_MSI_MIRROR_STA_4[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_4_CB_INFRA_MSI_MIRROR_STA_4_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_4_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_4_CB_INFRA_MSI_MIRROR_STA_4_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_4[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_4_CB_INFRA_MSI_MIRROR_STA_4_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_4 (0x74138000 + 0x404C)---

    CB_INFRA_MSI_MIRROR_VAL_4[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_4_CB_INFRA_MSI_MIRROR_VAL_4_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_4_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_4_CB_INFRA_MSI_MIRROR_VAL_4_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_4[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_4_CB_INFRA_MSI_MIRROR_VAL_4_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_5 (0x74138000 + 0x4050)---

    CB_INFRA_MSI_MIRROR_EN_5[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_5_CB_INFRA_MSI_MIRROR_EN_5_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_5_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_5_CB_INFRA_MSI_MIRROR_EN_5_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_5[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_5_CB_INFRA_MSI_MIRROR_EN_5_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_5 (0x74138000 + 0x4054)---

    CB_INFRA_MSI_MIRROR_MODE_5[0] - (RW) msi mirror mode
                                     0: direct mirror 4: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_5_CB_INFRA_MSI_MIRROR_MODE_5_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_5_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_5_CB_INFRA_MSI_MIRROR_MODE_5_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_5[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_5_CB_INFRA_MSI_MIRROR_MODE_5_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_5 (0x74138000 + 0x4058)---

    CB_INFRA_MSI_MIRROR_STA_5[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_5_CB_INFRA_MSI_MIRROR_STA_5_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_5_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_5_CB_INFRA_MSI_MIRROR_STA_5_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_5[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_5_CB_INFRA_MSI_MIRROR_STA_5_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_5 (0x74138000 + 0x405C)---

    CB_INFRA_MSI_MIRROR_VAL_5[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_5_CB_INFRA_MSI_MIRROR_VAL_5_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_5_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_5_CB_INFRA_MSI_MIRROR_VAL_5_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_5[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_5_CB_INFRA_MSI_MIRROR_VAL_5_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_6 (0x74138000 + 0x4060)---

    CB_INFRA_MSI_MIRROR_EN_6[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_6_CB_INFRA_MSI_MIRROR_EN_6_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_6_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_6_CB_INFRA_MSI_MIRROR_EN_6_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_6[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_6_CB_INFRA_MSI_MIRROR_EN_6_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_6 (0x74138000 + 0x4064)---

    CB_INFRA_MSI_MIRROR_MODE_6[0] - (RW) msi mirror mode
                                     0: direct mirror 4: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_6_CB_INFRA_MSI_MIRROR_MODE_6_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_6_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_6_CB_INFRA_MSI_MIRROR_MODE_6_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_6[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_6_CB_INFRA_MSI_MIRROR_MODE_6_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_6 (0x74138000 + 0x4068)---

    CB_INFRA_MSI_MIRROR_STA_6[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_6_CB_INFRA_MSI_MIRROR_STA_6_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_6_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_6_CB_INFRA_MSI_MIRROR_STA_6_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_6[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_6_CB_INFRA_MSI_MIRROR_STA_6_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_6 (0x74138000 + 0x406C)---

    CB_INFRA_MSI_MIRROR_VAL_6[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_6_CB_INFRA_MSI_MIRROR_VAL_6_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_6_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_6_CB_INFRA_MSI_MIRROR_VAL_6_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_6[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_6_CB_INFRA_MSI_MIRROR_VAL_6_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_7 (0x74138000 + 0x4070)---

    CB_INFRA_MSI_MIRROR_EN_7[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_7_CB_INFRA_MSI_MIRROR_EN_7_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_7_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_7_CB_INFRA_MSI_MIRROR_EN_7_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_7[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_7_CB_INFRA_MSI_MIRROR_EN_7_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_7 (0x74138000 + 0x4074)---

    CB_INFRA_MSI_MIRROR_MODE_7[0] - (RW) msi mirror mode
                                     0: direct mirror 5: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_7_CB_INFRA_MSI_MIRROR_MODE_7_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_7_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_7_CB_INFRA_MSI_MIRROR_MODE_7_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_7[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_7_CB_INFRA_MSI_MIRROR_MODE_7_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_7 (0x74138000 + 0x4078)---

    CB_INFRA_MSI_MIRROR_STA_7[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_7_CB_INFRA_MSI_MIRROR_STA_7_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_7_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_7_CB_INFRA_MSI_MIRROR_STA_7_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_7[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_7_CB_INFRA_MSI_MIRROR_STA_7_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_7 (0x74138000 + 0x407C)---

    CB_INFRA_MSI_MIRROR_VAL_7[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_7_CB_INFRA_MSI_MIRROR_VAL_7_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_7_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_7_CB_INFRA_MSI_MIRROR_VAL_7_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_7[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_7_CB_INFRA_MSI_MIRROR_VAL_7_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_8 (0x74138000 + 0x4080)---

    CB_INFRA_MSI_MIRROR_EN_8[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_8_CB_INFRA_MSI_MIRROR_EN_8_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_8_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_8_CB_INFRA_MSI_MIRROR_EN_8_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_8[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_8_CB_INFRA_MSI_MIRROR_EN_8_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_8 (0x74138000 + 0x4084)---

    CB_INFRA_MSI_MIRROR_MODE_8[0] - (RW) msi mirror mode
                                     0: direct mirror 5: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_8_CB_INFRA_MSI_MIRROR_MODE_8_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_8_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_8_CB_INFRA_MSI_MIRROR_MODE_8_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_8[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_8_CB_INFRA_MSI_MIRROR_MODE_8_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_8 (0x74138000 + 0x4088)---

    CB_INFRA_MSI_MIRROR_STA_8[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_8_CB_INFRA_MSI_MIRROR_STA_8_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_8_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_8_CB_INFRA_MSI_MIRROR_STA_8_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_8[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_8_CB_INFRA_MSI_MIRROR_STA_8_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_8 (0x74138000 + 0x408C)---

    CB_INFRA_MSI_MIRROR_VAL_8[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_8_CB_INFRA_MSI_MIRROR_VAL_8_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_8_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_8_CB_INFRA_MSI_MIRROR_VAL_8_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_8[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_8_CB_INFRA_MSI_MIRROR_VAL_8_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_9 (0x74138000 + 0x4090)---

    CB_INFRA_MSI_MIRROR_EN_9[0]  - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_9_CB_INFRA_MSI_MIRROR_EN_9_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_9_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_9_CB_INFRA_MSI_MIRROR_EN_9_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_9[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_9_CB_INFRA_MSI_MIRROR_EN_9_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_9 (0x74138000 + 0x4094)---

    CB_INFRA_MSI_MIRROR_MODE_9[0] - (RW) msi mirror mode
                                     0: direct mirror 6: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_9_CB_INFRA_MSI_MIRROR_MODE_9_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_9_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_9_CB_INFRA_MSI_MIRROR_MODE_9_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_9[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_9_CB_INFRA_MSI_MIRROR_MODE_9_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_9 (0x74138000 + 0x4098)---

    CB_INFRA_MSI_MIRROR_STA_9[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_9_CB_INFRA_MSI_MIRROR_STA_9_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_9_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_9_CB_INFRA_MSI_MIRROR_STA_9_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_9[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_9_CB_INFRA_MSI_MIRROR_STA_9_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_9 (0x74138000 + 0x409C)---

    CB_INFRA_MSI_MIRROR_VAL_9[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_9_CB_INFRA_MSI_MIRROR_VAL_9_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_9_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_9_CB_INFRA_MSI_MIRROR_VAL_9_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_9[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_9_CB_INFRA_MSI_MIRROR_VAL_9_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_10 (0x74138000 + 0x40A0)---

    CB_INFRA_MSI_MIRROR_EN_10[0] - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_10_CB_INFRA_MSI_MIRROR_EN_10_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_10_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_10_CB_INFRA_MSI_MIRROR_EN_10_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_10[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_10_CB_INFRA_MSI_MIRROR_EN_10_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_10 (0x74138000 + 0x40A4)---

    CB_INFRA_MSI_MIRROR_MODE_10[0] - (RW) msi mirror mode
                                     0: direct mirror 6: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_10_CB_INFRA_MSI_MIRROR_MODE_10_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_10_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_10_CB_INFRA_MSI_MIRROR_MODE_10_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_10[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_10_CB_INFRA_MSI_MIRROR_MODE_10_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_10 (0x74138000 + 0x40A8)---

    CB_INFRA_MSI_MIRROR_STA_10[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_10_CB_INFRA_MSI_MIRROR_STA_10_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_10_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_10_CB_INFRA_MSI_MIRROR_STA_10_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_10[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_10_CB_INFRA_MSI_MIRROR_STA_10_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_10 (0x74138000 + 0x40AC)---

    CB_INFRA_MSI_MIRROR_VAL_10[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_10_CB_INFRA_MSI_MIRROR_VAL_10_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_10_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_10_CB_INFRA_MSI_MIRROR_VAL_10_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_10[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_10_CB_INFRA_MSI_MIRROR_VAL_10_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_11 (0x74138000 + 0x40B0)---

    CB_INFRA_MSI_MIRROR_EN_11[0] - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_11_CB_INFRA_MSI_MIRROR_EN_11_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_11_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_11_CB_INFRA_MSI_MIRROR_EN_11_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_11[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_11_CB_INFRA_MSI_MIRROR_EN_11_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_11 (0x74138000 + 0x40B4)---

    CB_INFRA_MSI_MIRROR_MODE_11[0] - (RW) msi mirror mode
                                     0: direct mirror 7: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_11_CB_INFRA_MSI_MIRROR_MODE_11_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_11_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_11_CB_INFRA_MSI_MIRROR_MODE_11_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_11[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_11_CB_INFRA_MSI_MIRROR_MODE_11_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_11 (0x74138000 + 0x40B8)---

    CB_INFRA_MSI_MIRROR_STA_11[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_11_CB_INFRA_MSI_MIRROR_STA_11_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_11_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_11_CB_INFRA_MSI_MIRROR_STA_11_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_11[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_11_CB_INFRA_MSI_MIRROR_STA_11_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_11 (0x74138000 + 0x40BC)---

    CB_INFRA_MSI_MIRROR_VAL_11[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_11_CB_INFRA_MSI_MIRROR_VAL_11_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_11_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_11_CB_INFRA_MSI_MIRROR_VAL_11_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_11[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_11_CB_INFRA_MSI_MIRROR_VAL_11_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_12 (0x74138000 + 0x40C0)---

    CB_INFRA_MSI_MIRROR_EN_12[0] - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_12_CB_INFRA_MSI_MIRROR_EN_12_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_12_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_12_CB_INFRA_MSI_MIRROR_EN_12_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_12[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_12_CB_INFRA_MSI_MIRROR_EN_12_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_12 (0x74138000 + 0x40C4)---

    CB_INFRA_MSI_MIRROR_MODE_12[0] - (RW) msi mirror mode
                                     0: direct mirror 7: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_12_CB_INFRA_MSI_MIRROR_MODE_12_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_12_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_12_CB_INFRA_MSI_MIRROR_MODE_12_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_12[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_12_CB_INFRA_MSI_MIRROR_MODE_12_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_12 (0x74138000 + 0x40C8)---

    CB_INFRA_MSI_MIRROR_STA_12[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_12_CB_INFRA_MSI_MIRROR_STA_12_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_12_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_12_CB_INFRA_MSI_MIRROR_STA_12_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_12[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_12_CB_INFRA_MSI_MIRROR_STA_12_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_12 (0x74138000 + 0x40CC)---

    CB_INFRA_MSI_MIRROR_VAL_12[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_12_CB_INFRA_MSI_MIRROR_VAL_12_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_12_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_12_CB_INFRA_MSI_MIRROR_VAL_12_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_12[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_12_CB_INFRA_MSI_MIRROR_VAL_12_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_13 (0x74138000 + 0x40D0)---

    CB_INFRA_MSI_MIRROR_EN_13[0] - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_13_CB_INFRA_MSI_MIRROR_EN_13_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_13_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_13_CB_INFRA_MSI_MIRROR_EN_13_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_13[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_13_CB_INFRA_MSI_MIRROR_EN_13_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_13 (0x74138000 + 0x40D4)---

    CB_INFRA_MSI_MIRROR_MODE_13[0] - (RW) msi mirror mode
                                     0: direct mirror 8: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_13_CB_INFRA_MSI_MIRROR_MODE_13_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_13_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_13_CB_INFRA_MSI_MIRROR_MODE_13_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_13[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_13_CB_INFRA_MSI_MIRROR_MODE_13_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_13 (0x74138000 + 0x40D8)---

    CB_INFRA_MSI_MIRROR_STA_13[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_13_CB_INFRA_MSI_MIRROR_STA_13_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_13_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_13_CB_INFRA_MSI_MIRROR_STA_13_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_13[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_13_CB_INFRA_MSI_MIRROR_STA_13_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_13 (0x74138000 + 0x40DC)---

    CB_INFRA_MSI_MIRROR_VAL_13[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_13_CB_INFRA_MSI_MIRROR_VAL_13_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_13_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_13_CB_INFRA_MSI_MIRROR_VAL_13_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_13[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_13_CB_INFRA_MSI_MIRROR_VAL_13_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_14 (0x74138000 + 0x40E0)---

    CB_INFRA_MSI_MIRROR_EN_14[0] - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_14_CB_INFRA_MSI_MIRROR_EN_14_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_14_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_14_CB_INFRA_MSI_MIRROR_EN_14_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_14[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_14_CB_INFRA_MSI_MIRROR_EN_14_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_14 (0x74138000 + 0x40E4)---

    CB_INFRA_MSI_MIRROR_MODE_14[0] - (RW) msi mirror mode
                                     0: direct mirror 8: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_14_CB_INFRA_MSI_MIRROR_MODE_14_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_14_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_14_CB_INFRA_MSI_MIRROR_MODE_14_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_14[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_14_CB_INFRA_MSI_MIRROR_MODE_14_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_14 (0x74138000 + 0x40E8)---

    CB_INFRA_MSI_MIRROR_STA_14[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_14_CB_INFRA_MSI_MIRROR_STA_14_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_14_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_14_CB_INFRA_MSI_MIRROR_STA_14_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_14[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_14_CB_INFRA_MSI_MIRROR_STA_14_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_14 (0x74138000 + 0x40EC)---

    CB_INFRA_MSI_MIRROR_VAL_14[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_14_CB_INFRA_MSI_MIRROR_VAL_14_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_14_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_14_CB_INFRA_MSI_MIRROR_VAL_14_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_14[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_14_CB_INFRA_MSI_MIRROR_VAL_14_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_EN_15 (0x74138000 + 0x40F0)---

    CB_INFRA_MSI_MIRROR_EN_15[0] - (RW) msi mirror enable
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_15_CB_INFRA_MSI_MIRROR_EN_15_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_15_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_15_CB_INFRA_MSI_MIRROR_EN_15_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_EN_15[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_EN_15_CB_INFRA_MSI_MIRROR_EN_15_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_MODE_15 (0x74138000 + 0x40F4)---

    CB_INFRA_MSI_MIRROR_MODE_15[0] - (RW) msi mirror mode
                                     0: direct mirror 9: only rising assert
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_15_CB_INFRA_MSI_MIRROR_MODE_15_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_15_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_15_CB_INFRA_MSI_MIRROR_MODE_15_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_MODE_15[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_MODE_15_CB_INFRA_MSI_MIRROR_MODE_15_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_STA_15 (0x74138000 + 0x40F8)---

    CB_INFRA_MSI_MIRROR_STA_15[0] - (W1C) status
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_15_CB_INFRA_MSI_MIRROR_STA_15_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_15_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_15_CB_INFRA_MSI_MIRROR_STA_15_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_STA_15[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_STA_15_CB_INFRA_MSI_MIRROR_STA_15_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MSI_MIRROR_VAL_15 (0x74138000 + 0x40FC)---

    CB_INFRA_MSI_MIRROR_VAL_15[0] - (W1C) msi value
    RESERVED1[31..1]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_15_CB_INFRA_MSI_MIRROR_VAL_15_ADDR CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_15_ADDR
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_15_CB_INFRA_MSI_MIRROR_VAL_15_MASK 0x00000001                // CB_INFRA_MSI_MIRROR_VAL_15[0]
#define CB_DMA_TOP_CB_INFRA_MSI_MIRROR_VAL_15_CB_INFRA_MSI_MIRROR_VAL_15_SHFT 0

/* =====================================================================================

  ---CB_INFRA_SYS_DBG_0 (0x74138000 + 0x5000)---

    CB_INFRA_SYS_DBG_0[31..0]    - (RO) debug signal 0

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_0_CB_INFRA_SYS_DBG_0_ADDR  CB_DMA_TOP_CB_INFRA_SYS_DBG_0_ADDR
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_0_CB_INFRA_SYS_DBG_0_MASK  0xFFFFFFFF                // CB_INFRA_SYS_DBG_0[31..0]
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_0_CB_INFRA_SYS_DBG_0_SHFT  0

/* =====================================================================================

  ---CB_INFRA_SYS_DBG_1 (0x74138000 + 0x5004)---

    CB_INFRA_SYS_DBG_1[31..0]    - (RO) debug signal 1

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_1_CB_INFRA_SYS_DBG_1_ADDR  CB_DMA_TOP_CB_INFRA_SYS_DBG_1_ADDR
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_1_CB_INFRA_SYS_DBG_1_MASK  0xFFFFFFFF                // CB_INFRA_SYS_DBG_1[31..0]
#define CB_DMA_TOP_CB_INFRA_SYS_DBG_1_CB_INFRA_SYS_DBG_1_SHFT  0

/* =====================================================================================

  ---CB_INFRA_MBU_RMP (0x74138000 + 0x5008)---

    CB_INFRA_MBU_RMP[9..0]       - (RW) cb_infra_mbu remapping reg
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_RMP_CB_INFRA_MBU_RMP_ADDR      CB_DMA_TOP_CB_INFRA_MBU_RMP_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_RMP_CB_INFRA_MBU_RMP_MASK      0x000003FF                // CB_INFRA_MBU_RMP[9..0]
#define CB_DMA_TOP_CB_INFRA_MBU_RMP_CB_INFRA_MBU_RMP_SHFT      0

/* =====================================================================================

  ---CB_INFRA_HW_LOG_STS (0x74138000 + 0x500C)---

    stop_log_hw[3..0]            - (RO)  xxx 
    cb_infra_slr[4]              - (RO)  xxx 
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_cb_infra_slr_ADDR       CB_DMA_TOP_CB_INFRA_HW_LOG_STS_ADDR
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_cb_infra_slr_MASK       0x00000010                // cb_infra_slr[4]
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_cb_infra_slr_SHFT       4
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_stop_log_hw_ADDR        CB_DMA_TOP_CB_INFRA_HW_LOG_STS_ADDR
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_stop_log_hw_MASK        0x0000000F                // stop_log_hw[3..0]
#define CB_DMA_TOP_CB_INFRA_HW_LOG_STS_stop_log_hw_SHFT        0

/* =====================================================================================

  ---CB_INFRA_HW_LOG_A2C_CMD_PTR (0x74138000 + 0x5010)---

    CB_INFRA_HW_LOG_A2C_CMD_PTR[4..0] - (RO)  xxx 
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_CMD_PTR_CB_INFRA_HW_LOG_A2C_CMD_PTR_ADDR CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_CMD_PTR_ADDR
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_CMD_PTR_CB_INFRA_HW_LOG_A2C_CMD_PTR_MASK 0x0000001F                // CB_INFRA_HW_LOG_A2C_CMD_PTR[4..0]
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_CMD_PTR_CB_INFRA_HW_LOG_A2C_CMD_PTR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_HW_LOG_A2C_DATA_PTR (0x74138000 + 0x5014)---

    CB_INFRA_HW_LOG_A2C_DATA_PTR[4..0] - (RO)  xxx 
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_DATA_PTR_CB_INFRA_HW_LOG_A2C_DATA_PTR_ADDR CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_DATA_PTR_ADDR
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_DATA_PTR_CB_INFRA_HW_LOG_A2C_DATA_PTR_MASK 0x0000001F                // CB_INFRA_HW_LOG_A2C_DATA_PTR[4..0]
#define CB_DMA_TOP_CB_INFRA_HW_LOG_A2C_DATA_PTR_CB_INFRA_HW_LOG_A2C_DATA_PTR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_HW_LOG_C2A_CMD_PTR (0x74138000 + 0x5018)---

    CB_INFRA_HW_LOG_C2A_CMD_PTR[4..0] - (RO)  xxx 
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_CMD_PTR_CB_INFRA_HW_LOG_C2A_CMD_PTR_ADDR CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_CMD_PTR_ADDR
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_CMD_PTR_CB_INFRA_HW_LOG_C2A_CMD_PTR_MASK 0x0000001F                // CB_INFRA_HW_LOG_C2A_CMD_PTR[4..0]
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_CMD_PTR_CB_INFRA_HW_LOG_C2A_CMD_PTR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_HW_LOG_C2A_DATA_PTR (0x74138000 + 0x501C)---

    CB_INFRA_HW_LOG_C2A_DATA_PTR[4..0] - (RO)  xxx 
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_DATA_PTR_CB_INFRA_HW_LOG_C2A_DATA_PTR_ADDR CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_DATA_PTR_ADDR
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_DATA_PTR_CB_INFRA_HW_LOG_C2A_DATA_PTR_MASK 0x0000001F                // CB_INFRA_HW_LOG_C2A_DATA_PTR[4..0]
#define CB_DMA_TOP_CB_INFRA_HW_LOG_C2A_DATA_PTR_CB_INFRA_HW_LOG_C2A_DATA_PTR_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FBA (0x74138000 + 0x5020)---

    rg_mbu_fetch_base_addr[15..0] - (RW)  xxx 
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FBA_rg_mbu_fetch_base_addr_ADDR CB_DMA_TOP_CB_INFRA_MBU_FBA_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FBA_rg_mbu_fetch_base_addr_MASK 0x0000FFFF                // rg_mbu_fetch_base_addr[15..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FBA_rg_mbu_fetch_base_addr_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_ARB_GRP_0 (0x74138000 + 0x5024)---

    CB_INFRA_MBU_ARB_GRP_0[31..0] - (RW)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_0_CB_INFRA_MBU_ARB_GRP_0_ADDR CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_0_CB_INFRA_MBU_ARB_GRP_0_MASK 0xFFFFFFFF                // CB_INFRA_MBU_ARB_GRP_0[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_0_CB_INFRA_MBU_ARB_GRP_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_ARB_GRP_1 (0x74138000 + 0x5028)---

    CB_INFRA_MBU_ARB_GRP_1[31..0] - (RW)  xxx 

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_1_CB_INFRA_MBU_ARB_GRP_1_ADDR CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_1_CB_INFRA_MBU_ARB_GRP_1_MASK 0xFFFFFFFF                // CB_INFRA_MBU_ARB_GRP_1[31..0]
#define CB_DMA_TOP_CB_INFRA_MBU_ARB_GRP_1_CB_INFRA_MBU_ARB_GRP_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_0 (0x74138000 + 0x6000)---

    CB_INFRA_MBU_FHADDR_0[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_0_CB_INFRA_MBU_FHADDR_0_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_0_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_0_CB_INFRA_MBU_FHADDR_0_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_0[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_0_CB_INFRA_MBU_FHADDR_0_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_1 (0x74138000 + 0x6004)---

    CB_INFRA_MBU_FHADDR_1[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_1_CB_INFRA_MBU_FHADDR_1_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_1_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_1_CB_INFRA_MBU_FHADDR_1_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_1[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_1_CB_INFRA_MBU_FHADDR_1_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_2 (0x74138000 + 0x6008)---

    CB_INFRA_MBU_FHADDR_2[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_2_CB_INFRA_MBU_FHADDR_2_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_2_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_2_CB_INFRA_MBU_FHADDR_2_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_2[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_2_CB_INFRA_MBU_FHADDR_2_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_3 (0x74138000 + 0x600C)---

    CB_INFRA_MBU_FHADDR_3[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_3_CB_INFRA_MBU_FHADDR_3_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_3_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_3_CB_INFRA_MBU_FHADDR_3_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_3[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_3_CB_INFRA_MBU_FHADDR_3_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_4 (0x74138000 + 0x6010)---

    CB_INFRA_MBU_FHADDR_4[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_4_CB_INFRA_MBU_FHADDR_4_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_4_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_4_CB_INFRA_MBU_FHADDR_4_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_4[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_4_CB_INFRA_MBU_FHADDR_4_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_5 (0x74138000 + 0x6014)---

    CB_INFRA_MBU_FHADDR_5[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_5_CB_INFRA_MBU_FHADDR_5_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_5_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_5_CB_INFRA_MBU_FHADDR_5_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_5[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_5_CB_INFRA_MBU_FHADDR_5_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_6 (0x74138000 + 0x6018)---

    CB_INFRA_MBU_FHADDR_6[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_6_CB_INFRA_MBU_FHADDR_6_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_6_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_6_CB_INFRA_MBU_FHADDR_6_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_6[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_6_CB_INFRA_MBU_FHADDR_6_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_7 (0x74138000 + 0x601C)---

    CB_INFRA_MBU_FHADDR_7[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_7_CB_INFRA_MBU_FHADDR_7_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_7_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_7_CB_INFRA_MBU_FHADDR_7_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_7[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_7_CB_INFRA_MBU_FHADDR_7_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_8 (0x74138000 + 0x6020)---

    CB_INFRA_MBU_FHADDR_8[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_8_CB_INFRA_MBU_FHADDR_8_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_8_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_8_CB_INFRA_MBU_FHADDR_8_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_8[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_8_CB_INFRA_MBU_FHADDR_8_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_9 (0x74138000 + 0x6024)---

    CB_INFRA_MBU_FHADDR_9[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_9_CB_INFRA_MBU_FHADDR_9_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_9_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_9_CB_INFRA_MBU_FHADDR_9_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_9[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_9_CB_INFRA_MBU_FHADDR_9_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_10 (0x74138000 + 0x6028)---

    CB_INFRA_MBU_FHADDR_10[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_10_CB_INFRA_MBU_FHADDR_10_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_10_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_10_CB_INFRA_MBU_FHADDR_10_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_10[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_10_CB_INFRA_MBU_FHADDR_10_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_11 (0x74138000 + 0x602C)---

    CB_INFRA_MBU_FHADDR_11[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_11_CB_INFRA_MBU_FHADDR_11_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_11_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_11_CB_INFRA_MBU_FHADDR_11_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_11[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_11_CB_INFRA_MBU_FHADDR_11_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_12 (0x74138000 + 0x6030)---

    CB_INFRA_MBU_FHADDR_12[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_12_CB_INFRA_MBU_FHADDR_12_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_12_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_12_CB_INFRA_MBU_FHADDR_12_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_12[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_12_CB_INFRA_MBU_FHADDR_12_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_13 (0x74138000 + 0x6034)---

    CB_INFRA_MBU_FHADDR_13[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_13_CB_INFRA_MBU_FHADDR_13_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_13_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_13_CB_INFRA_MBU_FHADDR_13_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_13[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_13_CB_INFRA_MBU_FHADDR_13_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_14 (0x74138000 + 0x6038)---

    CB_INFRA_MBU_FHADDR_14[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_14_CB_INFRA_MBU_FHADDR_14_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_14_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_14_CB_INFRA_MBU_FHADDR_14_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_14[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_14_CB_INFRA_MBU_FHADDR_14_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_15 (0x74138000 + 0x603C)---

    CB_INFRA_MBU_FHADDR_15[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_15_CB_INFRA_MBU_FHADDR_15_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_15_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_15_CB_INFRA_MBU_FHADDR_15_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_15[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_15_CB_INFRA_MBU_FHADDR_15_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_16 (0x74138000 + 0x6040)---

    CB_INFRA_MBU_FHADDR_16[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_16_CB_INFRA_MBU_FHADDR_16_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_16_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_16_CB_INFRA_MBU_FHADDR_16_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_16[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_16_CB_INFRA_MBU_FHADDR_16_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_17 (0x74138000 + 0x6044)---

    CB_INFRA_MBU_FHADDR_17[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_17_CB_INFRA_MBU_FHADDR_17_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_17_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_17_CB_INFRA_MBU_FHADDR_17_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_17[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_17_CB_INFRA_MBU_FHADDR_17_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_18 (0x74138000 + 0x6048)---

    CB_INFRA_MBU_FHADDR_18[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_18_CB_INFRA_MBU_FHADDR_18_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_18_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_18_CB_INFRA_MBU_FHADDR_18_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_18[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_18_CB_INFRA_MBU_FHADDR_18_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_19 (0x74138000 + 0x604C)---

    CB_INFRA_MBU_FHADDR_19[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_19_CB_INFRA_MBU_FHADDR_19_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_19_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_19_CB_INFRA_MBU_FHADDR_19_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_19[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_19_CB_INFRA_MBU_FHADDR_19_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_20 (0x74138000 + 0x6050)---

    CB_INFRA_MBU_FHADDR_20[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_20_CB_INFRA_MBU_FHADDR_20_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_20_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_20_CB_INFRA_MBU_FHADDR_20_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_20[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_20_CB_INFRA_MBU_FHADDR_20_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_21 (0x74138000 + 0x6054)---

    CB_INFRA_MBU_FHADDR_21[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_21_CB_INFRA_MBU_FHADDR_21_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_21_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_21_CB_INFRA_MBU_FHADDR_21_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_21[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_21_CB_INFRA_MBU_FHADDR_21_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_22 (0x74138000 + 0x6058)---

    CB_INFRA_MBU_FHADDR_22[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_22_CB_INFRA_MBU_FHADDR_22_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_22_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_22_CB_INFRA_MBU_FHADDR_22_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_22[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_22_CB_INFRA_MBU_FHADDR_22_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_23 (0x74138000 + 0x605C)---

    CB_INFRA_MBU_FHADDR_23[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_23_CB_INFRA_MBU_FHADDR_23_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_23_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_23_CB_INFRA_MBU_FHADDR_23_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_23[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_23_CB_INFRA_MBU_FHADDR_23_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_24 (0x74138000 + 0x6060)---

    CB_INFRA_MBU_FHADDR_24[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_24_CB_INFRA_MBU_FHADDR_24_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_24_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_24_CB_INFRA_MBU_FHADDR_24_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_24[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_24_CB_INFRA_MBU_FHADDR_24_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_25 (0x74138000 + 0x6064)---

    CB_INFRA_MBU_FHADDR_25[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_25_CB_INFRA_MBU_FHADDR_25_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_25_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_25_CB_INFRA_MBU_FHADDR_25_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_25[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_25_CB_INFRA_MBU_FHADDR_25_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_26 (0x74138000 + 0x6068)---

    CB_INFRA_MBU_FHADDR_26[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_26_CB_INFRA_MBU_FHADDR_26_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_26_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_26_CB_INFRA_MBU_FHADDR_26_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_26[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_26_CB_INFRA_MBU_FHADDR_26_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_27 (0x74138000 + 0x606C)---

    CB_INFRA_MBU_FHADDR_27[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_27_CB_INFRA_MBU_FHADDR_27_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_27_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_27_CB_INFRA_MBU_FHADDR_27_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_27[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_27_CB_INFRA_MBU_FHADDR_27_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_28 (0x74138000 + 0x6070)---

    CB_INFRA_MBU_FHADDR_28[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_28_CB_INFRA_MBU_FHADDR_28_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_28_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_28_CB_INFRA_MBU_FHADDR_28_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_28[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_28_CB_INFRA_MBU_FHADDR_28_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_29 (0x74138000 + 0x6074)---

    CB_INFRA_MBU_FHADDR_29[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_29_CB_INFRA_MBU_FHADDR_29_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_29_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_29_CB_INFRA_MBU_FHADDR_29_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_29[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_29_CB_INFRA_MBU_FHADDR_29_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_30 (0x74138000 + 0x6078)---

    CB_INFRA_MBU_FHADDR_30[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_30_CB_INFRA_MBU_FHADDR_30_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_30_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_30_CB_INFRA_MBU_FHADDR_30_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_30[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_30_CB_INFRA_MBU_FHADDR_30_SHFT 0

/* =====================================================================================

  ---CB_INFRA_MBU_FHADDR_31 (0x74138000 + 0x607C)---

    CB_INFRA_MBU_FHADDR_31[13..0] - (RW)  xxx 
    RESERVED14[31..14]           - (RO) Reserved bits

 =====================================================================================*/
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_31_CB_INFRA_MBU_FHADDR_31_ADDR CB_DMA_TOP_CB_INFRA_MBU_FHADDR_31_ADDR
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_31_CB_INFRA_MBU_FHADDR_31_MASK 0x00003FFF                // CB_INFRA_MBU_FHADDR_31[13..0]
#define CB_DMA_TOP_CB_INFRA_MBU_FHADDR_31_CB_INFRA_MBU_FHADDR_31_SHFT 0

#ifdef __cplusplus
}
#endif

#endif // __CB_DMA_TOP_REGS_H__
