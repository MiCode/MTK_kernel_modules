/* SPDX-License-Identifier: BSD-2-Clause */
/*
 * Copyright (c) 2021 MediaTek Inc.
 */

//[File]            : pcie_mac_ireg.h
//[Revision time]   : Fri Apr 19 11:33:55 2019
//[Description]     : This file is auto generated by CODA
//[Copyright]       : Copyright (C) 2019 Mediatek Incorportion. All rights reserved.

#ifndef __PCIE_MAC_IREG_REGS_H__
#define __PCIE_MAC_IREG_REGS_H__

#include "hal_common.h"

#ifdef __cplusplus
extern "C" {
#endif


//****************************************************************************
//
//                     PCIE_MAC_IREG CR Definitions                     
//
//****************************************************************************

#define PCIE_MAC_IREG_BASE                                     0x74030000

#define PCIE_MAC_IREG_BRIDGE_VER_ADDR                          (PCIE_MAC_IREG_BASE + 0x0000) // 0000
#define PCIE_MAC_IREG_BRIDGE_BUS_ADDR                          (PCIE_MAC_IREG_BASE + 0x0004) // 0004
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0008) // 0008
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR               (PCIE_MAC_IREG_BASE + 0x000C) // 000C
#define PCIE_MAC_IREG_PCIE_IF_CONF_ADDR                        (PCIE_MAC_IREG_BASE + 0x0010) // 0010
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR                     (PCIE_MAC_IREG_BASE + 0x0014) // 0014
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0018) // 0018
#define PCIE_MAC_IREG_HW_DATE_CODE_ADDR                        (PCIE_MAC_IREG_BASE + 0x001C) // 001C
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR                 (PCIE_MAC_IREG_BASE + 0x0020) // 0020
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR                  (PCIE_MAC_IREG_BASE + 0x0024) // 0024
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR                      (PCIE_MAC_IREG_BASE + 0x0028) // 0028
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_ADDR                  (PCIE_MAC_IREG_BASE + 0x002C) // 002C
#define PCIE_MAC_IREG_AXI_MST0_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0030) // 0030
#define PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0034) // 0034
#define PCIE_MAC_IREG_AXI_MST1_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0038) // 0038
#define PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x003C) // 003C
#define PCIE_MAC_IREG_AXI_MST2_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0040) // 0040
#define PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0044) // 0044
#define PCIE_MAC_IREG_AXI_MST3_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x0048) // 0048
#define PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR                       (PCIE_MAC_IREG_BASE + 0x004C) // 004C
#define PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0050) // 0050
#define PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0054) // 0054
#define PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0058) // 0058
#define PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x005C) // 005C
#define PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0060) // 0060
#define PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0064) // 0064
#define PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x0068) // 0068
#define PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR                      (PCIE_MAC_IREG_BASE + 0x006C) // 006C
#define PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR                        (PCIE_MAC_IREG_BASE + 0x0070) // 0070
#define PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR                        (PCIE_MAC_IREG_BASE + 0x0074) // 0074
#define PCIE_MAC_IREG_SW_TEST_IN_ADDR                          (PCIE_MAC_IREG_BASE + 0x0078) // 0078
#define PCIE_MAC_IREG_FPGA_SETTINGS_ADDR                       (PCIE_MAC_IREG_BASE + 0x007C) // 007C
#define PCIE_MAC_IREG_GEN_SETTINGS_ADDR                        (PCIE_MAC_IREG_BASE + 0x0080) // 0080
#define PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR                        (PCIE_MAC_IREG_BASE + 0x0084) // 0084
#define PCIE_MAC_IREG_PCIE_PIPE_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x0088) // 0088
#define PCIE_MAC_IREG_PCIE_PIPE_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x008C) // 008C
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0090) // 0090
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0094) // 0094
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0098) // 0098
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x009C) // 009C
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00A0) // 00A0
#define PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR                        (PCIE_MAC_IREG_BASE + 0x00A4) // 00A4
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x00A8) // 00A8
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00AC) // 00AC
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_ADDR                      (PCIE_MAC_IREG_BASE + 0x00B0) // 00B0
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x00B4) // 00B4
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x00B8) // 00B8
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_ADDR                    (PCIE_MAC_IREG_BASE + 0x00BC) // 00BC
#define PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR                        (PCIE_MAC_IREG_BASE + 0x00C0) // 00C0
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR                       (PCIE_MAC_IREG_BASE + 0x00C4) // 00C4
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR                       (PCIE_MAC_IREG_BASE + 0x00C8) // 00C8
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR                       (PCIE_MAC_IREG_BASE + 0x00CC) // 00CC
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR                    (PCIE_MAC_IREG_BASE + 0x00D0) // 00D0
#define PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR                        (PCIE_MAC_IREG_BASE + 0x00D4) // 00D4
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR                       (PCIE_MAC_IREG_BASE + 0x00D8) // 00D8
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR                       (PCIE_MAC_IREG_BASE + 0x00DC) // 00DC
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR                       (PCIE_MAC_IREG_BASE + 0x00E0) // 00E0
#define PCIE_MAC_IREG_PCIE_BAR_01_0_ADDR                       (PCIE_MAC_IREG_BASE + 0x00E4) // 00E4
#define PCIE_MAC_IREG_PCIE_BAR_01_1_ADDR                       (PCIE_MAC_IREG_BASE + 0x00E8) // 00E8
#define PCIE_MAC_IREG_PCIE_BAR_23_0_ADDR                       (PCIE_MAC_IREG_BASE + 0x00EC) // 00EC
#define PCIE_MAC_IREG_PCIE_BAR_23_1_ADDR                       (PCIE_MAC_IREG_BASE + 0x00F0) // 00F0
#define PCIE_MAC_IREG_PCIE_BAR_45_0_ADDR                       (PCIE_MAC_IREG_BASE + 0x00F4) // 00F4
#define PCIE_MAC_IREG_PCIE_BAR_45_1_ADDR                       (PCIE_MAC_IREG_BASE + 0x00F8) // 00F8
#define PCIE_MAC_IREG_PCIE_BAR_WIN_ADDR                        (PCIE_MAC_IREG_BASE + 0x00FC) // 00FC
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x0100) // 0100
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR                  (PCIE_MAC_IREG_BASE + 0x0104) // 0104
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR                  (PCIE_MAC_IREG_BASE + 0x0108) // 0108
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR                  (PCIE_MAC_IREG_BASE + 0x010C) // 010C
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR                  (PCIE_MAC_IREG_BASE + 0x0110) // 0110
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR                (PCIE_MAC_IREG_BASE + 0x0114) // 0114
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR                (PCIE_MAC_IREG_BASE + 0x0118) // 0118
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR                (PCIE_MAC_IREG_BASE + 0x011C) // 011C
#define PCIE_MAC_IREG_PCIE_SRIOV_0_ADDR                        (PCIE_MAC_IREG_BASE + 0x0120) // 0120
#define PCIE_MAC_IREG_PCIE_SRIOV_1_ADDR                        (PCIE_MAC_IREG_BASE + 0x0124) // 0124
#define PCIE_MAC_IREG_PCIE_SRIOV_2_ADDR                        (PCIE_MAC_IREG_BASE + 0x0128) // 0128
#define PCIE_MAC_IREG_PCIE_SRIOV_3_ADDR                        (PCIE_MAC_IREG_BASE + 0x012C) // 012C
#define PCIE_MAC_IREG_PCIE_SRIOV_4_ADDR                        (PCIE_MAC_IREG_BASE + 0x0130) // 0130
#define PCIE_MAC_IREG_PCIE_SRIOV_5_ADDR                        (PCIE_MAC_IREG_BASE + 0x0134) // 0134
#define PCIE_MAC_IREG_PCIE_SRIOV_6_ADDR                        (PCIE_MAC_IREG_BASE + 0x0138) // 0138
#define PCIE_MAC_IREG_PCIE_SRIOV_7_ADDR                        (PCIE_MAC_IREG_BASE + 0x013C) // 013C
#define PCIE_MAC_IREG_PCIE_CFGNUM_ADDR                         (PCIE_MAC_IREG_BASE + 0x0140) // 0140
#define PCIE_MAC_IREG_PCIE_BUSDEV_ADDR                         (PCIE_MAC_IREG_BASE + 0x0144) // 0144
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR                       (PCIE_MAC_IREG_BASE + 0x0148) // 0148
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR                    (PCIE_MAC_IREG_BASE + 0x014C) // 014C
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0150) // 0150
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR                    (PCIE_MAC_IREG_BASE + 0x0154) // 0154
#define PCIE_MAC_IREG_PCIE_PEX_DSN_ADDR                        (PCIE_MAC_IREG_BASE + 0x0158) // 0158
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR                      (PCIE_MAC_IREG_BASE + 0x015C) // 015C
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR                 (PCIE_MAC_IREG_BASE + 0x0160) // 0160
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x0164) // 0164
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x0168) // 0168
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_ADDR                      (PCIE_MAC_IREG_BASE + 0x016C) // 016C
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0170) // 0170
#define PCIE_MAC_IREG_PM_CONF_0_ADDR                           (PCIE_MAC_IREG_BASE + 0x0174) // 0174
#define PCIE_MAC_IREG_PM_CONF_1_ADDR                           (PCIE_MAC_IREG_BASE + 0x0178) // 0178
#define PCIE_MAC_IREG_PM_CONF_2_ADDR                           (PCIE_MAC_IREG_BASE + 0x017C) // 017C
#define PCIE_MAC_IREG_IMASK_LOCAL_ADDR                         (PCIE_MAC_IREG_BASE + 0x0180) // 0180
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR                       (PCIE_MAC_IREG_BASE + 0x0184) // 0184
#define PCIE_MAC_IREG_IMASK_HOST_ADDR                          (PCIE_MAC_IREG_BASE + 0x0188) // 0188
#define PCIE_MAC_IREG_ISTATUS_HOST_ADDR                        (PCIE_MAC_IREG_BASE + 0x018C) // 018C
#define PCIE_MAC_IREG_RC_MSI_EN_ADDR                           (PCIE_MAC_IREG_BASE + 0x0190) // 0190
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_ADDR                 (PCIE_MAC_IREG_BASE + 0x0194) // 0194
#define PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR                        (PCIE_MAC_IREG_BASE + 0x0198) // 0198
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_ADDR                     (PCIE_MAC_IREG_BASE + 0x019C) // 019C
#define PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR                      (PCIE_MAC_IREG_BASE + 0x01A0) // 01A0
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR                     (PCIE_MAC_IREG_BASE + 0x01A4) // 01A4
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR                    (PCIE_MAC_IREG_BASE + 0x01A8) // 01A8
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ADDR                   (PCIE_MAC_IREG_BASE + 0x01AC) // 01AC
#define PCIE_MAC_IREG_ISTATUS_DMA0_ADDR                        (PCIE_MAC_IREG_BASE + 0x01B0) // 01B0
#define PCIE_MAC_IREG_ISTATUS_DMA1_ADDR                        (PCIE_MAC_IREG_BASE + 0x01B4) // 01B4
#define PCIE_MAC_IREG_ISTATUS_DMA2_ADDR                        (PCIE_MAC_IREG_BASE + 0x01B8) // 01B8
#define PCIE_MAC_IREG_ISTATUS_DMA3_ADDR                        (PCIE_MAC_IREG_BASE + 0x01BC) // 01BC
#define PCIE_MAC_IREG_ISTATUS_DMA4_ADDR                        (PCIE_MAC_IREG_BASE + 0x01C0) // 01C0
#define PCIE_MAC_IREG_ISTATUS_DMA5_ADDR                        (PCIE_MAC_IREG_BASE + 0x01C4) // 01C4
#define PCIE_MAC_IREG_ISTATUS_DMA6_ADDR                        (PCIE_MAC_IREG_BASE + 0x01C8) // 01C8
#define PCIE_MAC_IREG_ISTATUS_DMA7_ADDR                        (PCIE_MAC_IREG_BASE + 0x01CC) // 01CC
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ADDR                 (PCIE_MAC_IREG_BASE + 0x01D0) // 01D0
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR                 (PCIE_MAC_IREG_BASE + 0x01D4) // 01D4
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ADDR                  (PCIE_MAC_IREG_BASE + 0x01D8) // 01D8
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ADDR                  (PCIE_MAC_IREG_BASE + 0x01DC) // 01DC
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ADDR                  (PCIE_MAC_IREG_BASE + 0x01E0) // 01E0
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ADDR                  (PCIE_MAC_IREG_BASE + 0x01E4) // 01E4
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ADDR                  (PCIE_MAC_IREG_BASE + 0x01E8) // 01E8
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ADDR                  (PCIE_MAC_IREG_BASE + 0x01EC) // 01EC
#define PCIE_MAC_IREG_IMASK_HOST_SET_ADDR                      (PCIE_MAC_IREG_BASE + 0x01F0) // 01F0
#define PCIE_MAC_IREG_IMASK_HOST_CLR_ADDR                      (PCIE_MAC_IREG_BASE + 0x01F4) // 01F4
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x01F8) // 01F8
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x01FC) // 01FC
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ADDR                   (PCIE_MAC_IREG_BASE + 0x0200) // 0200
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ADDR                   (PCIE_MAC_IREG_BASE + 0x0204) // 0204
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ADDR                   (PCIE_MAC_IREG_BASE + 0x0208) // 0208
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ADDR                   (PCIE_MAC_IREG_BASE + 0x020C) // 020C
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ADDR                   (PCIE_MAC_IREG_BASE + 0x0210) // 0210
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ADDR                   (PCIE_MAC_IREG_BASE + 0x0214) // 0214
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ADDR                   (PCIE_MAC_IREG_BASE + 0x0218) // 0218
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ADDR                   (PCIE_MAC_IREG_BASE + 0x021C) // 021C
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ADDR                   (PCIE_MAC_IREG_BASE + 0x0220) // 0220
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ADDR                   (PCIE_MAC_IREG_BASE + 0x0224) // 0224
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ADDR                   (PCIE_MAC_IREG_BASE + 0x0228) // 0228
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ADDR                   (PCIE_MAC_IREG_BASE + 0x022C) // 022C
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ADDR                   (PCIE_MAC_IREG_BASE + 0x0230) // 0230
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ADDR                   (PCIE_MAC_IREG_BASE + 0x0234) // 0234
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ADDR                   (PCIE_MAC_IREG_BASE + 0x0238) // 0238
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ADDR                   (PCIE_MAC_IREG_BASE + 0x023C) // 023C
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ADDR                   (PCIE_MAC_IREG_BASE + 0x0240) // 0240
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ADDR                   (PCIE_MAC_IREG_BASE + 0x0244) // 0244
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ADDR                   (PCIE_MAC_IREG_BASE + 0x0248) // 0248
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ADDR                   (PCIE_MAC_IREG_BASE + 0x024C) // 024C
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ADDR                   (PCIE_MAC_IREG_BASE + 0x0250) // 0250
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ADDR                   (PCIE_MAC_IREG_BASE + 0x0254) // 0254
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ADDR                   (PCIE_MAC_IREG_BASE + 0x0258) // 0258
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ADDR                   (PCIE_MAC_IREG_BASE + 0x025C) // 025C
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ADDR                   (PCIE_MAC_IREG_BASE + 0x0260) // 0260
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ADDR                   (PCIE_MAC_IREG_BASE + 0x0264) // 0264
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ADDR                   (PCIE_MAC_IREG_BASE + 0x0268) // 0268
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ADDR                   (PCIE_MAC_IREG_BASE + 0x026C) // 026C
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ADDR                   (PCIE_MAC_IREG_BASE + 0x0270) // 0270
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ADDR                   (PCIE_MAC_IREG_BASE + 0x0274) // 0274
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ADDR                   (PCIE_MAC_IREG_BASE + 0x0278) // 0278
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ADDR                   (PCIE_MAC_IREG_BASE + 0x027C) // 027C
#define PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR                  (PCIE_MAC_IREG_BASE + 0x0280) // 0280
#define PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR                  (PCIE_MAC_IREG_BASE + 0x0284) // 0284
#define PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR                  (PCIE_MAC_IREG_BASE + 0x0288) // 0288
#define PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR                  (PCIE_MAC_IREG_BASE + 0x028C) // 028C
#define PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR                  (PCIE_MAC_IREG_BASE + 0x0290) // 0290
#define PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR                  (PCIE_MAC_IREG_BASE + 0x0294) // 0294
#define PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR                  (PCIE_MAC_IREG_BASE + 0x0298) // 0298
#define PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR                  (PCIE_MAC_IREG_BASE + 0x029C) // 029C
#define PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR                  (PCIE_MAC_IREG_BASE + 0x02A0) // 02A0
#define PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR                  (PCIE_MAC_IREG_BASE + 0x02A4) // 02A4
#define PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR                 (PCIE_MAC_IREG_BASE + 0x02A8) // 02A8
#define PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR                 (PCIE_MAC_IREG_BASE + 0x02AC) // 02AC
#define PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR                 (PCIE_MAC_IREG_BASE + 0x02B0) // 02B0
#define PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR                 (PCIE_MAC_IREG_BASE + 0x02B4) // 02B4
#define PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR                 (PCIE_MAC_IREG_BASE + 0x02B8) // 02B8
#define PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR                 (PCIE_MAC_IREG_BASE + 0x02BC) // 02BC
#define PCIE_MAC_IREG_PRIORITY_RULES0_ADDR                     (PCIE_MAC_IREG_BASE + 0x02C0) // 02C0
#define PCIE_MAC_IREG_PRIORITY_RULES1_ADDR                     (PCIE_MAC_IREG_BASE + 0x02C4) // 02C4
#define PCIE_MAC_IREG_PRIORITY_RULES2_ADDR                     (PCIE_MAC_IREG_BASE + 0x02C8) // 02C8
#define PCIE_MAC_IREG_PRIORITY_RULES3_ADDR                     (PCIE_MAC_IREG_BASE + 0x02CC) // 02CC
#define PCIE_MAC_IREG_PRIORITY_RULES4_ADDR                     (PCIE_MAC_IREG_BASE + 0x02D0) // 02D0
#define PCIE_MAC_IREG_PRIORITY_RULES5_ADDR                     (PCIE_MAC_IREG_BASE + 0x02D4) // 02D4
#define PCIE_MAC_IREG_PRIORITY_RULES6_ADDR                     (PCIE_MAC_IREG_BASE + 0x02D8) // 02D8
#define PCIE_MAC_IREG_PRIORITY_RULES7_ADDR                     (PCIE_MAC_IREG_BASE + 0x02DC) // 02DC
#define PCIE_MAC_IREG_PRIORITY_RULES8_ADDR                     (PCIE_MAC_IREG_BASE + 0x02E0) // 02E0
#define PCIE_MAC_IREG_PRIORITY_RULES9_ADDR                     (PCIE_MAC_IREG_BASE + 0x02E4) // 02E4
#define PCIE_MAC_IREG_PRIORITY_RULES10_ADDR                    (PCIE_MAC_IREG_BASE + 0x02E8) // 02E8
#define PCIE_MAC_IREG_PRIORITY_RULES11_ADDR                    (PCIE_MAC_IREG_BASE + 0x02EC) // 02EC
#define PCIE_MAC_IREG_PRIORITY_RULES12_ADDR                    (PCIE_MAC_IREG_BASE + 0x02F0) // 02F0
#define PCIE_MAC_IREG_PRIORITY_RULES13_ADDR                    (PCIE_MAC_IREG_BASE + 0x02F4) // 02F4
#define PCIE_MAC_IREG_PRIORITY_RULES14_ADDR                    (PCIE_MAC_IREG_BASE + 0x02F8) // 02F8
#define PCIE_MAC_IREG_PRIORITY_RULES15_ADDR                    (PCIE_MAC_IREG_BASE + 0x02FC) // 02FC
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR                     (PCIE_MAC_IREG_BASE + 0x0300) // 0300
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR                 (PCIE_MAC_IREG_BASE + 0x0304) // 0304
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_ADDR                  (PCIE_MAC_IREG_BASE + 0x0308) // 0308
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_ADDR                  (PCIE_MAC_IREG_BASE + 0x030C) // 030C
#define PCIE_MAC_IREG_ORDRULES_DIS_ADDR                        (PCIE_MAC_IREG_BASE + 0x0320) // 0320
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_ADDR                    (PCIE_MAC_IREG_BASE + 0x0324) // 0324
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_ADDR                     (PCIE_MAC_IREG_BASE + 0x0328) // 0328
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_ADDR                    (PCIE_MAC_IREG_BASE + 0x032C) // 032C
#define PCIE_MAC_IREG_ECO_SPACE_0_ADDR                         (PCIE_MAC_IREG_BASE + 0x0330) // 0330
#define PCIE_MAC_IREG_ECO_SPACE_1_ADDR                         (PCIE_MAC_IREG_BASE + 0x0334) // 0334
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR                  (PCIE_MAC_IREG_BASE + 0x0338) // 0338
#define PCIE_MAC_IREG_PHYMAC_CFG_ADDR                          (PCIE_MAC_IREG_BASE + 0x033C) // 033C
#define PCIE_MAC_IREG_WCPL_TIMEOUT_ADDR                        (PCIE_MAC_IREG_BASE + 0x0340) // 0340
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ADDR                     (PCIE_MAC_IREG_BASE + 0x0344) // 0344
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR                      (PCIE_MAC_IREG_BASE + 0x0348) // 0348
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_ADDR                    (PCIE_MAC_IREG_BASE + 0x0x34C) // 034C
#define PCIE_MAC_IREG_PCIE_LMR_0_ADDR                          (PCIE_MAC_IREG_BASE + 0x0350) // 0350
#define PCIE_MAC_IREG_PCIE_LMR_1_ADDR                          (PCIE_MAC_IREG_BASE + 0x0354) // 0354
#define PCIE_MAC_IREG_PCIE_LMR_2_ADDR                          (PCIE_MAC_IREG_BASE + 0x0358) // 0358
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR                     (PCIE_MAC_IREG_BASE + 0x035C) // 035C
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR               (PCIE_MAC_IREG_BASE + 0x0360) // 0360
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR               (PCIE_MAC_IREG_BASE + 0x0364) // 0364
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR              (PCIE_MAC_IREG_BASE + 0x0368) // 0368
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR             (PCIE_MAC_IREG_BASE + 0x036C) // 036C
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x0380) // 0380
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x0384) // 0384
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x0388) // 0388
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x038C) // 038C
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x0390) // 0390
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x0394) // 0394
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x0398) // 0398
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x039C) // 039C
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x03A0) // 03A0
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x03A4) // 03A4
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x03A8) // 03A8
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x03AC) // 03AC
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_ADDR                 (PCIE_MAC_IREG_BASE + 0x03B0) // 03B0
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_ADDR                 (PCIE_MAC_IREG_BASE + 0x03B4) // 03B4
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_ADDR                 (PCIE_MAC_IREG_BASE + 0x03B8) // 03B8
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_ADDR                 (PCIE_MAC_IREG_BASE + 0x03BC) // 03BC
#define PCIE_MAC_IREG_PCIE_DUMMY_0_ADDR                        (PCIE_MAC_IREG_BASE + 0x03C0) // 03C0
#define PCIE_MAC_IREG_PCIE_DUMMY_1_ADDR                        (PCIE_MAC_IREG_BASE + 0x03C4) // 03C4
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_ADDR                    (PCIE_MAC_IREG_BASE + 0x03C8) // 03C8
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_ADDR                    (PCIE_MAC_IREG_BASE + 0x03CC) // 03CC
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR                  (PCIE_MAC_IREG_BASE + 0x03D0) // 03D0
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR                 (PCIE_MAC_IREG_BASE + 0x03D4) // 03D4
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR                 (PCIE_MAC_IREG_BASE + 0x03D8) // 03D8
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR                 (PCIE_MAC_IREG_BASE + 0x03DC) // 03DC
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_ADDR                    (PCIE_MAC_IREG_BASE + 0x03E0) // 03E0
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ADDR                    (PCIE_MAC_IREG_BASE + 0x03E4) // 03E4
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_ADDR           (PCIE_MAC_IREG_BASE + 0x03F0) // 03F0
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR           (PCIE_MAC_IREG_BASE + 0x03F4) // 03F4
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_ADDR           (PCIE_MAC_IREG_BASE + 0x03F8) // 03F8
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_ADDR           (PCIE_MAC_IREG_BASE + 0x03FC) // 03FC
#define PCIE_MAC_IREG_DMA0_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0400) // 0400
#define PCIE_MAC_IREG_DMA0_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0404) // 0404
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0408) // 0408
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x040C) // 040C
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0410) // 0410
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0414) // 0414
#define PCIE_MAC_IREG_DMA0_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0418) // 0418
#define PCIE_MAC_IREG_DMA0_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x041C) // 041C
#define PCIE_MAC_IREG_DMA0_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0420) // 0420
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0424) // 0424
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0428) // 0428
#define PCIE_MAC_IREG_DMA1_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0440) // 0440
#define PCIE_MAC_IREG_DMA1_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0444) // 0444
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0448) // 0448
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x044C) // 044C
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0450) // 0450
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0454) // 0454
#define PCIE_MAC_IREG_DMA1_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0458) // 0458
#define PCIE_MAC_IREG_DMA1_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x045C) // 045C
#define PCIE_MAC_IREG_DMA1_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0460) // 0460
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0464) // 0464
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0468) // 0468
#define PCIE_MAC_IREG_DMA2_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0480) // 0480
#define PCIE_MAC_IREG_DMA2_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0484) // 0484
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0488) // 0488
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x048C) // 048C
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0490) // 0490
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0494) // 0494
#define PCIE_MAC_IREG_DMA2_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0498) // 0498
#define PCIE_MAC_IREG_DMA2_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x049C) // 049C
#define PCIE_MAC_IREG_DMA2_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x04A0) // 04A0
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x04A4) // 04A4
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x04A8) // 04A8
#define PCIE_MAC_IREG_DMA3_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x04C0) // 04C0
#define PCIE_MAC_IREG_DMA3_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x04C4) // 04C4
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x04C8) // 04C8
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x04CC) // 04CC
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x04D0) // 04D0
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x04D4) // 04D4
#define PCIE_MAC_IREG_DMA3_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x04D8) // 04D8
#define PCIE_MAC_IREG_DMA3_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x04DC) // 04DC
#define PCIE_MAC_IREG_DMA3_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x04E0) // 04E0
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x04E4) // 04E4
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x04E8) // 04E8
#define PCIE_MAC_IREG_DMA4_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0500) // 0500
#define PCIE_MAC_IREG_DMA4_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0504) // 0504
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0508) // 0508
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x050C) // 050C
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0510) // 0510
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0514) // 0514
#define PCIE_MAC_IREG_DMA4_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0518) // 0518
#define PCIE_MAC_IREG_DMA4_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x051C) // 051C
#define PCIE_MAC_IREG_DMA4_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0520) // 0520
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0524) // 0524
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0528) // 0528
#define PCIE_MAC_IREG_DMA5_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0540) // 0540
#define PCIE_MAC_IREG_DMA5_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0544) // 0544
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0548) // 0548
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x054C) // 054C
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0550) // 0550
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0554) // 0554
#define PCIE_MAC_IREG_DMA5_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0558) // 0558
#define PCIE_MAC_IREG_DMA5_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x055C) // 055C
#define PCIE_MAC_IREG_DMA5_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x0560) // 0560
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x0564) // 0564
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x0568) // 0568
#define PCIE_MAC_IREG_DMA6_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x0580) // 0580
#define PCIE_MAC_IREG_DMA6_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x0584) // 0584
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x0588) // 0588
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x058C) // 058C
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0590) // 0590
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0594) // 0594
#define PCIE_MAC_IREG_DMA6_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x0598) // 0598
#define PCIE_MAC_IREG_DMA6_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x059C) // 059C
#define PCIE_MAC_IREG_DMA6_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x05A0) // 05A0
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x05A4) // 05A4
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x05A8) // 05A8
#define PCIE_MAC_IREG_DMA7_SRCPARAM_ADDR                       (PCIE_MAC_IREG_BASE + 0x05C0) // 05C0
#define PCIE_MAC_IREG_DMA7_DESTPARAM_ADDR                      (PCIE_MAC_IREG_BASE + 0x05C4) // 05C4
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_ADDR                      (PCIE_MAC_IREG_BASE + 0x05C8) // 05C8
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_ADDR                      (PCIE_MAC_IREG_BASE + 0x05CC) // 05CC
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x05D0) // 05D0
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x05D4) // 05D4
#define PCIE_MAC_IREG_DMA7_LENGTH_ADDR                         (PCIE_MAC_IREG_BASE + 0x05D8) // 05D8
#define PCIE_MAC_IREG_DMA7_CONTROL_ADDR                        (PCIE_MAC_IREG_BASE + 0x05DC) // 05DC
#define PCIE_MAC_IREG_DMA7_STATUS_ADDR                         (PCIE_MAC_IREG_BASE + 0x05E0) // 05E0
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_ADDR                     (PCIE_MAC_IREG_BASE + 0x05E4) // 05E4
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR                   (PCIE_MAC_IREG_BASE + 0x05E8) // 05E8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0600) // 0600
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0604) // 0604
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0608) // 0608
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x060C) // 060C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0610) // 0610
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0618) // 0618
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x061C) // 061C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0620) // 0620
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0624) // 0624
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0628) // 0628
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x062C) // 062C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0630) // 0630
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0638) // 0638
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x063C) // 063C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0640) // 0640
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0644) // 0644
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0648) // 0648
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x064C) // 064C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0650) // 0650
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0658) // 0658
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x065C) // 065C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0660) // 0660
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0664) // 0664
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0668) // 0668
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x066C) // 066C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0670) // 0670
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0678) // 0678
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x067C) // 067C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0680) // 0680
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0684) // 0684
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0688) // 0688
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x068C) // 068C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0690) // 0690
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0698) // 0698
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x069C) // 069C
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x06A0) // 06A0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x06A4) // 06A4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06A8) // 06A8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06AC) // 06AC
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x06B0) // 06B0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06B8) // 06B8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06BC) // 06BC
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x06C0) // 06C0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x06C4) // 06C4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06C8) // 06C8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06CC) // 06CC
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x06D0) // 06D0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06D8) // 06D8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06DC) // 06DC
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x06E0) // 06E0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x06E4) // 06E4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06E8) // 06E8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06EC) // 06EC
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x06F0) // 06F0
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06F8) // 06F8
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x06FC) // 06FC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0700) // 0700
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0704) // 0704
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0708) // 0708
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x070C) // 070C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0710) // 0710
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0718) // 0718
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x071C) // 071C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0720) // 0720
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0724) // 0724
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0728) // 0728
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x072C) // 072C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0730) // 0730
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0738) // 0738
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x073C) // 073C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0740) // 0740
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0744) // 0744
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0748) // 0748
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x074C) // 074C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0750) // 0750
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0758) // 0758
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x075C) // 075C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0760) // 0760
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0764) // 0764
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0768) // 0768
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x076C) // 076C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0770) // 0770
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0778) // 0778
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x077C) // 077C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0780) // 0780
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0784) // 0784
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0788) // 0788
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x078C) // 078C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x0660) // 0660
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x0668) // 0668
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x066C) // 066C
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x07A0) // 07A0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x07A4) // 07A4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07A8) // 07A8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07AC) // 07AC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x07B0) // 07B0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07B8) // 07B8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07BC) // 07BC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x07C0) // 07C0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x07C4) // 07C4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07C8) // 07C8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07CC) // 07CC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x07D0) // 07D0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07D8) // 07D8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07DC) // 07DC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x07E0) // 07E0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x07E4) // 07E4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07E8) // 07E8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07EC) // 07EC
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_ADDR         (PCIE_MAC_IREG_BASE + 0x07F0) // 07F0
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07F8) // 07F8
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_ADDR      (PCIE_MAC_IREG_BASE + 0x07FC) // 07FC
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0800) // 0800
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0804) // 0804
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0808) // 0808
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x080C) // 080C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0810) // 0810
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0818) // 0818
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x081C) // 081C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0820) // 0820
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0824) // 0824
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0828) // 0828
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x082C) // 082C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0830) // 0830
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0838) // 0838
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x083C) // 083C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0840) // 0840
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0844) // 0844
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0848) // 0848
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x084C) // 084C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0850) // 0850
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0858) // 0858
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x085C) // 085C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0860) // 0860
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0864) // 0864
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0868) // 0868
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x086C) // 086C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0870) // 0870
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0878) // 0878
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x087C) // 087C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0880) // 0880
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0884) // 0884
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0888) // 0888
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x088C) // 088C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0890) // 0890
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0898) // 0898
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x089C) // 089C
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x08A0) // 08A0
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x08A4) // 08A4
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08A8) // 08A8
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08AC) // 08AC
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x08B0) // 08B0
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08B8) // 08B8
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08BC) // 08BC
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x08C0) // 08C0
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x08C4) // 08C4
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08C8) // 08C8
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08CC) // 08CC
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x08D0) // 08D0
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08D8) // 08D8
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08DC) // 08DC
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x08E0) // 08E0
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x08E4) // 08E4
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08E8) // 08E8
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08EC) // 08EC
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x08F0) // 08F0
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08F8) // 08F8
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x08FC) // 08FC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0900) // 0900
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0904) // 0904
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0908) // 0908
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x090C) // 090C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0910) // 0910
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0918) // 0918
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x091C) // 091C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0920) // 0920
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0924) // 0924
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0928) // 0928
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x092C) // 092C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0930) // 0930
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0938) // 0938
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x093C) // 093C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0940) // 0940
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0944) // 0944
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0948) // 0948
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x094C) // 094C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0950) // 0950
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0958) // 0958
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x095C) // 095C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0960) // 0960
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0964) // 0964
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0968) // 0968
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x096C) // 096C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0970) // 0970
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0978) // 0978
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x097C) // 097C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0980) // 0980
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0984) // 0984
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0988) // 0988
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x098C) // 098C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0990) // 0990
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0998) // 0998
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x099C) // 099C
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x09A0) // 09A0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x09A4) // 09A4
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09A8) // 09A8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09AC) // 09AC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x09B0) // 09B0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09B8) // 09B8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09BC) // 09BC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x09C0) // 09C0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x09C4) // 09C4
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09C8) // 09C8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09CC) // 09CC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x09D0) // 09D0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09D8) // 09D8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09DC) // 09DC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x09E0) // 09E0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x09E4) // 09E4
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09E8) // 09E8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09EC) // 09EC
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x09F0) // 09F0
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09F8) // 09F8
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x09FC) // 09FC
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A00) // 0A00
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A04) // 0A04
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A08) // 0A08
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A0C) // 0A0C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A10) // 0A10
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A18) // 0A18
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A1C) // 0A1C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A20) // 0A20
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A24) // 0A24
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A28) // 0A28
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A2C) // 0A2C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A30) // 0A30
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A38) // 0A38
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A3C) // 0A3C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A40) // 0A40
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A44) // 0A44
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A48) // 0A48
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A4C) // 0A4C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A50) // 0A50
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A58) // 0A58
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A5C) // 0A5C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A60) // 0A60
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A64) // 0A64
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A68) // 0A68
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A6C) // 0A6C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A70) // 0A70
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A78) // 0A78
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A7C) // 0A7C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0A80) // 0A80
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0A84) // 0A84
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A88) // 0A88
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A8C) // 0A8C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0A90) // 0A90
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A98) // 0A98
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0A9C) // 0A9C
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0AA0) // 0AA0
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0AA4) // 0AA4
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AA8) // 0AA8
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AAC) // 0AAC
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0AB0) // 0AB0
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AB8) // 0AB8
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0ABC) // 0ABC
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0AC0) // 0AC0
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0AC4) // 0AC4
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AC8) // 0AC8
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0ACC) // 0ACC
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0AD0) // 0AD0
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AD8) // 0AD8
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0ADC) // 0ADC
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0AE0) // 0AE0
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0AE4) // 0AE4
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AE8) // 0AE8
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AEC) // 0AEC
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0AF0) // 0AF0
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AF8) // 0AF8
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0AFC) // 0AFC
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B00) // 0B00
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B04) // 0B04
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B08) // 0B08
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B0C) // 0B0C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B10) // 0B10
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B18) // 0B18
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B1C) // 0B1C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B20) // 0B20
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B24) // 0B24
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B28) // 0B28
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B2C) // 0B2C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B30) // 0B30
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B38) // 0B38
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B3C) // 0B3C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B40) // 0B40
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B44) // 0B44
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B48) // 0B48
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B4C) // 0B4C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B50) // 0B50
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B58) // 0B58
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B5C) // 0B5C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B60) // 0B60
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B64) // 0B64
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B68) // 0B68
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B6C) // 0B6C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B70) // 0B70
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B78) // 0B78
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B7C) // 0B7C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0B80) // 0B80
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0B84) // 0B84
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B88) // 0B88
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B8C) // 0B8C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0B90) // 0B90
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B98) // 0B98
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0B9C) // 0B9C
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0BA0) // 0BA0
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0BA4) // 0BA4
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BA8) // 0BA8
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BAC) // 0BAC
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0BB0) // 0BB0
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BB8) // 0BB8
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BBC) // 0BBC
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0BC0) // 0BC0
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0BC4) // 0BC4
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BC8) // 0BC8
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BCC) // 0BCC
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0BD0) // 0BD0
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BD8) // 0BD8
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BDC) // 0BDC
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR (PCIE_MAC_IREG_BASE + 0x0BE0) // 0BE0
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_ADDR        (PCIE_MAC_IREG_BASE + 0x0BE4) // 0BE4
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BE8) // 0BE8
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BEC) // 0BEC
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_ADDR          (PCIE_MAC_IREG_BASE + 0x0BF0) // 0BF0
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BF8) // 0BF8
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_ADDR       (PCIE_MAC_IREG_BASE + 0x0BFC) // 0BFC
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C00) // 0C00
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C04) // 0C04
#define PCIE_MAC_IREG_IMASK_MSI_F0_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C08) // 0C08
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F0_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C0C) // 0C0C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C10) // 0C10
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C14) // 0C14
#define PCIE_MAC_IREG_IMASK_MSI_F1_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C18) // 0C18
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F1_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C1C) // 0C1C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C20) // 0C20
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C24) // 0C24
#define PCIE_MAC_IREG_IMASK_MSI_F2_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C28) // 0C28
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F2_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C2C) // 0C2C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C30) // 0C30
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C34) // 0C34
#define PCIE_MAC_IREG_IMASK_MSI_F3_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C38) // 0C38
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F3_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C3C) // 0C3C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C40) // 0C40
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C44) // 0C44
#define PCIE_MAC_IREG_IMASK_MSI_F4_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C48) // 0C48
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F4_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C4C) // 0C4C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C50) // 0C50
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C54) // 0C54
#define PCIE_MAC_IREG_IMASK_MSI_F5_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C58) // 0C58
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F5_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C5C) // 0C5C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C60) // 0C60
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C64) // 0C64
#define PCIE_MAC_IREG_IMASK_MSI_F6_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C68) // 0C68
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F6_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C6C) // 0C6C
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C70) // 0C70
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ADDR                      (PCIE_MAC_IREG_BASE + 0x0C74) // 0C74
#define PCIE_MAC_IREG_IMASK_MSI_F7_ADDR                        (PCIE_MAC_IREG_BASE + 0x0C78) // 0C78
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F7_ADDR                    (PCIE_MAC_IREG_BASE + 0x0C7C) // 0C7C
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C80) // 0C80
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C84) // 0C84
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C88) // 0C88
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C8C) // 0C8C
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C90) // 0C90
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C94) // 0C94
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C98) // 0C98
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_ADDR                     (PCIE_MAC_IREG_BASE + 0x0C9C) // 0C9C
#define PCIE_MAC_IREG_PCIE_VC_CAP_ADDR                         (PCIE_MAC_IREG_BASE + 0x0CA0) // 0CA0
#define PCIE_MAC_IREG_PCIE_VC_CAP2_ADDR                        (PCIE_MAC_IREG_BASE + 0x0CA4) // 0CA4
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CA8) // 0CA8
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CAC) // 0CAC
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CB0) // 0CB0
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CB4) // 0CB4
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CB8) // 0CB8
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CBC) // 0CBC
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CC0) // 0CC0
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CC4) // 0CC4
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CC8) // 0CC8
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CCC) // 0CCC
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CD0) // 0CD0
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CD4) // 0CD4
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CD8) // 0CD8
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR                     (PCIE_MAC_IREG_BASE + 0x0CDC) // 0CDC
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_ADDR             (PCIE_MAC_IREG_BASE + 0x0CE0) // 0CE0
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_ADDR             (PCIE_MAC_IREG_BASE + 0x0CE4) // 0CE4
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_ADDR             (PCIE_MAC_IREG_BASE + 0x0CE8) // 0CE8
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_ADDR             (PCIE_MAC_IREG_BASE + 0x0CEC) // 0CEC
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_ADDR             (PCIE_MAC_IREG_BASE + 0x0CF0) // 0CF0
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_ADDR             (PCIE_MAC_IREG_BASE + 0x0CF4) // 0CF4
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_ADDR             (PCIE_MAC_IREG_BASE + 0x0CF8) // 0CF8
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_ADDR             (PCIE_MAC_IREG_BASE + 0x0CFC) // 0CFC
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D00) // 0D00
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D04) // 0D04
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D08) // 0D08
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D0C) // 0D0C
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D10) // 0D10
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D14) // 0D14
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D18) // 0D18
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_ADDR                  (PCIE_MAC_IREG_BASE + 0x0D1C) // 0D1C
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR            (PCIE_MAC_IREG_BASE + 0x0D20) // 0D20
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_ADDR            (PCIE_MAC_IREG_BASE + 0x0D24) // 0D24
#define PCIE_MAC_IREG_RSVD_D28_ADDR                            (PCIE_MAC_IREG_BASE + 0x0D28) // 0D28
#define PCIE_MAC_IREG_RSVD_D2C_ADDR                            (PCIE_MAC_IREG_BASE + 0x0D2C) // 0D2C
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR                    (PCIE_MAC_IREG_BASE + 0x0D30) // 0D30
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR                    (PCIE_MAC_IREG_BASE + 0x0D34) // 0D34
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_ADDR              (PCIE_MAC_IREG_BASE + 0x0D38) // 0D38
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR              (PCIE_MAC_IREG_BASE + 0x0D3C) // 0D3C
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D40) // 0D40
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D44) // 0D44
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D48) // 0D48
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D4C) // 0D4C
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D50) // 0D50
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D54) // 0D54
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D58) // 0D58
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR                 (PCIE_MAC_IREG_BASE + 0x0D5C) // 0D5C




/* =====================================================================================

  ---BRIDGE_VER (0x74030000 + 0x0000)---

    VERSION[11..0]               - (RO) Provides the Bridge IP Core version; 
                                     for example, 0x123 indicates version 1.2.3 of the Core.
    PRODUCT_ID[23..12]           - (RO) Provides the Bridge IP Product ID, equal to 0x511
    DMA_NUM[27..24]              - (RO) Indicates the number of DMA Engines implemented in the Core. 
                                     Supported values are between 0x0 and 0x8.
    RSVD1[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_BRIDGE_VER_RSVD1_ADDR                    PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_RSVD1_MASK                    0xF0000000                // RSVD1[31..28]
#define PCIE_MAC_IREG_BRIDGE_VER_RSVD1_SHFT                    28
#define PCIE_MAC_IREG_BRIDGE_VER_DMA_NUM_ADDR                  PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_DMA_NUM_MASK                  0x0F000000                // DMA_NUM[27..24]
#define PCIE_MAC_IREG_BRIDGE_VER_DMA_NUM_SHFT                  24
#define PCIE_MAC_IREG_BRIDGE_VER_PRODUCT_ID_ADDR               PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_PRODUCT_ID_MASK               0x00FFF000                // PRODUCT_ID[23..12]
#define PCIE_MAC_IREG_BRIDGE_VER_PRODUCT_ID_SHFT               12
#define PCIE_MAC_IREG_BRIDGE_VER_VERSION_ADDR                  PCIE_MAC_IREG_BRIDGE_VER_ADDR
#define PCIE_MAC_IREG_BRIDGE_VER_VERSION_MASK                  0x00000FFF                // VERSION[11..0]
#define PCIE_MAC_IREG_BRIDGE_VER_VERSION_SHFT                  0

/* =====================================================================================

  ---BRIDGE_BUS (0x74030000 + 0x0004)---

    VERSION[11..0]               - (RO) Provides the Bridge Internal Bus version; 
                                     for example, 0x123 indicates version 1.2.3 of the Bus
    DATAPATH[15..12]             - (RO) Indicates the Bridge Internal Bus Data Path width:
                                     4'h5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) Number of outstanding read requests
                                     4'h8: 256 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) Number of outstanding write requests
                                     4'h8: 256 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) Provides the maximum Payload of the Bridge Internal Bus
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) Provides the maximum Read Request Size of the Bridge Internal Bus
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXRREQSIZE_ADDR              PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXRREQSIZE_MASK              0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXRREQSIZE_SHFT              28
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXPAYLOAD_ADDR               PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXPAYLOAD_MASK               0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_BRIDGE_BUS_MAXPAYLOAD_SHFT               24
#define PCIE_MAC_IREG_BRIDGE_BUS_WR_OUTREQ_N_ADDR              PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_WR_OUTREQ_N_MASK              0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_BRIDGE_BUS_WR_OUTREQ_N_SHFT              20
#define PCIE_MAC_IREG_BRIDGE_BUS_RD_OUTREQ_N_ADDR              PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_RD_OUTREQ_N_MASK              0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_BRIDGE_BUS_RD_OUTREQ_N_SHFT              16
#define PCIE_MAC_IREG_BRIDGE_BUS_DATAPATH_ADDR                 PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_DATAPATH_MASK                 0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_BRIDGE_BUS_DATAPATH_SHFT                 12
#define PCIE_MAC_IREG_BRIDGE_BUS_VERSION_ADDR                  PCIE_MAC_IREG_BRIDGE_BUS_ADDR
#define PCIE_MAC_IREG_BRIDGE_BUS_VERSION_MASK                  0x00000FFF                // VERSION[11..0]
#define PCIE_MAC_IREG_BRIDGE_BUS_VERSION_SHFT                  0

/* =====================================================================================

  ---BRIDGE_IMPL_IF (0x74030000 + 0x0008)---

    PCIE_IREG_IMPL[0]            - (RO) PCIe Interface Internal register is implemented
    PCIE_WIN0_IMPL[1]            - (RO) PCIe Interface Window 0 is implemented
    PCIE_WIN1_IMPL[2]            - (RO) PCIe Interface Window 1 is implemented
    PCIE_CFG_IMPL[3]             - (RO) PCIe Configuration Interface is implemented
    AXI_MSTL_IMPL[4]             - (RO) AXI4-Lite Master Interface is implemented
    AXI_SLVL_IMPL[5]             - (RO) AXI4-Lite Slave Interface is implemented
    AXI_MSTD_IMPL[6]             - (RO) AXI4 Master Descriptor Interface is implemented
    RSVD1[7]                     - (RO) Reserved
    AXI_MST0_IMPL[8]             - (RO) AXI4 Master 0 Interface is implemented
    AXI_SLV0_IMPL[9]             - (RO) AXI4 Slave 0 Interface is implemented
    AXI_MST1_IMPL[10]            - (RO) AXI4 Master 1 Interface is implemented
    AXI_SLV1_IMPL[11]            - (RO) AXI4 Slave 1 Interface is implemented
    AXI_MST2_IMPL[12]            - (RO) AXI4 Master 2 Interface is implemented
    AXI_SLV2_IMPL[13]            - (RO) AXI4 Slave 2 Interface is implemented
    AXI_MST3_IMPL[14]            - (RO) AXI4 Master 3 Interface is implemented
    AXI_SLV3_IMPL[15]            - (RO) AXI4 Slave 3 Interface is implemented
    AXI_STRO0_IMPL[16]           - (RO) AXI4 Stream Out 0 Interface is implemented
    AXI_STRI0_IMPL[17]           - (RO) AXI4 Stream In 0 Interface is implemented
    AXI_STRO1_IMPL[18]           - (RO) AXI4 Stream Out 1 Interface is implemented
    AXI_STRI1_IMPL[19]           - (RO) AXI4 Stream In 1 Interface is implemented
    AXI_STRO2_IMPL[20]           - (RO) AXI4 Stream Out 2 Interface is implemented
    AXI_STRI2_IMPL[21]           - (RO) AXI4 Stream In 2 Interface is implemented
    AXI_STRO3_IMPL[22]           - (RO) AXI4 Stream Out 3 Interface is implemented
    AXI_STRI3_IMPL[23]           - (RO) AXI4 Stream In 3 Interface is implemented
    RSVD2[31..24]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD2_ADDR                PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD2_MASK                0xFF000000                // RSVD2[31..24]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD2_SHFT                24
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI3_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI3_IMPL_MASK       0x00800000                // AXI_STRI3_IMPL[23]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI3_IMPL_SHFT       23
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO3_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO3_IMPL_MASK       0x00400000                // AXI_STRO3_IMPL[22]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO3_IMPL_SHFT       22
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI2_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI2_IMPL_MASK       0x00200000                // AXI_STRI2_IMPL[21]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI2_IMPL_SHFT       21
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO2_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO2_IMPL_MASK       0x00100000                // AXI_STRO2_IMPL[20]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO2_IMPL_SHFT       20
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI1_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI1_IMPL_MASK       0x00080000                // AXI_STRI1_IMPL[19]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI1_IMPL_SHFT       19
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO1_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO1_IMPL_MASK       0x00040000                // AXI_STRO1_IMPL[18]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO1_IMPL_SHFT       18
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI0_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI0_IMPL_MASK       0x00020000                // AXI_STRI0_IMPL[17]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRI0_IMPL_SHFT       17
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO0_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO0_IMPL_MASK       0x00010000                // AXI_STRO0_IMPL[16]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_STRO0_IMPL_SHFT       16
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV3_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV3_IMPL_MASK        0x00008000                // AXI_SLV3_IMPL[15]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV3_IMPL_SHFT        15
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST3_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST3_IMPL_MASK        0x00004000                // AXI_MST3_IMPL[14]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST3_IMPL_SHFT        14
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV2_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV2_IMPL_MASK        0x00002000                // AXI_SLV2_IMPL[13]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV2_IMPL_SHFT        13
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST2_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST2_IMPL_MASK        0x00001000                // AXI_MST2_IMPL[12]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST2_IMPL_SHFT        12
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV1_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV1_IMPL_MASK        0x00000800                // AXI_SLV1_IMPL[11]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV1_IMPL_SHFT        11
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST1_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST1_IMPL_MASK        0x00000400                // AXI_MST1_IMPL[10]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST1_IMPL_SHFT        10
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV0_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV0_IMPL_MASK        0x00000200                // AXI_SLV0_IMPL[9]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLV0_IMPL_SHFT        9
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST0_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST0_IMPL_MASK        0x00000100                // AXI_MST0_IMPL[8]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MST0_IMPL_SHFT        8
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD1_ADDR                PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD1_MASK                0x00000080                // RSVD1[7]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_RSVD1_SHFT                7
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTD_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTD_IMPL_MASK        0x00000040                // AXI_MSTD_IMPL[6]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTD_IMPL_SHFT        6
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLVL_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLVL_IMPL_MASK        0x00000020                // AXI_SLVL_IMPL[5]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_SLVL_IMPL_SHFT        5
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTL_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTL_IMPL_MASK        0x00000010                // AXI_MSTL_IMPL[4]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_AXI_MSTL_IMPL_SHFT        4
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_CFG_IMPL_ADDR        PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_CFG_IMPL_MASK        0x00000008                // PCIE_CFG_IMPL[3]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_CFG_IMPL_SHFT        3
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_WIN1_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_WIN1_IMPL_MASK       0x00000004                // PCIE_WIN1_IMPL[2]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_WIN1_IMPL_SHFT       2
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_WIN0_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_WIN0_IMPL_MASK       0x00000002                // PCIE_WIN0_IMPL[1]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_WIN0_IMPL_SHFT       1
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_IREG_IMPL_ADDR       PCIE_MAC_IREG_BRIDGE_IMPL_IF_ADDR
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_IREG_IMPL_MASK       0x00000001                // PCIE_IREG_IMPL[0]
#define PCIE_MAC_IREG_BRIDGE_IMPL_IF_PCIE_IREG_IMPL_SHFT       0

/* =====================================================================================

  ---PCIE_MAC_I2C_INCLUDED (0x74030000 + 0x000C)---

    pcie_i2c_sda_out[0]          - (RW) PCIe I2C SDA output value
    pcie_i2c_sda_oen[1]          - (RW) PCIe I2C SDA output enable (low active)
                                     0: output
                                     1: input
    pcie_i2c_scl_out[2]          - (RW) PCIe I2C SCL output value
    pcie_i2c_scl_oen[3]          - (RW) PCIe I2C SCL output enable (low active)
                                     0: output
                                     1: input
    RSVD1[15..4]                 - (RW) Reserved
    pe2_fpga_i2c_sda_in_0[16]    - (RO) PCIe I2C SDA input value
    pe2_fpga_i2c_scl_in_0[17]    - (RO) PCIe I2C SCL input value
    RSVD2[31..18]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD2_ADDR         PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD2_MASK         0xFFFC0000                // RSVD2[31..18]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD2_SHFT         18
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_scl_in_0_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_scl_in_0_MASK 0x00020000                // pe2_fpga_i2c_scl_in_0[17]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_scl_in_0_SHFT 17
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_sda_in_0_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_sda_in_0_MASK 0x00010000                // pe2_fpga_i2c_sda_in_0[16]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pe2_fpga_i2c_sda_in_0_SHFT 16
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD1_ADDR         PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD1_MASK         0x0000FFF0                // RSVD1[15..4]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_RSVD1_SHFT         4
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_oen_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_oen_MASK 0x00000008                // pcie_i2c_scl_oen[3]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_oen_SHFT 3
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_out_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_out_MASK 0x00000004                // pcie_i2c_scl_out[2]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_scl_out_SHFT 2
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_oen_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_oen_MASK 0x00000002                // pcie_i2c_sda_oen[1]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_oen_SHFT 1
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_out_ADDR PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_ADDR
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_out_MASK 0x00000001                // pcie_i2c_sda_out[0]
#define PCIE_MAC_IREG_PCIE_MAC_I2C_INCLUDED_pcie_i2c_sda_out_SHFT 0

/* =====================================================================================

  ---PCIE_IF_CONF (0x74030000 + 0x0010)---

    VERSION[11..0]               - (RO) Provides the PCI Express Controller Core version; 
                                     for example,0x123 indicates version 1.2.3 of the Core
    IF_ID[15..12]                - (RO) Provides the ID used to target this interface: 0. 
                                     This ID is used to specify the TRSL_ID fields of the DMA Engines and Address Translation registers
    B2P_MRD_OUTREQ_N[19..16]     - (RO) Number of outstanding read requests the Bridge can issue to the PCIe domain
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    P2B_MRD_OUTREQ_N[23..20]     - (RO) Number of outstanding read requests from the PCIe domain the Bridge can handle simultaneously
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) Provides the maximum Payload of the PCIe Interface
                                     0: 128 Bytes
                                     1: 256 Bytes
                                     2: 512 Bytes
                                     3: 1024 Bytes
                                     4: 2048 Bytes
                                     5: 4096 Bytes
    MAXRREQSIZE[31..28]          - (RO) Provides the maximum Read Request Size of the PCIe Interface
                                     0: 128 Bytes
                                     1: 256 Bytes
                                     2: 512 Bytes
                                     3: 1024 Bytes
                                     4: 2048 Bytes
                                     5: 4096 Bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXRREQSIZE_ADDR            PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXRREQSIZE_MASK            0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXRREQSIZE_SHFT            28
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXPAYLOAD_ADDR             PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXPAYLOAD_MASK             0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_PCIE_IF_CONF_MAXPAYLOAD_SHFT             24
#define PCIE_MAC_IREG_PCIE_IF_CONF_P2B_MRD_OUTREQ_N_ADDR       PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_P2B_MRD_OUTREQ_N_MASK       0x00F00000                // P2B_MRD_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_PCIE_IF_CONF_P2B_MRD_OUTREQ_N_SHFT       20
#define PCIE_MAC_IREG_PCIE_IF_CONF_B2P_MRD_OUTREQ_N_ADDR       PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_B2P_MRD_OUTREQ_N_MASK       0x000F0000                // B2P_MRD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_PCIE_IF_CONF_B2P_MRD_OUTREQ_N_SHFT       16
#define PCIE_MAC_IREG_PCIE_IF_CONF_IF_ID_ADDR                  PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_IF_ID_MASK                  0x0000F000                // IF_ID[15..12]
#define PCIE_MAC_IREG_PCIE_IF_CONF_IF_ID_SHFT                  12
#define PCIE_MAC_IREG_PCIE_IF_CONF_VERSION_ADDR                PCIE_MAC_IREG_PCIE_IF_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_IF_CONF_VERSION_MASK                0x00000FFF                // VERSION[11..0]
#define PCIE_MAC_IREG_PCIE_IF_CONF_VERSION_SHFT                0

/* =====================================================================================

  ---PCIE_BASIC_CONF (0x74030000 + 0x0014)---

    LINK_WIDTH[7..0]             - (RO) Advertises the supported link width:
                                     Bit 0: x1 configuration is supported. (This bit is always asserted.)
                                     Bit 1: x2 configuration is supported
                                     Bit 2: x4 configuration is supported
                                     Bit 3: x8 configuration is supported
                                     Bit 4: x16 configuration is supported
                                     Bit 5: x32 configuration is supported
                                     Bit 7-6: reserved
    LINK_SPEED[15..8]            - (RO) Advertises the supported link speed:
                                     Bit 8: 2.5 GT link speed is supported
                                     Bit 9: 5.0 GT link speed is supported
                                     Bit 10: 8.0 GT link speed is supported
                                     Bit 11: 16.0 GT link speed is supported
                                     Bits 15-12: reserved
    FUNC_NUM[19..16]             - (RO) Advertises the number of functions implemented in the Core. 
                                     Supported values are between 0x1 and 0x8. Other values are reserved.
    VC_NUM[23..20]               - (RO) Advertises the number of Virtual Channels implemented in the Core. The only supported value is 0x1; 
                                     other values are reserved.
    COMPL[27..24]                - (RO) Advertises the Core compliance to PCI Express 3.1 specification. The only supported value is 0x3; 
                                     other values arereserved.
    TYPE[31..28]                 - (RO) advertises the PCI Express Core type. Supported values are:
                                     4'h0: Native Endpoint
                                     4'h1: Rootport
                                     Other values are reserved.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_TYPE_ADDR                PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_TYPE_MASK                0xF0000000                // TYPE[31..28]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_TYPE_SHFT                28
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_COMPL_ADDR               PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_COMPL_MASK               0x0F000000                // COMPL[27..24]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_COMPL_SHFT               24
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_VC_NUM_ADDR              PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_VC_NUM_MASK              0x00F00000                // VC_NUM[23..20]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_VC_NUM_SHFT              20
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_FUNC_NUM_ADDR            PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_FUNC_NUM_MASK            0x000F0000                // FUNC_NUM[19..16]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_FUNC_NUM_SHFT            16
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_SPEED_ADDR          PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_SPEED_MASK          0x0000FF00                // LINK_SPEED[15..8]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_SPEED_SHFT          8
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_WIDTH_ADDR          PCIE_MAC_IREG_PCIE_BASIC_CONF_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_WIDTH_MASK          0x000000FF                // LINK_WIDTH[7..0]
#define PCIE_MAC_IREG_PCIE_BASIC_CONF_LINK_WIDTH_SHFT          0

/* =====================================================================================

  ---PCIE_BASIC_STATUS (0x74030000 + 0x0018)---

    NEG_LINK_WIDTH[4..0]         - (RO) reports the negotiated link width of the PCIe link. Supported values are:
                                     01: x1 link width
                                     02: x2 link width
                                     04: x4 link width
                                     08: x8 link width
                                     10: x16 link width
    RSVD1[7..5]                  - (RO) Reserved
    NEG_LINK_SPEED[10..8]        - (RO) reports the negotiated link speed of the PCIe link. Supported values are:
                                     1: 2.5 GTs link speed
                                     2: 5.0 GTs link speed
                                     3: 8.0 GTs link speed
    RSVD2[22..11]                - (RO) Reserved
    dl_spdown[23]                - (RO) dl suprisedown exit and hot reset exit
    NEG_MAXPAYLOAD[26..24]       - (RO) reports the negotiated maximum Payload of the PCIe link.
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD3[27]                    - (RO) Reserved
    NEG_MAXRREQSIZE[30..28]      - (RO) reports the negotiated maximum Read Request Size of the PCIe link
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    RSVD4[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD4_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD4_MASK             0x80000000                // RSVD4[31]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD4_SHFT             31
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXRREQSIZE_ADDR   PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXRREQSIZE_MASK   0x70000000                // NEG_MAXRREQSIZE[30..28]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXRREQSIZE_SHFT   28
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD3_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD3_MASK             0x08000000                // RSVD3[27]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD3_SHFT             27
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXPAYLOAD_ADDR    PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXPAYLOAD_MASK    0x07000000                // NEG_MAXPAYLOAD[26..24]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_MAXPAYLOAD_SHFT    24
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_dl_spdown_ADDR         PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_dl_spdown_MASK         0x00800000                // dl_spdown[23]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_dl_spdown_SHFT         23
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD2_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD2_MASK             0x007FF800                // RSVD2[22..11]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD2_SHFT             11
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_SPEED_ADDR    PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_SPEED_MASK    0x00000700                // NEG_LINK_SPEED[10..8]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_SPEED_SHFT    8
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD1_MASK             0x000000E0                // RSVD1[7..5]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_RSVD1_SHFT             5
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_WIDTH_ADDR    PCIE_MAC_IREG_PCIE_BASIC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_WIDTH_MASK    0x0000001F                // NEG_LINK_WIDTH[4..0]
#define PCIE_MAC_IREG_PCIE_BASIC_STATUS_NEG_LINK_WIDTH_SHFT    0

/* =====================================================================================

  ---HW_DATE_CODE (0x74030000 + 0x001C)---

    DATE_code[31..0]             - (RO) Hareware release DATE_CODE.
                                     Format : yymm_ddhh

 =====================================================================================*/
#define PCIE_MAC_IREG_HW_DATE_CODE_DATE_code_ADDR              PCIE_MAC_IREG_HW_DATE_CODE_ADDR
#define PCIE_MAC_IREG_HW_DATE_CODE_DATE_code_MASK              0xFFFFFFFF                // DATE_code[31..0]
#define PCIE_MAC_IREG_HW_DATE_CODE_DATE_code_SHFT              0

/* =====================================================================================

  ---PCIE_REF_CLOCK_FREQ (0x74030000 + 0x0020)---

    PCIE_ref_clock_freq[21..0]   - (RW) PCIE reference clock frequency for internal timer.
                                     For example :
                                     22'd1 : 1MHz.
                                     22'd26 : 26MHz
    PCIE_ref_clock_freq_en[22]   - (RW) PCIE reference clock frequency enable for internal timer
    RSVD1[31..23]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_RSVD1_ADDR           PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_RSVD1_MASK           0xFF800000                // RSVD1[31..23]
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_RSVD1_SHFT           23
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_en_ADDR PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_en_MASK 0x00400000                // PCIE_ref_clock_freq_en[22]
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_en_SHFT 22
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_ADDR PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_MASK 0x003FFFFF                // PCIE_ref_clock_freq[21..0]
#define PCIE_MAC_IREG_PCIE_REF_CLOCK_FREQ_PCIE_ref_clock_freq_SHFT 0

/* =====================================================================================

  ---PCIE_TL_CLOCK_FREQ (0x74030000 + 0x0024)---

    PCIE_tl_clock_freq[21..0]    - (RW) PCIE transaction layer clock frequency.
                                     For example : 
                                     22'd63 : 63MHz.
                                     22'd250 : 250MHz
    PCIE_tl_clock_freq_en[22]    - (RW) PCIE transaction layer clock frequency enable
    RSVD1[31..23]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_RSVD1_ADDR            PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_RSVD1_MASK            0xFF800000                // RSVD1[31..23]
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_RSVD1_SHFT            23
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_en_ADDR PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_en_MASK 0x00400000                // PCIE_tl_clock_freq_en[22]
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_en_SHFT 22
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_ADDR PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_ADDR
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_MASK 0x003FFFFF                // PCIE_tl_clock_freq[21..0]
#define PCIE_MAC_IREG_PCIE_TL_CLOCK_FREQ_PCIE_tl_clock_freq_SHFT 0

/* =====================================================================================

  ---TL_PM_BWCHANGE (0x74030000 + 0x0028)---

    cfg_direct_lwchange[3..0]    - (RW) Allowed link widths when directed to change link width.
                                     4'd0 : 1 lane
                                     4'd15 : 16 lane
    reg_lwchange[4]              - (RW) Retraining requested to change link width.
                                     set 1 to retrain and change link width. 
                                     clear to 0 by HW automatically.
    RESERVED5[31..5]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_reg_lwchange_ADDR         PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_reg_lwchange_MASK         0x00000010                // reg_lwchange[4]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_reg_lwchange_SHFT         4
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lwchange_ADDR  PCIE_MAC_IREG_TL_PM_BWCHANGE_ADDR
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lwchange_MASK  0x0000000F                // cfg_direct_lwchange[3..0]
#define PCIE_MAC_IREG_TL_PM_BWCHANGE_cfg_direct_lwchange_SHFT  0

/* =====================================================================================

  ---PCIE_DEBUG_MONITOR (0x74030000 + 0x002C)---

    PCIE_debug_monitor[31..0]    - (RO) PCIE debug monitor.
                                     After setting debug select register, debug signal can be latched in the register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_PCIE_debug_monitor_ADDR PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_PCIE_debug_monitor_MASK 0xFFFFFFFF                // PCIE_debug_monitor[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_MONITOR_PCIE_debug_monitor_SHFT 0

/* =====================================================================================

  ---AXI_MST0_CONF (0x74030000 + 0x0030)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST0_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_MST0_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST0_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_MST0_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST0_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_MST0_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST0_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_MST0_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST0_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST0_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_SLV0_CONF (0x74030000 + 0x0034)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_SLV0_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_SLV0_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_SLV0_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_SLV0_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV0_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_MST1_CONF (0x74030000 + 0x0038)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST1_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_MST1_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST1_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_MST1_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST1_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_MST1_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST1_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_MST1_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST1_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST1_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_SLV1_CONF (0x74030000 + 0x003C)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_SLV1_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_SLV1_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_SLV1_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_SLV1_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV1_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_MST2_CONF (0x74030000 + 0x0040)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST2_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_MST2_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST2_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_MST2_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST2_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_MST2_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST2_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_MST2_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST2_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST2_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_SLV2_CONF (0x74030000 + 0x0044)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_SLV2_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_SLV2_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_SLV2_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_SLV2_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV2_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_MST3_CONF (0x74030000 + 0x0048)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_MST3_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_MST3_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_MST3_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_MST3_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_MST3_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_MST3_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_MST3_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_MST3_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_MST3_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_MST3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_MST3_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_SLV3_CONF (0x74030000 + 0x004C)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXRREQSIZE_ADDR           PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXRREQSIZE_MASK           0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXRREQSIZE_SHFT           28
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXPAYLOAD_ADDR            PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXPAYLOAD_MASK            0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_MAXPAYLOAD_SHFT            24
#define PCIE_MAC_IREG_AXI_SLV3_CONF_WR_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_WR_OUTREQ_N_MASK           0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_WR_OUTREQ_N_SHFT           20
#define PCIE_MAC_IREG_AXI_SLV3_CONF_RD_OUTREQ_N_ADDR           PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_RD_OUTREQ_N_MASK           0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_RD_OUTREQ_N_SHFT           16
#define PCIE_MAC_IREG_AXI_SLV3_CONF_DATAPATH_ADDR              PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_DATAPATH_MASK              0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_DATAPATH_SHFT              12
#define PCIE_MAC_IREG_AXI_SLV3_CONF_CLK_DOM_ADDR               PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_CLK_DOM_MASK               0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_CLK_DOM_SHFT               8
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_ID_ADDR                 PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_ID_MASK                 0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_ID_SHFT                 4
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_TYPE_ADDR               PCIE_MAC_IREG_AXI_SLV3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_TYPE_MASK               0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_SLV3_CONF_IF_TYPE_SHFT               0

/* =====================================================================================

  ---AXI_STRO0_CONF (0x74030000 + 0x0050)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRO0_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRO0_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRO0_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO0_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRI0_CONF (0x74030000 + 0x0054)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI0_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRI0_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRI0_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRI0_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRI0_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI0_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI0_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRO1_CONF (0x74030000 + 0x0058)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRO1_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRO1_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRO1_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO1_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRI1_CONF (0x74030000 + 0x005C)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI1_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRI1_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRI1_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRI1_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRI1_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI1_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI1_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRO2_CONF (0x74030000 + 0x0060)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRO2_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRO2_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRO2_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO2_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRI2_CONF (0x74030000 + 0x0064)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI2_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRI2_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRI2_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRI2_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRI2_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI2_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI2_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRO3_CONF (0x74030000 + 0x0068)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRO3_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRO3_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRO3_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRO3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRO3_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---AXI_STRI3_CONF (0x74030000 + 0x006C)---

    IF_TYPE[3..0]                - (RO) specifies the AXI Interface type:
                                     2: AXI4 Master
                                     6: AXI3 Master
    IF_ID[7..4]                  - (RO) provides the ID used to target this interface: 4. This ID is used to specify the SRC/DEST_ID, SG/SG2_ID and the TRSL_ID fields of the DMA Engines and Address Translation registers
    CLK_DOM[11..8]               - (RO) sets the Clock Domain of the AXI Interface:
                                     0: CDC is bypassed
                                     1-4: CDC is implemented with FIFO Depth equal to 2^CLK_DOM
    DATAPATH[15..12]             - (RO) DATAPATH: provides the AXI Interface Data Path width:
                                     3: 64-bits
                                     4: 128-bits
                                     5: 256-bits
    RD_OUTREQ_N[19..16]          - (RO) number of outstanding read requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    WR_OUTREQ_N[23..20]          - (RO) number of outstanding write requests
                                     0: 1 outstanding request
                                     1: 2 outstanding requests
                                     2: 4 outstanding requests
                                     3: 8 outstanding requests
                                     4: 16 outstanding requests
                                     5: 32 outstanding requests
                                     6: 64 outstanding requests
                                     7: 128 outstanding requests
    MAXPAYLOAD[27..24]           - (RO) provides the maximum Payload of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes
    MAXRREQSIZE[31..28]          - (RO) provides the maximum Read Request Size of the AXI Interface
                                     0: 128 bytes
                                     1: 256 bytes
                                     2: 512 bytes
                                     3: 1024 bytes
                                     4: 2048 bytes
                                     5: 4096 bytes

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_STRI3_CONF_MAXRREQSIZE_ADDR          PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_MAXRREQSIZE_MASK          0xF0000000                // MAXRREQSIZE[31..28]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_MAXRREQSIZE_SHFT          28
#define PCIE_MAC_IREG_AXI_STRI3_CONF_MAXPAYLOAD_ADDR           PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_MAXPAYLOAD_MASK           0x0F000000                // MAXPAYLOAD[27..24]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_MAXPAYLOAD_SHFT           24
#define PCIE_MAC_IREG_AXI_STRI3_CONF_WR_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_WR_OUTREQ_N_MASK          0x00F00000                // WR_OUTREQ_N[23..20]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_WR_OUTREQ_N_SHFT          20
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RD_OUTREQ_N_ADDR          PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RD_OUTREQ_N_MASK          0x000F0000                // RD_OUTREQ_N[19..16]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_RD_OUTREQ_N_SHFT          16
#define PCIE_MAC_IREG_AXI_STRI3_CONF_DATAPATH_ADDR             PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_DATAPATH_MASK             0x0000F000                // DATAPATH[15..12]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_DATAPATH_SHFT             12
#define PCIE_MAC_IREG_AXI_STRI3_CONF_CLK_DOM_ADDR              PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_CLK_DOM_MASK              0x00000F00                // CLK_DOM[11..8]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_CLK_DOM_SHFT              8
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_ID_ADDR                PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_ID_MASK                0x000000F0                // IF_ID[7..4]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_ID_SHFT                4
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_TYPE_ADDR              PCIE_MAC_IREG_AXI_STRI3_CONF_ADDR
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_TYPE_MASK              0x0000000F                // IF_TYPE[3..0]
#define PCIE_MAC_IREG_AXI_STRI3_CONF_IF_TYPE_SHFT              0

/* =====================================================================================

  ---SW_MAC_CTR_0 (0x74030000 + 0x0070)---

    RSVD0[0]                     - (RW) Reserved
    CHK_SKP_ERR[1]               - (RW) indicate whether check skp error or not.
                                     0 : disable check error in SKP OS.
                                     1 : enable check error in SKP OS.
    FILTER_EIOS_ERR[2]           - (RW) 0 : check rxstatus error in EIOS.
                                     1 : filter rxstatus error in EIOS.
    RXDATAVALID_BEHV_SEL[3]      - (RW) For 64bit PIPE mode, rxdatavalid behavior may be different in MTK PHY or 3rd party.
                                     0 : For MTK PHY, when rxdatavalid go low, invalid data may be in different cycle =>  in high 32 bit of current cycle and in low 32 bit of next cycle. 
                                     1 : when rxdatavalid go low, invalid data is in same cycle => in 64 bit rxdata in current cycle.
    RXSTS_OK_UPDATE[4]           - (RW) RxChecking vector reporting for ltssm
                                     0: RxChecking vector records on each lane when required condition was met
                                     1: RxChecking vector updates according to the received training sequence
    L1_REQ_P2_DELAY[5]           - (RW) change power state to P2 during L1.Entry
                                     0: do not wait
                                     1: wait 1us
    POL_ACT_RXEI_DET[6]          - (RW) LTSSM move from Polling.Active to Polling.Configuration after a 24 ms timeout and
                                     0: Any Lane received eight consecutive training sequences
                                     1: Any Lane received eight consecutive training sequences, and At least a predetermined set of Lanes have detected an exit from Electrical Idle
    RXLANE_INFO_SEL[7]           - (RW) Select rxlane_info source in rxlane
                                     0 : from dbg_rxlane_info register
                                     1 : from dbg_data FIFO.
    RXLANE_INFO_DBG_CNT[11..8]   - (RW) If rxlane_info source is from dbg_data FIFO.
                                     The register is used for FIFO Read Pointer.
    STAY_EQ0_TIMER[15..12]       - (RW) The minimum time value for upstream port must stay in EQ phase 0.
                                     For other platform (Unit 1us).
                                     For FPGA VC709 (Unit 100us)
    RSVD3[23..16]                - (RW) Reserved
    L1_PSEUDO_EIOS_DIS[24]       - (RW) When L1 handshake completed but without receiving EIOS or detecting RX elecidle, MAC will wait 100us and timeout to enter L1 State.
                                     0 : Enable
                                     1 : Disable
    LPK_EXIT_SEL_G1[25]          - (RW) Loopback state exit at the 2.5GT/s data rate
                                     0: if 4 consecutive EIOS are received on any lane
                                     1: if an EIOS is received on any lane
    DN_DIS_AUTO_SPEED_CHG[26]    - (RW) 0: Eable DN auto change speed to highest speed
                                     1: Disable DN auto change speed to highest speed
    LPK_EXIT_SEL[27]             - (RW) Loopback state exit
                                     0: if 4 consecutive EIOS are received on any lane at 5.0GT/s or above
                                     1: if an EIOS is received on any lane at any data rate
    LPK_TS1_LINK_PAD[28]         - (RW) Transmit TS1 with Link/PAD at Loopback.Entry
                                     0: Loopback master transmit TS1s with the Loopback bit asserted, and selected Link numbers and Lane numbers.
                                     1: Loopback master transmit TS1s with the Loopback bit asserted, and selected Link numbers and sets Lane numbers to PAD.
    RATE_CHANGE_BEFORE_L1P2[29]  - (RW) 0 : disable rate change to 2.5G before enter L1 P2 state.
                                     1 : Enable rate change to 2.5G before enter L1 P2 state
    DN_AUTO_SPEED_CHG_G2[30]     - (RW) Eable DN auto change speed if tending to run 5GT (for JBERT)
                                     0: change speed to 5GT when the Link is in DL_Active state
                                     1: change speed to 5GT automatically, and block DLLP transmission
    FORCE_DETECT[31]             - (RW) 0 : disable force detect successfully.
                                     1 : Force detect successfully in all lanes at Detect state.

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FORCE_DETECT_ADDR           PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FORCE_DETECT_MASK           0x80000000                // FORCE_DETECT[31]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FORCE_DETECT_SHFT           31
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_AUTO_SPEED_CHG_G2_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_AUTO_SPEED_CHG_G2_MASK   0x40000000                // DN_AUTO_SPEED_CHG_G2[30]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_AUTO_SPEED_CHG_G2_SHFT   30
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RATE_CHANGE_BEFORE_L1P2_ADDR PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RATE_CHANGE_BEFORE_L1P2_MASK 0x20000000                // RATE_CHANGE_BEFORE_L1P2[29]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RATE_CHANGE_BEFORE_L1P2_SHFT 29
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_TS1_LINK_PAD_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_TS1_LINK_PAD_MASK       0x10000000                // LPK_TS1_LINK_PAD[28]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_TS1_LINK_PAD_SHFT       28
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_ADDR           PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_MASK           0x08000000                // LPK_EXIT_SEL[27]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_SHFT           27
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_DIS_AUTO_SPEED_CHG_ADDR  PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_DIS_AUTO_SPEED_CHG_MASK  0x04000000                // DN_DIS_AUTO_SPEED_CHG[26]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_DN_DIS_AUTO_SPEED_CHG_SHFT  26
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_G1_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_G1_MASK        0x02000000                // LPK_EXIT_SEL_G1[25]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_LPK_EXIT_SEL_G1_SHFT        25
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_PSEUDO_EIOS_DIS_ADDR     PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_PSEUDO_EIOS_DIS_MASK     0x01000000                // L1_PSEUDO_EIOS_DIS[24]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_PSEUDO_EIOS_DIS_SHFT     24
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RSVD3_ADDR                  PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RSVD3_MASK                  0x00FF0000                // RSVD3[23..16]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RSVD3_SHFT                  16
#define PCIE_MAC_IREG_SW_MAC_CTR_0_STAY_EQ0_TIMER_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_STAY_EQ0_TIMER_MASK         0x0000F000                // STAY_EQ0_TIMER[15..12]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_STAY_EQ0_TIMER_SHFT         12
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_DBG_CNT_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_DBG_CNT_MASK    0x00000F00                // RXLANE_INFO_DBG_CNT[11..8]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_DBG_CNT_SHFT    8
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_SEL_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_SEL_MASK        0x00000080                // RXLANE_INFO_SEL[7]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXLANE_INFO_SEL_SHFT        7
#define PCIE_MAC_IREG_SW_MAC_CTR_0_POL_ACT_RXEI_DET_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_POL_ACT_RXEI_DET_MASK       0x00000040                // POL_ACT_RXEI_DET[6]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_POL_ACT_RXEI_DET_SHFT       6
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_REQ_P2_DELAY_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_REQ_P2_DELAY_MASK        0x00000020                // L1_REQ_P2_DELAY[5]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_L1_REQ_P2_DELAY_SHFT        5
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXSTS_OK_UPDATE_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXSTS_OK_UPDATE_MASK        0x00000010                // RXSTS_OK_UPDATE[4]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXSTS_OK_UPDATE_SHFT        4
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXDATAVALID_BEHV_SEL_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXDATAVALID_BEHV_SEL_MASK   0x00000008                // RXDATAVALID_BEHV_SEL[3]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RXDATAVALID_BEHV_SEL_SHFT   3
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FILTER_EIOS_ERR_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FILTER_EIOS_ERR_MASK        0x00000004                // FILTER_EIOS_ERR[2]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_FILTER_EIOS_ERR_SHFT        2
#define PCIE_MAC_IREG_SW_MAC_CTR_0_CHK_SKP_ERR_ADDR            PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_CHK_SKP_ERR_MASK            0x00000002                // CHK_SKP_ERR[1]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_CHK_SKP_ERR_SHFT            1
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RSVD0_ADDR                  PCIE_MAC_IREG_SW_MAC_CTR_0_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RSVD0_MASK                  0x00000001                // RSVD0[0]
#define PCIE_MAC_IREG_SW_MAC_CTR_0_RSVD0_SHFT                  0

/* =====================================================================================

  ---SW_MAC_CTR_1 (0x74030000 + 0x0074)---

    DIS_FRAMING_ERR[7..0]        - (RW) Control Register to disable framing error checker. If error happened, MAC will report in receiver error status of AER register.
                                     0 : Enable
                                     1 : Disable
                                     bit[0] : Detect STP framing error in 128b130b decode
                                     bit[1] : Check if EDB is complete in 128b130b decode
                                     bit[2] : Detect if a symbol is not part of a packet or a valid token is not idle data in 128b130b decode
                                     bit[3] : Detect unexpected EDS in 128b130b decode
                                     bit[4] : Detect if STP or SDP was found on inappropriate lane in 8b10b decode
                                     bit[5] : Check if SDP appear more than once per symbol time in 8b10b decode
                                     bit[6] : Check if STP appear more than once per symbol time in 8b10b decode
                                     bit[7] : Check if receiving DLLP without END symbol in 8b10b decode
    DIS_RXLANE_ERR[10..8]        - (RW) Control Register to disable error checker in rxlane module.  If error happened, MAC will report in receiver error status of AER register.
                                     0 : Enable
                                     1 : Disable
                                     bit[8] : Check if frame error happened in rxlane module
                                     bit[9] : Check if rxstatus error happened in rxlane module.
                                     bit[10] : Check if malform SKIP OS happened in rxlane module.
    CLR_ERR_LOG[11]              - (RW) Write one to clear all log information in rxlane and deskew module.
                                     0 : idle
                                     1 : Clear
    USP_BLOCK_DLLP[12]           - (RW) For upstream port.
                                     0 : Upstream port send DLLP before it receives a DLLP 
                                     1 : Upstream block DLLP transmission untik it receivers a DLLP
    BYPASS_SYS_CLK_RDY_RLOCK[13] - (RW) Ltssm will enters to Recovery.Equalization or Recovery.RcvrCfg from Recovery.RcvrLock when
                                     0: wait ltssm system clock ready
                                     1: do not wait ltssm system clock ready
    DNPORT_HOTRESET_2MS_TIMEOUT[14] - (RW) For Switch downstream port.
                                     0 : Downstream port exit hotreset state until software clear secondary bus reset bit . 
                                     1 : Downstream port exit HOTRESET state after 2ms timeout even if secodary bus reset bit equal to one.
    STAY_RLOCK_EN[15]            - (RW) 0 : LTSSM don't wait 600us before exit Recovery.Lock state.
                                     1 : LTSSM will stay in Recovery.Lock state for at least 600us to wait TL clock change to full speed.
    BYPASS_PHYA_RDY_RLOCK[16]    - (RW) 0 : Need to wait PHY ready at Recovery.Lock and Recovery.Configure state if MAC has executed "SKIP EQ"
                                     1 : Do not wait PHY ready at Recovery.Lock and Recovery.Configure state if MAC has executed "SKIP EQ"
    BYPASS_PHYA_RDY_EQ[17]       - (RW) 0 : Need to wait PHY complete equalization (FOM) at Recovery.EQUAL state.
                                     1 : Do not wait PHY complete equalization (FOM) at Recovery.EQUAL state.
    DISABLE_EXIT_SEL[18]         - (RW) For upstream port 
                                     0 : When LTSSM in Disable state, exit Disable state to Detect state after 2ms timeout and rxelecidle is 0 at any lane
                                     1 : When LTSSM in Disable state, exit Disable state to Detect state after 2ms timeout.
    P2_ENTRY_WAIT_PHYSTATUS[19]  - (RW) 0 : Wait phystatus is 1 when powerdown entry P2 state.
                                     1 : Don't wait phystatus is 1 when powerdown entry P2 state.
    BYPASS_LINK_NUM_CHK[20]      - (RW) while Downstream Lanes transitions to Configuration.Linkwidth.Start, the next state is Configuration.Linkwidth.Accept if any Lanes first received
                                     0: at least one or more TS1 Ordered Sets with a Link and Lane number set to PAD
                                     1: at least one or more TS1 Ordered Sets with a Lane number set to PAD. In other words, MAC will bypass Link number check.
                                     This feature should be enabled in TX/RX loopback.
    EQ_DONE_BY_FOM[21]           - (RW) Equalization Adjustment can be done by FOM
                                     0: Equalization Adjustment can be done by receiving adjustment successful or failed
                                     1: Equalization Adjustment can be done by receiving adjustment finished or FOM rising
    DISABLE_TURNOFF_LANE[22]     - (RW) Turn off the lanes that did not be configured during Configuration.Complete
                                     0: The lanes that did not be configured will be turned off
                                     1: The lanes that did not be configured will not be turned off
    TXBUF_SRAM_MODE_SEL[23]      - (RW) 0 : Remove dummy read behavior at TXBUF read access.
                                     1 : Original PLDA MODE at TXBUF read access.
    hidden_aer[24]               - (RW) The register only can be used in TRANS layer.
                                     Hidden AER
                                     0: Enable AER
                                     1: Disable AER
    rxsram_mode[25]              - (RW) The register only can be used in TRANS layer.
                                     RX sram mode.
                                     0: can read/write one address at the same cycle.
                                     1: can not read/write one address at the same cycle.
    command_reg_behv_sel[26]     - (RW) The register only can be used in TRANS layer.
                                     Configuration Space command register definition.
                                     0 : Use MTK definition.
                                     1 : PLDA original definition.
    l1ss_en_behv_sel[27]         - (RW) The register only can be used in TRANS layer.
                                     Signal l1ss_en behavior selection.
                                     0 : l1ss_en will be 1 when any ASPM or PCIPM L11 or L12 enable is set.
                                     1 : l1ss_en will be 1 only when LTSSM enter ASPM L1 or PCI-PM L1 and corresponding L11 or L12 enable is set.
    RSVD3[31..28]                - (RW) TL_CLK Domain. The register only can be used in TRANS layer.

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_MAC_CTR_1_RSVD3_ADDR                  PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_RSVD3_MASK                  0xF0000000                // RSVD3[31..28]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_RSVD3_SHFT                  28
#define PCIE_MAC_IREG_SW_MAC_CTR_1_l1ss_en_behv_sel_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_l1ss_en_behv_sel_MASK       0x08000000                // l1ss_en_behv_sel[27]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_l1ss_en_behv_sel_SHFT       27
#define PCIE_MAC_IREG_SW_MAC_CTR_1_command_reg_behv_sel_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_command_reg_behv_sel_MASK   0x04000000                // command_reg_behv_sel[26]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_command_reg_behv_sel_SHFT   26
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rxsram_mode_ADDR            PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rxsram_mode_MASK            0x02000000                // rxsram_mode[25]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_rxsram_mode_SHFT            25
#define PCIE_MAC_IREG_SW_MAC_CTR_1_hidden_aer_ADDR             PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_hidden_aer_MASK             0x01000000                // hidden_aer[24]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_hidden_aer_SHFT             24
#define PCIE_MAC_IREG_SW_MAC_CTR_1_TXBUF_SRAM_MODE_SEL_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_TXBUF_SRAM_MODE_SEL_MASK    0x00800000                // TXBUF_SRAM_MODE_SEL[23]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_TXBUF_SRAM_MODE_SEL_SHFT    23
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_TURNOFF_LANE_ADDR   PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_TURNOFF_LANE_MASK   0x00400000                // DISABLE_TURNOFF_LANE[22]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_TURNOFF_LANE_SHFT   22
#define PCIE_MAC_IREG_SW_MAC_CTR_1_EQ_DONE_BY_FOM_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_EQ_DONE_BY_FOM_MASK         0x00200000                // EQ_DONE_BY_FOM[21]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_EQ_DONE_BY_FOM_SHFT         21
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_LINK_NUM_CHK_ADDR    PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_LINK_NUM_CHK_MASK    0x00100000                // BYPASS_LINK_NUM_CHK[20]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_LINK_NUM_CHK_SHFT    20
#define PCIE_MAC_IREG_SW_MAC_CTR_1_P2_ENTRY_WAIT_PHYSTATUS_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_P2_ENTRY_WAIT_PHYSTATUS_MASK 0x00080000                // P2_ENTRY_WAIT_PHYSTATUS[19]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_P2_ENTRY_WAIT_PHYSTATUS_SHFT 19
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_EXIT_SEL_ADDR       PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_EXIT_SEL_MASK       0x00040000                // DISABLE_EXIT_SEL[18]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DISABLE_EXIT_SEL_SHFT       18
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_EQ_ADDR     PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_EQ_MASK     0x00020000                // BYPASS_PHYA_RDY_EQ[17]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_EQ_SHFT     17
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_RLOCK_ADDR  PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_RLOCK_MASK  0x00010000                // BYPASS_PHYA_RDY_RLOCK[16]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_PHYA_RDY_RLOCK_SHFT  16
#define PCIE_MAC_IREG_SW_MAC_CTR_1_STAY_RLOCK_EN_ADDR          PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_STAY_RLOCK_EN_MASK          0x00008000                // STAY_RLOCK_EN[15]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_STAY_RLOCK_EN_SHFT          15
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DNPORT_HOTRESET_2MS_TIMEOUT_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DNPORT_HOTRESET_2MS_TIMEOUT_MASK 0x00004000                // DNPORT_HOTRESET_2MS_TIMEOUT[14]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DNPORT_HOTRESET_2MS_TIMEOUT_SHFT 14
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_SYS_CLK_RDY_RLOCK_ADDR PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_SYS_CLK_RDY_RLOCK_MASK 0x00002000                // BYPASS_SYS_CLK_RDY_RLOCK[13]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_BYPASS_SYS_CLK_RDY_RLOCK_SHFT 13
#define PCIE_MAC_IREG_SW_MAC_CTR_1_USP_BLOCK_DLLP_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_USP_BLOCK_DLLP_MASK         0x00001000                // USP_BLOCK_DLLP[12]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_USP_BLOCK_DLLP_SHFT         12
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CLR_ERR_LOG_ADDR            PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CLR_ERR_LOG_MASK            0x00000800                // CLR_ERR_LOG[11]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_CLR_ERR_LOG_SHFT            11
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_RXLANE_ERR_ADDR         PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_RXLANE_ERR_MASK         0x00000700                // DIS_RXLANE_ERR[10..8]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_RXLANE_ERR_SHFT         8
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_FRAMING_ERR_ADDR        PCIE_MAC_IREG_SW_MAC_CTR_1_ADDR
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_FRAMING_ERR_MASK        0x000000FF                // DIS_FRAMING_ERR[7..0]
#define PCIE_MAC_IREG_SW_MAC_CTR_1_DIS_FRAMING_ERR_SHFT        0

/* =====================================================================================

  ---SW_TEST_IN (0x74030000 + 0x0078)---

    SIM_MODE[0]                  - (RW) Simulation Mode.
                                     Simulation mode is a special mode where some internal delays and parameters are adjusted in order to accelerate link training and to test certain features within a reasonable simulation time.
    DIS_LOW_POWER[1]             - (RW) Disable Low Power State Negotiation.
                                     When asserted, this signal disables all low power state negotiation, including L0s/L1.
    LOOPBACK_MASTER[2]           - (RW) Loopback master mode.
                                     Loopback Master: This signal must be set to 1 to direct the Link to loopback (in Master mode).
    enable_warning_assertion[3]  - (RW) 0 : Don't display warning message in simulation
                                     1 : Display warning message in simulation
    enable_information_assertion[4] - (RW) 0 : Don't display information message in simulation
                                     1 : Display information message in simulation
    L1_EXIT[5]                   - (RW) L1 Exit Request
    DIS_SCRAMB[6]                - (RW) Disable scrambling. 
                                     Gen1 Gen2 modes only.
    Set_compliance_receive[7]    - (RW) Set compliance receive bit in transmitted TS1 ordered set.
                                     This bit should be set before exiting Detect.Quite or Loopback.Entry
    Set_deemphasis[8]            - (RW) Set selectable deemphasis bit in transmitted TS2 ordered set (upstream devices only).
    Dis_POL_COMP[9]              - (RW) Disable entry in Polling.Compliance from Polling.active (does not apply if the TS1 compliance receive bit is set).
    FORCE_POL_COMP[10]           - (RW) Force entry in Polling.Compliance from Polling.active.
    RSVD2[13..11]                - (RW) Reserved
    DIS_PHYSTATUS_TO[14]         - (RW) PHY status timeout.
                                     A phystatus timeout mechanism to prevent from PHY don't response phystatus.
                                     0 : enable phystatus timeout.
                                     1 : disable phystatus timeout.
    RSVD3[17..15]                - (RW) Reserved
    en_tx_nullify_pkt_sent[18]   - (RW) Enables all nullified packets sent from the TX interface to be transmitted to the PCIe link
                                     (By default they are removed from the TX buffer automatically except when TX streaming is active)
    extend_sim_mode[19]          - (RW) Extended simulation mode.
                                     When simulating with a PHY model, simulation mode delays may not be long enough, especially for receiver detection and power/rate changes. 
                                     This typically causes unexpected timeouts to occur and can disrupt simulation. In this case, we recommend using extended simulation mode.
    en_warning_incorrect_dc[20]  - (RW) Enable warnings when incorrect DC balance symbols are received in training sets.
    dis_skp_parity_chk[21]       - (RW) Disable 128b130b SKP OS parity checking and reporting.
    RSVD4[23..22]                - (RW) Reserved
    en_tx_lcrc_err[24]           - (RW) For Test only. 
                                     Insert LCRC error in transmitted TLP.
                                     1 : enable.
                                     0 : disable.
    en_tx_ecrc_err[25]           - (RW) For Test only. 
                                     Insert ECRC error in transmitted TLP.
                                     1 : enable.
                                     0 : disable.
    en_tx_ep_wr[26]              - (RW) For Test only. 
                                     Insert EP error in transmitted MWr / IOWr/ CFGWr TLP.
                                     1 : enable.
                                     0 : disable.
    en_tx_ep_cpld[27]            - (RW) For Test only. 
                                     Insert EP error in transmitted Completion TLP.
                                     1 : enable.
                                     0 : disable.
    eq_inform[30..28]            - (RW) Those bit reserved for HW control.
                                     SW can't use the register.
    RSVD5[31]                    - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD5_ADDR                    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD5_MASK                    0x80000000                // RSVD5[31]
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD5_SHFT                    31
#define PCIE_MAC_IREG_SW_TEST_IN_eq_inform_ADDR                PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_eq_inform_MASK                0x70000000                // eq_inform[30..28]
#define PCIE_MAC_IREG_SW_TEST_IN_eq_inform_SHFT                28
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_cpld_ADDR            PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_cpld_MASK            0x08000000                // en_tx_ep_cpld[27]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_cpld_SHFT            27
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_wr_ADDR              PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_wr_MASK              0x04000000                // en_tx_ep_wr[26]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ep_wr_SHFT              26
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ecrc_err_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ecrc_err_MASK           0x02000000                // en_tx_ecrc_err[25]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_ecrc_err_SHFT           25
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_lcrc_err_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_lcrc_err_MASK           0x01000000                // en_tx_lcrc_err[24]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_lcrc_err_SHFT           24
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD4_ADDR                    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD4_MASK                    0x00C00000                // RSVD4[23..22]
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD4_SHFT                    22
#define PCIE_MAC_IREG_SW_TEST_IN_dis_skp_parity_chk_ADDR       PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_dis_skp_parity_chk_MASK       0x00200000                // dis_skp_parity_chk[21]
#define PCIE_MAC_IREG_SW_TEST_IN_dis_skp_parity_chk_SHFT       21
#define PCIE_MAC_IREG_SW_TEST_IN_en_warning_incorrect_dc_ADDR  PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_warning_incorrect_dc_MASK  0x00100000                // en_warning_incorrect_dc[20]
#define PCIE_MAC_IREG_SW_TEST_IN_en_warning_incorrect_dc_SHFT  20
#define PCIE_MAC_IREG_SW_TEST_IN_extend_sim_mode_ADDR          PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_extend_sim_mode_MASK          0x00080000                // extend_sim_mode[19]
#define PCIE_MAC_IREG_SW_TEST_IN_extend_sim_mode_SHFT          19
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_nullify_pkt_sent_ADDR   PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_nullify_pkt_sent_MASK   0x00040000                // en_tx_nullify_pkt_sent[18]
#define PCIE_MAC_IREG_SW_TEST_IN_en_tx_nullify_pkt_sent_SHFT   18
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD3_ADDR                    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD3_MASK                    0x00038000                // RSVD3[17..15]
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD3_SHFT                    15
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_PHYSTATUS_TO_ADDR         PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_PHYSTATUS_TO_MASK         0x00004000                // DIS_PHYSTATUS_TO[14]
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_PHYSTATUS_TO_SHFT         14
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD2_ADDR                    PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD2_MASK                    0x00003800                // RSVD2[13..11]
#define PCIE_MAC_IREG_SW_TEST_IN_RSVD2_SHFT                    11
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_POL_COMP_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_POL_COMP_MASK           0x00000400                // FORCE_POL_COMP[10]
#define PCIE_MAC_IREG_SW_TEST_IN_FORCE_POL_COMP_SHFT           10
#define PCIE_MAC_IREG_SW_TEST_IN_Dis_POL_COMP_ADDR             PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_Dis_POL_COMP_MASK             0x00000200                // Dis_POL_COMP[9]
#define PCIE_MAC_IREG_SW_TEST_IN_Dis_POL_COMP_SHFT             9
#define PCIE_MAC_IREG_SW_TEST_IN_Set_deemphasis_ADDR           PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_Set_deemphasis_MASK           0x00000100                // Set_deemphasis[8]
#define PCIE_MAC_IREG_SW_TEST_IN_Set_deemphasis_SHFT           8
#define PCIE_MAC_IREG_SW_TEST_IN_Set_compliance_receive_ADDR   PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_Set_compliance_receive_MASK   0x00000080                // Set_compliance_receive[7]
#define PCIE_MAC_IREG_SW_TEST_IN_Set_compliance_receive_SHFT   7
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_SCRAMB_ADDR               PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_SCRAMB_MASK               0x00000040                // DIS_SCRAMB[6]
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_SCRAMB_SHFT               6
#define PCIE_MAC_IREG_SW_TEST_IN_L1_EXIT_ADDR                  PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_L1_EXIT_MASK                  0x00000020                // L1_EXIT[5]
#define PCIE_MAC_IREG_SW_TEST_IN_L1_EXIT_SHFT                  5
#define PCIE_MAC_IREG_SW_TEST_IN_enable_information_assertion_ADDR PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_enable_information_assertion_MASK 0x00000010                // enable_information_assertion[4]
#define PCIE_MAC_IREG_SW_TEST_IN_enable_information_assertion_SHFT 4
#define PCIE_MAC_IREG_SW_TEST_IN_enable_warning_assertion_ADDR PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_enable_warning_assertion_MASK 0x00000008                // enable_warning_assertion[3]
#define PCIE_MAC_IREG_SW_TEST_IN_enable_warning_assertion_SHFT 3
#define PCIE_MAC_IREG_SW_TEST_IN_LOOPBACK_MASTER_ADDR          PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_LOOPBACK_MASTER_MASK          0x00000004                // LOOPBACK_MASTER[2]
#define PCIE_MAC_IREG_SW_TEST_IN_LOOPBACK_MASTER_SHFT          2
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_LOW_POWER_ADDR            PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_LOW_POWER_MASK            0x00000002                // DIS_LOW_POWER[1]
#define PCIE_MAC_IREG_SW_TEST_IN_DIS_LOW_POWER_SHFT            1
#define PCIE_MAC_IREG_SW_TEST_IN_SIM_MODE_ADDR                 PCIE_MAC_IREG_SW_TEST_IN_ADDR
#define PCIE_MAC_IREG_SW_TEST_IN_SIM_MODE_MASK                 0x00000001                // SIM_MODE[0]
#define PCIE_MAC_IREG_SW_TEST_IN_SIM_MODE_SHFT                 0

/* =====================================================================================

  ---FPGA_SETTINGS (0x74030000 + 0x007C)---

    rxelecidle_sel_up0[0]        - (RW) For FPGA A60966.
                                     0 : select rxelecidle from PIPE.
                                     1 : select rxelecidle from PHY Probe Out.
    RSVD1[1]                     - (RW) Reserved
    rxelecidle_sel_dn2[2]        - (RW) For FPGA A60966.
                                     0 : select rxelecidle from PIPE.
                                     1 : select rxelecidle from PHY Probe Out.
    RSVD2[23..3]                 - (RW) Reserved
    clock_phase_select[26..24]   - (RW) 0: phase 0, 1: phase 60, 2: phase 120, 3: phase 180, 4: phase 240, 5: phase 300
    RSVD3[27]                    - (RW) Reserved
    fpga_dbg_select[31..28]      - (RW) Bit 0 : debug port [07:00]
                                     Bit 1 : debug port [15:08]
                                     Bit 2 : debug port [23:16]
                                     Bit 3 : debug port [31:24]
                                     0: debug port for EP
                                     1: debug port for Switch
                                     (It is FPGA COMBO only)

 =====================================================================================*/
#define PCIE_MAC_IREG_FPGA_SETTINGS_fpga_dbg_select_ADDR       PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_fpga_dbg_select_MASK       0xF0000000                // fpga_dbg_select[31..28]
#define PCIE_MAC_IREG_FPGA_SETTINGS_fpga_dbg_select_SHFT       28
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD3_ADDR                 PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD3_MASK                 0x08000000                // RSVD3[27]
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD3_SHFT                 27
#define PCIE_MAC_IREG_FPGA_SETTINGS_clock_phase_select_ADDR    PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_clock_phase_select_MASK    0x07000000                // clock_phase_select[26..24]
#define PCIE_MAC_IREG_FPGA_SETTINGS_clock_phase_select_SHFT    24
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD2_ADDR                 PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD2_MASK                 0x00FFFFF8                // RSVD2[23..3]
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD2_SHFT                 3
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_dn2_ADDR    PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_dn2_MASK    0x00000004                // rxelecidle_sel_dn2[2]
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_dn2_SHFT    2
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD1_ADDR                 PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD1_MASK                 0x00000002                // RSVD1[1]
#define PCIE_MAC_IREG_FPGA_SETTINGS_RSVD1_SHFT                 1
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_up0_ADDR    PCIE_MAC_IREG_FPGA_SETTINGS_ADDR
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_up0_MASK    0x00000001                // rxelecidle_sel_up0[0]
#define PCIE_MAC_IREG_FPGA_SETTINGS_rxelecidle_sel_up0_SHFT    0

/* =====================================================================================

  ---GEN_SETTINGS (0x74030000 + 0x0080)---

    port_type[3..0]              - (RW) PCIe Port Type
                                     0000: Endpoint
                                     0001: Rootport
                                     others : reserved
    RSVD1[6..4]                  - (RW) Reserved
    Lane_reversal_supported[7]   - (RW) Lane reversal supported.
                                     1: supported.
                                     0: not supported.
    LinkWidths[11..8]            - (RW) supported Link widths
                                     Bit 8 = x2 supported
                                     Bit 9 = x4 supported
                                     Bit 10 = x8 supported
                                     Bit 11 = x16 supported
                                     You can use these bits to disable link width down configuration capability, or to force the PCIe device to use less lanes than are physically implemented. For example, if the Core is x8 and Bit 10 is 0b, lanes 7-4 are disabled.
    G2supported[12]              - (RW) Gen2 Speed Supported
                                     0: Gen2 speed is not supported
                                     1: Gen2 speed is supported
    G3supported[13]              - (RW) Gen3 Speed Supported
                                     0: Gen3 speed is not supported
                                     1: Gen3 speed is supported
    G4supported[14]              - (RW) Gen4 Speed Supported
                                     0: Gen4 speed is not supported
                                     1: Gen4 speed is supported
    RSVD2[16..15]                - (RW) Reserved
    PIE8_compatibility[17]       - (RW) Datapath PIE-8 compatibility mode. When set, the Core's PHY data interface conforms to the PIE-8 1.00 specification, which means that:
                                     1. the Core does not perform data scrambling/descrambling at 8.0 GT/s speed.
                                     2. RxDataK/TxDataK are used instead of RxDataValid/TxDataValid at 8.0 GT/s speed.
                                     3. RxStatus encoding differs from the PIPE specification.
    RSVD3[18]                    - (RW) Reserved
    TX_err_Nullify[19]           - (RW) Nullify TLP when TX ECC/parity error is detected.
    SRIS_mode[20]                - (RW) Indicates that the device is operating in SRIS mode.
    RSVD4[23..21]                - (RW) Reserved
    RSVD5[24]                    - (RW) Reserved
    disable_func[31..25]         - (RW) Mask Physical Functions.
                                     This setting make it possible to keep one or more functions' logic in reset so that they cannot be accessed and configured from PCIe bus or from application logic.
                                     bit[25] : for function1.
                                     bit[31] : for function7.

 =====================================================================================*/
#define PCIE_MAC_IREG_GEN_SETTINGS_disable_func_ADDR           PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_disable_func_MASK           0xFE000000                // disable_func[31..25]
#define PCIE_MAC_IREG_GEN_SETTINGS_disable_func_SHFT           25
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD5_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD5_MASK                  0x01000000                // RSVD5[24]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD5_SHFT                  24
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD4_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD4_MASK                  0x00E00000                // RSVD4[23..21]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD4_SHFT                  21
#define PCIE_MAC_IREG_GEN_SETTINGS_SRIS_mode_ADDR              PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_SRIS_mode_MASK              0x00100000                // SRIS_mode[20]
#define PCIE_MAC_IREG_GEN_SETTINGS_SRIS_mode_SHFT              20
#define PCIE_MAC_IREG_GEN_SETTINGS_TX_err_Nullify_ADDR         PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_TX_err_Nullify_MASK         0x00080000                // TX_err_Nullify[19]
#define PCIE_MAC_IREG_GEN_SETTINGS_TX_err_Nullify_SHFT         19
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD3_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD3_MASK                  0x00040000                // RSVD3[18]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD3_SHFT                  18
#define PCIE_MAC_IREG_GEN_SETTINGS_PIE8_compatibility_ADDR     PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_PIE8_compatibility_MASK     0x00020000                // PIE8_compatibility[17]
#define PCIE_MAC_IREG_GEN_SETTINGS_PIE8_compatibility_SHFT     17
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD2_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD2_MASK                  0x00018000                // RSVD2[16..15]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD2_SHFT                  15
#define PCIE_MAC_IREG_GEN_SETTINGS_G4supported_ADDR            PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_G4supported_MASK            0x00004000                // G4supported[14]
#define PCIE_MAC_IREG_GEN_SETTINGS_G4supported_SHFT            14
#define PCIE_MAC_IREG_GEN_SETTINGS_G3supported_ADDR            PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_G3supported_MASK            0x00002000                // G3supported[13]
#define PCIE_MAC_IREG_GEN_SETTINGS_G3supported_SHFT            13
#define PCIE_MAC_IREG_GEN_SETTINGS_G2supported_ADDR            PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_G2supported_MASK            0x00001000                // G2supported[12]
#define PCIE_MAC_IREG_GEN_SETTINGS_G2supported_SHFT            12
#define PCIE_MAC_IREG_GEN_SETTINGS_LinkWidths_ADDR             PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_LinkWidths_MASK             0x00000F00                // LinkWidths[11..8]
#define PCIE_MAC_IREG_GEN_SETTINGS_LinkWidths_SHFT             8
#define PCIE_MAC_IREG_GEN_SETTINGS_Lane_reversal_supported_ADDR PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_Lane_reversal_supported_MASK 0x00000080                // Lane_reversal_supported[7]
#define PCIE_MAC_IREG_GEN_SETTINGS_Lane_reversal_supported_SHFT 7
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD1_ADDR                  PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD1_MASK                  0x00000070                // RSVD1[6..4]
#define PCIE_MAC_IREG_GEN_SETTINGS_RSVD1_SHFT                  4
#define PCIE_MAC_IREG_GEN_SETTINGS_port_type_ADDR              PCIE_MAC_IREG_GEN_SETTINGS_ADDR
#define PCIE_MAC_IREG_GEN_SETTINGS_port_type_MASK              0x0000000F                // port_type[3..0]
#define PCIE_MAC_IREG_GEN_SETTINGS_port_type_SHFT              0

/* =====================================================================================

  ---PCIE_CFGCTRL (0x74030000 + 0x0084)---

    Func_not_ready[0]            - (RW) Physical Function Configuration NOT Ready.
                                     If the local processor need more time to load PCIe configuration settings, it can assert this bit until all physical function configuration settings are properly set.
                                     0: Physical function configuration ready
                                     1: Physical function configuration not ready
    Virtual_Func_not_ready[1]    - (RW) Virtual function configuration not ready: if the local processor needs more time to load PCIe configuration settings, it can assert this bit until all virtual function configuration settings are properly set.
                                     The PCIe Core will reply to all virtual function configuration requests with Configuration Retry Status completions while this bit is asserted.
    Disable_LTSSM[2]             - (RW) this bit is deasserted (low) in normal conditions; however, it can be set to 1 at power-up to prevent LTSSM from exiting Detect.Quiet for as long as this register is asserted. This is typically used to prevent LTSSM from moving to another state when the PHY or PIPE interface is not ready. This signal has no effect on LTSSM states other than Detect.Quiet.
    RSVD1[15..3]                 - (RO) Reserved
    Func_num[18..16]             - (RO) When several physical functions are implemented, it enables initializing the selected function PCIe configuration setting registers (0x0098 - 0x00BF, 0x00E0 - 0x00FF, 0x0120 - 0x013F). Otherwise this sub-field is reserved.
    RSVD2[23..19]                - (RO) Reserved
    Virtual_Channel_num[26..24]  - (RO) When several virtual channels are implemented, it enables initializing the selected virtual channel PCIe configuration setting registers (0x0090 - 0x0097). Otherwise this sub-field is reserved.
    RSVD3[31..27]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD3_ADDR                  PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD3_MASK                  0xF8000000                // RSVD3[31..27]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD3_SHFT                  27
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Virtual_Channel_num_ADDR    PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Virtual_Channel_num_MASK    0x07000000                // Virtual_Channel_num[26..24]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Virtual_Channel_num_SHFT    24
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD2_ADDR                  PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD2_MASK                  0x00F80000                // RSVD2[23..19]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD2_SHFT                  19
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Func_num_ADDR               PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Func_num_MASK               0x00070000                // Func_num[18..16]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Func_num_SHFT               16
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD1_ADDR                  PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD1_MASK                  0x0000FFF8                // RSVD1[15..3]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_RSVD1_SHFT                  3
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Disable_LTSSM_ADDR          PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Disable_LTSSM_MASK          0x00000004                // Disable_LTSSM[2]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Disable_LTSSM_SHFT          2
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Virtual_Func_not_ready_ADDR PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Virtual_Func_not_ready_MASK 0x00000002                // Virtual_Func_not_ready[1]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Virtual_Func_not_ready_SHFT 1
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Func_not_ready_ADDR         PCIE_MAC_IREG_PCIE_CFGCTRL_ADDR
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Func_not_ready_MASK         0x00000001                // Func_not_ready[0]
#define PCIE_MAC_IREG_PCIE_CFGCTRL_Func_not_ready_SHFT         0

/* =====================================================================================

  ---PCIE_PIPE_0 (0x74030000 + 0x0088)---

    RSVD1[15..0]                 - (RW) Reserved
    rxelecidle_input_sel[16]     - (RW) Indicate if rxelecide need to be synced.
                                     0: not synchronized, 
                                     1: synchronized by pl_clk
    PIPE_input_sel[17]           - (RW) PIPE input signals are registered.
                                     0: not registered.
                                     1: registered
    tx_aligned_data_sel[18]      - (RW) Tx aligned data is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    DC_offset_calculation_sel[19] - (RW) DC offset calculation is pipelined.
                                     0: not pipelined.
                                     1: pipelined.
                                     When this bit is set, the TS1/TS2 DC symbol replacement logic is slightly modified to enable the logic to run at a much higher frequency. In this case, however, it no longer conforms exactly to the PCI Express specifications.
    DeScrambled_Dat_sel[20]      - (RW) De-Scrambled Data and 128b/130b OS Detection signals are pipelined.
                                     0: pipelined.
                                     1: not pipelined
    RSVD2[27..21]                - (RW) Reserved
    DLLP_Insertion_dis[28]       - (RW) DLLP Insertion with TLP of atypical length is disabled.
                                     0 : enable
                                     1: disabled
    RSVD3[31..29]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD3_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD3_MASK                   0xE0000000                // RSVD3[31..29]
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD3_SHFT                   29
#define PCIE_MAC_IREG_PCIE_PIPE_0_DLLP_Insertion_dis_ADDR      PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_DLLP_Insertion_dis_MASK      0x10000000                // DLLP_Insertion_dis[28]
#define PCIE_MAC_IREG_PCIE_PIPE_0_DLLP_Insertion_dis_SHFT      28
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD2_MASK                   0x0FE00000                // RSVD2[27..21]
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD2_SHFT                   21
#define PCIE_MAC_IREG_PCIE_PIPE_0_DeScrambled_Dat_sel_ADDR     PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_DeScrambled_Dat_sel_MASK     0x00100000                // DeScrambled_Dat_sel[20]
#define PCIE_MAC_IREG_PCIE_PIPE_0_DeScrambled_Dat_sel_SHFT     20
#define PCIE_MAC_IREG_PCIE_PIPE_0_DC_offset_calculation_sel_ADDR PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_DC_offset_calculation_sel_MASK 0x00080000                // DC_offset_calculation_sel[19]
#define PCIE_MAC_IREG_PCIE_PIPE_0_DC_offset_calculation_sel_SHFT 19
#define PCIE_MAC_IREG_PCIE_PIPE_0_tx_aligned_data_sel_ADDR     PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_tx_aligned_data_sel_MASK     0x00040000                // tx_aligned_data_sel[18]
#define PCIE_MAC_IREG_PCIE_PIPE_0_tx_aligned_data_sel_SHFT     18
#define PCIE_MAC_IREG_PCIE_PIPE_0_PIPE_input_sel_ADDR          PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_PIPE_input_sel_MASK          0x00020000                // PIPE_input_sel[17]
#define PCIE_MAC_IREG_PCIE_PIPE_0_PIPE_input_sel_SHFT          17
#define PCIE_MAC_IREG_PCIE_PIPE_0_rxelecidle_input_sel_ADDR    PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_rxelecidle_input_sel_MASK    0x00010000                // rxelecidle_input_sel[16]
#define PCIE_MAC_IREG_PCIE_PIPE_0_rxelecidle_input_sel_SHFT    16
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_0_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD1_MASK                   0x0000FFFF                // RSVD1[15..0]
#define PCIE_MAC_IREG_PCIE_PIPE_0_RSVD1_SHFT                   0

/* =====================================================================================

  ---PCIE_PIPE_1 (0x74030000 + 0x008C)---

    DLLP_Sts_sel[0]              - (RW) DLLP Status StreamBus signals are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RSVD1[7..1]                  - (RW) Reserved
    TxLCRC_Dat_sel[8]            - (RW) TxLCRC Data Xor Computation is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    TxLCRC_Field_sel[9]          - (RW) TxLCRC Field Generation is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RxLCRC_Field_sel[10]         - (RW) RxLCRC Field Computation is pipelined.
                                     0: not pipelined.
                                     1: pipelined (for ECRC only)
    RESERVED11[21..11]           - (RO) Reserved bits
    RSVD2[23..22]                - (RW) Reserved
    TLP_dec_sel[24]              - (RW) TLP decoder input data are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    SeqNumber_sel[25]            - (RW) SeqNumber and RxLCRC Data XOR Computation are pipelined.
                                     0: not pipelined. 
                                     1: pipelined
    RxLCRC_Results_sel[26]       - (RW) RxLCRC Results are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RxLCRC_DW_sel[27]            - (RW) RxLCRC DWord to check is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RxLCRC_Chk_sel[28]           - (RW) RxLCRC Checking Result is pipelined.
                                     0: not pipelined.
                                     1: pipelined
    TLP_Dec_sel[29]              - (RW) TLP Decoding signals are pipelined.
                                     0: not pipelined.
                                     1: pipelined
    RSVD3[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD3_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD3_MASK                   0xC0000000                // RSVD3[31..30]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD3_SHFT                   30
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_Dec_sel_ADDR             PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_Dec_sel_MASK             0x20000000                // TLP_Dec_sel[29]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_Dec_sel_SHFT             29
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Chk_sel_ADDR          PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Chk_sel_MASK          0x10000000                // RxLCRC_Chk_sel[28]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Chk_sel_SHFT          28
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_DW_sel_ADDR           PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_DW_sel_MASK           0x08000000                // RxLCRC_DW_sel[27]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_DW_sel_SHFT           27
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Results_sel_ADDR      PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Results_sel_MASK      0x04000000                // RxLCRC_Results_sel[26]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Results_sel_SHFT      26
#define PCIE_MAC_IREG_PCIE_PIPE_1_SeqNumber_sel_ADDR           PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_SeqNumber_sel_MASK           0x02000000                // SeqNumber_sel[25]
#define PCIE_MAC_IREG_PCIE_PIPE_1_SeqNumber_sel_SHFT           25
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_dec_sel_ADDR             PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_dec_sel_MASK             0x01000000                // TLP_dec_sel[24]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TLP_dec_sel_SHFT             24
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD2_MASK                   0x00C00000                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD2_SHFT                   22
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Field_sel_ADDR        PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Field_sel_MASK        0x00000400                // RxLCRC_Field_sel[10]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RxLCRC_Field_sel_SHFT        10
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Field_sel_ADDR        PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Field_sel_MASK        0x00000200                // TxLCRC_Field_sel[9]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Field_sel_SHFT        9
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Dat_sel_ADDR          PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Dat_sel_MASK          0x00000100                // TxLCRC_Dat_sel[8]
#define PCIE_MAC_IREG_PCIE_PIPE_1_TxLCRC_Dat_sel_SHFT          8
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD1_MASK                   0x000000FE                // RSVD1[7..1]
#define PCIE_MAC_IREG_PCIE_PIPE_1_RSVD1_SHFT                   1
#define PCIE_MAC_IREG_PCIE_PIPE_1_DLLP_Sts_sel_ADDR            PCIE_MAC_IREG_PCIE_PIPE_1_ADDR
#define PCIE_MAC_IREG_PCIE_PIPE_1_DLLP_Sts_sel_MASK            0x00000001                // DLLP_Sts_sel[0]
#define PCIE_MAC_IREG_PCIE_PIPE_1_DLLP_Sts_sel_SHFT            0

/* =====================================================================================

  ---PCIE_VC_CRED0_L (0x74030000 + 0x0090)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC_CRED0_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC_CRED0_H (0x74030000 + 0x0094)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC_CRED0_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC_CRED0_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_PCI_IDS_0 (0x74030000 + 0x0098)---

    VendorID[15..0]              - (RW) Vendor ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[15:0]
    DeviceID[31..16]             - (RW) Device ID
                                     Backdoor access to PCIe Configuration Space Header(+00h)[31:16]

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_DeviceID_ADDR             PCIE_MAC_IREG_PCIE_PCI_IDS_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_DeviceID_MASK             0xFFFF0000                // DeviceID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_DeviceID_SHFT             16
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_VendorID_ADDR             PCIE_MAC_IREG_PCIE_PCI_IDS_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_VendorID_MASK             0x0000FFFF                // VendorID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_0_VendorID_SHFT             0

/* =====================================================================================

  ---PCIE_PCI_IDS_1 (0x74030000 + 0x009C)---

    RevisionID[7..0]             - (RW) Revision ID
                                     Backdoor access to PCIe Configuration Space Header(+08h)[7:0]
    Classcode[31..8]             - (RW) Class Code
                                     Backdoor access to PCIe Configuration Space Header(+08h)[31:8]

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_Classcode_ADDR            PCIE_MAC_IREG_PCIE_PCI_IDS_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_Classcode_MASK            0xFFFFFF00                // Classcode[31..8]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_Classcode_SHFT            8
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_RevisionID_ADDR           PCIE_MAC_IREG_PCIE_PCI_IDS_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_RevisionID_MASK           0x000000FF                // RevisionID[7..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_1_RevisionID_SHFT           0

/* =====================================================================================

  ---PCIE_PCI_IDS_2 (0x74030000 + 0x00A0)---

    Sub_system_vendor_ID[15..0]  - (RW) Sub-system vendor ID
                                     Only apply for type0 function. 
                                     Backdoor access to PCIe Configuration Space Header(+2C)[15:0]
    Sub_system_device_ID[31..16] - (RW) Sub-system device ID
                                     Only apply for type0 function.
                                     Backdoor access to PCIe Configuration Space Header(+2C)[31:16]

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_Sub_system_device_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_Sub_system_device_ID_MASK 0xFFFF0000                // Sub_system_device_ID[31..16]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_Sub_system_device_ID_SHFT 16
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_Sub_system_vendor_ID_ADDR PCIE_MAC_IREG_PCIE_PCI_IDS_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_Sub_system_vendor_ID_MASK 0x0000FFFF                // Sub_system_vendor_ID[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_IDS_2_Sub_system_vendor_ID_SHFT 0

/* =====================================================================================

  ---PCIE_PCI_LPM (0x74030000 + 0x00A4)---

    RSVD1[15..0]                 - (RO) Reserved
    Adtr_support[16]             - (RW) Address Translation Service support
    Page_Req_If_support[17]      - (RW) Page Request Interface support
    Impl_Mcast[18]               - (RO) Implement Multicast capability
    RSVD2[19]                    - (RO) Reserved
    PMEDataSupport[20]           - (RW) PME Data Support
                                     Backdoor access to Power Management Control/Status Register (0x10FC[14:9][31:24])
                                     0: not supported
                                     1: supported
    DSI[21]                      - (RW) DSI(Device Specific Initialization)
                                     Backdoor access to Power Management Capability Structure(+00h)[21]
    AuxiliaryCurrent[24..22]     - (RW) Auxiliary Current
                                     Backdoor access to Power Management Capability Structure(+00h)[24:22]
    D1Support[25]                - (RW) D1 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[25]
    D2Support[26]                - (RW) D2 Support
                                     Backdoor access to Power Management Capability Structure(+00h)[26]
    PMEsupport[31..27]           - (RW) PME Support
                                     Backdoor access to Power Management Capability Structure(+00h)[31:27]

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_LPM_PMEsupport_ADDR             PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_PMEsupport_MASK             0xF8000000                // PMEsupport[31..27]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_PMEsupport_SHFT             27
#define PCIE_MAC_IREG_PCIE_PCI_LPM_D2Support_ADDR              PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_D2Support_MASK              0x04000000                // D2Support[26]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_D2Support_SHFT              26
#define PCIE_MAC_IREG_PCIE_PCI_LPM_D1Support_ADDR              PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_D1Support_MASK              0x02000000                // D1Support[25]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_D1Support_SHFT              25
#define PCIE_MAC_IREG_PCIE_PCI_LPM_AuxiliaryCurrent_ADDR       PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_AuxiliaryCurrent_MASK       0x01C00000                // AuxiliaryCurrent[24..22]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_AuxiliaryCurrent_SHFT       22
#define PCIE_MAC_IREG_PCIE_PCI_LPM_DSI_ADDR                    PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_DSI_MASK                    0x00200000                // DSI[21]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_DSI_SHFT                    21
#define PCIE_MAC_IREG_PCIE_PCI_LPM_PMEDataSupport_ADDR         PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_PMEDataSupport_MASK         0x00100000                // PMEDataSupport[20]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_PMEDataSupport_SHFT         20
#define PCIE_MAC_IREG_PCIE_PCI_LPM_RSVD2_ADDR                  PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_RSVD2_MASK                  0x00080000                // RSVD2[19]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_RSVD2_SHFT                  19
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Impl_Mcast_ADDR             PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Impl_Mcast_MASK             0x00040000                // Impl_Mcast[18]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Impl_Mcast_SHFT             18
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Page_Req_If_support_ADDR    PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Page_Req_If_support_MASK    0x00020000                // Page_Req_If_support[17]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Page_Req_If_support_SHFT    17
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Adtr_support_ADDR           PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Adtr_support_MASK           0x00010000                // Adtr_support[16]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_Adtr_support_SHFT           16
#define PCIE_MAC_IREG_PCIE_PCI_LPM_RSVD1_ADDR                  PCIE_MAC_IREG_PCIE_PCI_LPM_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_LPM_RSVD1_MASK                  0x0000FFFF                // RSVD1[15..0]
#define PCIE_MAC_IREG_PCIE_PCI_LPM_RSVD1_SHFT                  0

/* =====================================================================================

  ---PCIE_PCI_IRQ_0 (0x74030000 + 0x00A8)---

    InterruptPin[2..0]           - (RW) Interrupt Pin:
                                     - 000: None
                                     - 001: INTA
                                     - 010: INTB
                                     - 011: INTC
                                     - 100: INTD
                                     Otherwise reserved.
    msi_cap_dis[3]               - (RW) MSI capability disable.
                                     0 : enable.
                                     1 : disable.
    MSI_no[6..4]                 - (RW) Message Control.Multiple Message Capable
                                     - 000: 1 MSI requested
                                     - 001: 2 MSI requested
                                     - 010: 4 MSI requested
                                     - 011: 8 MSI requested
                                     - 100: 16 MSI requested
                                     - 101: 32 MSI requested
                                     Otherwise reserved.
                                     Func0 :  3'b000 ,Func1 : 3'b000, Func2 : 3'b000, Func3 : 3'b101
                                     Func4 :  3'b000
    MSI_per_vector_support[7]    - (RW) MSI per-vector masking support
    PASID_SUP[8]                 - (RW) PASID Supported
                                     0: disable
                                     1: enable
    PASID_EXEC_PERM_SUP[9]       - (RW) PASID Execute Permission  Supported
                                     0: disable
                                     1: enable
    PASID_PRIV_MODE_SUP[10]      - (RW) PASID Privileged Mode Supported
                                     0: disable
                                     1: enable
    PASID_MAX_WIDTH[15..11]      - (RW) PASID Max Width
    Table_size[26..16]           - (RW) Table size
    MSI_ext_data[27]             - (RW) MSI Extended message data capable
                                     0: disable
                                     1: enable
    RSVD3[30..28]                - (RW) Reserved
    Impl_MSIX_capability[31]     - (RW) Implement MSI-X capability

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_Impl_MSIX_capability_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_Impl_MSIX_capability_MASK 0x80000000                // Impl_MSIX_capability[31]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_Impl_MSIX_capability_SHFT 31
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_RSVD3_MASK                0x70000000                // RSVD3[30..28]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_RSVD3_SHFT                28
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_ext_data_ADDR         PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_ext_data_MASK         0x08000000                // MSI_ext_data[27]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_ext_data_SHFT         27
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_Table_size_ADDR           PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_Table_size_MASK           0x07FF0000                // Table_size[26..16]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_Table_size_SHFT           16
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_MAX_WIDTH_ADDR      PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_MAX_WIDTH_MASK      0x0000F800                // PASID_MAX_WIDTH[15..11]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_MAX_WIDTH_SHFT      11
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_PRIV_MODE_SUP_ADDR  PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_PRIV_MODE_SUP_MASK  0x00000400                // PASID_PRIV_MODE_SUP[10]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_PRIV_MODE_SUP_SHFT  10
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_EXEC_PERM_SUP_ADDR  PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_EXEC_PERM_SUP_MASK  0x00000200                // PASID_EXEC_PERM_SUP[9]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_EXEC_PERM_SUP_SHFT  9
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_SUP_ADDR            PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_SUP_MASK            0x00000100                // PASID_SUP[8]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_PASID_SUP_SHFT            8
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_per_vector_support_ADDR PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_per_vector_support_MASK 0x00000080                // MSI_per_vector_support[7]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_per_vector_support_SHFT 7
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_no_ADDR               PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_no_MASK               0x00000070                // MSI_no[6..4]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_MSI_no_SHFT               4
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_msi_cap_dis_ADDR          PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_msi_cap_dis_MASK          0x00000008                // msi_cap_dis[3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_msi_cap_dis_SHFT          3
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_InterruptPin_ADDR         PCIE_MAC_IREG_PCIE_PCI_IRQ_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_InterruptPin_MASK         0x00000007                // InterruptPin[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_0_InterruptPin_SHFT         0

/* =====================================================================================

  ---PCIE_PCI_IRQ_1 (0x74030000 + 0x00AC)---

    Table_BIR[2..0]              - (RW) Table BIR
    Table_offset[31..3]          - (RW) Table offset

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_Table_offset_ADDR         PCIE_MAC_IREG_PCIE_PCI_IRQ_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_Table_offset_MASK         0xFFFFFFF8                // Table_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_Table_offset_SHFT         3
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_Table_BIR_ADDR            PCIE_MAC_IREG_PCIE_PCI_IRQ_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_Table_BIR_MASK            0x00000007                // Table_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_1_Table_BIR_SHFT            0

/* =====================================================================================

  ---PCIE_PCI_IRQ_2 (0x74030000 + 0x00B0)---

    PBA_BIR[2..0]                - (RW) PBA BIR
    PBA_offset[31..3]            - (RW) PBA offset

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_PBA_offset_ADDR           PCIE_MAC_IREG_PCIE_PCI_IRQ_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_PBA_offset_MASK           0xFFFFFFF8                // PBA_offset[31..3]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_PBA_offset_SHFT           3
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_PBA_BIR_ADDR              PCIE_MAC_IREG_PCIE_PCI_IRQ_2_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_PBA_BIR_MASK              0x00000007                // PBA_BIR[2..0]
#define PCIE_MAC_IREG_PCIE_PCI_IRQ_2_PBA_BIR_SHFT              0

/* =====================================================================================

  ---PCIE_PCI_IOV_0 (0x74030000 + 0x00B4)---

    ATS_invalidate_queuedepth[4..0] - (RW) Maximum payload size. 
                                     Do not set the PCIe Maximum payload size to a value greater than the Bridge Maximum Payload size.
    ATS_page_aligned_req[5]      - (RW) reserved for phantom functions support
    TPH_NOST_MODE_SUP[6]         - (RW) THP NOST mode support
    RSVD1[15..7]                 - (RO) Reserved
    MCAST_Max_Grp[21..16]        - (RW) Multicast max group
    RSVD2[23..22]                - (RO) Reserved
    MCAST_WIN_Size[29..24]       - (RW) Multicast window size
    RSVD3[30]                    - (RO) Reserved
    MCAST_ECRC_REGEN_SUP[31]     - (RW) Multicast ECRC regen support

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_ECRC_REGEN_SUP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_ECRC_REGEN_SUP_MASK 0x80000000                // MCAST_ECRC_REGEN_SUP[31]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_ECRC_REGEN_SUP_SHFT 31
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD3_ADDR                PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD3_MASK                0x40000000                // RSVD3[30]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD3_SHFT                30
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_WIN_Size_ADDR       PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_WIN_Size_MASK       0x3F000000                // MCAST_WIN_Size[29..24]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_WIN_Size_SHFT       24
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD2_ADDR                PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD2_MASK                0x00C00000                // RSVD2[23..22]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD2_SHFT                22
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_Max_Grp_ADDR        PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_Max_Grp_MASK        0x003F0000                // MCAST_Max_Grp[21..16]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_MCAST_Max_Grp_SHFT        16
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD1_MASK                0x0000FF80                // RSVD1[15..7]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_RSVD1_SHFT                7
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_TPH_NOST_MODE_SUP_ADDR    PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_TPH_NOST_MODE_SUP_MASK    0x00000040                // TPH_NOST_MODE_SUP[6]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_TPH_NOST_MODE_SUP_SHFT    6
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ATS_page_aligned_req_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ATS_page_aligned_req_MASK 0x00000020                // ATS_page_aligned_req[5]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ATS_page_aligned_req_SHFT 5
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ATS_invalidate_queuedepth_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ATS_invalidate_queuedepth_MASK 0x0000001F                // ATS_invalidate_queuedepth[4..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_0_ATS_invalidate_queuedepth_SHFT 0

/* =====================================================================================

  ---PCIE_PCI_IOV_1 (0x74030000 + 0x00B8)---

    PRI_outstanding_page_REQ_CAP[19..0] - (RW) PRI outstanding page request capacity
    RSVD1[31..20]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_PCI_IOV_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_RSVD1_MASK                0xFFF00000                // RSVD1[31..20]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_RSVD1_SHFT                20
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_PRI_outstanding_page_REQ_CAP_ADDR PCIE_MAC_IREG_PCIE_PCI_IOV_1_ADDR
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_PRI_outstanding_page_REQ_CAP_MASK 0x000FFFFF                // PRI_outstanding_page_REQ_CAP[19..0]
#define PCIE_MAC_IREG_PCIE_PCI_IOV_1_PRI_outstanding_page_REQ_CAP_SHFT 0

/* =====================================================================================

  ---PCIE_SW_TRIG_INT (0x74030000 + 0x00BC)---

    sw_trig_intr_host[31..0]     - (RW) Software trigger interrupt for Endpoint mode.
                                     Software can use the register to send Interrupt message via PCIe controller.
                                      If some bits of the register are set to 1, corresponding bits in ISTATUS_HOST (0x18C) are also be set and PCIe controller will send interrupt message to host.
                                     0: clear interrupt.
                                     1: send interrupt.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_sw_trig_intr_host_ADDR  PCIE_MAC_IREG_PCIE_SW_TRIG_INT_ADDR
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_sw_trig_intr_host_MASK  0xFFFFFFFF                // sw_trig_intr_host[31..0]
#define PCIE_MAC_IREG_PCIE_SW_TRIG_INT_sw_trig_intr_host_SHFT  0

/* =====================================================================================

  ---PCIE_PEX_DEV (0x74030000 + 0x00C0)---

    MAXPAYLOAD[2..0]             - (RW) Max Payload Size Supported
                                     Backdoor access to PCIe Capability structure(+04h)[2:0]
                                     -000b: Maximum 128 bytes supported
                                     -001b: Maximum 256 bytes supported
                                     Otherwise: Reserved
    DEV_PH_FUNC[4..3]            - (RO) reserved for phantom functions support
    DEV_RSVD1[5]                 - (RO) Reserved
    L0s_accptable_latency[8..6]  - (RW) Endpoint L0s Acceptable Latency
                                     For endpoint only. For RC it should be Reserved.
                                     Backdoor access to PCIe Capability structure(+04h)[8:6]
                                     - 000b: Maximum of 64ns
                                     - 001b: Maximum of 128ns
                                     - 010b: Maximum of 256ns
                                     - 011b: Maximum of 512ns
                                     - 100b: Maximum of 1us
                                     - 101b: Maximum of 2us
                                     - 110b: Maximum of 4us
                                     - 111b: No Limit
    L1_acceptable_latency[11..9] - (RW) Endpoint L1 Acceptable Latency
                                     For endpoint only. For RC it should be Reserved.
                                     Backdoor access to PCIe Capability structure(+04h)[11:9]
                                     - 000b: Maximum of 1us
                                     - 001b: Maximum of 2us
                                     - 010b: Maximum of 4us
                                     - 011b: Maximum of 8us
                                     - 100b: Maximum of 16us
                                     - 101b: Maximum of 32us
                                     - 110b: Maximum of 64us
                                     - 111b: No Limit
    DEV_RSVD2[27..12]            - (RO) Reserved
    DEV_FLR_SUP[28]              - (RW) reserved for Function-level reset capability
    DEV_RSVD3[31..29]            - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD3_ADDR              PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD3_MASK              0xE0000000                // DEV_RSVD3[31..29]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD3_SHFT              29
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_FLR_SUP_ADDR            PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_FLR_SUP_MASK            0x10000000                // DEV_FLR_SUP[28]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_FLR_SUP_SHFT            28
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD2_MASK              0x0FFFF000                // DEV_RSVD2[27..12]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD2_SHFT              12
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L1_acceptable_latency_ADDR  PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L1_acceptable_latency_MASK  0x00000E00                // L1_acceptable_latency[11..9]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L1_acceptable_latency_SHFT  9
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L0s_accptable_latency_ADDR  PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L0s_accptable_latency_MASK  0x000001C0                // L0s_accptable_latency[8..6]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_L0s_accptable_latency_SHFT  6
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD1_MASK              0x00000020                // DEV_RSVD1[5]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_RSVD1_SHFT              5
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_PH_FUNC_ADDR            PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_PH_FUNC_MASK            0x00000018                // DEV_PH_FUNC[4..3]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_DEV_PH_FUNC_SHFT            3
#define PCIE_MAC_IREG_PCIE_PEX_DEV_MAXPAYLOAD_ADDR             PCIE_MAC_IREG_PCIE_PEX_DEV_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV_MAXPAYLOAD_MASK             0x00000007                // MAXPAYLOAD[2..0]
#define PCIE_MAC_IREG_PCIE_PEX_DEV_MAXPAYLOAD_SHFT             0

/* =====================================================================================

  ---PCIE_PEX_DEV2 (0x74030000 + 0x00C4)---

    Cpl_Timeout[3..0]            - (RW) Completion Timeout Ranges Supported:
                                     0000b Completion Timeout programming not supported
                                     0001b Range A
                                     0010b Range B
                                     0011b Ranges A and B
                                     0110b Ranges B and C
                                     0111b Ranges A, B, and C
                                     1110b Ranges B, C, and D
                                     1111b Ranges A, B, C, and D
                                     XpressRICH3-AXI chosen Completion Timeout Values are:
                                     In Default Range: fixed to 50 ms in hardware and 128 us in simulation
                                     In Range A: 64 us or 4ms
                                     In Range B: 32 ms or 128 ms
                                     In Range C: 512 ms or 2 sec
                                     In Range D: 8 sec or 32 sec
    Cpl_Timeout_Dis[4]           - (RW) Completion Timeout Disable Supported.
                                     0 : not supported.
                                     1 : supported.
    ARI_Forwarding_Support[5]    - (RO) A value of 1b indicates support for the Completion Timeout Disable mechanism.
                                     The Completion Timeout Disable mechanism is required for Endpoints that issue Requests on their own behalf and PCI Express to PCI/PCI-X Bridges that take ownership of Requests issued on PCI Express.
                                     This mechanism is optional for Root Ports.
                                     For all other Functions this field is Reserved and must be hardwired to 0b.
    AtomicOp_Routing_Support[6]  - (RO) Applicable only to Switch Upstream Ports, Switch Downstream Ports, and Root Ports; must be 0b for other Function types. This bit must be set to 1b if the Port supports this optional capability.
    AtomicOp_32b_Completer_Support[7] - (RO) Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    AtomicOp_64b_Completer_Support[8] - (RO) Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. Includes FetchAdd, Swap, and CAS AtomicOps. This bit must be set to 1b if the Function supports this optional capability.
    CAS_128b_Completer_Support[9] - (RO) Applicable to Functions with Memory Space BARs as well as all Root Ports; must be 0b otherwise. This bit must be set to 1b if the Function supports this optional capability.
    No_RO_enabled_PR_PR_Passing[10] - (RO) If this bit is Set, the routing element never carries out the passing permitted.
                                     This bit applies only for Switches and RCs that support peer-to-peer traffic between Root Ports. This bit applies only to Posted Requests being forwarded through the Switch or RC and does not apply to traffic originating or terminating within the Switch or RC itself. All Ports on a Switch or RC must report the same value for this bit.
                                     For all other functions, this bit must be 0b.
    LTR_support[11]              - (RW) LTR (Latency Tolerance Reporting) Support
                                     Backdoor access to PCIe Capability structure(+24h)[11]
                                     0: LTR mechanism is not supported
                                     1: LTR mechanism is supported
    LN_System_CLS[13..12]        - (RO) Applicable only to Root Ports and RCRBs; must be 00b for all other Function types. This field indicates if the Root Port or RCRB supports LN protocol as an LN Completer, and if so, what cacheline size is in effect.
                                     Encodings are:
                                     00b: LN Completer either not supported or not in effect
                                     01b: LN Completer with 64-byte cachelines in effect
                                     10b: LN Completer with 128-byte cachelines in effect
                                     11b: Reserved
    DEV2_DSN_SUP[14]             - (RW) DSN extended capability supported.
                                     0 : not supported.
                                     1 : supported.
    RESERVED15[15]               - (RO) Reserved bits
    DEV_10B_TAG_CPL_SUP[16]      - (RW) 10-Bit Tag Completer Supported.
                                     If this bit is Set, the Function supports 10-Bit Tag Completer capability; otherwise, the Function does not.
    DEV_10B_TAG_REQ_SUP[17]      - (RW) 10-Bit Tag Requester Supported. 
                                     If this bit is Set, the Function supports 10-Bit Tag Requester capability; otherwise, the Function does not.
    DEV2_OBFF[19..18]            - (RO) OBFF Supported type.
                                     00 : no support.
                                     01 : message.
                                     10 : wake.
                                     11 : both.
    RESERVED20[20]               - (RO) Reserved bits
    DEV2_EEPFX_SUP[21]           - (RO)  xxx 
    DEV2_EEPFX_MAX[23..22]       - (RO)  xxx 
    DEV2_RSVD[31..24]            - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD_ADDR             PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD_MASK             0xFF000000                // DEV2_RSVD[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_RSVD_SHFT             24
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_MAX_ADDR        PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_MAX_MASK        0x00C00000                // DEV2_EEPFX_MAX[23..22]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_MAX_SHFT        22
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_SUP_ADDR        PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_SUP_MASK        0x00200000                // DEV2_EEPFX_SUP[21]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_EEPFX_SUP_SHFT        21
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_OBFF_ADDR             PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_OBFF_MASK             0x000C0000                // DEV2_OBFF[19..18]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_OBFF_SHFT             18
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_REQ_SUP_ADDR   PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_REQ_SUP_MASK   0x00020000                // DEV_10B_TAG_REQ_SUP[17]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_REQ_SUP_SHFT   17
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_CPL_SUP_ADDR   PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_CPL_SUP_MASK   0x00010000                // DEV_10B_TAG_CPL_SUP[16]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV_10B_TAG_CPL_SUP_SHFT   16
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DSN_SUP_ADDR          PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DSN_SUP_MASK          0x00004000                // DEV2_DSN_SUP[14]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_DEV2_DSN_SUP_SHFT          14
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LN_System_CLS_ADDR         PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LN_System_CLS_MASK         0x00003000                // LN_System_CLS[13..12]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LN_System_CLS_SHFT         12
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LTR_support_ADDR           PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LTR_support_MASK           0x00000800                // LTR_support[11]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_LTR_support_SHFT           11
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_No_RO_enabled_PR_PR_Passing_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_No_RO_enabled_PR_PR_Passing_MASK 0x00000400                // No_RO_enabled_PR_PR_Passing[10]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_No_RO_enabled_PR_PR_Passing_SHFT 10
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_CAS_128b_Completer_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_CAS_128b_Completer_Support_MASK 0x00000200                // CAS_128b_Completer_Support[9]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_CAS_128b_Completer_Support_SHFT 9
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_64b_Completer_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_64b_Completer_Support_MASK 0x00000100                // AtomicOp_64b_Completer_Support[8]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_64b_Completer_Support_SHFT 8
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_32b_Completer_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_32b_Completer_Support_MASK 0x00000080                // AtomicOp_32b_Completer_Support[7]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_32b_Completer_Support_SHFT 7
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_Routing_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_Routing_Support_MASK 0x00000040                // AtomicOp_Routing_Support[6]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_AtomicOp_Routing_Support_SHFT 6
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ARI_Forwarding_Support_ADDR PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ARI_Forwarding_Support_MASK 0x00000020                // ARI_Forwarding_Support[5]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_ARI_Forwarding_Support_SHFT 5
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_Dis_ADDR       PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_Dis_MASK       0x00000010                // Cpl_Timeout_Dis[4]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_Dis_SHFT       4
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_ADDR           PCIE_MAC_IREG_PCIE_PEX_DEV2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_MASK           0x0000000F                // Cpl_Timeout[3..0]
#define PCIE_MAC_IREG_PCIE_PEX_DEV2_Cpl_Timeout_SHFT           0

/* =====================================================================================

  ---PCIE_PEX_LINK (0x74030000 + 0x00C8)---

    Low_SKP_Gen[3..0]            - (RW) Any bit in Lower SKP OS Generation Supported Speeds Vector field
    LINK2_LOW_SKP_RCP[7..4]      - (RW) Reserved
    LINK2_RETIMER_DET[8]         - (RW)  xxx 
    LINK2_CROSSLINK[9]           - (RW)  xxx 
    ASPM_support[11..10]         - (RW) ASPM Support
                                     Backdoor access to PCIe Capability structure(+0Ch)[11:10]
                                     - 00b: No ASPM Support
                                     - 01b: L0s Supported
                                     - 10b: L1 Supported
                                     - 11b: L0s and L1 Supported
    L0s_exit_latency[14..12]     - (RW) L0s Exit Latency
                                     Backdoor access to PCIe Capability structure(+0Ch)[14:12]
                                     - 000b: Less than 64ns
                                     - 001b: 64ns to less than 128ns
                                     - 010b: 128ns to less than 256ns
                                     - 011b: 256ns to less than 512ns
                                     - 100b: 512ns to less than 1us
                                     - 101b: 1us to less than 2us
                                     - 110b: 2us to less than 4us
                                     - 111b: More than 4us
    L1_exit_latency[17..15]      - (RW) L1 Exit Latency
                                     Backdoor access to PCIe Capability structure(+0Ch)[17:15]
                                     - 000b: Less than 1us
                                     - 001b: 1us to less than 2us
                                     - 010b: 2us to less than 4us
                                     - 011b: 4us to less than 8us
                                     - 100b: 8us to less than 16us
                                     - 101b: 16us to less than 32us
                                     - 110b: 32us to less than 64us
                                     - 111b: More than 64us
    CLK_PWR_SUPPORT[18]          - (RW) Clock Power Management
                                     -0b: indicates that the component does not support L1P2 and that reference clock(s) must not be removed in these Link states
                                     -1b: indicates that the component support L1P2
                                     L1 PM Substates defines other semantics for the CLKREQ# signal, which are managed independently of Clock Power Management.
    DL_Surprise_down_report[19]  - (RW) Surprise Down Error Reporting Capable
                                     Backdoor access to PCIe Capability structure(+0Ch)[19]
    DL_act_report[20]            - (RW) DLL Active Reporting Capable Support
                                     Backdoor access to PCIe Capability structure(+0Ch)[20]
    RSVD2[23..21]                - (RW) Reserved
    PortNumber[31..24]           - (RW) Port Number
                                     Backdoor access to PCIe Capability structure(+0Ch)[31:24]

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_LINK_PortNumber_ADDR            PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_PortNumber_MASK            0xFF000000                // PortNumber[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_PortNumber_SHFT            24
#define PCIE_MAC_IREG_PCIE_PEX_LINK_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_RSVD2_MASK                 0x00E00000                // RSVD2[23..21]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_RSVD2_SHFT                 21
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_act_report_ADDR         PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_act_report_MASK         0x00100000                // DL_act_report[20]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_act_report_SHFT         20
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_Surprise_down_report_ADDR PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_Surprise_down_report_MASK 0x00080000                // DL_Surprise_down_report[19]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_DL_Surprise_down_report_SHFT 19
#define PCIE_MAC_IREG_PCIE_PEX_LINK_CLK_PWR_SUPPORT_ADDR       PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_CLK_PWR_SUPPORT_MASK       0x00040000                // CLK_PWR_SUPPORT[18]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_CLK_PWR_SUPPORT_SHFT       18
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L1_exit_latency_ADDR       PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L1_exit_latency_MASK       0x00038000                // L1_exit_latency[17..15]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L1_exit_latency_SHFT       15
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L0s_exit_latency_ADDR      PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L0s_exit_latency_MASK      0x00007000                // L0s_exit_latency[14..12]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_L0s_exit_latency_SHFT      12
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ASPM_support_ADDR          PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ASPM_support_MASK          0x00000C00                // ASPM_support[11..10]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_ASPM_support_SHFT          10
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_CROSSLINK_ADDR       PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_CROSSLINK_MASK       0x00000200                // LINK2_CROSSLINK[9]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_CROSSLINK_SHFT       9
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_RETIMER_DET_ADDR     PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_RETIMER_DET_MASK     0x00000100                // LINK2_RETIMER_DET[8]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_RETIMER_DET_SHFT     8
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_LOW_SKP_RCP_ADDR     PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_LOW_SKP_RCP_MASK     0x000000F0                // LINK2_LOW_SKP_RCP[7..4]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_LINK2_LOW_SKP_RCP_SHFT     4
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Gen_ADDR           PCIE_MAC_IREG_PCIE_PEX_LINK_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Gen_MASK           0x0000000F                // Low_SKP_Gen[3..0]
#define PCIE_MAC_IREG_PCIE_PEX_LINK_Low_SKP_Gen_SHFT           0

/* =====================================================================================

  ---PCIE_PEX_SLOT (0x74030000 + 0x00CC)---

    Attention_button_present[0]  - (RW) Attention button present
    Pwr_ctrl_present[1]          - (RW) Power controller present
    MRL_sensor_present[2]        - (RW) MRL sensor present
    Attention_indicator_present[3] - (RW) Attention indicator present
    Pwr_indicator_present[4]     - (RW) Power indicator present
    Hot_plug_surprise[5]         - (RW) Hot-plug surprise
    Hot_plug_capable[6]          - (RW) Hot-plug capable
    Slot_pwr_limit_val[14..7]    - (RW) Slot power limit value
    Slot_pwr_limit_scale[16..15] - (RW) Slot power limit scale
    Electromechanical_interlock_present[17] - (RW) Electromechanical interlock present
    No_command_complete_support[18] - (RW) No command complete support
    Physical_slot_num[31..19]    - (RW) Physical slot number

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Physical_slot_num_ADDR     PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Physical_slot_num_MASK     0xFFF80000                // Physical_slot_num[31..19]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Physical_slot_num_SHFT     19
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_No_command_complete_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_No_command_complete_support_MASK 0x00040000                // No_command_complete_support[18]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_No_command_complete_support_SHFT 18
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Electromechanical_interlock_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Electromechanical_interlock_present_MASK 0x00020000                // Electromechanical_interlock_present[17]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Electromechanical_interlock_present_SHFT 17
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_scale_ADDR  PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_scale_MASK  0x00018000                // Slot_pwr_limit_scale[16..15]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_scale_SHFT  15
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_val_ADDR    PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_val_MASK    0x00007F80                // Slot_pwr_limit_val[14..7]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Slot_pwr_limit_val_SHFT    7
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_capable_ADDR      PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_capable_MASK      0x00000040                // Hot_plug_capable[6]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_capable_SHFT      6
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_surprise_ADDR     PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_surprise_MASK     0x00000020                // Hot_plug_surprise[5]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Hot_plug_surprise_SHFT     5
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_indicator_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_indicator_present_MASK 0x00000010                // Pwr_indicator_present[4]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_indicator_present_SHFT 4
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_indicator_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_indicator_present_MASK 0x00000008                // Attention_indicator_present[3]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_indicator_present_SHFT 3
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_MRL_sensor_present_ADDR    PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_MRL_sensor_present_MASK    0x00000004                // MRL_sensor_present[2]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_MRL_sensor_present_SHFT    2
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_ctrl_present_ADDR      PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_ctrl_present_MASK      0x00000002                // Pwr_ctrl_present[1]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Pwr_ctrl_present_SHFT      1
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_button_present_ADDR PCIE_MAC_IREG_PCIE_PEX_SLOT_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_button_present_MASK 0x00000001                // Attention_button_present[0]
#define PCIE_MAC_IREG_PCIE_PEX_SLOT_Attention_button_present_SHFT 0

/* =====================================================================================

  ---PCIE_PEX_ROOT_VC (0x74030000 + 0x00D0)---

    RP_CRS_SUP[0]                - (RW) When Set, this bit indicates that the Root Port is capable of returning Configuration Request Retry Status (CRS) Completion Status to software
    RP_RSVD[6..1]                - (RW) reserved for Root Capabilities support
    RP_EEPFX_FORWARD[7]          - (RW)  xxx 
    RP_BUS_NUM[15..8]            - (RW)  xxx 
    ACS_V[16]                    - (RW)  xxx 
    ACS_B[17]                    - (RW)  xxx 
    ACS_R[18]                    - (RW)  xxx 
    ACS_C[19]                    - (RW)  xxx 
    ACS_U[20]                    - (RW)  xxx 
    ACS_E[21]                    - (RW)  xxx 
    ACS_T[22]                    - (RW)  xxx 
    ACS_RSVD[23]                 - (RW)  xxx 
    ACS_VECSIZE[29..24]          - (RW)  xxx 
    PTM_REQ_CAP[30]              - (RW)  xxx 
    PTM_RESP_CAP[31]             - (RW)  xxx 

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_RESP_CAP_ADDR       PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_RESP_CAP_MASK       0x80000000                // PTM_RESP_CAP[31]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_RESP_CAP_SHFT       31
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_REQ_CAP_ADDR        PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_REQ_CAP_MASK        0x40000000                // PTM_REQ_CAP[30]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_PTM_REQ_CAP_SHFT        30
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_VECSIZE_ADDR        PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_VECSIZE_MASK        0x3F000000                // ACS_VECSIZE[29..24]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_VECSIZE_SHFT        24
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_RSVD_ADDR           PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_RSVD_MASK           0x00800000                // ACS_RSVD[23]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_RSVD_SHFT           23
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_T_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_T_MASK              0x00400000                // ACS_T[22]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_T_SHFT              22
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_E_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_E_MASK              0x00200000                // ACS_E[21]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_E_SHFT              21
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_U_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_U_MASK              0x00100000                // ACS_U[20]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_U_SHFT              20
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_C_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_C_MASK              0x00080000                // ACS_C[19]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_C_SHFT              19
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_R_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_R_MASK              0x00040000                // ACS_R[18]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_R_SHFT              18
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_B_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_B_MASK              0x00020000                // ACS_B[17]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_B_SHFT              17
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_V_ADDR              PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_V_MASK              0x00010000                // ACS_V[16]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ACS_V_SHFT              16
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_BUS_NUM_ADDR         PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_BUS_NUM_MASK         0x0000FF00                // RP_BUS_NUM[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_BUS_NUM_SHFT         8
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_EEPFX_FORWARD_ADDR   PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_EEPFX_FORWARD_MASK   0x00000080                // RP_EEPFX_FORWARD[7]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_EEPFX_FORWARD_SHFT   7
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_RSVD_ADDR            PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_RSVD_MASK            0x0000007E                // RP_RSVD[6..1]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_RSVD_SHFT            1
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_CRS_SUP_ADDR         PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_CRS_SUP_MASK         0x00000001                // RP_CRS_SUP[0]
#define PCIE_MAC_IREG_PCIE_PEX_ROOT_VC_RP_CRS_SUP_SHFT         0

/* =====================================================================================

  ---PCIE_PEX_SPC (0x74030000 + 0x00D4)---

    RSVD1[11..0]                 - (RW) Reserved
    Slot_Register_Implemented[12] - (RW) Slot Register Implemented
                                     Backdoor access to PCIe Capability structure(+00h)[24]
    Slot_clock_configuration[13] - (RW) Slot Clock Configuration
                                     0: Independent
                                     1: Using reference clock
    Link_de_emphasis[14]         - (RW) Link Selectable De-emphasis
                                     Backdoor access to PCIe  Capability structure(+10h)[6]
                                     1: -3.5 dB
                                     0: -6 dB
    RP_RCB[15]                   - (RW) Rootport RCB
                                     Backdoor access to PCIe Capability structure(+10h)[3]
    RP_DEV_NUM[20..16]           - (RW) Rootport Device Number
                                     Device Number for Rootport
    RESERVED21[30..21]           - (RO) Reserved bits
    AER_Implemented[31]          - (RW) AER Implemented
                                     0: AER NOT Implemented
                                     1: AER Implemented

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_SPC_AER_Implemented_ADDR        PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_AER_Implemented_MASK        0x80000000                // AER_Implemented[31]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_AER_Implemented_SHFT        31
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_DEV_NUM_ADDR             PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_DEV_NUM_MASK             0x001F0000                // RP_DEV_NUM[20..16]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_DEV_NUM_SHFT             16
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_RCB_ADDR                 PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_RCB_MASK                 0x00008000                // RP_RCB[15]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RP_RCB_SHFT                 15
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Link_de_emphasis_ADDR       PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Link_de_emphasis_MASK       0x00004000                // Link_de_emphasis[14]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Link_de_emphasis_SHFT       14
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_clock_configuration_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_clock_configuration_MASK 0x00002000                // Slot_clock_configuration[13]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_clock_configuration_SHFT 13
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_Register_Implemented_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_Register_Implemented_MASK 0x00001000                // Slot_Register_Implemented[12]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_Slot_Register_Implemented_SHFT 12
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RSVD1_ADDR                  PCIE_MAC_IREG_PCIE_PEX_SPC_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RSVD1_MASK                  0x00000FFF                // RSVD1[11..0]
#define PCIE_MAC_IREG_PCIE_PEX_SPC_RSVD1_SHFT                  0

/* =====================================================================================

  ---PCIE_PEX_SPC2 (0x74030000 + 0x00D8)---

    RSVD1[0]                     - (RO) Reserved
    ECRC_generation_support[1]   - (RW) 0: ECRC generation NOT supported
                                     1: ECRC generation supported
    ECRC_checking_support[2]     - (RW) 0: ECRC checking NOT supported
                                     1: ECRC checking supported
    AER_MSI_msg_num[7..3]        - (RW) AER MSI message number
                                     This register indicates which MSI vector is used for the interrupt message generated in association with any of the status bits of this Capability.
                                     For MSI, the value in this register indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    PCIE_MSI_msg_num[12..8]      - (RW) PCI Express MSI message number
                                     This field indicates which MSI/MSI-X vector is used for the interrupt message generated in association with any of the status bits of this Capability structure.
                                     For MSI, the value in this field indicates the offset between the base Message Data and the interrupt message that is generated. Hardware is required to update this field so that it is correct if the number of MSI Messages assigned to the Function changes when software writes to the Multiple Message Enable field in the MSI Message Control register.
    RSVD2[15..13]                - (RO) Reserved
    ASPM_L0s_entry_delay[23..16] - (RW) ASPM L0s Entry Delay.
                                     This field indicated the L0s entry latency for the given PCIe Link (in step of 256ns)
    ASPM_L1_entry_delay[31..24]  - (RW) ASPM L1 Entry Delay.
                                     For Upstream Port only.
                                     This field indicated the L1 entry latency for the given PCIe Link  (in step of 256ns)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L1_entry_delay_ADDR   PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L1_entry_delay_MASK   0xFF000000                // ASPM_L1_entry_delay[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L1_entry_delay_SHFT   24
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L0s_entry_delay_ADDR  PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L0s_entry_delay_MASK  0x00FF0000                // ASPM_L0s_entry_delay[23..16]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ASPM_L0s_entry_delay_SHFT  16
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD2_MASK                 0x0000E000                // RSVD2[15..13]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD2_SHFT                 13
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_PCIE_MSI_msg_num_ADDR      PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_PCIE_MSI_msg_num_MASK      0x00001F00                // PCIE_MSI_msg_num[12..8]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_PCIE_MSI_msg_num_SHFT      8
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_MSI_msg_num_ADDR       PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_MSI_msg_num_MASK       0x000000F8                // AER_MSI_msg_num[7..3]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_AER_MSI_msg_num_SHFT       3
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_checking_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_checking_support_MASK 0x00000004                // ECRC_checking_support[2]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_checking_support_SHFT 2
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_generation_support_ADDR PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_generation_support_MASK 0x00000002                // ECRC_generation_support[1]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_ECRC_generation_support_SHFT 1
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD1_ADDR                 PCIE_MAC_IREG_PCIE_PEX_SPC2_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD1_MASK                 0x00000001                // RSVD1[0]
#define PCIE_MAC_IREG_PCIE_PEX_SPC2_RSVD1_SHFT                 0

/* =====================================================================================

  ---PCIE_PEX_NFTS (0x74030000 + 0x00DC)---

    Gen1_FTS[7..0]               - (RW) Gen1 FTS
                                     Number of FTS at 2.5G
    Gen2_FTS[15..8]              - (RW) Gen2 FTS
                                     Number of FTS at 5G
    Gen3_FTS[23..16]             - (RW) Gen3 FTS
                                     Number of FTS at 8G
    Gen4_FTS[31..24]             - (RW) Gen4 FTS
                                     Number of FTS at 16G

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen4_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen4_FTS_MASK              0xFF000000                // Gen4_FTS[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen4_FTS_SHFT              24
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen3_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen3_FTS_MASK              0x00FF0000                // Gen3_FTS[23..16]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen3_FTS_SHFT              16
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen2_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen2_FTS_MASK              0x0000FF00                // Gen2_FTS[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen2_FTS_SHFT              8
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen1_FTS_ADDR              PCIE_MAC_IREG_PCIE_PEX_NFTS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen1_FTS_MASK              0x000000FF                // Gen1_FTS[7..0]
#define PCIE_MAC_IREG_PCIE_PEX_NFTS_Gen1_FTS_SHFT              0

/* =====================================================================================

  ---PCIE_PEX_L1SS (0x74030000 + 0x00E0)---

    PCI_PM_L12_supported[0]      - (RW) PCI-PM L1.2 supported
    PCI_PM_L11_supported[1]      - (RW) PCI-PM L1.1 supported
    ASPM_L12_supported[2]        - (RW) ASPM L1.2 supported
    ASPM_L11_supported[3]        - (RW) ASPM L1.1 supported
    L1SS_supported[4]            - (RW) L1 PM substates supported (the L1 PM substates capability is only implemented if this bit is set)
    T_POWEROFF_val[7..5]         - (RW) T_POWEROFF value in units of 256ns (000 = 256ns, 110 = 7*256ns)
    Port_common_mode_restore_time[15..8] - (RW) Port common mode restore time
    Port_T_POWER_ON_cale[17..16] - (RW) Port T_POWER_ON scale
    RSVD1[18]                    - (RW) Reserved
    Port_T_POWER_ON_val[23..19]  - (RW) Port T_POWER_ON value
    RSVD2[31..24]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD2_MASK                 0xFF000000                // RSVD2[31..24]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD2_SHFT                 24
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_val_ADDR   PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_val_MASK   0x00F80000                // Port_T_POWER_ON_val[23..19]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_val_SHFT   19
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD1_ADDR                 PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD1_MASK                 0x00040000                // RSVD1[18]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_RSVD1_SHFT                 18
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_cale_ADDR  PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_cale_MASK  0x00030000                // Port_T_POWER_ON_cale[17..16]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_T_POWER_ON_cale_SHFT  16
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_common_mode_restore_time_ADDR PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_common_mode_restore_time_MASK 0x0000FF00                // Port_common_mode_restore_time[15..8]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_Port_common_mode_restore_time_SHFT 8
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_T_POWEROFF_val_ADDR        PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_T_POWEROFF_val_MASK        0x000000E0                // T_POWEROFF_val[7..5]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_T_POWEROFF_val_SHFT        5
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_L1SS_supported_ADDR        PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_L1SS_supported_MASK        0x00000010                // L1SS_supported[4]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_L1SS_supported_SHFT        4
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L11_supported_ADDR    PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L11_supported_MASK    0x00000008                // ASPM_L11_supported[3]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L11_supported_SHFT    3
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L12_supported_ADDR    PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L12_supported_MASK    0x00000004                // ASPM_L12_supported[2]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_ASPM_L12_supported_SHFT    2
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L11_supported_ADDR  PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L11_supported_MASK  0x00000002                // PCI_PM_L11_supported[1]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L11_supported_SHFT  1
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L12_supported_ADDR  PCIE_MAC_IREG_PCIE_PEX_L1SS_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L12_supported_MASK  0x00000001                // PCI_PM_L12_supported[0]
#define PCIE_MAC_IREG_PCIE_PEX_L1SS_PCI_PM_L12_supported_SHFT  0

/* =====================================================================================

  ---PCIE_BAR_01_0 (0x74030000 + 0x00E4)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
    BAR_resized[1]               - (RW) BAR resized
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_0_Bar_size_mask_lsb_ADDR     PCIE_MAC_IREG_PCIE_BAR_01_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_Bar_size_mask_lsb_MASK     0xFFFFFFFC                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_Bar_size_mask_lsb_SHFT     2
#define PCIE_MAC_IREG_PCIE_BAR_01_0_BAR_resized_ADDR           PCIE_MAC_IREG_PCIE_BAR_01_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_BAR_resized_MASK           0x00000002                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_BAR_resized_SHFT           1
#define PCIE_MAC_IREG_PCIE_BAR_01_0_BAR_type_ADDR              PCIE_MAC_IREG_PCIE_BAR_01_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_0_BAR_type_MASK              0x00000001                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_01_0_BAR_type_SHFT              0

/* =====================================================================================

  ---PCIE_BAR_01_1 (0x74030000 + 0x00E8)---

    Bar_size_mask_msb[31..0]     - (RW) if Bit [2] is 0b, BAR 1 has same settings as BAR 0's Bits [31:0]; 
                                     otherwise is Bar size mask

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_01_1_Bar_size_mask_msb_ADDR     PCIE_MAC_IREG_PCIE_BAR_01_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_01_1_Bar_size_mask_msb_MASK     0xFFFFFFFF                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_01_1_Bar_size_mask_msb_SHFT     0

/* =====================================================================================

  ---PCIE_BAR_23_0 (0x74030000 + 0x00EC)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
    BAR_resized[1]               - (RW) BAR resized
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_0_Bar_size_mask_lsb_ADDR     PCIE_MAC_IREG_PCIE_BAR_23_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_Bar_size_mask_lsb_MASK     0xFFFFFFFC                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_Bar_size_mask_lsb_SHFT     2
#define PCIE_MAC_IREG_PCIE_BAR_23_0_BAR_resized_ADDR           PCIE_MAC_IREG_PCIE_BAR_23_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_BAR_resized_MASK           0x00000002                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_BAR_resized_SHFT           1
#define PCIE_MAC_IREG_PCIE_BAR_23_0_BAR_type_ADDR              PCIE_MAC_IREG_PCIE_BAR_23_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_0_BAR_type_MASK              0x00000001                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_23_0_BAR_type_SHFT              0

/* =====================================================================================

  ---PCIE_BAR_23_1 (0x74030000 + 0x00F0)---

    Bar_size_mask_msb[31..0]     - (RW) if Bit [2] is 0b, BAR 1 has same settings as BAR 0's Bits [31:0]; 
                                     otherwise is Bar size mask

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_23_1_Bar_size_mask_msb_ADDR     PCIE_MAC_IREG_PCIE_BAR_23_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_23_1_Bar_size_mask_msb_MASK     0xFFFFFFFF                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_23_1_Bar_size_mask_msb_SHFT     0

/* =====================================================================================

  ---PCIE_BAR_45_0 (0x74030000 + 0x00F4)---

    BAR_type[0]                  - (RW) BAR type (0=memory, 1=IO)
    BAR_resized[1]               - (RW) BAR resized
    Bar_size_mask_lsb[31..2]     - (RW) If BAR type is memory.
                                     bit[2] : 64-bit address space.
                                     bit[3] : prefetchable.
                                     bit[31:4] : Bar size mask.
                                     If BAR type is IO
                                     bit[31:2] : Bar size mask.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_0_Bar_size_mask_lsb_ADDR     PCIE_MAC_IREG_PCIE_BAR_45_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_Bar_size_mask_lsb_MASK     0xFFFFFFFC                // Bar_size_mask_lsb[31..2]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_Bar_size_mask_lsb_SHFT     2
#define PCIE_MAC_IREG_PCIE_BAR_45_0_BAR_resized_ADDR           PCIE_MAC_IREG_PCIE_BAR_45_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_BAR_resized_MASK           0x00000002                // BAR_resized[1]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_BAR_resized_SHFT           1
#define PCIE_MAC_IREG_PCIE_BAR_45_0_BAR_type_ADDR              PCIE_MAC_IREG_PCIE_BAR_45_0_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_0_BAR_type_MASK              0x00000001                // BAR_type[0]
#define PCIE_MAC_IREG_PCIE_BAR_45_0_BAR_type_SHFT              0

/* =====================================================================================

  ---PCIE_BAR_45_1 (0x74030000 + 0x00F8)---

    Bar_size_mask_msb[31..0]     - (RW) if Bit [2] is 0b, BAR 1 has same settings as BAR 0's Bits [31:0]; 
                                     otherwise is Bar size mask

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_45_1_Bar_size_mask_msb_ADDR     PCIE_MAC_IREG_PCIE_BAR_45_1_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_45_1_Bar_size_mask_msb_MASK     0xFFFFFFFF                // Bar_size_mask_msb[31..0]
#define PCIE_MAC_IREG_PCIE_BAR_45_1_Bar_size_mask_msb_SHFT     0

/* =====================================================================================

  ---PCIE_BAR_WIN (0x74030000 + 0x00FC)---

    IOWIN_IMPL[0]                - (RW) IO Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+1Ch)[15:0]
    IOWIN_32B[1]                 - (RW) IO Window 32-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+30h)[31:0]
    PFWIN_IMPL[2]                - (RW) Prefetchable Memory Window Implemented
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+24h)[31:0]
    PFWIN_64B[3]                 - (RW) Prefetchable Memory Window 64-bit Addressing Support
                                     Backdoor access to change register access attribute in PCIe Configuration Space Header(+28h)[31:0] & PCIe Configuration Space Header(+2C)[31:0]
    RSVD1[31..4]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BAR_WIN_RSVD1_ADDR                  PCIE_MAC_IREG_PCIE_BAR_WIN_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_RSVD1_MASK                  0xFFFFFFF0                // RSVD1[31..4]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_RSVD1_SHFT                  4
#define PCIE_MAC_IREG_PCIE_BAR_WIN_PFWIN_64B_ADDR              PCIE_MAC_IREG_PCIE_BAR_WIN_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_PFWIN_64B_MASK              0x00000008                // PFWIN_64B[3]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_PFWIN_64B_SHFT              3
#define PCIE_MAC_IREG_PCIE_BAR_WIN_PFWIN_IMPL_ADDR             PCIE_MAC_IREG_PCIE_BAR_WIN_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_PFWIN_IMPL_MASK             0x00000004                // PFWIN_IMPL[2]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_PFWIN_IMPL_SHFT             2
#define PCIE_MAC_IREG_PCIE_BAR_WIN_IOWIN_32B_ADDR              PCIE_MAC_IREG_PCIE_BAR_WIN_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_IOWIN_32B_MASK              0x00000002                // IOWIN_32B[1]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_IOWIN_32B_SHFT              1
#define PCIE_MAC_IREG_PCIE_BAR_WIN_IOWIN_IMPL_ADDR             PCIE_MAC_IREG_PCIE_BAR_WIN_ADDR
#define PCIE_MAC_IREG_PCIE_BAR_WIN_IOWIN_IMPL_MASK             0x00000001                // IOWIN_IMPL[0]
#define PCIE_MAC_IREG_PCIE_BAR_WIN_IOWIN_IMPL_SHFT             0

/* =====================================================================================

  ---PCIE_EQ_PRESET_0_1 (0x74030000 + 0x0100)---

    val_ln0[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_ln1[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_MASK          0xFFFF0000                // val_ln1[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln1_SHFT          16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_MASK          0x0000FFFF                // val_ln0[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_0_1_val_ln0_SHFT          0

/* =====================================================================================

  ---PCIE_EQ_PRESET_2_3 (0x74030000 + 0x0104)---

    val_ln2[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_ln3[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_MASK          0xFFFF0000                // val_ln3[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln3_SHFT          16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_MASK          0x0000FFFF                // val_ln2[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_2_3_val_ln2_SHFT          0

/* =====================================================================================

  ---PCIE_EQ_PRESET_4_5 (0x74030000 + 0x0108)---

    val_ln4[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_ln5[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_MASK          0xFFFF0000                // val_ln5[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln5_SHFT          16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_MASK          0x0000FFFF                // val_ln4[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_4_5_val_ln4_SHFT          0

/* =====================================================================================

  ---PCIE_EQ_PRESET_6_7 (0x74030000 + 0x010C)---

    val_ln6[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_ln7[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_MASK          0xFFFF0000                // val_ln7[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln7_SHFT          16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_MASK          0x0000FFFF                // val_ln6[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_6_7_val_ln6_SHFT          0

/* =====================================================================================

  ---PCIE_EQ_PRESET_8_9 (0x74030000 + 0x0110)---

    val_ln8[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_ln9[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_MASK          0xFFFF0000                // val_ln9[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln9_SHFT          16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_ADDR          PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_MASK          0x0000FFFF                // val_ln8[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_8_9_val_ln8_SHFT          0

/* =====================================================================================

  ---PCIE_EQ_PRESET_10_11 (0x74030000 + 0x0114)---

    val_lna[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_lnb[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_lnb_ADDR        PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_lnb_MASK        0xFFFF0000                // val_lnb[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_lnb_SHFT        16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_lna_ADDR        PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_lna_MASK        0x0000FFFF                // val_lna[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_10_11_val_lna_SHFT        0

/* =====================================================================================

  ---PCIE_EQ_PRESET_12_13 (0x74030000 + 0x0118)---

    val_lnc[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_lnd[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_lnd_ADDR        PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_lnd_MASK        0xFFFF0000                // val_lnd[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_lnd_SHFT        16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_lnc_ADDR        PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_lnc_MASK        0x0000FFFF                // val_lnc[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_12_13_val_lnc_SHFT        0

/* =====================================================================================

  ---PCIE_EQ_PRESET_14_15 (0x74030000 + 0x011C)---

    val_lne[15..0]               - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.
    val_lnf[31..16]              - (RW) Per lane value are described below
                                     Bit [3:0]: Downstream port transmitter preset
                                     Bit [6:4]: Downstream port receiver preset hint
                                     Bit [7]: reserved
                                     Bit [11:8]: Upstream port transmitter preset
                                     Bit [14:12]: Upstream port receiver preset hint
                                     Bit [15]: reserved
                                     Note: Transmitter preset and receiver preset values must be set to legal values, as specified in the PCI Express Specification.
                                     Note: Bit [15:0] is at address 0x0100 - 0x0101 and Bit [255:240] is at address 0x011E - 0x011F.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_lnf_ADDR        PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_lnf_MASK        0xFFFF0000                // val_lnf[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_lnf_SHFT        16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_lne_ADDR        PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_lne_MASK        0x0000FFFF                // val_lne[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET_14_15_val_lne_SHFT        0

/* =====================================================================================

  ---PCIE_SRIOV_0 (0x74030000 + 0x0120)---

    VF_dev_ID[15..0]             - (RW) VF device ID
    VF_subsystem_dev_ID[31..16]  - (RW) VF subsystem device ID

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_0_VF_subsystem_dev_ID_ADDR    PCIE_MAC_IREG_PCIE_SRIOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_VF_subsystem_dev_ID_MASK    0xFFFF0000                // VF_subsystem_dev_ID[31..16]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_VF_subsystem_dev_ID_SHFT    16
#define PCIE_MAC_IREG_PCIE_SRIOV_0_VF_dev_ID_ADDR              PCIE_MAC_IREG_PCIE_SRIOV_0_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_0_VF_dev_ID_MASK              0x0000FFFF                // VF_dev_ID[15..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_0_VF_dev_ID_SHFT              0

/* =====================================================================================

  ---PCIE_SRIOV_1 (0x74030000 + 0x0124)---

    page_sizes_supported[21..0]  - (RW) Supported page sizes (Mandatory page sizes are always supported regardless of the values specified here.)
    RSVD_Virtual_Func_BARs[31..22] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_1_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_RSVD_Virtual_Func_BARs_MASK 0xFFC00000                // RSVD_Virtual_Func_BARs[31..22]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_RSVD_Virtual_Func_BARs_SHFT 22
#define PCIE_MAC_IREG_PCIE_SRIOV_1_page_sizes_supported_ADDR   PCIE_MAC_IREG_PCIE_SRIOV_1_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_1_page_sizes_supported_MASK   0x003FFFFF                // page_sizes_supported[21..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_1_page_sizes_supported_SHFT   0

/* =====================================================================================

  ---PCIE_SRIOV_2 (0x74030000 + 0x0128)---

    RSVD_Virtual_Func_BARs[31..0] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_2_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_2_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_2_RSVD_Virtual_Func_BARs_MASK 0xFFFFFFFF                // RSVD_Virtual_Func_BARs[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_2_RSVD_Virtual_Func_BARs_SHFT 0

/* =====================================================================================

  ---PCIE_SRIOV_3 (0x74030000 + 0x012C)---

    RSVD_Virtual_Func_BARs[31..0] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_3_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_3_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_3_RSVD_Virtual_Func_BARs_MASK 0xFFFFFFFF                // RSVD_Virtual_Func_BARs[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_3_RSVD_Virtual_Func_BARs_SHFT 0

/* =====================================================================================

  ---PCIE_SRIOV_4 (0x74030000 + 0x0130)---

    RSVD_Virtual_Func_BARs[31..0] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_4_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_4_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_4_RSVD_Virtual_Func_BARs_MASK 0xFFFFFFFF                // RSVD_Virtual_Func_BARs[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_4_RSVD_Virtual_Func_BARs_SHFT 0

/* =====================================================================================

  ---PCIE_SRIOV_5 (0x74030000 + 0x0134)---

    RSVD_Virtual_Func_BARs[31..0] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_5_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_5_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_5_RSVD_Virtual_Func_BARs_MASK 0xFFFFFFFF                // RSVD_Virtual_Func_BARs[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_5_RSVD_Virtual_Func_BARs_SHFT 0

/* =====================================================================================

  ---PCIE_SRIOV_6 (0x74030000 + 0x0138)---

    RSVD_Virtual_Func_BARs[31..0] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_6_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_6_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_6_RSVD_Virtual_Func_BARs_MASK 0xFFFFFFFF                // RSVD_Virtual_Func_BARs[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_6_RSVD_Virtual_Func_BARs_SHFT 0

/* =====================================================================================

  ---PCIE_SRIOV_7 (0x74030000 + 0x013C)---

    RSVD_Virtual_Func_BARs[31..0] - (RW) reserved for Virtual Functions BARs settings
                                     Note: Virtual Functions BARs are set equal to the Physical Function BARs settings.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_SRIOV_7_RSVD_Virtual_Func_BARs_ADDR PCIE_MAC_IREG_PCIE_SRIOV_7_ADDR
#define PCIE_MAC_IREG_PCIE_SRIOV_7_RSVD_Virtual_Func_BARs_MASK 0xFFFFFFFF                // RSVD_Virtual_Func_BARs[31..0]
#define PCIE_MAC_IREG_PCIE_SRIOV_7_RSVD_Virtual_Func_BARs_SHFT 0

/* =====================================================================================

  ---PCIE_CFGNUM (0x74030000 + 0x0140)---

    PCIE_FUNC_NO[2..0]           - (RW) Function Number
                                     Set function number in configuration TLP header
    PCIE_DEV_NO[7..3]            - (RO) Device Number
                                     Set device number in configuration TLP header
    PCIE_BUS_NO[15..8]           - (RO) Bus Number
                                     Set bus number in configuration TLP header
    PCIE_CFG_BYTE_EN[19..16]     - (RO) Configuration Byte Enable
                                     Set byte enable field in configuration TLP header
    PCIE_CFG_FORCE_BE[20]        - (RO) PCIe Configuration Force Byte Enable
                                     When asserted, the byte enable of the CFG read or write request is forced to the BYTE_EN field value, regardless of AXI strobes. This may be required, for example, when targeting the R1C register, as there is no read strobe in the AXI protocol.
    RSVD1[23..21]                - (RO) Reserved
    PCIE_CFG_VFUNC_NO[30..24]    - (RW) For EP only.
                                     Virtual Function Number
                                     Access EP virtual function configuration space by backdoor
    RSVD2[31]                    - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD2_MASK                   0x80000000                // RSVD2[31]
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD2_SHFT                   31
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_VFUNC_NO_ADDR       PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_VFUNC_NO_MASK       0x7F000000                // PCIE_CFG_VFUNC_NO[30..24]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_VFUNC_NO_SHFT       24
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD1_MASK                   0x00E00000                // RSVD1[23..21]
#define PCIE_MAC_IREG_PCIE_CFGNUM_RSVD1_SHFT                   21
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_FORCE_BE_ADDR       PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_FORCE_BE_MASK       0x00100000                // PCIE_CFG_FORCE_BE[20]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_FORCE_BE_SHFT       20
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_BYTE_EN_ADDR        PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_BYTE_EN_MASK        0x000F0000                // PCIE_CFG_BYTE_EN[19..16]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_CFG_BYTE_EN_SHFT        16
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_BUS_NO_ADDR             PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_BUS_NO_MASK             0x0000FF00                // PCIE_BUS_NO[15..8]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_BUS_NO_SHFT             8
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_DEV_NO_ADDR             PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_DEV_NO_MASK             0x000000F8                // PCIE_DEV_NO[7..3]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_DEV_NO_SHFT             3
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_FUNC_NO_ADDR            PCIE_MAC_IREG_PCIE_CFGNUM_ADDR
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_FUNC_NO_MASK            0x00000007                // PCIE_FUNC_NO[2..0]
#define PCIE_MAC_IREG_PCIE_CFGNUM_PCIE_FUNC_NO_SHFT            0

/* =====================================================================================

  ---PCIE_BUSDEV (0x74030000 + 0x0144)---

    RSVD1[2..0]                  - (RO) Reserved
    PCIE_DEV_NO[7..3]            - (RO) Device Number: Reports bus and device numbers that have been assigned to the device.
    PCIE_BUS_NO[15..8]           - (RO) Bus Number: Reports bus and device numbers that have been assigned to the device.
    RSVD2[31..16]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD2_MASK                   0xFFFF0000                // RSVD2[31..16]
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD2_SHFT                   16
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_BUS_NO_ADDR             PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_BUS_NO_MASK             0x0000FF00                // PCIE_BUS_NO[15..8]
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_BUS_NO_SHFT             8
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_DEV_NO_ADDR             PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_DEV_NO_MASK             0x000000F8                // PCIE_DEV_NO[7..3]
#define PCIE_MAC_IREG_PCIE_BUSDEV_PCIE_DEV_NO_SHFT             3
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_BUSDEV_ADDR
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD1_MASK                   0x00000007                // RSVD1[2..0]
#define PCIE_MAC_IREG_PCIE_BUSDEV_RSVD1_SHFT                   0

/* =====================================================================================

  ---PCIE_RST_CTRL (0x74030000 + 0x0148)---

    ResetMAC[0]                  - (RW) Reset MAC Only. (func0 only)
                                     0: Release Reset
                                     1: Reset
    ResetPHY[1]                  - (RW) Reset PHY Only. (func0 only)
                                     0: Release Reset
                                     1: Reset
    ResetBRG[2]                  - (RW) Reset Bridge Only. (func0 only)
                                     After set this bit, please wait 10ms and don't access PCIe.
                                     The bit will reset all AXI/AHB module but don't reset internal register in Bridge and clear by HW automatically.
                                     0: Release Reset
                                     1: Reset
    ResetPE[3]                   - (RW) For RC only. (func0 only)
                                     Reset on PCIe PAD signal PERST#
                                     0:  Release Reset, drive PERST# to high
                                     1: Reset, drive PERST# to low
    Dis_mprst_phyd[4]            - (RW) PERST# do not reset PCS layer (func0 only)
                                     0: PCIe PCS layer will be reset by PERST#
                                     1: PCIe PCS layer will not be reset by PERST#
    Dis_mprst_pl[5]              - (RW) PERST# do not reset PL layer (func0 only)
                                     0: PCIe physical layer will be reset by PERST#
                                     1: PCIe physical layer will not be reset by PERST#
    Dis_plrst_tl[6]              - (RW) plrst do not reset TL layer
                                     (If you want access configure space before PC bootup set 1)  (func0 only)
                                     0: Transaction layer will be reset when data link surprise down
                                     1: Transaction layer will not be reset when data link surprise down
    Dis_mprst_tl[7]              - (RW) PERST# do not reset TL layer
                                     (If you want access configure space before PC bootup set 1) (func0 only)
                                     0: transaction layer will be reset when PERST# assert
                                     1: transaction layer will not be reset when PERST# assert
    Dis_plrst_brg[8]             - (RW) plrst do not reset BRG layer (func0 only)
                                     0: bridge layer will be reset when data link surprise down
                                     1: bridge layer will not be reset when data link surprise down
    Dis_mprst_brg[9]             - (RW) PERST# rising do not reset BRG layer (func0 only)
                                     0: PCIe bridge layer will be reset at PERST# is low
                                     1: PCIe bridge layer will not be reset at PERST# is low
    Dis_mprst_reg[10]            - (RW) PERST# falling do not reset Internal register (func0 only)
                                     0: PCIe internal register will be reset at PERST# is low
                                     1: PCIe internal register will not be reset at PERST# is low
    Dis_mprst_cfg[11]            - (RW) PERST# falling do not reset configuration space (func0 only)
                                     0: PCIe configuration space will be reset at PERST# is low
                                     1: PCIe configuration space will not be reset at PERST# is low
    Dis_tl_pipe_rst_phy[12]      - (RW) When LTSSM enter Rxdetect state from other state, Transaction Layer will generate a Reset Event and the register can determine whether the Reset Event will reset PHY. (func0 only)
                                     0 : The Reset Event will generate PIPE Reset to reset PHY.
                                     1 : The Reset Event will not generate PIPE Reset to reset PHY.
    Dis_ltssm_return_to_det_mac_phy[13] - (RW) when Ltssm return to detect state. (func0 only)
                                     0: reset MAC and  PHY
                                     1: do not reset MAC and  PHY
    Dis_tl_pipe_rst_pl[14]       - (RW) tl_pipe_resetn Will Not Reset Physical Layer (func0 only)
                                     When LTSSM enter Rx.Detect state since timeout, Transaction layer will assert a "tl_pipe_resetn"
                                     0: The tl_pipe_resetn will reset Physical layer
                                     1: The tl_pipe_resetn will not reset Physical layer
    Dis_mprst_for_rc[15]         - (RW) PERST# reset RC control (func0 only)
                                     0: PERST# can reset RC itself
                                     1: PERST# can not reset RC itself
    RSVD2[31..16]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RST_CTRL_RSVD2_ADDR                 PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_RSVD2_MASK                 0xFFFF0000                // RSVD2[31..16]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_RSVD2_SHFT                 16
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_for_rc_ADDR      PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_for_rc_MASK      0x00008000                // Dis_mprst_for_rc[15]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_for_rc_SHFT      15
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_pl_ADDR    PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_pl_MASK    0x00004000                // Dis_tl_pipe_rst_pl[14]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_pl_SHFT    14
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ltssm_return_to_det_mac_phy_ADDR PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ltssm_return_to_det_mac_phy_MASK 0x00002000                // Dis_ltssm_return_to_det_mac_phy[13]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_ltssm_return_to_det_mac_phy_SHFT 13
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_phy_ADDR   PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_phy_MASK   0x00001000                // Dis_tl_pipe_rst_phy[12]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_tl_pipe_rst_phy_SHFT   12
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_cfg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_cfg_MASK         0x00000800                // Dis_mprst_cfg[11]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_cfg_SHFT         11
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_reg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_reg_MASK         0x00000400                // Dis_mprst_reg[10]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_reg_SHFT         10
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_brg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_brg_MASK         0x00000200                // Dis_mprst_brg[9]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_brg_SHFT         9
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_brg_ADDR         PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_brg_MASK         0x00000100                // Dis_plrst_brg[8]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_brg_SHFT         8
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_tl_ADDR          PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_tl_MASK          0x00000080                // Dis_mprst_tl[7]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_tl_SHFT          7
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_tl_ADDR          PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_tl_MASK          0x00000040                // Dis_plrst_tl[6]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_plrst_tl_SHFT          6
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_pl_ADDR          PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_pl_MASK          0x00000020                // Dis_mprst_pl[5]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_pl_SHFT          5
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_phyd_ADDR        PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_phyd_MASK        0x00000010                // Dis_mprst_phyd[4]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_Dis_mprst_phyd_SHFT        4
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPE_ADDR               PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPE_MASK               0x00000008                // ResetPE[3]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPE_SHFT               3
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetBRG_ADDR              PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetBRG_MASK              0x00000004                // ResetBRG[2]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetBRG_SHFT              2
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPHY_ADDR              PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPHY_MASK              0x00000002                // ResetPHY[1]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetPHY_SHFT              1
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetMAC_ADDR              PCIE_MAC_IREG_PCIE_RST_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetMAC_MASK              0x00000001                // ResetMAC[0]
#define PCIE_MAC_IREG_PCIE_RST_CTRL_ResetMAC_SHFT              0

/* =====================================================================================

  ---PCIE_MISC_STATUS (0x74030000 + 0x014C)---

    LTR_MSG_RECEIVED[0]          - (W1C) PCIe received LTR message, please refer to 0x1A4
                                     0: PCIe did not receive LTR message
                                     1: PCIe received LTR message
    PCIE_MSG_RECEIVED[1]         - (W1C) PCIe received other message, please refer to 0xCE0-0xCFF
                                     0: PCIe did not receive other message
                                     1: PCIe received other message
    RSVD1[15..2]                 - (RO) Reserved
    pcie_linkdown_status[16]     - (W1C) PCIe linkdown status  (func0 only)
    RSVD2[31..17]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD2_MASK              0xFFFE0000                // RSVD2[31..17]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD2_SHFT              17
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_pcie_linkdown_status_ADDR PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_pcie_linkdown_status_MASK 0x00010000                // pcie_linkdown_status[16]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_pcie_linkdown_status_SHFT 16
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD1_MASK              0x0000FFFC                // RSVD1[15..2]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_RSVD1_SHFT              2
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_PCIE_MSG_RECEIVED_ADDR  PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_PCIE_MSG_RECEIVED_MASK  0x00000002                // PCIE_MSG_RECEIVED[1]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_PCIE_MSG_RECEIVED_SHFT  1
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_LTR_MSG_RECEIVED_ADDR   PCIE_MAC_IREG_PCIE_MISC_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_LTR_MSG_RECEIVED_MASK   0x00000001                // LTR_MSG_RECEIVED[0]
#define PCIE_MAC_IREG_PCIE_MISC_STATUS_LTR_MSG_RECEIVED_SHFT   0

/* =====================================================================================

  ---PCIE_LTSSM_STATUS (0x74030000 + 0x0150)---

    LTSSM_DETECT[0]              - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered DETECT state after power-on-reset
                                     0: Otherwise
    LTSSM_POLLING[1]             - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered POLLING state after power-on-reset
                                     0: Otherwise
    LTSSM_CONFIGURATION[2]       - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered CONFIG state after power-on-reset
                                     0: Otherwise
    LTSSM_RECOVERY[3]            - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered RECOVERY state after power-on-reset
                                     0: Otherwise
    LTSSM_L0[4]                  - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L0 state after power-on-reset
                                     0: Otherwise
    LTSSM_L0S[5]                 - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L0s state after power-on-reset
                                     0: Otherwise
    LTSSM_L1[6]                  - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L1 state after power-on-reset
                                     0: Otherwise
    LTSSM_L2[7]                  - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L2 state after power-on-reset
                                     0: Otherwise
    LTSSM_DISABLE[8]             - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered DISABLE state after power-on-reset
                                     0: Otherwise
    LTSSM_LOOPBACK[9]            - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered LOOPBACK state after power-on-reset
                                     0: Otherwise
    LTSSM_HOTRESET[10]           - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered HOTRST state after power-on-reset
                                     0: Otherwise
    LinkUnstable[11]             - (W1C) PCIe Link Stability Monitor
                                     1: PCIe had entered un-expected RECOVERY state after power-on-reset
                                     0: Otherwise
    L1PM_L11[12]                 - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L1.1 state after power-on-reset
                                     0: Otherwise
    L1PM_L12[13]                 - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered L1.2 state after power-on-reset
                                     0: Otherwise
    LTSSM_RECOV_LOCK[14]         - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Lock state after power-on-reset
                                     0: Otherwise
    LTSSM_RECOV_EQUAL[15]        - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Equalization state after power-on-reset
                                     0: Otherwise
    LTSSM_RECOV_SPEED[16]        - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Speed state after power-on-reset
                                     0: Otherwise
    LTSSM_RECOV_CFG[17]          - (W1C) PCIe LTSSM state Record
                                     1: PCIe LTSSM had entered Recovery.Configuration state after power-on-reset
                                     0: Otherwise
    RSVD1[23..18]                - (RO) Reserved
    LTSSM_state[28..24]          - (RO) Reflect Current LTSSM state
                                     00h: detect.quiet
                                     01h: detect.active
                                     02h: polling.active
                                     03h: polling.compliance
                                     04h: polling.configuration
                                     05h: config.linkwidthstart
                                     06h: config.linkwidthaccept
                                     07h: config.lanenumwait
                                     08h: config.lanenumaccept
                                     09h: config.complete
                                     0Ah: config.idle
                                     0Bh: recovery.receiverlock
                                     0Ch: recovery.equalization
                                     0Dh: recovery.speed
                                     0Eh: recovery.receiverconfig
                                     0Fh: recovery.idle
                                     10h: L0
                                     11h: L0s
                                     12h: L1.entry
                                     13h: L1.idle
                                     14h: L2.idle
                                     15h: L2.transmitwake
                                     16h: disable
                                     17h: loopback.entry
                                     18h: loopback.active
                                     19h: loopback.exit
                                     1Ah: hotreset
    RESERVED29[31..29]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_state_ADDR       PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_state_MASK       0x1F000000                // LTSSM_state[28..24]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_state_SHFT       24
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_RSVD1_ADDR             PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_RSVD1_MASK             0x00FC0000                // RSVD1[23..18]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_RSVD1_SHFT             18
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_CFG_ADDR   PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_CFG_MASK   0x00020000                // LTSSM_RECOV_CFG[17]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_CFG_SHFT   17
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_SPEED_ADDR PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_SPEED_MASK 0x00010000                // LTSSM_RECOV_SPEED[16]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_SPEED_SHFT 16
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_EQUAL_ADDR PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_EQUAL_MASK 0x00008000                // LTSSM_RECOV_EQUAL[15]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_EQUAL_SHFT 15
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_LOCK_ADDR  PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_LOCK_MASK  0x00004000                // LTSSM_RECOV_LOCK[14]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOV_LOCK_SHFT  14
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L12_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L12_MASK          0x00002000                // L1PM_L12[13]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L12_SHFT          13
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L11_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L11_MASK          0x00001000                // L1PM_L11[12]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_L1PM_L11_SHFT          12
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LinkUnstable_ADDR      PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LinkUnstable_MASK      0x00000800                // LinkUnstable[11]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LinkUnstable_SHFT      11
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_HOTRESET_ADDR    PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_HOTRESET_MASK    0x00000400                // LTSSM_HOTRESET[10]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_HOTRESET_SHFT    10
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_LOOPBACK_ADDR    PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_LOOPBACK_MASK    0x00000200                // LTSSM_LOOPBACK[9]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_LOOPBACK_SHFT    9
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DISABLE_ADDR     PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DISABLE_MASK     0x00000100                // LTSSM_DISABLE[8]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DISABLE_SHFT     8
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L2_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L2_MASK          0x00000080                // LTSSM_L2[7]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L2_SHFT          7
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L1_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L1_MASK          0x00000040                // LTSSM_L1[6]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L1_SHFT          6
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0S_ADDR         PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0S_MASK         0x00000020                // LTSSM_L0S[5]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0S_SHFT         5
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0_ADDR          PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0_MASK          0x00000010                // LTSSM_L0[4]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_L0_SHFT          4
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOVERY_ADDR    PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOVERY_MASK    0x00000008                // LTSSM_RECOVERY[3]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_RECOVERY_SHFT    3
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_CONFIGURATION_ADDR PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_CONFIGURATION_MASK 0x00000004                // LTSSM_CONFIGURATION[2]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_CONFIGURATION_SHFT 2
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_POLLING_ADDR     PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_POLLING_MASK     0x00000002                // LTSSM_POLLING[1]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_POLLING_SHFT     1
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DETECT_ADDR      PCIE_MAC_IREG_PCIE_LTSSM_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DETECT_MASK      0x00000001                // LTSSM_DETECT[0]
#define PCIE_MAC_IREG_PCIE_LTSSM_STATUS_LTSSM_DETECT_SHFT      0

/* =====================================================================================

  ---PCIE_LINK_STATUS (0x74030000 + 0x0154)---

    Low_power_status[3..0]       - (RO) Low-power state machine state
                                      0h: L0_RST (Initialization state)
                                      1h: L0 (Idle state)
                                      2h: ASPM_L1_IN0 (Prepare ASPM L1 entry step 1)
                                      3h: ASPM_L1_IN1 (Prepare ASPM L1 entry step 2)
                                      4h: ASPM_L1_OUT (Exit from ASPM L1 because of NAK)
                                      5h: L1_IN0 (Prepare L1 entry step 1)
                                      6h: L1_IN1 (Prepare L1 entry step 2)
                                      7h: L1 (L1 state)
                                      8h: L0_IN (Prepare L0 entry)
                                      9h: L0_IN_WAIT (Wait for L0 entry)
                                      Ah: L2L3_IN0 (Prepare L2/L3 entry step 1)
                                      Bh: L2L3_IN1 (Prepare L2/L3 entry step 2)
                                      Ch: L2L3 (L2/L3 state)
    RSVD1[7..4]                  - (RO) Reserved
    DL_UP[8]                     - (RO) PCIe Data Link Layer state monitor
                                     1: Data link layer is operated normally
                                     0: Otherwise
    TLP_transmission_inhibited[9] - (RO) TLP Operation Monitor
                                     0: TLPs on transmission interface are operated normally
                                     1: TLPs on transmission interface are blocked by internal logic
                                     Block TLPs on TX interface when:
                                     - datalink is not active
                                     - all functions are in D1/D2/D3 and device is not a switch upstream
                                     - preparing to enter ASPM L1 or L1 (stop blocking once device is in L1 to allow wake-up)
                                     - preparing L2 entry or in L2
    DLLP_transmission_inhibited[10] - (RO) DLLP Operation Monitor
                                     0: DLLPs on transmission interface are operated normally
                                     1: DLLPs on transmission interface are blocked by internal logic
                                     Block Flow-control DLLPs on TX interface when:
                                     - enough credits are available and request ASPM L0s entry
                                     - preparing to enter ASPM L1 or L1 (stop blocking once device is in L1 to allow wake-up)
                                     - preparing L2 entry or in L2
    RSVD2[14..11]                - (RO) Reserved
    pcie_rst_notify[15]          - (RO) PCIe Reset Status.
                                     0 : PCIe Reset is done.
                                     1 : PCIe Reset is ongoing.
    req_recov[23..16]            - (W1C) Link Unstable Count 
                                     The count indicate the number MAC enter Recovery state due to Link Error such as flow control timeout, replay counter error, receiver error, framing error, etc.
                                     Write one to bit[16] will clear the counter.
    reptim_err[27..24]           - (W1C) Replay Timer Count
                                     The count indicate the number of replay timer expired.
                                     Write one to bit[24] will clear the counter.
    rx_nak_dllp[31..28]          - (W1C) Reciever NAK Count
                                     The count indicate the number of received NAK DLLP.
                                     Write one to bit[28] will clear the counter.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_rx_nak_dllp_ADDR        PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_rx_nak_dllp_MASK        0xF0000000                // rx_nak_dllp[31..28]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_rx_nak_dllp_SHFT        28
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_reptim_err_ADDR         PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_reptim_err_MASK         0x0F000000                // reptim_err[27..24]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_reptim_err_SHFT         24
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_req_recov_ADDR          PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_req_recov_MASK          0x00FF0000                // req_recov[23..16]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_req_recov_SHFT          16
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_rst_notify_ADDR    PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_rst_notify_MASK    0x00008000                // pcie_rst_notify[15]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_pcie_rst_notify_SHFT    15
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_RSVD2_ADDR              PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_RSVD2_MASK              0x00007800                // RSVD2[14..11]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_RSVD2_SHFT              11
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DLLP_transmission_inhibited_ADDR PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DLLP_transmission_inhibited_MASK 0x00000400                // DLLP_transmission_inhibited[10]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DLLP_transmission_inhibited_SHFT 10
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_TLP_transmission_inhibited_ADDR PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_TLP_transmission_inhibited_MASK 0x00000200                // TLP_transmission_inhibited[9]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_TLP_transmission_inhibited_SHFT 9
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DL_UP_ADDR              PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DL_UP_MASK              0x00000100                // DL_UP[8]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_DL_UP_SHFT              8
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_RSVD1_MASK              0x000000F0                // RSVD1[7..4]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_RSVD1_SHFT              4
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_Low_power_status_ADDR   PCIE_MAC_IREG_PCIE_LINK_STATUS_ADDR
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_Low_power_status_MASK   0x0000000F                // Low_power_status[3..0]
#define PCIE_MAC_IREG_PCIE_LINK_STATUS_Low_power_status_SHFT   0

/* =====================================================================================

  ---PCIE_PEX_DSN (0x74030000 + 0x0158)---

    PCIE_Dev_Serial_Number[31..0] - (RW) Device Serial Number Setting

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PEX_DSN_PCIE_Dev_Serial_Number_ADDR PCIE_MAC_IREG_PCIE_PEX_DSN_ADDR
#define PCIE_MAC_IREG_PCIE_PEX_DSN_PCIE_Dev_Serial_Number_MASK 0xFFFFFFFF                // PCIE_Dev_Serial_Number[31..0]
#define PCIE_MAC_IREG_PCIE_PEX_DSN_PCIE_Dev_Serial_Number_SHFT 0

/* =====================================================================================

  ---PCIE_ASPM_CTRL (0x74030000 + 0x015C)---

    dn_l1_nak_time[3..0]         - (RW) For Downstream Port.
                                     The register is for DN port to count the interval between last received PM_Active_State_Request_L1 DLLP and next received PM_Active_State_Request_L1 DLLP.
                                     Unit : 1us
    up_l1_nak_time[7..4]         - (RW) For Upstream Port.
                                     The register is for UP port to count the interval between last transmitted PM_Active_State_Request_L1 DLLP and next transmitted PM_Active_State_Request_L1 DLLP.
                                     Unit : 1us
    dn_l1_nak_wait_time[15..8]   - (RW) For Downstream Port.
                                     The register is for DN port to timeout in ASL1_WAIT state to prevent from deadlock due to miss EIOS.
                                     Unit : 1us
    p2_exit_phystatus_chk_sel[16] - (RW) When P2 exit, MAC should check Phystatus.
                                     0 : only check phystatus falling edge for P2 exit.
                                     1 : check phystatus rising edge firstly then check phystatus falling edge to confirm the phystatus is really for P2 exit
    p2_exit_by_clkreq[17]        - (RW) L1 P2 exit condition
                                     0: only when rxelecidle is falling
                                     1: when rxelecidle or clkreq is falling
    RESERVED18[19..18]           - (RO) Reserved bits
    dn_l1_nak_end_time[23..20]   - (RW) For Downstream Port.
                                     The register is for DN port to  wait some time to prevent from send duplicate NAK to same PM_Active_State_Request_L1 DLLP.
                                     Unit : 1us
    p2_idle_time[27..24]         - (RW) The minimum time MAC will stay in P2 state.
                                     The time should be more than p2 entry time.
                                     unit : 1us
    p2_entry_time[31..28]        - (RW) The maximum time PHY need to enter P2 state.
                                     unit : 1us

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_entry_time_ADDR        PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_entry_time_MASK        0xF0000000                // p2_entry_time[31..28]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_entry_time_SHFT        28
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_idle_time_ADDR         PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_idle_time_MASK         0x0F000000                // p2_idle_time[27..24]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_idle_time_SHFT         24
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_end_time_ADDR   PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_end_time_MASK   0x00F00000                // dn_l1_nak_end_time[23..20]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_end_time_SHFT   20
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_by_clkreq_ADDR    PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_by_clkreq_MASK    0x00020000                // p2_exit_by_clkreq[17]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_by_clkreq_SHFT    17
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_phystatus_chk_sel_ADDR PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_phystatus_chk_sel_MASK 0x00010000                // p2_exit_phystatus_chk_sel[16]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_p2_exit_phystatus_chk_sel_SHFT 16
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_wait_time_ADDR  PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_wait_time_MASK  0x0000FF00                // dn_l1_nak_wait_time[15..8]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_wait_time_SHFT  8
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_up_l1_nak_time_ADDR       PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_up_l1_nak_time_MASK       0x000000F0                // up_l1_nak_time[7..4]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_up_l1_nak_time_SHFT       4
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_time_ADDR       PCIE_MAC_IREG_PCIE_ASPM_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_time_MASK       0x0000000F                // dn_l1_nak_time[3..0]
#define PCIE_MAC_IREG_PCIE_ASPM_CTRL_dn_l1_nak_time_SHFT       0

/* =====================================================================================

  ---PCIE_PERF_SETTING_0 (0x74030000 + 0x0160)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_Block_TxBuf_Avail_cnt_MASK 0xFF000000                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_Block_TxBuf_Avail_cnt_SHFT 24
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_TxBuf_Avail_cnt_SHFT 16
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_rdcmd_cnt_MASK 0x0000FF00                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_rdcmd_cnt_SHFT 8
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_0_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_timer_MASK   0x000000FF                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_0_UnBlock_timer_SHFT   0

/* =====================================================================================

  ---PCIE_DEBUG_SEL_0 (0x74030000 + 0x0164)---

    Debug_signal_sel_0[7..0]     - (RW) For Debug Probe byte0 signals selection.
                                     Please see debug table for debug signals.
    Debug_signal_sel_1[15..8]    - (RW) For Debug Probe byte1 signals selection.
                                     Please see debug table for debug signals.
    Debug_signal_sel_2[23..16]   - (RW) For Debug Probe byte2 signals selection.
                                     Please see debug table for debug signals.
    Debug_signal_sel_3[31..24]   - (RW) For Debug Probe byte3 signals selection.
                                     Please see debug table for debug signals.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_3_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_3_MASK 0xFF000000                // Debug_signal_sel_3[31..24]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_3_SHFT 24
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_2_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_2_MASK 0x00FF0000                // Debug_signal_sel_2[23..16]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_2_SHFT 16
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_1_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_1_MASK 0x0000FF00                // Debug_signal_sel_1[15..8]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_1_SHFT 8
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_0_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_0_MASK 0x000000FF                // Debug_signal_sel_0[7..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_0_Debug_signal_sel_0_SHFT 0

/* =====================================================================================

  ---PCIE_DEBUG_SEL_1 (0x74030000 + 0x0168)---

    Debug_odd_sample_0[0]        - (RW) for debug probe byte0 odd_sample
    Debug_odd_sample_1[1]        - (RW) for debug probe byte1 odd_sample
    Debug_odd_sample_2[2]        - (RW) for debug probe byte2 odd_sample
    Debug_odd_sample_3[3]        - (RW) for debug probe byte3 odd_sample
    Debug_even_sample_0[4]       - (RW) for debug probe byte0 even_sample
    Debug_even_sample_1[5]       - (RW) for debug probe byte1 even_sample
    Debug_even_sample_2[6]       - (RW) for debug probe byte2 even_sample
    Debug_even_sample_3[7]       - (RW) for debug probe byte3 even_sample
    Debug_en[8]                  - (RW) for debug clock CG enable
    Debug_reg_sel[9]             - (RW) for debug signal latch by DFF
                                     0 : Select Combinational Path
                                     1 : Select Register Path
    RSVD1[15..10]                - (RW) Reserved
    Debug_module_sel_0[19..16]   - (RW) for debug probe byte0 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : dl (data link layer)
                                     4 : tl0 (transaction layer 0)
                                     5 : tl1 (transaction layer 1)
                                     6 : tl2 (transaction layer 2)
                                     7 : tl3 (transaction layer 3)
                                     8 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved
    Debug_module_sel_1[23..20]   - (RW) for debug probe byte0 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : dl (data link layer)
                                     4 : tl0 (transaction layer 0)
                                     5 : tl1 (transaction layer 1)
                                     6 : tl2 (transaction layer 2)
                                     7 : tl3 (transaction layer 3)
                                     8 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved
    Debug_module_sel_2[27..24]   - (RW) for debug probe byte0 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : dl (data link layer)
                                     4 : tl0 (transaction layer 0)
                                     5 : tl1 (transaction layer 1)
                                     6 : tl2 (transaction layer 2)
                                     7 : tl3 (transaction layer 3)
                                     8 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved
    Debug_module_sel_3[31..28]   - (RW) for debug probe byte0 module select
                                     0 : pl0 (physical layer 0)
                                     1 : pl1 (physical layer 1)
                                     2 : dl (data link layer)
                                     4 : tl0 (transaction layer 0)
                                     5 : tl1 (transaction layer 1)
                                     6 : tl2 (transaction layer 2)
                                     7 : tl3 (transaction layer 3)
                                     8 : bridge (Bridge layer and AXI layer)
                                     c : top (MAC Top)
                                     others are reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_3_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_3_MASK 0xF0000000                // Debug_module_sel_3[31..28]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_3_SHFT 28
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_2_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_2_MASK 0x0F000000                // Debug_module_sel_2[27..24]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_2_SHFT 24
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_1_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_1_MASK 0x00F00000                // Debug_module_sel_1[23..20]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_1_SHFT 20
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_0_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_0_MASK 0x000F0000                // Debug_module_sel_0[19..16]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_module_sel_0_SHFT 16
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_RSVD1_MASK              0x0000FC00                // RSVD1[15..10]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_RSVD1_SHFT              10
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_reg_sel_ADDR      PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_reg_sel_MASK      0x00000200                // Debug_reg_sel[9]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_reg_sel_SHFT      9
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_en_ADDR           PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_en_MASK           0x00000100                // Debug_en[8]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_en_SHFT           8
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_3_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_3_MASK 0x00000080                // Debug_even_sample_3[7]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_3_SHFT 7
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_2_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_2_MASK 0x00000040                // Debug_even_sample_2[6]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_2_SHFT 6
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_1_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_1_MASK 0x00000020                // Debug_even_sample_1[5]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_1_SHFT 5
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_0_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_0_MASK 0x00000010                // Debug_even_sample_0[4]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_even_sample_0_SHFT 4
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_3_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_3_MASK 0x00000008                // Debug_odd_sample_3[3]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_3_SHFT 3
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_2_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_2_MASK 0x00000004                // Debug_odd_sample_2[2]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_2_SHFT 2
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_1_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_1_MASK 0x00000002                // Debug_odd_sample_1[1]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_1_SHFT 1
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_0_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_0_MASK 0x00000001                // Debug_odd_sample_0[0]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_1_Debug_odd_sample_0_SHFT 0

/* =====================================================================================

  ---PCIE_EQ_CTRL_0 (0x74030000 + 0x016C)---

    EQ_NORESP_TIMER[15..0]       - (RW) Timeout value for the requester is unable to receive Ordered Sets with do EQ progress action.
                                     unit : 1us
                                     all 0 will disable the timer
    EQ_NOP_TIMER[31..16]         - (RW) Timeout value for LTSSM in Recovery.EQUAL but without any EQ progress action.
                                     unit : 1us
                                     all 0 will disable the timer

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NOP_TIMER_ADDR         PCIE_MAC_IREG_PCIE_EQ_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NOP_TIMER_MASK         0xFFFF0000                // EQ_NOP_TIMER[31..16]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NOP_TIMER_SHFT         16
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NORESP_TIMER_ADDR      PCIE_MAC_IREG_PCIE_EQ_CTRL_0_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NORESP_TIMER_MASK      0x0000FFFF                // EQ_NORESP_TIMER[15..0]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_0_EQ_NORESP_TIMER_SHFT      0

/* =====================================================================================

  ---PCIE_EQ_CTRL_1 (0x74030000 + 0x0170)---

    EQ_SKIP_TIMER[3..0]          - (RW) Timeout value for SKIP EQ progress.
                                     unit : 1ms
                                     all 0 will disable the timer
    EQ_COMPLETE_TIMER[7..4]      - (RW) Timeout value for LTSSM in Recovery.EQUAL and equ_complete is 1.
                                     unit : 1ms
                                     all 0 will disable the timer
    STAY_EQ_TIMER[12..8]         - (RW) Timeout value for LTSSM in Recovery.EQUAL.
                                     unit : 1ms
                                     all 0 will disable the timer
    RSVD[15..13]                 - (RW) RSVD
    EVAL_TIMER[23..16]           - (RW) Timeout value for pl_eq_rxeqeval is asserted but can't get phystatus
                                     unit : 1us
                                     all 0 will disable the timer
    EQ_REJECT_SEL[24]            - (RW) Select how to reject Preset or Coeff for margin 1~4.
                                     0 : Reject all Preset and Coeff for margin 1~4.
                                     1 : Reject illegal Preset and Coeff for margin 1~4.
    RESERVED25[31..25]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_REJECT_SEL_ADDR        PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_REJECT_SEL_MASK        0x01000000                // EQ_REJECT_SEL[24]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_REJECT_SEL_SHFT        24
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EVAL_TIMER_ADDR           PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EVAL_TIMER_MASK           0x00FF0000                // EVAL_TIMER[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EVAL_TIMER_SHFT           16
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_RSVD_ADDR                 PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_RSVD_MASK                 0x0000E000                // RSVD[15..13]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_RSVD_SHFT                 13
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_STAY_EQ_TIMER_ADDR        PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_STAY_EQ_TIMER_MASK        0x00001F00                // STAY_EQ_TIMER[12..8]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_STAY_EQ_TIMER_SHFT        8
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_COMPLETE_TIMER_ADDR    PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_COMPLETE_TIMER_MASK    0x000000F0                // EQ_COMPLETE_TIMER[7..4]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_COMPLETE_TIMER_SHFT    4
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_SKIP_TIMER_ADDR        PCIE_MAC_IREG_PCIE_EQ_CTRL_1_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_SKIP_TIMER_MASK        0x0000000F                // EQ_SKIP_TIMER[3..0]
#define PCIE_MAC_IREG_PCIE_EQ_CTRL_1_EQ_SKIP_TIMER_SHFT        0

/* =====================================================================================

  ---PM_CONF_0 (0x74030000 + 0x0174)---

    RSVD1[15..0]                 - (RW) Reserved
    dat_scale_val0[17..16]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val1[19..18]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val2[21..20]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val3[23..22]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val4[25..24]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val5[27..26]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val6[29..28]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_scale_val7[31..30]       - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0.
                                     Data Scale: the scale used to find the power consumed by a particular component and can include the following values:
                                     00: unknown
                                     01: 0.1 x
                                     10: 0.01 x
                                     11: 0.001 x
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val7_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val7_MASK            0xC0000000                // dat_scale_val7[31..30]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val7_SHFT            30
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val6_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val6_MASK            0x30000000                // dat_scale_val6[29..28]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val6_SHFT            28
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val5_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val5_MASK            0x0C000000                // dat_scale_val5[27..26]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val5_SHFT            26
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val4_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val4_MASK            0x03000000                // dat_scale_val4[25..24]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val4_SHFT            24
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val3_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val3_MASK            0x00C00000                // dat_scale_val3[23..22]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val3_SHFT            22
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val2_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val2_MASK            0x00300000                // dat_scale_val2[21..20]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val2_SHFT            20
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val1_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val1_MASK            0x000C0000                // dat_scale_val1[19..18]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val1_SHFT            18
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val0_ADDR            PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val0_MASK            0x00030000                // dat_scale_val0[17..16]
#define PCIE_MAC_IREG_PM_CONF_0_dat_scale_val0_SHFT            16
#define PCIE_MAC_IREG_PM_CONF_0_RSVD1_ADDR                     PCIE_MAC_IREG_PM_CONF_0_ADDR
#define PCIE_MAC_IREG_PM_CONF_0_RSVD1_MASK                     0x0000FFFF                // RSVD1[15..0]
#define PCIE_MAC_IREG_PM_CONF_0_RSVD1_SHFT                     0

/* =====================================================================================

  ---PM_CONF_1 (0x74030000 + 0x0178)---

    dat_register_val0[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_register_val1[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_register_val2[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_register_val3[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val3_ADDR         PCIE_MAC_IREG_PM_CONF_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val3_MASK         0xFF000000                // dat_register_val3[31..24]
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val3_SHFT         24
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val2_ADDR         PCIE_MAC_IREG_PM_CONF_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val2_MASK         0x00FF0000                // dat_register_val2[23..16]
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val2_SHFT         16
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val1_ADDR         PCIE_MAC_IREG_PM_CONF_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val1_MASK         0x0000FF00                // dat_register_val1[15..8]
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val1_SHFT         8
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val0_ADDR         PCIE_MAC_IREG_PM_CONF_1_ADDR
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val0_MASK         0x000000FF                // dat_register_val0[7..0]
#define PCIE_MAC_IREG_PM_CONF_1_dat_register_val0_SHFT         0

/* =====================================================================================

  ---PM_CONF_2 (0x74030000 + 0x017C)---

    dat_register_val4[7..0]      - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_register_val5[15..8]     - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_register_val6[23..16]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.
    dat_register_val7[31..24]    - (RW) These values indicate power consumption of the component and can only be implemented if all three bits of AUX_power (part of the Power Management Capabilities structure) are set to 0. It includes:
                                     Data Register: value associated with the power consumed by the component.
                                     The maximum power permitted to the component in the power state selected by the Data_Select field by the component is equal to the Data Register value multiplied.

 =====================================================================================*/
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val7_ADDR         PCIE_MAC_IREG_PM_CONF_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val7_MASK         0xFF000000                // dat_register_val7[31..24]
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val7_SHFT         24
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val6_ADDR         PCIE_MAC_IREG_PM_CONF_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val6_MASK         0x00FF0000                // dat_register_val6[23..16]
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val6_SHFT         16
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val5_ADDR         PCIE_MAC_IREG_PM_CONF_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val5_MASK         0x0000FF00                // dat_register_val5[15..8]
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val5_SHFT         8
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val4_ADDR         PCIE_MAC_IREG_PM_CONF_2_ADDR
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val4_MASK         0x000000FF                // dat_register_val4[7..0]
#define PCIE_MAC_IREG_PM_CONF_2_dat_register_val4_SHFT         0

/* =====================================================================================

  ---IMASK_LOCAL (0x74030000 + 0x0180)---

    DMA_END_EN[7..0]             - (RW) Local Interrupt Enable for DMA END
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    DMA_ERR_OR_MSI_RCV_EN[15..8] - (RW) Local Interrupt Enable for DMA ERROR
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    A_ATR_EVT_EN[19..16]         - (RW) Local Interrupt Enable for AXI Address Translation Event.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    P_ATR_EVT_EN[23..20]         - (RW) Local Interrupt Enable for PCIe Address Translation Event.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    INT_EVT_EN[27..24]           - (RW) Local Interrupt Enable for Interrupt Event.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    MSG_EVT_EN[28]               - (RW) Local Interrupt Enable for LTR message received, Hotplug event, Other message received.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    AER_L2_EVT_EN[29]            - (RW) Local Interrupt Enable for AER event or L2 event.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    PM_EVT_EN[30]                - (RW) Local Interrupt Enable for Power Management Event.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits
    ERROR_RST_EVT_EN[31]         - (RW) Local Interrupt Enable for System error or PERSTn or PCIe reset event.
                                     Enable bit for each interrupt status. Set 1 to Enable RC forwarding each interrupt to host
                                     See ISTATUS_LOCAL for details of this register's bits

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_LOCAL_ERROR_RST_EVT_EN_ADDR        PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_ERROR_RST_EVT_EN_MASK        0x80000000                // ERROR_RST_EVT_EN[31]
#define PCIE_MAC_IREG_IMASK_LOCAL_ERROR_RST_EVT_EN_SHFT        31
#define PCIE_MAC_IREG_IMASK_LOCAL_PM_EVT_EN_ADDR               PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_PM_EVT_EN_MASK               0x40000000                // PM_EVT_EN[30]
#define PCIE_MAC_IREG_IMASK_LOCAL_PM_EVT_EN_SHFT               30
#define PCIE_MAC_IREG_IMASK_LOCAL_AER_L2_EVT_EN_ADDR           PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_AER_L2_EVT_EN_MASK           0x20000000                // AER_L2_EVT_EN[29]
#define PCIE_MAC_IREG_IMASK_LOCAL_AER_L2_EVT_EN_SHFT           29
#define PCIE_MAC_IREG_IMASK_LOCAL_MSG_EVT_EN_ADDR              PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_MSG_EVT_EN_MASK              0x10000000                // MSG_EVT_EN[28]
#define PCIE_MAC_IREG_IMASK_LOCAL_MSG_EVT_EN_SHFT              28
#define PCIE_MAC_IREG_IMASK_LOCAL_INT_EVT_EN_ADDR              PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_INT_EVT_EN_MASK              0x0F000000                // INT_EVT_EN[27..24]
#define PCIE_MAC_IREG_IMASK_LOCAL_INT_EVT_EN_SHFT              24
#define PCIE_MAC_IREG_IMASK_LOCAL_P_ATR_EVT_EN_ADDR            PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_P_ATR_EVT_EN_MASK            0x00F00000                // P_ATR_EVT_EN[23..20]
#define PCIE_MAC_IREG_IMASK_LOCAL_P_ATR_EVT_EN_SHFT            20
#define PCIE_MAC_IREG_IMASK_LOCAL_A_ATR_EVT_EN_ADDR            PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_A_ATR_EVT_EN_MASK            0x000F0000                // A_ATR_EVT_EN[19..16]
#define PCIE_MAC_IREG_IMASK_LOCAL_A_ATR_EVT_EN_SHFT            16
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_ERR_OR_MSI_RCV_EN_ADDR   PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_ERR_OR_MSI_RCV_EN_MASK   0x0000FF00                // DMA_ERR_OR_MSI_RCV_EN[15..8]
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_ERR_OR_MSI_RCV_EN_SHFT   8
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_END_EN_ADDR              PCIE_MAC_IREG_IMASK_LOCAL_ADDR
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_END_EN_MASK              0x000000FF                // DMA_END_EN[7..0]
#define PCIE_MAC_IREG_IMASK_LOCAL_DMA_END_EN_SHFT              0

/* =====================================================================================

  ---ISTATUS_LOCAL (0x74030000 + 0x0184)---

    DMA_END[7..0]                - (W1C) Reports that a DMA transfer is ended. Bit number i corresponds to DMA Engine number i.
    DMA_ERR_OR_MSI_RCV[15..8]    - (W1C) Report DMA error and Multiple MSI received
                                     DMA error: Reports that an error occurred during a DMA transfer. Bit number i corresponds to DMA Engine number i.
                                     Multiple MSI received: Report MSI events to the Local Processor. Bit number i corresponds to Function number i. Please refer Multiple-MSI-related register (PCIE_MAC + 0xC00 ~ PCIE_MAC + 0xC9F) for more information. (RP only, reserved for EP)
    A_ATR_EVT[19..16]            - (W1C) Reports AXI Address Translation events:
                                     Bit [16]: AXI Post Error: asserted to indicate that an error occurred on an AXI write request
                                     Bit [17]: AXI Fetch Error: asserted to indicate that an error occurred on an AXI read request
                                     Bit [18]: AXI Discard Error: asserted to signal a completion timeout on an AXI read request
                                     Bit [19]: AXI Doorbell: asserted when an AXI request has successfully targeted an Address Translation Table
    P_ATR_EVT[23..20]            - (W1C) Reports PCIe Address Translation events:
                                     Bit [20]: PCIe Post Error: asserted to indicate that an error occurred on a PCIe write request
                                     Bit [21]: PCIe Fetch Error: asserted to indicate that an error occurred on a PCIe read request
                                     Bit [22]: PCIe Discard Error: asserted to signal a completion timeout on a PCIe read request
                                     Bit [23]: L2 wake for Rootport, PCIe Doorbell for Endpoint
    INT_EVT[27..24]              - (W1C) Reports Interrupts events to the Local Processor:
                                     Bit [24]: Asserted when PCI interrupt line A is asserted (RP only, reserved for EP)
                                     Bit [25]: Asserted when PCI interrupt line B is asserted (RP only, reserved for EP)
                                     Bit [26]: Asserted when PCI interrupt line C is asserted (RP only, reserved for EP)
                                     Bit [27]: Asserted when PCI interrupt line D is asserted (RP only, reserved for EP)
    MSG_EVT[28]                  - (W1C) Reports LTR message received, Hotplug event, Other message received to the Local Processor for Rootport
                                     Reports Other message received to the Local Processor for Endpoint
    AER_L2_EVT[29]               - (W1C) Reports AER event to the Local Processor for Rootport.
                                     Reports L2 event to the Local Processor for Endpoint.
    PM_EVT[30]                   - (W1C) Reports Power Management event to the Local Processor for Rootport
                                     Report Legacy power management state change event  to the Local Processor for Endpoint
    ERROR_RST_EVT[31]            - (W1C) RC : Reports System error or PERSTn or PCIe reset event happen. (DLUP exit, L2 Exit, Hot Reset Exit)
                                      EP : PERSTn or PCIe reset event happen. (DLUP exit, L2 Exit, Hot Reset Exit)

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ERROR_RST_EVT_ADDR         PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ERROR_RST_EVT_MASK         0x80000000                // ERROR_RST_EVT[31]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_ERROR_RST_EVT_SHFT         31
#define PCIE_MAC_IREG_ISTATUS_LOCAL_PM_EVT_ADDR                PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_PM_EVT_MASK                0x40000000                // PM_EVT[30]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_PM_EVT_SHFT                30
#define PCIE_MAC_IREG_ISTATUS_LOCAL_AER_L2_EVT_ADDR            PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_AER_L2_EVT_MASK            0x20000000                // AER_L2_EVT[29]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_AER_L2_EVT_SHFT            29
#define PCIE_MAC_IREG_ISTATUS_LOCAL_MSG_EVT_ADDR               PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_MSG_EVT_MASK               0x10000000                // MSG_EVT[28]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_MSG_EVT_SHFT               28
#define PCIE_MAC_IREG_ISTATUS_LOCAL_INT_EVT_ADDR               PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_INT_EVT_MASK               0x0F000000                // INT_EVT[27..24]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_INT_EVT_SHFT               24
#define PCIE_MAC_IREG_ISTATUS_LOCAL_P_ATR_EVT_ADDR             PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_P_ATR_EVT_MASK             0x00F00000                // P_ATR_EVT[23..20]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_P_ATR_EVT_SHFT             20
#define PCIE_MAC_IREG_ISTATUS_LOCAL_A_ATR_EVT_ADDR             PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_A_ATR_EVT_MASK             0x000F0000                // A_ATR_EVT[19..16]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_A_ATR_EVT_SHFT             16
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_ERR_OR_MSI_RCV_ADDR    PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_ERR_OR_MSI_RCV_MASK    0x0000FF00                // DMA_ERR_OR_MSI_RCV[15..8]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_ERR_OR_MSI_RCV_SHFT    8
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_END_ADDR               PCIE_MAC_IREG_ISTATUS_LOCAL_ADDR
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_END_MASK               0x000000FF                // DMA_END[7..0]
#define PCIE_MAC_IREG_ISTATUS_LOCAL_DMA_END_SHFT               0

/* =====================================================================================

  ---IMASK_HOST (0x74030000 + 0x0188)---

    DMA_END_EN[7..0]             - (RW) See ISTATUS_HOST[7:0] for details of this register's bits
    DMA_ERROR_EN[15..8]          - (RW) See ISTATUS_HOST[15:8] for details of this register's bits
    A_ATR_EVT_EN[19..16]         - (RW) See ISTATUS_HOST[19:16] for details of this register's bits
    P_ATR_EVT_EN[23..20]         - (RW) See ISTATUS_HOST[23:20] for details of this register's bits
    INT_REQUEST_EN[31..24]       - (RW) See ISTATUS_HOST[31:24] for details of this register's bits

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_INT_REQUEST_EN_ADDR           PCIE_MAC_IREG_IMASK_HOST_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_INT_REQUEST_EN_MASK           0xFF000000                // INT_REQUEST_EN[31..24]
#define PCIE_MAC_IREG_IMASK_HOST_INT_REQUEST_EN_SHFT           24
#define PCIE_MAC_IREG_IMASK_HOST_P_ATR_EVT_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_P_ATR_EVT_EN_MASK             0x00F00000                // P_ATR_EVT_EN[23..20]
#define PCIE_MAC_IREG_IMASK_HOST_P_ATR_EVT_EN_SHFT             20
#define PCIE_MAC_IREG_IMASK_HOST_A_ATR_EVT_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_A_ATR_EVT_EN_MASK             0x000F0000                // A_ATR_EVT_EN[19..16]
#define PCIE_MAC_IREG_IMASK_HOST_A_ATR_EVT_EN_SHFT             16
#define PCIE_MAC_IREG_IMASK_HOST_DMA_ERROR_EN_ADDR             PCIE_MAC_IREG_IMASK_HOST_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_DMA_ERROR_EN_MASK             0x0000FF00                // DMA_ERROR_EN[15..8]
#define PCIE_MAC_IREG_IMASK_HOST_DMA_ERROR_EN_SHFT             8
#define PCIE_MAC_IREG_IMASK_HOST_DMA_END_EN_ADDR               PCIE_MAC_IREG_IMASK_HOST_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_DMA_END_EN_MASK               0x000000FF                // DMA_END_EN[7..0]
#define PCIE_MAC_IREG_IMASK_HOST_DMA_END_EN_SHFT               0

/* =====================================================================================

  ---ISTATUS_HOST (0x74030000 + 0x018C)---

    DMA_END[7..0]                - (W1C) Reports that a DMA transfer is ended. Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[7:0] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
    DMA_ERROR[15..8]             - (W1C) Reports that an error occurred during a DMA transfer. Bit number i corresponds to DMA Engine number i.
                                     Reports external interrupt requests bit[15:8] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
    A_ATR_EVT[19..16]            - (W1C) Reports AXI Address Translation events: the event can be disabled by set 0x1AC[19:16] to 1
                                     Bit [16]: AXI Post Error: asserted to indicate that an error occurred on an AXI write request
                                     Bit [17]: AXI Fetch Error: asserted to indicate that an error occurred on an AXI read request
                                     Bit [18]: AXI Discard Error: asserted to signal a completion timeout on an AXI read request
                                     Bit [19]: AXI Doorbell: asserted when an AXI request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[19:16] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
    P_ATR_EVT[23..20]            - (W1C) Reports PCIe Address Translation events: the event can be disabled by set 0x1AC[23:20] to 1
                                     Bit [20]: PCIe Post Error: asserted to indicate that an error occurred on a PCIe write request
                                     Bit [21]: PCIe Fetch Error: asserted to indicate that an error occurred on a PCIe read request
                                     Bit [22]: PCIe Discard Error: asserted to signal a completion timeout on a PCIe read request
                                     Bit [23]: PCIe Doorbell: asserted when a PCIe request has successfully targeted an Address Translation Table
                                     
                                     Reports external interrupt requests bit[23:20] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.
    INT_REQUEST[31..24]          - (W1C) Reports external interrupt requests bit[31:24] from the local processor to the Host Processor. 
                                     It is reserved when the PCIe is Rootport.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_INT_REQUEST_ADDR            PCIE_MAC_IREG_ISTATUS_HOST_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_INT_REQUEST_MASK            0xFF000000                // INT_REQUEST[31..24]
#define PCIE_MAC_IREG_ISTATUS_HOST_INT_REQUEST_SHFT            24
#define PCIE_MAC_IREG_ISTATUS_HOST_P_ATR_EVT_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_P_ATR_EVT_MASK              0x00F00000                // P_ATR_EVT[23..20]
#define PCIE_MAC_IREG_ISTATUS_HOST_P_ATR_EVT_SHFT              20
#define PCIE_MAC_IREG_ISTATUS_HOST_A_ATR_EVT_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_A_ATR_EVT_MASK              0x000F0000                // A_ATR_EVT[19..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_A_ATR_EVT_SHFT              16
#define PCIE_MAC_IREG_ISTATUS_HOST_DMA_ERROR_ADDR              PCIE_MAC_IREG_ISTATUS_HOST_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_DMA_ERROR_MASK              0x0000FF00                // DMA_ERROR[15..8]
#define PCIE_MAC_IREG_ISTATUS_HOST_DMA_ERROR_SHFT              8
#define PCIE_MAC_IREG_ISTATUS_HOST_DMA_END_ADDR                PCIE_MAC_IREG_ISTATUS_HOST_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_DMA_END_MASK                0x000000FF                // DMA_END[7..0]
#define PCIE_MAC_IREG_ISTATUS_HOST_DMA_END_SHFT                0

/* =====================================================================================

  ---RC_MSI_EN (0x74030000 + 0x0190)---

    rc_msi_en[7..0]              - (RO) RC MSI enable.
                                     Bit[0] : enable 0xC80 and 0xC00 MSI Adress and MSI capture capability.
                                     Bit[1] : enable 0xC84 and 0xC10 MSI Adress and MSI capture capability.
                                     Bit[2] : enable 0xC88 and 0xC20 MSI Adress and MSI capture capability.
                                     Bit[3] : enable 0xC8C and 0xC30 MSI Adress and MSI capture capability.
                                     Bit[4] : enable 0xC90 and 0xC40 MSI Adress and MSI capture capability.
                                     Bit[5] : enable 0xC94 and 0xC50 MSI Adress and MSI capture capability.
                                     Bit[6] : enable 0xC98 and 0xC60 MSI Adress and MSI capture capability.
                                     Bit[7] : enable 0xC9C and 0xC70 MSI Adress and MSI capture capability.
    RSVD1[31..8]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_RC_MSI_EN_RSVD1_ADDR                     PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_RSVD1_MASK                     0xFFFFFF00                // RSVD1[31..8]
#define PCIE_MAC_IREG_RC_MSI_EN_RSVD1_SHFT                     8
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_en_ADDR                 PCIE_MAC_IREG_RC_MSI_EN_ADDR
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_en_MASK                 0x000000FF                // rc_msi_en[7..0]
#define PCIE_MAC_IREG_RC_MSI_EN_rc_msi_en_SHFT                 0

/* =====================================================================================

  ---PCIE_LOW_POWER_CTRL (0x74030000 + 0x0194)---

    dis_lowpwr_mask[3..0]        - (RW) Those registers can mask external ASPM control interface.
                                     0 : external ASPM control interface can not affect PCIe low power state.
                                     1 : external ASPM control interface can affect PCIe low power state.
                                     Bit[0] : L0s.
                                     Bit[1] : L1.
                                     Bit[2] : L1.1.
                                     Bit[3] : L1.2.
    RESERVED4[7..4]              - (RO) Reserved bits
    force_dis_lowpwr[11..8]      - (RW) Those registers can force PCIe not enter low power state.
                                     0 : enable PCIe to low power state.
                                     1 : disable PCIe to low power state.
                                     Bit[0] : L0s.
                                     Bit[1] : L1.
                                     Bit[2] : L1.1.
                                     Bit[3] : L1.2.
    RESERVED12[23..12]           - (RO) Reserved bits
    L1_EXIT_NUM[30..24]          - (RW) L1 Exit Number
                                     The counter starts to count when clkreq_in_tl is asserted.
                                     lpm_state will request to exit L1 when the counter is met.
    L1_EXIT_EN[31]               - (RW) L1 Exit Enable

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_L1_EXIT_EN_ADDR      PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_L1_EXIT_EN_MASK      0x80000000                // L1_EXIT_EN[31]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_L1_EXIT_EN_SHFT      31
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_L1_EXIT_NUM_ADDR     PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_L1_EXIT_NUM_MASK     0x7F000000                // L1_EXIT_NUM[30..24]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_L1_EXIT_NUM_SHFT     24
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_force_dis_lowpwr_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_force_dis_lowpwr_MASK 0x00000F00                // force_dis_lowpwr[11..8]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_force_dis_lowpwr_SHFT 8
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_dis_lowpwr_mask_ADDR PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_dis_lowpwr_mask_MASK 0x0000000F                // dis_lowpwr_mask[3..0]
#define PCIE_MAC_IREG_PCIE_LOW_POWER_CTRL_dis_lowpwr_mask_SHFT 0

/* =====================================================================================

  ---PCIE_ICMD_PM (0x74030000 + 0x0198)---

    Send_PME[0]                  - (W1S) Send PME
                                     Local processor can write 1 to send PME bit command in order to generate a PME# event on the PCI Express link.This is used to ask PCI host processor to restore bridge to a fully functional legacy power state.Note that this bit is immediately cleared by the XpressRICH4-AXI Core: the local processor does not need to clear it.
                                     Note that the PME_En bit in the Power Management Control/Status register should be set to 1b to enable PME# to be asserted.
    RSVD1[3..1]                  - (RO) Reserved
    Turn_Off_Link[4]             - (RO) Turn Off Link
                                     The local processor can send a Turn Off Link command in order to start L2 state entry negotiation. If the Endpoint device is also ready to enter this state, then both devices will enter L2 state and this link will be turned off. Deasserting this signal forces the Core to exit L2 state and wakes the link.
    RSVD2[7..5]                  - (RO) Reserved
    CLKREQ_Clock_control[8]      - (RW) Clock Request Control Capability for RC (RC legacy L1 clock power management)
                                     0: RC does not allow the reference clock to be removed in L1PM state. (RC will enter L1 with Powerdown is P1 for legacy L1 Clock Power Management)
                                     1: RC allows the reference clock to be removed L1PM state. (RC will enter L1 with Powerdown is P2 for legacy L1 Clock Power Management)
                                     The register is only used for RC.
    RSVD3[31..9]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD3_ADDR                  PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD3_MASK                  0xFFFFFE00                // RSVD3[31..9]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD3_SHFT                  9
#define PCIE_MAC_IREG_PCIE_ICMD_PM_CLKREQ_Clock_control_ADDR   PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_CLKREQ_Clock_control_MASK   0x00000100                // CLKREQ_Clock_control[8]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_CLKREQ_Clock_control_SHFT   8
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD2_ADDR                  PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD2_MASK                  0x000000E0                // RSVD2[7..5]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD2_SHFT                  5
#define PCIE_MAC_IREG_PCIE_ICMD_PM_Turn_Off_Link_ADDR          PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_Turn_Off_Link_MASK          0x00000010                // Turn_Off_Link[4]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_Turn_Off_Link_SHFT          4
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD1_ADDR                  PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD1_MASK                  0x0000000E                // RSVD1[3..1]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_RSVD1_SHFT                  1
#define PCIE_MAC_IREG_PCIE_ICMD_PM_Send_PME_ADDR               PCIE_MAC_IREG_PCIE_ICMD_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ICMD_PM_Send_PME_MASK               0x00000001                // Send_PME[0]
#define PCIE_MAC_IREG_PCIE_ICMD_PM_Send_PME_SHFT               0

/* =====================================================================================

  ---PCIE_ISTATUS_PM (0x74030000 + 0x019C)---

    power_state[1..0]            - (RO) Power State
                                     - 00b: D0
                                     - 01b: D1
                                     - 10b: D2
                                     - 11b: D3hot or D3cold
    RSVD1[7..2]                  - (RO) Reserved
    l1pm_sm[10..8]               - (RO) L1SS state machine.
                                     - 000b: L1.0
                                     - 001b: L1.1
                                     - 010b: L1.2 entry
                                     - 011b: L1.2 idle
                                     - 100b: L1.2 exit
    allow_tl_clk_gating[11]      - (RO) allow tl_clk gating when device is in L1 or L2.
    RSVD2[31..12]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_RSVD2_ADDR               PCIE_MAC_IREG_PCIE_ISTATUS_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_RSVD2_MASK               0xFFFFF000                // RSVD2[31..12]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_RSVD2_SHFT               12
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_allow_tl_clk_gating_ADDR PCIE_MAC_IREG_PCIE_ISTATUS_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_allow_tl_clk_gating_MASK 0x00000800                // allow_tl_clk_gating[11]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_allow_tl_clk_gating_SHFT 11
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_l1pm_sm_ADDR             PCIE_MAC_IREG_PCIE_ISTATUS_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_l1pm_sm_MASK             0x00000700                // l1pm_sm[10..8]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_l1pm_sm_SHFT             8
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_ISTATUS_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_RSVD1_MASK               0x000000FC                // RSVD1[7..2]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_RSVD1_SHFT               2
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_power_state_ADDR         PCIE_MAC_IREG_PCIE_ISTATUS_PM_ADDR
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_power_state_MASK         0x00000003                // power_state[1..0]
#define PCIE_MAC_IREG_PCIE_ISTATUS_PM_power_state_SHFT         0

/* =====================================================================================

  ---ATS_PRI_REPORT (0x74030000 + 0x01A0)---

    PAGE_REQ_RESP_FAIL[0]        - (RO) Page Request Interface response failure: This bit is asserted for one clock cycle to report a response failure. It is automatically cleared by the Bridge. (unused now)
    PAGE_REQ_UPGRI[1]            - (RO) Page Request Interface UPGRI: The application sets this bit to report an unexpected page request group index error. It is automatically cleared by the Bridge. (unused now)
    PAGE_REQ_RUNNING[2]          - (RO) Page Request Interface running: The application sets this bit when issuing page requests or waiting for page request completions, and must clear it when serviced. (unused now)
    RSVD1[31..3]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ATS_PRI_REPORT_RSVD1_ADDR                PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_RSVD1_MASK                0xFFFFFFF8                // RSVD1[31..3]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_RSVD1_SHFT                3
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RUNNING_ADDR     PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RUNNING_MASK     0x00000004                // PAGE_REQ_RUNNING[2]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RUNNING_SHFT     2
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_UPGRI_ADDR       PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_UPGRI_MASK       0x00000002                // PAGE_REQ_UPGRI[1]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_UPGRI_SHFT       1
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RESP_FAIL_ADDR   PCIE_MAC_IREG_ATS_PRI_REPORT_ADDR
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RESP_FAIL_MASK   0x00000001                // PAGE_REQ_RESP_FAIL[0]
#define PCIE_MAC_IREG_ATS_PRI_REPORT_PAGE_REQ_RESP_FAIL_SHFT   0

/* =====================================================================================

  ---PCIE_LTR_VALUES (0x74030000 + 0x01A4)---

    LTR_Max_Snoop_Latency[9..0]  - (RW) Along with the Max Snoop LatencyScale field, this register specifies the maximum snoop latency that a device is permitted to request
    LTR_Max_Snoop_Latency_Scale[12..10] - (RW) This register provides a scale for the value contained within the Maximum Snoop LatencyValue field. Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD1[14..13]                - (RO) Reserved
    LTR_Snoop_latency_requirement[15] - (RW) Snoop latency requirement
    LTR_Max_NonSnoop_Latency[25..16] - (RW) Along with the Max NonSnoop LatencyScale field, this register specifies the maximum nonsnoop latency that a device is permitted to request
    LTR_Max_NonSnoop_Latency_Scale[28..26] - (RW) This register provides a scale for the value contained within the Maximum NonSnoop LatencyValue field. Encoding is the same as the LatencyScale fields in the LTR Message.
    RSVD2[30..29]                - (RO) Reserved
    LTR_NonSnoop_latency_requirement[31] - (RW) No-Snoop latency requirement

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_NonSnoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_NonSnoop_latency_requirement_MASK 0x80000000                // LTR_NonSnoop_latency_requirement[31]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_NonSnoop_latency_requirement_SHFT 31
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_RSVD2_ADDR               PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_RSVD2_MASK               0x60000000                // RSVD2[30..29]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_RSVD2_SHFT               29
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_NonSnoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_NonSnoop_Latency_Scale_MASK 0x1C000000                // LTR_Max_NonSnoop_Latency_Scale[28..26]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_NonSnoop_Latency_Scale_SHFT 26
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_NonSnoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_NonSnoop_Latency_MASK 0x03FF0000                // LTR_Max_NonSnoop_Latency[25..16]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_NonSnoop_Latency_SHFT 16
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Snoop_latency_requirement_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Snoop_latency_requirement_MASK 0x00008000                // LTR_Snoop_latency_requirement[15]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Snoop_latency_requirement_SHFT 15
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_RSVD1_MASK               0x00006000                // RSVD1[14..13]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_RSVD1_SHFT               13
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_Snoop_Latency_Scale_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_Snoop_Latency_Scale_MASK 0x00001C00                // LTR_Max_Snoop_Latency_Scale[12..10]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_Snoop_Latency_Scale_SHFT 10
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_Snoop_Latency_ADDR PCIE_MAC_IREG_PCIE_LTR_VALUES_ADDR
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_Snoop_Latency_MASK 0x000003FF                // LTR_Max_Snoop_Latency[9..0]
#define PCIE_MAC_IREG_PCIE_LTR_VALUES_LTR_Max_Snoop_Latency_SHFT 0

/* =====================================================================================

  ---AXI_PCIE_IF_CTRL (0x74030000 + 0x01A8)---

    cpl_bcnt_chk_disable[0]      - (RW) Check if the byte count in Completion TLP match the Memory TLP have been sent
                                     0 : Enable
                                     1 : Disable
    axitag_en[1]                 - (RW) When PCIe MAC send TLP, AXI Slave signal "axi_tag" is used to bit[7:5] of TAG field of TLP packet.
                                     The function is only useful when extend tag capability of PCIe configuration space is enabled.
                                     0 : Disable.
                                     1 : Enable
    RSVD1[3..2]                  - (RW) Reserved
    MSG_POOL_EN[4]               - (RW) Message pool enable
                                     0: one AXI slave data indicates a full Message, including Header and Payload.
                                     1: Bridge Layer should store AXI slave data and transfer a full message Message until the total received size exceeds MSG_POOL_DLEN.
    MSG_POOL_DLEN[7..5]          - (RW) Message pool payload length (unit : DW)
                                     It should meet the range from 0~4 because of hardware limit.
                                     So the max total length for message pool mode is 8DW (4DW Header + 0x4DW Data)
                                     Valid value : 0~4
    RSVD2[31..8]                 - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD2_ADDR              PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD2_MASK              0xFFFFFF00                // RSVD2[31..8]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD2_SHFT              8
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_DLEN_ADDR      PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_DLEN_MASK      0x000000E0                // MSG_POOL_DLEN[7..5]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_DLEN_SHFT      5
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_EN_ADDR        PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_EN_MASK        0x00000010                // MSG_POOL_EN[4]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_MSG_POOL_EN_SHFT        4
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD1_ADDR              PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD1_MASK              0x0000000C                // RSVD1[3..2]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_RSVD1_SHFT              2
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_axitag_en_ADDR          PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_axitag_en_MASK          0x00000002                // axitag_en[1]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_axitag_en_SHFT          1
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_cpl_bcnt_ck_disable_ADDR PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_ADDR
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_cpl_bcnt_chk_disable_MASK 0x00000001                // cpl_bcnt_chk_disable[0]
#define PCIE_MAC_IREG_AXI_PCIE_IF_CTRL_cpl_bcnt_chk_disable_SHFT 0

/* =====================================================================================

  ---ISTATUS_HOST_CTRL (0x74030000 + 0x01AC)---

    ISTATUS_HOST_DIS[0]          - (RW) When the register is set to 1, all interrupt to Host will be disabled.
                                     0 : Enable
                                     1 : Disable
    ISTATUS_HOST_EXT_CLR_DIS[1]  - (RW) When external interrupt in fall, it will clear ISTATUS_HOST status or not (0x18C)
                                     0 : Enable (external interrupt falling edge will clear corresponding bit of ISTATUS_HOST automatically) (MTK Proprietary Mode)
                                     1 : Disable (external interrupt falling edge will not clear corresponding bit of ISTATUS_HOST automatically) (Original PLDA mode)
    RESERVED2[15..2]             - (RO) Reserved bits
    ISTATUS_HOST_ATR_DIS[23..16] - (RW) Host Processor ATR Interrupt Disable
                                     Bit [16] AXI Post Error Disable
                                     Bit [17] AXI Fetch Error Disable
                                     Bit [18] AXI Discard Error Disable
                                     Bit [19] AXI Doorbell Disable
                                     Bit [20] PCIe Post Error Disable
                                     Bit [21] PCIe Fetch Error Disable
                                     Bit [22] PCIe Discard Error Disable
                                     Bit [23] PCIe Doorbell Disable
    RESERVED24[31..24]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_ATR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_ATR_DIS_MASK 0x00FF0000                // ISTATUS_HOST_ATR_DIS[23..16]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_ATR_DIS_SHFT 16
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_EXT_CLR_DIS_ADDR PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_EXT_CLR_DIS_MASK 0x00000002                // ISTATUS_HOST_EXT_CLR_DIS[1]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_EXT_CLR_DIS_SHFT 1
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_DIS_ADDR  PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ADDR
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_DIS_MASK  0x00000001                // ISTATUS_HOST_DIS[0]
#define PCIE_MAC_IREG_ISTATUS_HOST_CTRL_ISTATUS_HOST_DIS_SHFT  0

/* =====================================================================================

  ---ISTATUS_DMA0 (0x74030000 + 0x01B0)---

    ISTATUS_DMA0[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA0_ISTATUS_DMA0_ADDR           PCIE_MAC_IREG_ISTATUS_DMA0_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA0_ISTATUS_DMA0_MASK           0xFFFFFFFF                // ISTATUS_DMA0[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA0_ISTATUS_DMA0_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA1 (0x74030000 + 0x01B4)---

    ISTATUS_DMA1[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA1_ISTATUS_DMA1_ADDR           PCIE_MAC_IREG_ISTATUS_DMA1_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA1_ISTATUS_DMA1_MASK           0xFFFFFFFF                // ISTATUS_DMA1[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA1_ISTATUS_DMA1_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA2 (0x74030000 + 0x01B8)---

    ISTATUS_DMA2[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA2_ISTATUS_DMA2_ADDR           PCIE_MAC_IREG_ISTATUS_DMA2_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA2_ISTATUS_DMA2_MASK           0xFFFFFFFF                // ISTATUS_DMA2[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA2_ISTATUS_DMA2_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA3 (0x74030000 + 0x01BC)---

    ISTATUS_DMA3[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA3_ISTATUS_DMA3_ADDR           PCIE_MAC_IREG_ISTATUS_DMA3_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA3_ISTATUS_DMA3_MASK           0xFFFFFFFF                // ISTATUS_DMA3[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA3_ISTATUS_DMA3_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA4 (0x74030000 + 0x01C0)---

    ISTATUS_DMA4[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA4_ISTATUS_DMA4_ADDR           PCIE_MAC_IREG_ISTATUS_DMA4_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA4_ISTATUS_DMA4_MASK           0xFFFFFFFF                // ISTATUS_DMA4[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA4_ISTATUS_DMA4_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA5 (0x74030000 + 0x01C4)---

    ISTATUS_DMA5[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA5_ISTATUS_DMA5_ADDR           PCIE_MAC_IREG_ISTATUS_DMA5_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA5_ISTATUS_DMA5_MASK           0xFFFFFFFF                // ISTATUS_DMA5[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA5_ISTATUS_DMA5_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA6 (0x74030000 + 0x01C8)---

    ISTATUS_DMA6[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA6_ISTATUS_DMA6_ADDR           PCIE_MAC_IREG_ISTATUS_DMA6_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA6_ISTATUS_DMA6_MASK           0xFFFFFFFF                // ISTATUS_DMA6[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA6_ISTATUS_DMA6_SHFT           0

/* =====================================================================================

  ---ISTATUS_DMA7 (0x74030000 + 0x01CC)---

    ISTATUS_DMA7[31..0]          - (RO) These registers are copies of DMA Engine DMA_STATUS registers. They are automatically cleared when DMA_CONTROL[0] is set to 1b

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_DMA7_ISTATUS_DMA7_ADDR           PCIE_MAC_IREG_ISTATUS_DMA7_ADDR
#define PCIE_MAC_IREG_ISTATUS_DMA7_ISTATUS_DMA7_MASK           0xFFFFFFFF                // ISTATUS_DMA7[31..0]
#define PCIE_MAC_IREG_ISTATUS_DMA7_ISTATUS_DMA7_SHFT           0

/* =====================================================================================

  ---ISTATUS_PENDING_DMA (0x74030000 + 0x01D0)---

    ISTATUS_PENDING_DMA[7..0]    - (RO) When bit i asserted, DMA i state machine is not in IDLE state
    RSVD[31..8]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_RSVD_ADDR            PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_RSVD_MASK            0xFFFFFF00                // RSVD[31..8]
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_RSVD_SHFT            8
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ISTATUS_PENDING_DMA_ADDR PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ISTATUS_PENDING_DMA_MASK 0x000000FF                // ISTATUS_PENDING_DMA[7..0]
#define PCIE_MAC_IREG_ISTATUS_PENDING_DMA_ISTATUS_PENDING_DMA_SHFT 0

/* =====================================================================================

  ---ISTATUS_PENDING_ADT (0x74030000 + 0x01D4)---

    ISTATUS_PENDING_ADT_W[11..0] - (RO) When bit i asserted, ADT i at least one write buffer resource is not in IDLE state
                                     bit[0] : ADT0 (PCIe)
                                     bit[4] : ADT4 (AXI Slave0)
                                     bit[5] : ADT5 (AXI Slave1)
                                     bit[6] : ADT6 (AXI Slave2)
                                     bit[7] : ADT7 (AXI Slave3)
    RSVD1[15..12]                - (RO) Reserved
    ISTATUS_PENDING_ADT_R[27..16] - (RO) When bit i asserted, ADT i at least one read buffer resource is not in IDLE state
                                     bit[16] : ADT0 (PCIe)
                                     bit[17] : ADT4 (AXI Slave0)
                                     bit[18] : ADT5 (AXI Slave1)
                                     bit[19] : ADT6 (AXI Slave2)
                                     bit[20] : ADT7 (AXI Slave3)
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD2_ADDR           PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD2_MASK           0xF0000000                // RSVD2[31..28]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD2_SHFT           28
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_R_ADDR PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_R_MASK 0x0FFF0000                // ISTATUS_PENDING_ADT_R[27..16]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_R_SHFT 16
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD1_ADDR           PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD1_MASK           0x0000F000                // RSVD1[15..12]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_RSVD1_SHFT           12
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_W_ADDR PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ADDR
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_W_MASK 0x00000FFF                // ISTATUS_PENDING_ADT_W[11..0]
#define PCIE_MAC_IREG_ISTATUS_PENDING_ADT_ISTATUS_PENDING_ADT_W_SHFT 0

/* =====================================================================================

  ---ISTATUS_P_ADT_WIN0 (0x74030000 + 0x01D8)---

    ISTATUS_P_ADT_WIN0[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation
                                     events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ISTATUS_P_ADT_WIN0_ADDR PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ADDR
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ISTATUS_P_ADT_WIN0_MASK 0xFFFFFFFF                // ISTATUS_P_ADT_WIN0[31..0]
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN0_ISTATUS_P_ADT_WIN0_SHFT 0

/* =====================================================================================

  ---ISTATUS_P_ADT_WIN1 (0x74030000 + 0x01DC)---

    ISTATUS_P_ADT_WIN1[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation
                                     events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ISTATUS_P_ADT_WIN1_ADDR PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ADDR
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ISTATUS_P_ADT_WIN1_MASK 0xFFFFFFFF                // ISTATUS_P_ADT_WIN1[31..0]
#define PCIE_MAC_IREG_ISTATUS_P_ADT_WIN1_ISTATUS_P_ADT_WIN1_SHFT 0

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV0 (0x74030000 + 0x01E0)---

    ISTATUS_A_ADT_SLV0[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation
                                     events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ISTATUS_A_ADT_SLV0_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ISTATUS_A_ADT_SLV0_MASK 0xFFFFFFFF                // ISTATUS_A_ADT_SLV0[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV0_ISTATUS_A_ADT_SLV0_SHFT 0

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV1 (0x74030000 + 0x01E4)---

    ISTATUS_A_ADT_SLV1[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation
                                     events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ISTATUS_A_ADT_SLV1_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ISTATUS_A_ADT_SLV1_MASK 0xFFFFFFFF                // ISTATUS_A_ADT_SLV1[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV1_ISTATUS_A_ADT_SLV1_SHFT 0

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV2 (0x74030000 + 0x01E8)---

    ISTATUS_A_ADT_SLV2[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation
                                     events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ISTATUS_A_ADT_SLV2_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ISTATUS_A_ADT_SLV2_MASK 0xFFFFFFFF                // ISTATUS_A_ADT_SLV2[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV2_ISTATUS_A_ADT_SLV2_SHFT 0

/* =====================================================================================

  ---ISTATUS_A_ADT_SLV3 (0x74030000 + 0x01EC)---

    ISTATUS_A_ADT_SLV3[31..0]    - (RO) The status register bits are automatically set when a corresponding event occurs. Each event is independent, so multiple bits may be active simultaneously.
                                     These registers are composed of 8 vectors of 4-bits (ADT_0 - ADT_7). The vector number reports the address translation
                                     events related to the Address Translation Table number.
                                     Each vector has the same mapping as P_ATR_EVT and A_ATR_EVT Field (see ISTATUS_LOCAL).
                                     These registers are automatically cleared when the corresponding bits of P_ATR_EVT and A_ATR_EVT Field are written to 1b.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ISTATUS_A_ADT_SLV3_ADDR PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ADDR
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ISTATUS_A_ADT_SLV3_MASK 0xFFFFFFFF                // ISTATUS_A_ADT_SLV3[31..0]
#define PCIE_MAC_IREG_ISTATUS_A_ADT_SLV3_ISTATUS_A_ADT_SLV3_SHFT 0

/* =====================================================================================

  ---IMASK_HOST_SET (0x74030000 + 0x01F0)---

    imask_host_set[31..0]        - (W1S) Write one to set register "IMASK_HOST" in  0x0188

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_SET_imask_host_set_ADDR       PCIE_MAC_IREG_IMASK_HOST_SET_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_SET_imask_host_set_MASK       0xFFFFFFFF                // imask_host_set[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_SET_imask_host_set_SHFT       0

/* =====================================================================================

  ---IMASK_HOST_CLR (0x74030000 + 0x01F4)---

    imask_host_clr[31..0]        - (W1C) Write one to clear register "IMASK_HOST" in  0x0188

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_HOST_CLR_imask_host_clr_ADDR       PCIE_MAC_IREG_IMASK_HOST_CLR_ADDR
#define PCIE_MAC_IREG_IMASK_HOST_CLR_imask_host_clr_MASK       0xFFFFFFFF                // imask_host_clr[31..0]
#define PCIE_MAC_IREG_IMASK_HOST_CLR_imask_host_clr_SHFT       0

/* =====================================================================================

  ---PCIE_DMA_DUMMY_0 (0x74030000 + 0x01F8)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_PCIE_DUMMY_ADDR         PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_PCIE_DUMMY_MASK         0xFFFFFFFF                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_0_PCIE_DUMMY_SHFT         0

/* =====================================================================================

  ---PCIE_DMA_DUMMY_1 (0x74030000 + 0x01FC)---

    PCIE_DUMMY[31..0]            - (RW) Dummy register for SA DMA Operation

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_PCIE_DUMMY_ADDR         PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_ADDR
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_PCIE_DUMMY_MASK         0xFFFFFFFF                // PCIE_DUMMY[31..0]
#define PCIE_MAC_IREG_PCIE_DMA_DUMMY_1_PCIE_DUMMY_SHFT         0

/* =====================================================================================

  ---ROUTING_RULES_R00 (0x74030000 + 0x0200)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R00_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R00_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R01 (0x74030000 + 0x0204)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R01_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R01_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R02 (0x74030000 + 0x0208)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R02_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R02_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R03 (0x74030000 + 0x020C)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R03_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R03_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R04 (0x74030000 + 0x0210)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R04_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R04_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R05 (0x74030000 + 0x0214)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R05_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R05_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R06 (0x74030000 + 0x0218)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R06_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R06_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R07 (0x74030000 + 0x021C)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R07_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R07_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R08 (0x74030000 + 0x0220)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R08_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R08_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R09 (0x74030000 + 0x0224)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R09_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R09_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R10 (0x74030000 + 0x0228)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R10_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R10_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R11 (0x74030000 + 0x022C)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R11_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R11_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R12 (0x74030000 + 0x0230)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R12_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R12_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R13 (0x74030000 + 0x0234)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R13_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R13_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R14 (0x74030000 + 0x0238)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R14_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R14_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_R15 (0x74030000 + 0x023C)---

    ROUTING_RULES_R[31..0]       - (RO) defines the allowed connections between Read Requester and Read Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a read request from Requester j, and that Requester j is allowed to receive a read completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ROUTING_RULES_R_ADDR   PCIE_MAC_IREG_ROUTING_RULES_R15_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ROUTING_RULES_R_MASK   0xFFFFFFFF                // ROUTING_RULES_R[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_R15_ROUTING_RULES_R_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W00 (0x74030000 + 0x0240)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W00_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W00_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W01 (0x74030000 + 0x0244)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W01_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W01_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W02 (0x74030000 + 0x0248)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W02_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W02_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W03 (0x74030000 + 0x024C)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W03_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W03_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W04 (0x74030000 + 0x0250)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W04_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W04_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W05 (0x74030000 + 0x0254)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W05_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W05_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W06 (0x74030000 + 0x0258)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W06_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W06_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W07 (0x74030000 + 0x025C)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W07_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W07_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W08 (0x74030000 + 0x0260)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W08_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W08_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W09 (0x74030000 + 0x0264)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W09_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W09_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W10 (0x74030000 + 0x0268)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W10_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W10_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W11 (0x74030000 + 0x026C)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W11_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W11_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W12 (0x74030000 + 0x0270)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W12_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W12_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W13 (0x74030000 + 0x0274)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W13_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W13_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W14 (0x74030000 + 0x0278)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W14_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W14_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ROUTING_RULES_W15 (0x74030000 + 0x027C)---

    ROUTING_RULES_W[31..0]       - (RO) defines the allowed connections between Write Requester and Write Completer modules. It consists of 16 vectors of 32 bits.
                                     When bit j of vector i is asserted, it means that Completer i is allowed to receive a Write request from Requester j, and that Requester j is allowed to receive a Write completion from
                                     Completer i.

 =====================================================================================*/
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ROUTING_RULES_W_ADDR   PCIE_MAC_IREG_ROUTING_RULES_W15_ADDR
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ROUTING_RULES_W_MASK   0xFFFFFFFF                // ROUTING_RULES_W[31..0]
#define PCIE_MAC_IREG_ROUTING_RULES_W15_ROUTING_RULES_W_SHFT   0

/* =====================================================================================

  ---ARBITRATION_RULES0 (0x74030000 + 0x0280)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES0_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES0_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES1 (0x74030000 + 0x0284)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES1_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES1_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES2 (0x74030000 + 0x0288)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES2_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES2_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES3 (0x74030000 + 0x028C)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES3_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES3_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES4 (0x74030000 + 0x0290)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES4_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES4_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES5 (0x74030000 + 0x0294)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES5_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES5_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES6 (0x74030000 + 0x0298)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES6_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES6_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES7 (0x74030000 + 0x029C)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES7_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES7_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES8 (0x74030000 + 0x02A0)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES8_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES8_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES9 (0x74030000 + 0x02A4)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType1_MASK    0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType1_SHFT    28
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType1_MASK    0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType1_SHFT    24
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType1_MASK    0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType1_SHFT    20
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType1_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType1_MASK    0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType1_SHFT    16
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType0_MASK    0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrCplArbType0_SHFT    12
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType0_MASK    0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_WrReqArbType0_SHFT    8
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType0_MASK    0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdCplArbType0_SHFT    4
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType0_ADDR    PCIE_MAC_IREG_ARBITRATION_RULES9_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType0_MASK    0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES9_RdReqArbType0_SHFT    0

/* =====================================================================================

  ---ARBITRATION_RULES10 (0x74030000 + 0x02A8)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType1_MASK   0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType1_SHFT   28
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType1_MASK   0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType1_SHFT   24
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType1_MASK   0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType1_SHFT   20
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType1_MASK   0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType1_SHFT   16
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType0_MASK   0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrCplArbType0_SHFT   12
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType0_MASK   0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_WrReqArbType0_SHFT   8
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType0_MASK   0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdCplArbType0_SHFT   4
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES10_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType0_MASK   0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES10_RdReqArbType0_SHFT   0

/* =====================================================================================

  ---ARBITRATION_RULES11 (0x74030000 + 0x02AC)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType1_MASK   0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType1_SHFT   28
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType1_MASK   0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType1_SHFT   24
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType1_MASK   0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType1_SHFT   20
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType1_MASK   0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType1_SHFT   16
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType0_MASK   0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrCplArbType0_SHFT   12
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType0_MASK   0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_WrReqArbType0_SHFT   8
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType0_MASK   0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdCplArbType0_SHFT   4
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES11_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType0_MASK   0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES11_RdReqArbType0_SHFT   0

/* =====================================================================================

  ---ARBITRATION_RULES12 (0x74030000 + 0x02B0)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType1_MASK   0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType1_SHFT   28
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType1_MASK   0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType1_SHFT   24
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType1_MASK   0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType1_SHFT   20
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType1_MASK   0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType1_SHFT   16
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType0_MASK   0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrCplArbType0_SHFT   12
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType0_MASK   0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_WrReqArbType0_SHFT   8
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType0_MASK   0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdCplArbType0_SHFT   4
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES12_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType0_MASK   0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES12_RdReqArbType0_SHFT   0

/* =====================================================================================

  ---ARBITRATION_RULES13 (0x74030000 + 0x02B4)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType1_MASK   0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType1_SHFT   28
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType1_MASK   0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType1_SHFT   24
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType1_MASK   0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType1_SHFT   20
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType1_MASK   0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType1_SHFT   16
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType0_MASK   0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrCplArbType0_SHFT   12
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType0_MASK   0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_WrReqArbType0_SHFT   8
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType0_MASK   0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdCplArbType0_SHFT   4
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES13_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType0_MASK   0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES13_RdReqArbType0_SHFT   0

/* =====================================================================================

  ---ARBITRATION_RULES14 (0x74030000 + 0x02B8)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType1_MASK   0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType1_SHFT   28
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType1_MASK   0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType1_SHFT   24
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType1_MASK   0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType1_SHFT   20
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType1_MASK   0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType1_SHFT   16
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType0_MASK   0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrCplArbType0_SHFT   12
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType0_MASK   0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_WrReqArbType0_SHFT   8
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType0_MASK   0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdCplArbType0_SHFT   4
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES14_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType0_MASK   0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES14_RdReqArbType0_SHFT   0

/* =====================================================================================

  ---ARBITRATION_RULES15 (0x74030000 + 0x02BC)---

    RdReqArbType0[3..0]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType0[7..4]          - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType0[11..8]         - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType0[15..12]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdReqArbType1[19..16]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    RdCplArbType1[23..20]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrReqArbType1[27..24]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved
    WrCplArbType1[31..28]        - (RW) defines the arbitration type for read requests
                                     0: reserved+R552
                                     1: Round Robin Arbitration
                                     2: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType1_MASK   0xF0000000                // WrCplArbType1[31..28]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType1_SHFT   28
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType1_MASK   0x0F000000                // WrReqArbType1[27..24]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType1_SHFT   24
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType1_MASK   0x00F00000                // RdCplArbType1[23..20]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType1_SHFT   20
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType1_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType1_MASK   0x000F0000                // RdReqArbType1[19..16]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType1_SHFT   16
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType0_MASK   0x0000F000                // WrCplArbType0[15..12]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrCplArbType0_SHFT   12
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType0_MASK   0x00000F00                // WrReqArbType0[11..8]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_WrReqArbType0_SHFT   8
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType0_MASK   0x000000F0                // RdCplArbType0[7..4]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdCplArbType0_SHFT   4
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType0_ADDR   PCIE_MAC_IREG_ARBITRATION_RULES15_ADDR
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType0_MASK   0x0000000F                // RdReqArbType0[3..0]
#define PCIE_MAC_IREG_ARBITRATION_RULES15_RdReqArbType0_SHFT   0

/* =====================================================================================

  ---PRIORITY_RULES0 (0x74030000 + 0x02C0)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES0_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES0_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES0_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES1 (0x74030000 + 0x02C4)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES1_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES1_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES1_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES2 (0x74030000 + 0x02C8)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES2_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES2_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES2_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES3 (0x74030000 + 0x02CC)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES3_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES3_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES3_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES4 (0x74030000 + 0x02D0)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES4_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES4_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES4_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES5 (0x74030000 + 0x02D4)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES5_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES5_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES5_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES6 (0x74030000 + 0x02D8)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES6_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES6_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES6_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES7 (0x74030000 + 0x02DC)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES7_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES7_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES7_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES8 (0x74030000 + 0x02E0)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES8_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES8_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES8_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES9 (0x74030000 + 0x02E4)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority1_MASK      0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority1_SHFT      28
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority1_MASK      0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority1_SHFT      24
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority1_MASK      0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority1_SHFT      20
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority1_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority1_MASK      0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority1_SHFT      16
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority0_MASK      0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrCplPriority0_SHFT      12
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority0_MASK      0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES9_WrReqPriority0_SHFT      8
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority0_MASK      0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdCplPriority0_SHFT      4
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority0_ADDR      PCIE_MAC_IREG_PRIORITY_RULES9_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority0_MASK      0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES9_RdReqPriority0_SHFT      0

/* =====================================================================================

  ---PRIORITY_RULES10 (0x74030000 + 0x02E8)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority1_MASK     0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority1_SHFT     28
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority1_MASK     0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority1_SHFT     24
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority1_MASK     0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority1_SHFT     20
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority1_MASK     0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority1_SHFT     16
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority0_MASK     0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrCplPriority0_SHFT     12
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority0_MASK     0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES10_WrReqPriority0_SHFT     8
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority0_MASK     0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdCplPriority0_SHFT     4
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES10_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority0_MASK     0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES10_RdReqPriority0_SHFT     0

/* =====================================================================================

  ---PRIORITY_RULES11 (0x74030000 + 0x02EC)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority1_MASK     0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority1_SHFT     28
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority1_MASK     0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority1_SHFT     24
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority1_MASK     0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority1_SHFT     20
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority1_MASK     0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority1_SHFT     16
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority0_MASK     0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrCplPriority0_SHFT     12
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority0_MASK     0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES11_WrReqPriority0_SHFT     8
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority0_MASK     0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdCplPriority0_SHFT     4
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES11_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority0_MASK     0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES11_RdReqPriority0_SHFT     0

/* =====================================================================================

  ---PRIORITY_RULES12 (0x74030000 + 0x02F0)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority1_MASK     0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority1_SHFT     28
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority1_MASK     0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority1_SHFT     24
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority1_MASK     0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority1_SHFT     20
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority1_MASK     0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority1_SHFT     16
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority0_MASK     0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrCplPriority0_SHFT     12
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority0_MASK     0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES12_WrReqPriority0_SHFT     8
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority0_MASK     0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdCplPriority0_SHFT     4
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES12_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority0_MASK     0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES12_RdReqPriority0_SHFT     0

/* =====================================================================================

  ---PRIORITY_RULES13 (0x74030000 + 0x02F4)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority1_MASK     0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority1_SHFT     28
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority1_MASK     0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority1_SHFT     24
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority1_MASK     0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority1_SHFT     20
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority1_MASK     0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority1_SHFT     16
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority0_MASK     0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrCplPriority0_SHFT     12
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority0_MASK     0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES13_WrReqPriority0_SHFT     8
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority0_MASK     0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdCplPriority0_SHFT     4
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES13_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority0_MASK     0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES13_RdReqPriority0_SHFT     0

/* =====================================================================================

  ---PRIORITY_RULES14 (0x74030000 + 0x02F8)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority1_MASK     0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority1_SHFT     28
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority1_MASK     0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority1_SHFT     24
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority1_MASK     0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority1_SHFT     20
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority1_MASK     0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority1_SHFT     16
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority0_MASK     0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrCplPriority0_SHFT     12
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority0_MASK     0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES14_WrReqPriority0_SHFT     8
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority0_MASK     0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdCplPriority0_SHFT     4
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES14_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority0_MASK     0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES14_RdReqPriority0_SHFT     0

/* =====================================================================================

  ---PRIORITY_RULES15 (0x74030000 + 0x02FC)---

    RdReqPriority0[3..0]         - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority0[7..4]         - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority0[11..8]        - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority0[15..12]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdReqPriority1[19..16]       - (RW) defines the priority of the read request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    RdCplPriority1[23..20]       - (RW) defines the priority of the read completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrReqPriority1[27..24]       - (RW) defines the priority of the write request. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.
    WrCplPriority1[31..28]       - (RW) defines the priority of the write completion. The higher the Priority value attributed to a request or completion, the lower the actual priority. For example, a request with a priority value of 2 is higher priority that a request with a value of 4.

 =====================================================================================*/
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority1_MASK     0xF0000000                // WrCplPriority1[31..28]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority1_SHFT     28
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority1_MASK     0x0F000000                // WrReqPriority1[27..24]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority1_SHFT     24
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority1_MASK     0x00F00000                // RdCplPriority1[23..20]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority1_SHFT     20
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority1_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority1_MASK     0x000F0000                // RdReqPriority1[19..16]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority1_SHFT     16
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority0_MASK     0x0000F000                // WrCplPriority0[15..12]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrCplPriority0_SHFT     12
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority0_MASK     0x00000F00                // WrReqPriority0[11..8]
#define PCIE_MAC_IREG_PRIORITY_RULES15_WrReqPriority0_SHFT     8
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority0_MASK     0x000000F0                // RdCplPriority0[7..4]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdCplPriority0_SHFT     4
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority0_ADDR     PCIE_MAC_IREG_PRIORITY_RULES15_ADDR
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority0_MASK     0x0000000F                // RdReqPriority0[3..0]
#define PCIE_MAC_IREG_PRIORITY_RULES15_RdReqPriority0_SHFT     0

/* =====================================================================================

  ---P2A_TC_QOS_CONV (0x74030000 + 0x0300)---

    tc_qos_auto_conv[0]          - (RW) Automatic conversion between PCIe Traffic Class and AXI Quality of Service :
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_P2A_TC_QOS_CONV.
                                     When automatic conversion is enabled, the Traffic Class or AxQoS values issued by the Bridge are computed based on the Traffic Class or AxQoS values received by the Address Translation modules.
                                     When this bit is asserted, automatic conversion between PCIe Traffic Class and AXI Quality of Service is enabled. Otherwise it is disabled.
                                     Note: The AxQoS[3:0] value corresponding to TC[2:0] = 0 is always 0.
                                     When automatic conversion is disabled, the Traffic Class or AxQoS values issued by the Bridge depends on the Transfer Parameters programmed in Address Translation Tables.
    RESERVED1[3..1]              - (RO) Reserved bits
    aqos_tc1[7..4]               - (RW) AxQoS value corresponding to TC[2:0] = 1
                                     (recommended value is 1)
    aqos_tc2[11..8]              - (RW) AxQoS value corresponding to TC[2:0] = 2
                                     (recommended value is 2)
    aqos_tc3[15..12]             - (RW) AxQoS value corresponding to TC[2:0] = 3
                                     (recommended value is 3)
    aqos_tc4[19..16]             - (RW) AxQoS value corresponding to TC[2:0] = 4
                                     (recommended value is 4)
    aqos_tc5[23..20]             - (RW) AxQoS value corresponding to TC[2:0] = 5
                                     (recommended value is 5)
    aqos_tc6[27..24]             - (RW) AxQoS value corresponding to TC[2:0] = 6
                                     (recommended value is 6)
    aqos_tc7[31..28]             - (RW) AxQoS value corresponding to TC[2:0] = 7
                                     (recommended value is 7)

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc7_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc7_MASK            0xF0000000                // aqos_tc7[31..28]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc7_SHFT            28
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc6_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc6_MASK            0x0F000000                // aqos_tc6[27..24]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc6_SHFT            24
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc5_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc5_MASK            0x00F00000                // aqos_tc5[23..20]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc5_SHFT            20
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc4_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc4_MASK            0x000F0000                // aqos_tc4[19..16]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc4_SHFT            16
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc3_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc3_MASK            0x0000F000                // aqos_tc3[15..12]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc3_SHFT            12
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc2_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc2_MASK            0x00000F00                // aqos_tc2[11..8]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc2_SHFT            8
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc1_ADDR            PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc1_MASK            0x000000F0                // aqos_tc1[7..4]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_aqos_tc1_SHFT            4
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_tc_qos_auto_conv_ADDR    PCIE_MAC_IREG_P2A_TC_QOS_CONV_ADDR
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_tc_qos_auto_conv_MASK    0x00000001                // tc_qos_auto_conv[0]
#define PCIE_MAC_IREG_P2A_TC_QOS_CONV_tc_qos_auto_conv_SHFT    0

/* =====================================================================================

  ---P2A_ATTR_CACHE_CONV (0x74030000 + 0x0304)---

    attr_cache_auto_conv[0]      - (RW) Automatic conversion between PCIe No Snoop Attribute and AXI Memory types
                                     When automatic conversion is enabled, the No Snoop Attribute or AxCACHE values issued by the Bridge are computed based on the No Snoop Attribute or AxCACHE values received by the Address Translation modules.
                                     Bit [0]: When this bit is asserted, automatic conversion between PCIe No Snoop Attribute and AXI Memory types is enabled.
    RESERVED1[3..1]              - (RO) Reserved bits
    memory_bufferable[4]         - (RW) Bit [4]: Memory bufferable: when asserted, all PCIe memory accesses are marked as bufferable (AxCACHE[0] is set to 1) 
                                     (recommended value = 1).
    memory_cacheable[5]          - (RW) Bit [5]: Memory cacheable: when asserted, and PCIe No Snoop = 0, all PCIe memory accesses are marked as cacheable (AxCACHE[1] is set to 1) 
                                     (recommended value = 1).
    memory_allocate[6]           - (RW) Bit [6]: Memory allocate: when asserted, and PCIe No Snoop = 0 and Bit [5:4] = 2'b11, all PCIe memory accesses are marked as allocate (AxCACHE[2] is set to 1) 
                                     (recommended value = 0).
    memory_other_allocate[7]     - (RW) Bit [7]: Memory other allocate: when asserted, and PCIe No Snoop = 0 and Bit [5:4] = 2'b11, all PCIe memory accesses are marked as other allocate (AxCACHE[3] is set to 1) 
                                     (recommended value = 0).
    RESERVED8[23..8]             - (RO) Reserved bits
    non_cache_space_size[30..24] - (RW) Bit [30:24]: Non-Cacheable Space Size: when set to 0, this address space is disabled. Otherwise its size is equal to 2^Non-Cacheable Space Size in Bytes.
    non_cache_space_bufferable[31] - (RW) Bit [31]: Non-Cacheable Space bufferable: 
                                     when asserted, all PCIe accesses whose address falls between Non-Cacheable Space Base Address and Non-Cacheable Space Base Address + 0x2^Non-Caceable Space Size are set to AxCACHE = 4'b0001. Otherwise it is set to 4'b0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_bufferable_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_bufferable_MASK 0x80000000                // non_cache_space_bufferable[31]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_bufferable_SHFT 31
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_size_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_size_MASK 0x7F000000                // non_cache_space_size[30..24]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_non_cache_space_size_SHFT 24
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_other_allocate_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_other_allocate_MASK 0x00000080                // memory_other_allocate[7]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_other_allocate_SHFT 7
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_allocate_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_allocate_MASK 0x00000040                // memory_allocate[6]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_allocate_SHFT 6
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_cacheable_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_cacheable_MASK 0x00000020                // memory_cacheable[5]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_cacheable_SHFT 5
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_bufferable_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_bufferable_MASK 0x00000010                // memory_bufferable[4]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_memory_bufferable_SHFT 4
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_attr_cache_auto_conv_ADDR PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_ADDR
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_attr_cache_auto_conv_MASK 0x00000001                // attr_cache_auto_conv[0]
#define PCIE_MAC_IREG_P2A_ATTR_CACHE_CONV_attr_cache_auto_conv_SHFT 0

/* =====================================================================================

  ---P2A_NC_BASE_ADDR_L (0x74030000 + 0x0308)---

    p2a_nc_base_addr_low[31..0]  - (RW) Low 32 bit address of P2A_NC_BASE_ADDR.
                                     This 64-bit address should be aligned on Non-Cacheable Space Size. Therefore, P2A_NC_BASE_ADDR[integer (Non-Cacheable Space Size-1):0] should be reserved and is ignored.
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_P2A_NC_BASE_ADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_p2a_nc_base_addr_low_ADDR PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_ADDR
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_p2a_nc_base_addr_low_MASK 0xFFFFFFFF                // p2a_nc_base_addr_low[31..0]
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_L_p2a_nc_base_addr_low_SHFT 0

/* =====================================================================================

  ---P2A_NC_BASE_ADDR_H (0x74030000 + 0x030C)---

    p2a_nc_base_addr_high[31..0] - (RW) High 32 bit address of P2A_NC_BASE_ADDR.
                                     This 64-bit address should be aligned on Non-Cacheable Space Size. Therefore, P2A_NC_BASE_ADDR[integer (Non-Cacheable Space Size-1):0] should be reserved and is ignored.
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_P2A_NC_BASE_ADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_p2a_nc_base_addr_high_ADDR PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_ADDR
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_p2a_nc_base_addr_high_MASK 0xFFFFFFFF                // p2a_nc_base_addr_high[31..0]
#define PCIE_MAC_IREG_P2A_NC_BASE_ADDR_H_p2a_nc_base_addr_high_SHFT 0

/* =====================================================================================

  ---ORDRULES_DIS (0x74030000 + 0x0320)---

    P_RD_VS_P_WR_DIS[0]          - (RW) when this bit is 1b, the ordering rule between PCIe read requests and PCIe write requests is disabled. This means that PCIe Non-Posted requests (without data) are allowed to pass before PCIe Posted requests, possibly violating the PCIe Specification B2a Ordering Rule.
    RSVD1[3..1]                  - (RO) Reserved
    Ai_CPL_VS_P_WR_DIS[7..4]     - (RW) when this bit is 1b, the ordering rule between AXI Slave #i read completions and PCIe write requests is disabled. This means that PCIe to AXI Slave #i read completions are allowed to pass before PCIe Posted requests to AXI Master #0, possibly violating the PCIe Specification D2a Ordering Rule.
    Ai_RD_VS_Ai_WR_DIS[11..8]    - (RW) when this bit is 1b, the ordering rule between AXI Slave #i read requests and AXI Slave #i write requests is disabled. This means that AXI Slave #i read requests (without data) are allowed to pass before AXI Slave #i write requests, possibly violating the PCIe Specification B2a Ordering Rule.
    P_CPL_VS_Ai_WR_DIS[15..12]   - (RW) when this bit is 1b, the ordering rule between PCIe read completions and AXI Slave #i to PCIe write requests is disabled. This means that AXI to PCIe read completions are allowed to pass
                                     before AXI Slave #i to PCIe Posted requests, possibly violating the PCIe Specification D2a Ordering Rule.
    Ai_CPL_VS_Aj_WR_DIS[31..16]  - (RW) when this bit is 1b, the ordering rule between AXI Slave #i read completions and AXI Slave #j write requests is disabled. This means that AXI Master #j to AXI Slave #i read completions are allowed to pass before AXI Slave #j write requests to AXI Master #i, possibly violating the PCIe Specification D2a Ordering Rule.

 =====================================================================================*/
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_Aj_WR_DIS_ADDR    PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_Aj_WR_DIS_MASK    0xFFFF0000                // Ai_CPL_VS_Aj_WR_DIS[31..16]
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_Aj_WR_DIS_SHFT    16
#define PCIE_MAC_IREG_ORDRULES_DIS_P_CPL_VS_Ai_WR_DIS_ADDR     PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_P_CPL_VS_Ai_WR_DIS_MASK     0x0000F000                // P_CPL_VS_Ai_WR_DIS[15..12]
#define PCIE_MAC_IREG_ORDRULES_DIS_P_CPL_VS_Ai_WR_DIS_SHFT     12
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_RD_VS_Ai_WR_DIS_ADDR     PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_RD_VS_Ai_WR_DIS_MASK     0x00000F00                // Ai_RD_VS_Ai_WR_DIS[11..8]
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_RD_VS_Ai_WR_DIS_SHFT     8
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_P_WR_DIS_ADDR     PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_P_WR_DIS_MASK     0x000000F0                // Ai_CPL_VS_P_WR_DIS[7..4]
#define PCIE_MAC_IREG_ORDRULES_DIS_Ai_CPL_VS_P_WR_DIS_SHFT     4
#define PCIE_MAC_IREG_ORDRULES_DIS_RSVD1_ADDR                  PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_RSVD1_MASK                  0x0000000E                // RSVD1[3..1]
#define PCIE_MAC_IREG_ORDRULES_DIS_RSVD1_SHFT                  1
#define PCIE_MAC_IREG_ORDRULES_DIS_P_RD_VS_P_WR_DIS_ADDR       PCIE_MAC_IREG_ORDRULES_DIS_ADDR
#define PCIE_MAC_IREG_ORDRULES_DIS_P_RD_VS_P_WR_DIS_MASK       0x00000001                // P_RD_VS_P_WR_DIS[0]
#define PCIE_MAC_IREG_ORDRULES_DIS_P_RD_VS_P_WR_DIS_SHFT       0

/* =====================================================================================

  ---RAM_ARB_PRIORITY (0x74030000 + 0x0324)---

    RAM_ARB_PRIOR[31..0]         - (RW) RAM Arbitration Priority.
                                     If set port priority to 1, the port change to high priority.
                                     Bit[7:0] : P2A Write Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA2 > DMA4
                                     Bit [0]: PCIe
                                     Bit [1]: AXI Slave0
                                     Bit [2]: AXI Slave1
                                     Bit [3]: AXI Slave2
                                     Bit [4]: AXI Slave3
                                     Bit [5] : DMA0
                                     Bit [6] : DMA2
                                     Bit [7] : DMA4
                                     Bit[15:8] : A2P Write Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA3 > DMA5
                                     Bit [8]: PCIe
                                     Bit [9]: AXI Slave0
                                     Bit [10]: AXI Slave1
                                     Bit [11]: AXI Slave2
                                     Bit [12]: AXI Slave3
                                     Bit [13] : DMA1
                                     Bit [14] : DMA3
                                     Bit [15] : DMA5
                                     Bit[23:16] : P2A Read Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA2 > DMA4
                                     Bit [16]: PCIe
                                     Bit [17]: AXI Slave0
                                     Bit [18]: AXI Slave1
                                     Bit [19]: AXI Slave2
                                     Bit [20]: AXI Slave3
                                     Bit [21] : DMA0
                                     Bit [22] : DMA2
                                     Bit [23] : DMA4
                                     Bit[31:24] : A2P Read Priority. If more than 2 Port are set to high priority, the priority order is PCIe > AXI Slave0 > .... > DMA3 > DMA5
                                     Bit [24]: PCIe
                                     Bit [25]: AXI Slave0
                                     Bit [26]: AXI Slave1
                                     Bit [27]: AXI Slave2
                                     Bit [28]: AXI Slave3
                                     Bit [29] : DMA1
                                     Bit [30] : DMA3
                                     Bit [31] : DMA5

 =====================================================================================*/
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_RAM_ARB_PRIOR_ADDR      PCIE_MAC_IREG_RAM_ARB_PRIORITY_ADDR
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_RAM_ARB_PRIOR_MASK      0xFFFFFFFF                // RAM_ARB_PRIOR[31..0]
#define PCIE_MAC_IREG_RAM_ARB_PRIORITY_RAM_ARB_PRIOR_SHFT      0

/* =====================================================================================

  ---RAM_ARB_OPTIONS (0x74030000 + 0x0328)---

    RAM_ARB_OPTIONS[31..0]       - (RW) RAM Arbitration Options: To optimize performances, access to shared RAM should be granted to a requester for the entire duration of packet reading or writing. However, this may lead to
                                     deadlock or performance issues if a requester starts reading or writing a packet, but then has to wait for another packet to be read or written before sending the rest of the packet.
                                     The RAM Arbitration Options enable you to work around this issue by forcing arbitration computation after each clock cycle.
                                     When the associated bit is 1b, the corresponding write or read access arbitration is reevaluated every clock cycle; otherwise it is reevaluated at the end of the packet in progress.
                                     Bit [0]: PCIe to AXI Buffer Write Arbitration: if this bit is 0, a deadlock can occur if AXI interleaved read data is written to this buffer.
                                     Bit [1]: AXI to PCIe Buffer Write Arbitration: if this bit is 0, a deadlock can occur if AXI interleaved read data is written to this buffer.
                                     Bit [3:2]: reserved
                                     Bit [4]: PCIe to AXI Buffer Read Arbitration: if this bit is 0, performance issues can occur if packets are forwarded to a slow performance interface. Typically, if a packet is sent to a
                                     slow AXI Master Interface (due to low clock frequency, datapath or application), other packets should wait for this packet to be forwarded before being extracted.
                                     Bit [5]: AXI to PCIe Buffer Read Arbitration: if this bit is 0, performance issues can occur if packets are forwarded to a slow performance interface. If this bit is 1, however, performance issues can occur if several write transactions from different AXI Slave Interfaces are forwarded to the PCIe at the same time.
                                     Bit [31:6]: reserved
                                     The reset value for this register is 0x00000013.
                                     If AXI to AXI transactions are allowed and stored in the AXI to PCIe Buffer, this register may be set to 0x00000033

 =====================================================================================*/
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_RAM_ARB_OPTIONS_ADDR     PCIE_MAC_IREG_RAM_ARB_OPTIONS_ADDR
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_RAM_ARB_OPTIONS_MASK     0xFFFFFFFF                // RAM_ARB_OPTIONS[31..0]
#define PCIE_MAC_IREG_RAM_ARB_OPTIONS_RAM_ARB_OPTIONS_SHFT     0

/* =====================================================================================

  ---RAM_READ_OPTIONS (0x74030000 + 0x032C)---

    RAM_READ_OPTIONS[31..0]      - (RW) RAM Read Options: When an Address Translation Module or a DMA Engine forwards a write transaction or a read completion, it keeps its read enable active even if the Bridge interconnect doesn't grant access to it.
                                     This could lead to performance issues if several modules target the same interface, and there will be unnecessary reads if the RAM Arbitration Option is set to 0.
                                     The RAM Read Options enable you to work around this issue by forcing read enable de-assertion when access to the destination interface isn't granted.
                                     However, a dead clock cycle will be required for the module to re-assert read enable when access is finally granted.
                                     When the associated bit is 1b, read enable for the corresponding packet extraction is forcibly de-asserted; otherwise it is kept asserted.
                                     Bit [0]: PCIe Address Translation Module write transaction extraction.
                                     Bit [1]: PCIe Address Translation Module read completion extraction.
                                     Bit [7:2]: reserved
                                     Bit [8 + 0x2*i + 0]: AXI Slave #i Address Translation Module write transaction extraction.
                                     Bit [8 + 2*i + 1]: AXI Slave #i Address Translation Module read completion extraction.
                                     Bit [23:16]: reserved
                                     Bit [24 + j]: DMA Engine write transaction extraction.

 =====================================================================================*/
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_RAM_READ_OPTIONS_ADDR   PCIE_MAC_IREG_RAM_READ_OPTIONS_ADDR
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_RAM_READ_OPTIONS_MASK   0xFFFFFFFF                // RAM_READ_OPTIONS[31..0]
#define PCIE_MAC_IREG_RAM_READ_OPTIONS_RAM_READ_OPTIONS_SHFT   0

/* =====================================================================================

  ---ECO_SPACE_0 (0x74030000 + 0330)---

    eco_space_0[31..0]           - (RW) Spare Register for ECOs.
                                     The purpose of this 32-bit RW reserved register is to ease ECO implementation

 =====================================================================================*/
#define PCIE_MAC_IREG_ECO_SPACE_0_eco_space_0_ADDR             PCIE_MAC_IREG_ECO_SPACE_0_ADDR
#define PCIE_MAC_IREG_ECO_SPACE_0_eco_space_0_MASK             0xFFFFFFFF                // eco_space_0[31..0]
#define PCIE_MAC_IREG_ECO_SPACE_0_eco_space_0_SHFT             0

/* =====================================================================================

  ---ECO_SPACE_1 (0x74030000 + 0x0334)---

    eco_space_1[31..0]           - (RW) Spare Register for ECOs.
                                     The purpose of this 32-bit RW reserved register is to ease ECO implementation

 =====================================================================================*/
#define PCIE_MAC_IREG_ECO_SPACE_1_eco_space_1_ADDR             PCIE_MAC_IREG_ECO_SPACE_1_ADDR
#define PCIE_MAC_IREG_ECO_SPACE_1_eco_space_1_MASK             0xFFFFFFFF                // eco_space_1[31..0]
#define PCIE_MAC_IREG_ECO_SPACE_1_eco_space_1_SHFT             0

/* =====================================================================================

  ---PIPE4_PIE8_SETTING (0x74030000 + 0x0338)---

    k_finetune_max[5..0]         - (RW) Maximum number of fine-tuning iterations. 
                                     Supported values are 0 - 63. If value is 0, will disable fine-tuning.
                                     This parameter is used to limit the number of coefficient fine-tuning iterations. It should be adjusted to ensure that the remote transmitter does not continue for too long and that it completes within the 24ms time frame allowed by the PCI Express specifications.
    k_finetune_err[7..6]         - (RW) Behavior if PHY gives direction change instructions that would lead to illegal coeffs
                                     Specifies behavior when an error is detected during the fine-tuning process. If PHY gives direction-change instructions that would lead to illegal coefficients then the module does one of the following:
                                     00: last good coefficients are kept and fine-tuning iterations continue
                                     01: last good coefficients are kept and fine-tuning iterations are stopped
                                     10: best preset is reapplied and fine-tuning iterations continue from there (number of fine tuning iterations is reset)
                                     11: best preset is reapplied and fine-tuning iterations are stopped
    k_preset_to_use[18..8]       - (RW) This signal indicates which preset will be tested in the preset scanning phase for 8G speed.
                                     0: Use preset 0
                                     1: Use preset 1
                                     ...
                                     10: Use preset 10
                                     If all bits are 0 then no preset will be tested. Either no bits or just one bit must be set if the PHY does not support evaluation feedback in figure of merit format.
    k_phyparam_query[19]         - (RW) Query PHY to get parameters:
                                     0: Use internal FS/LF/Preset-to-coefficient values (these internal values need to be adjusted depending on the PHY)
                                     1: Query local FS/LF/Preset-to-coefficient values from the PHY through PIPE interface signals
    k_query_timeout[20]          - (RW) Implement timeout for Preset-to-coefficient query:
                                     0: No timeout
                                     1: Implement a 256 clock cycles timeout
                                     Note that PIPE specification indicates that PHY must respond to a Preset-to-coefficient within 128ns.
    k_preset_to_use_16g[31..21]  - (RW) This signal indicates which preset will be tested in the preset scanning phase for 16G speed.
                                     0: Use preset 0
                                     1: Use preset 1
                                     ...
                                     10: Use preset 10
                                     If all bits are 0 then no preset will be tested. Either no bits or just one bit must be set if the PHY does not support evaluation feedback in figure of merit format.

 =====================================================================================*/
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_16g_ADDR PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_16g_MASK 0xFFE00000                // k_preset_to_use_16g[31..21]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_16g_SHFT 21
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_query_timeout_ADDR  PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_query_timeout_MASK  0x00100000                // k_query_timeout[20]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_query_timeout_SHFT  20
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_phyparam_query_ADDR PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_phyparam_query_MASK 0x00080000                // k_phyparam_query[19]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_phyparam_query_SHFT 19
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_ADDR  PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_MASK  0x0007FF00                // k_preset_to_use[18..8]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_preset_to_use_SHFT  8
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_err_ADDR   PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_err_MASK   0x000000C0                // k_finetune_err[7..6]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_err_SHFT   6
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_max_ADDR   PCIE_MAC_IREG_PIPE4_PIE8_SETTING_ADDR
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_max_MASK   0x0000003F                // k_finetune_max[5..0]
#define PCIE_MAC_IREG_PIPE4_PIE8_SETTING_k_finetune_max_SHFT   0

/* =====================================================================================

  ---PHYMAC_CFG (0x74030000 + 0x033C)---

    Perform_equ_phases_23[0]     - (RW) For downstream ports: setting this bit makes the Core execute phases 2/3; otherwise these phases are skipped.
                                     For upstream ports: setting this bit makes the Core perform remote transmitter adjustment during phase 2; otherwise
                                     the Core does not perform adjustment during this phase.
    Use_RXEIDLE_det_elecidle_entry[1] - (RW) Use RXELECIDLE to Detect Electrical Idle Entry
                                     0: Do not use RXELECIDLE to detect electrical idle entry
                                     1: Use RXELECIDLE to detect electrical idle entry
    RxValid_Filter_Enable[2]     - (RW) When set to 1, special logic is used to solve issues if the PHY does not de-assert PL_RXVALID after EIOS is received.
    Disable_16GT_EIEOS_support[3] - (RW) when this bit is set to 1, 16GT EIEOS cannot be used at 16GT/s; 8GT EIEOS are used at 8 and 16GT/s instead.
    RSVD1[31..4]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PHYMAC_CFG_RSVD1_ADDR                    PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_RSVD1_MASK                    0xFFFFFFF0                // RSVD1[31..4]
#define PCIE_MAC_IREG_PHYMAC_CFG_RSVD1_SHFT                    4
#define PCIE_MAC_IREG_PHYMAC_CFG_Disable_16GT_EIEOS_support_ADDR PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_Disable_16GT_EIEOS_support_MASK 0x00000008                // Disable_16GT_EIEOS_support[3]
#define PCIE_MAC_IREG_PHYMAC_CFG_Disable_16GT_EIEOS_support_SHFT 3
#define PCIE_MAC_IREG_PHYMAC_CFG_RxValid_Filter_Enable_ADDR    PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_RxValid_Filter_Enable_MASK    0x00000004                // RxValid_Filter_Enable[2]
#define PCIE_MAC_IREG_PHYMAC_CFG_RxValid_Filter_Enable_SHFT    2
#define PCIE_MAC_IREG_PHYMAC_CFG_Use_RXEIDLE_det_elecidle_entry_ADDR PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_Use_RXEIDLE_det_elecidle_entry_MASK 0x00000002                // Use_RXEIDLE_det_elecidle_entry[1]
#define PCIE_MAC_IREG_PHYMAC_CFG_Use_RXEIDLE_det_elecidle_entry_SHFT 1
#define PCIE_MAC_IREG_PHYMAC_CFG_Perform_equ_phases_23_ADDR    PCIE_MAC_IREG_PHYMAC_CFG_ADDR
#define PCIE_MAC_IREG_PHYMAC_CFG_Perform_equ_phases_23_MASK    0x00000001                // Perform_equ_phases_23[0]
#define PCIE_MAC_IREG_PHYMAC_CFG_Perform_equ_phases_23_SHFT    0

/* =====================================================================================

  ---WCPL_TIMEOUT (0x74030000 + 0x0340)---

    WCPL_TIMEOUT[31..0]          - (RW) This registers allows you to configure the AXI Write Completion Timeout.
                                     Bits [19:0]: Timeout value in ms (hardware) or us (Simulation) for AXI to PCIe Write request. When set to 0 the timeout is disabled.
                                     Bits [31:20]: reserved
                                     When this register is not hardwired by Core Constants, it is read/write and its default value after reset is defined by G_A2P_WRCPL_TIMEOUT. If this value is undefined, its default value is set to 32'h00000080.

 =====================================================================================*/
#define PCIE_MAC_IREG_WCPL_TIMEOUT_WCPL_TIMEOUT_ADDR           PCIE_MAC_IREG_WCPL_TIMEOUT_ADDR
#define PCIE_MAC_IREG_WCPL_TIMEOUT_WCPL_TIMEOUT_MASK           0xFFFFFFFF                // WCPL_TIMEOUT[31..0]
#define PCIE_MAC_IREG_WCPL_TIMEOUT_WCPL_TIMEOUT_SHFT           0

/* =====================================================================================

  ---PCIE_IF_TIMEOUT (0x74030000 + 0x0344)---

    ptx_timeout_value[2..0]      - (RW) PCIe Transmit Interface Timeout Ranges Supported
                                     0: 50ms
                                     1: 64us
                                     2: 4ms
                                     3: 10ms
                                     4: 16ms
                                     5: 32ms
                                     6: 128ms
                                     7: 512ms
    RESERVED3[6..3]              - (RO) Reserved bits
    ptx_timeout_enable[7]        - (RW) PCIe Transmit Interface Timeout Enable Supported
                                     0: Disable
                                     1: Enable
    RESERVED8[31..8]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_enable_ADDR  PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ADDR
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_enable_MASK  0x00000080                // ptx_timeout_enable[7]
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_enable_SHFT  7
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_value_ADDR   PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ADDR
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_value_MASK   0x00000007                // ptx_timeout_value[2..0]
#define PCIE_MAC_IREG_PCIE_IF_TIMEOUT_ptx_timeout_value_SHFT   0

/* =====================================================================================

  ---PCIE_MISC_CTRL (0x74030000 + 0x0348)---

    pl_cken[0]                   - (RW) PL Clock Gating Control
                                     0: gating
                                     1: enable always
    RSVD1[1]                     - (RW) reserved
    br_cken[2]                   - (RW) Bridge Clock (br_clk) Gating Control
                                     0: gating
                                     1: enable always
    tl_cken[3]                   - (RW) Transaction Clock (tl_clk) Gating Control
                                     0: gating
                                     1: enable always
    axi_cken[4]                  - (RW) AXI Clock Gating Control
                                     0: gating
                                     1: enable always
    pcie_ck_dis[5]               - (RW) Software control PL Clock, PL EQ Clock, TL Clock, and AXI Clock gating
                                     0: clock enable
                                     1: clock disable
    pextp_mac_active_dis[6]      - (RW) Disable output "pextp_mac_active" function
                                     0 : pextp_mac_active is always 1
                                     1 : pextp_mac_active can change to 0 if PCIe traffic is idle.
    pextp_mac_sleep_dis[7]       - (RW) Disable output "pextp_mac_sleep" function
                                     0 : pextp_mac_sleep is always 0
                                     1 : pextp_mac_sleep can change to 1 if PCIe enter low power mode. (L1PM/L1SS/L2)
    RESERVED8[15..8]             - (RO) Reserved bits
    pcie_linkdown_enable[16]     - (RW) Enable PCIe linkdown to INTc  (func0 only).
                                     When link down happen, link down status will generate linkdown interrupt. 
                                     Please check 0x014C.
    RESERVED17[23..17]           - (RO) Reserved bits
    WAKE_N[24]                   - (RW) SW WAKE# Control
                                     0: PCIe WAKE# pin follows standard behavior
                                     1: PCIe WAKE# pin is forced to drive logic low
    RESERVED25[30..25]           - (RO) Reserved bits
    DISABLE_HW_STRAP[31]         - (RW) If HW configuration support external ID or external DSN, the register can select ID or DSN from external pre-defined tied value or internal  register.
                                     If HW configuration don't enable external ID or external DSN, the register is useless and default is from internal register.
                                     1: Select PCIe ID related information (offset 0x0098 - 0x00A3) or DSN (offset 0x158) from internal register
                                     0: Select PCIe ID related information or DSN which is hard-wired by pre-defined tied value

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_DISABLE_HW_STRAP_ADDR     PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_DISABLE_HW_STRAP_MASK     0x80000000                // DISABLE_HW_STRAP[31]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_DISABLE_HW_STRAP_SHFT     31
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_WAKE_N_ADDR               PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_WAKE_N_MASK               0x01000000                // WAKE_N[24]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_WAKE_N_SHFT               24
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_linkdown_enable_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_linkdown_enable_MASK 0x00010000                // pcie_linkdown_enable[16]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_linkdown_enable_SHFT 16
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_sleep_dis_ADDR  PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_sleep_dis_MASK  0x00000080                // pextp_mac_sleep_dis[7]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_sleep_dis_SHFT  7
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_active_dis_ADDR PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_active_dis_MASK 0x00000040                // pextp_mac_active_dis[6]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pextp_mac_active_dis_SHFT 6
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_ck_dis_ADDR          PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_ck_dis_MASK          0x00000020                // pcie_ck_dis[5]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pcie_ck_dis_SHFT          5
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_axi_cken_ADDR             PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_axi_cken_MASK             0x00000010                // axi_cken[4]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_axi_cken_SHFT             4
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_cken_ADDR              PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_cken_MASK              0x00000008                // tl_cken[3]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_tl_cken_SHFT              3
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_br_cken_ADDR              PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_br_cken_MASK              0x00000004                // br_cken[2]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_br_cken_SHFT              2
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_RSVD1_ADDR                PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_RSVD1_MASK                0x00000002                // RSVD1[1]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_RSVD1_SHFT                1
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pl_cken_ADDR              PCIE_MAC_IREG_PCIE_MISC_CTRL_ADDR
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pl_cken_MASK              0x00000001                // pl_cken[0]
#define PCIE_MAC_IREG_PCIE_MISC_CTRL_pl_cken_SHFT              0

/* =====================================================================================

  ---PCIE_DEBUG_SEL_2 (0x74030000 + 0x0x34C)---

    debug_probe_bit_en[31..0]    - (RW) If design support "DEBUG SHIFT" feature, it means user can select which design probe bit are enabled and be right shifted to gather those enabled probes.
                                     bit 0 : debug probe bit 0 is enabled.
                                     bit 31 : debug probe bit 31 is enabled.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_debug_probe_bit_en_ADDR PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_debug_probe_bit_en_MASK 0xFFFFFFFF                // debug_probe_bit_en[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_SEL_2_debug_probe_bit_en_SHFT 0

/* =====================================================================================

  ---PCIE_LMR_0 (0x74030000 + 0x0350)---

    vol_margin_supp[0]           - (RW) Voltage margining supported
    indp_vol_margin_supp[1]      - (RW) Independent up/down voltage margining supported
    indp_time_margin_supp[2]     - (RW) Independent left/right timing margining supported
    samp_report_method[3]        - (RW) Sample reporting method 
                                     0: Sample count supported
                                     1:Sampling rates supported
    marg_error[4]                - (RW) Margining will not produce errors in data stream
    marg_use_driver[5]           - (RW) Lane margining uses driver software
    RSVD1[7..6]                  - (RW) reserved
    vol_step_num[14..8]          - (RW) Number of voltage steps (32 - 127)
    RSVD2[15]                    - (RW) reserved
    time_step_num[21..16]        - (RW) Number of timing steps value (6 - 63)
    RSVD3[23..22]                - (RW) reserved
    max_time_offset[29..24]      - (RW) Maximum timing offset (20 - 50)
    RSVD4[31..30]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD4_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD4_MASK                    0xC0000000                // RSVD4[31..30]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD4_SHFT                    30
#define PCIE_MAC_IREG_PCIE_LMR_0_max_time_offset_ADDR          PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_max_time_offset_MASK          0x3F000000                // max_time_offset[29..24]
#define PCIE_MAC_IREG_PCIE_LMR_0_max_time_offset_SHFT          24
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD3_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD3_MASK                    0x00C00000                // RSVD3[23..22]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD3_SHFT                    22
#define PCIE_MAC_IREG_PCIE_LMR_0_time_step_num_ADDR            PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_time_step_num_MASK            0x003F0000                // time_step_num[21..16]
#define PCIE_MAC_IREG_PCIE_LMR_0_time_step_num_SHFT            16
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD2_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD2_MASK                    0x00008000                // RSVD2[15]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD2_SHFT                    15
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_step_num_ADDR             PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_step_num_MASK             0x00007F00                // vol_step_num[14..8]
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_step_num_SHFT             8
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD1_ADDR                    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD1_MASK                    0x000000C0                // RSVD1[7..6]
#define PCIE_MAC_IREG_PCIE_LMR_0_RSVD1_SHFT                    6
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_use_driver_ADDR          PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_use_driver_MASK          0x00000020                // marg_use_driver[5]
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_use_driver_SHFT          5
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_error_ADDR               PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_error_MASK               0x00000010                // marg_error[4]
#define PCIE_MAC_IREG_PCIE_LMR_0_marg_error_SHFT               4
#define PCIE_MAC_IREG_PCIE_LMR_0_samp_report_method_ADDR       PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_samp_report_method_MASK       0x00000008                // samp_report_method[3]
#define PCIE_MAC_IREG_PCIE_LMR_0_samp_report_method_SHFT       3
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_time_margin_supp_ADDR    PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_time_margin_supp_MASK    0x00000004                // indp_time_margin_supp[2]
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_time_margin_supp_SHFT    2
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_vol_margin_supp_ADDR     PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_vol_margin_supp_MASK     0x00000002                // indp_vol_margin_supp[1]
#define PCIE_MAC_IREG_PCIE_LMR_0_indp_vol_margin_supp_SHFT     1
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_margin_supp_ADDR          PCIE_MAC_IREG_PCIE_LMR_0_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_margin_supp_MASK          0x00000001                // vol_margin_supp[0]
#define PCIE_MAC_IREG_PCIE_LMR_0_vol_margin_supp_SHFT          0

/* =====================================================================================

  ---PCIE_LMR_1 (0x74030000 + 0x0354)---

    max_vol_offset[5..0]         - (RW) Maximum voltage offset (5 - 50)
    RSVD1[7..6]                  - (RW) reserved
    samp_rate_vol[13..8]         - (RW) Sampling rate voltage (0 - 63)
    RSVD2[15..14]                - (RW) reserved
    samp_rate_time[21..16]       - (RW) Sampling rate timing (0 - 63)
    RSVD3[23..22]                - (RW) reserved
    RSVD4[31..24]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD4_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD4_MASK                    0xFF000000                // RSVD4[31..24]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD4_SHFT                    24
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD3_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD3_MASK                    0x00C00000                // RSVD3[23..22]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD3_SHFT                    22
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_time_ADDR           PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_time_MASK           0x003F0000                // samp_rate_time[21..16]
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_time_SHFT           16
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD2_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD2_MASK                    0x0000C000                // RSVD2[15..14]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD2_SHFT                    14
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_vol_ADDR            PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_vol_MASK            0x00003F00                // samp_rate_vol[13..8]
#define PCIE_MAC_IREG_PCIE_LMR_1_samp_rate_vol_SHFT            8
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD1_ADDR                    PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD1_MASK                    0x000000C0                // RSVD1[7..6]
#define PCIE_MAC_IREG_PCIE_LMR_1_RSVD1_SHFT                    6
#define PCIE_MAC_IREG_PCIE_LMR_1_max_vol_offset_ADDR           PCIE_MAC_IREG_PCIE_LMR_1_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_1_max_vol_offset_MASK           0x0000003F                // max_vol_offset[5..0]
#define PCIE_MAC_IREG_PCIE_LMR_1_max_vol_offset_SHFT           0

/* =====================================================================================

  ---PCIE_LMR_2 (0x74030000 + 0x0358)---

    max_lane_margin[3..0]        - (RW) Maximum number of lanes that can be marginedat the same time, minus 1
    RSVD1[31..4]                 - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_LMR_2_RSVD1_ADDR                    PCIE_MAC_IREG_PCIE_LMR_2_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_2_RSVD1_MASK                    0xFFFFFFF0                // RSVD1[31..4]
#define PCIE_MAC_IREG_PCIE_LMR_2_RSVD1_SHFT                    4
#define PCIE_MAC_IREG_PCIE_LMR_2_max_lane_margin_ADDR          PCIE_MAC_IREG_PCIE_LMR_2_ADDR
#define PCIE_MAC_IREG_PCIE_LMR_2_max_lane_margin_MASK          0x0000000F                // max_lane_margin[3..0]
#define PCIE_MAC_IREG_PCIE_LMR_2_max_lane_margin_SHFT          0

/* =====================================================================================

  ---PCIE_DL_FEATURE (0x74030000 + 0x035C)---

    scaled_flow_ctrl_supp[0]     - (RW) This bit indicates that this Port supports the Scaled Flow Control Feature.
                                     0 : not support
                                     1 : support
    RSVD1[22..1]                 - (RW) reserved
    dl_feature_en[23]            - (RW) Data Link Feature Exchange Enable.
                                     If Set, this bit indicates that this Port will enter the DL_Feature negotiation state
    dl_feature_impl[24]          - (RW) If Data Link Feature Extended Capability is implemented.
                                     0 : not implemented.
                                     1 : implemented.
    RSVD2[31..25]                - (RW) reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD2_ADDR               PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD2_MASK               0xFE000000                // RSVD2[31..25]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD2_SHFT               25
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_impl_ADDR     PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_impl_MASK     0x01000000                // dl_feature_impl[24]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_impl_SHFT     24
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_en_ADDR       PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_en_MASK       0x00800000                // dl_feature_en[23]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_dl_feature_en_SHFT       23
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD1_MASK               0x007FFFFE                // RSVD1[22..1]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_RSVD1_SHFT               1
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_scaled_flow_ctrl_supp_ADDR PCIE_MAC_IREG_PCIE_DL_FEATURE_ADDR
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_scaled_flow_ctrl_supp_MASK 0x00000001                // scaled_flow_ctrl_supp[0]
#define PCIE_MAC_IREG_PCIE_DL_FEATURE_scaled_flow_ctrl_supp_SHFT 0

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_0_3 (0x74030000 + 0x0360)---

    eq_16g_val_ln0[7..0]         - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln1[15..8]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln2[23..16]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln3[31..24]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln3_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln3_MASK 0xFF000000                // eq_16g_val_ln3[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln3_SHFT 24
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln2_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln2_MASK 0x00FF0000                // eq_16g_val_ln2[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln2_SHFT 16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln1_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln1_MASK 0x0000FF00                // eq_16g_val_ln1[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln1_SHFT 8
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln0_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln0_MASK 0x000000FF                // eq_16g_val_ln0[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_0_3_eq_16g_val_ln0_SHFT 0

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_4_7 (0x74030000 + 0x0364)---

    eq_16g_val_ln4[7..0]         - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln5[15..8]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln6[23..16]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln7[31..24]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln7_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln7_MASK 0xFF000000                // eq_16g_val_ln7[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln7_SHFT 24
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln6_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln6_MASK 0x00FF0000                // eq_16g_val_ln6[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln6_SHFT 16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln5_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln5_MASK 0x0000FF00                // eq_16g_val_ln5[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln5_SHFT 8
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln4_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln4_MASK 0x000000FF                // eq_16g_val_ln4[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_4_7_eq_16g_val_ln4_SHFT 0

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_8_11 (0x74030000 + 0x0368)---

    eq_16g_val_ln8[7..0]         - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln9[15..8]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln10[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln11[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln11_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln11_MASK 0xFF000000                // eq_16g_val_ln11[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln11_SHFT 24
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln10_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln10_MASK 0x00FF0000                // eq_16g_val_ln10[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln10_SHFT 16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln9_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln9_MASK 0x0000FF00                // eq_16g_val_ln9[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln9_SHFT 8
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln8_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln8_MASK 0x000000FF                // eq_16g_val_ln8[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_8_11_eq_16g_val_ln8_SHFT 0

/* =====================================================================================

  ---PCIE_EQ_PRESET16G_12_15 (0x74030000 + 0x036C)---

    eq_16g_val_ln12[7..0]        - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln13[15..8]       - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln14[23..16]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.
    eq_16g_val_ln15[31..24]      - (RW) Equalization Preset Values for 16GT Equalization: 
                                     This signal indicates the Downstream/Upstream port transmitter preset at 16GT/s: these values are used during 16GT/s equalization. 
                                     For downstream ports, they are reported via the Physical Layer 16GT/s extended capability registers.
                                     
                                     Per-lane values are described below:
                                     Bits [3:0]: Port's default transmitter preset: this is the default preset that will be used until another preset/coefficient is requested by the link partner.
                                     Bits [7:4]: Link partner's transmitter preset: this is the initial preset that the Core will request the link partner to use. 
                                     If the Core is an upstream port, this setting is optional. 
                                     If the Core does not request the link partner to use a specific initial preset (this is the default behavior) then this field must be tied to Fh for all lanes.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln15_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln15_MASK 0xFF000000                // eq_16g_val_ln15[31..24]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln15_SHFT 24
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln14_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln14_MASK 0x00FF0000                // eq_16g_val_ln14[23..16]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln14_SHFT 16
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln13_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln13_MASK 0x0000FF00                // eq_16g_val_ln13[15..8]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln13_SHFT 8
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln12_ADDR PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_ADDR
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln12_MASK 0x000000FF                // eq_16g_val_ln12[7..0]
#define PCIE_MAC_IREG_PCIE_EQ_PRESET16G_12_15_eq_16g_val_ln12_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN0_MODE_01 (0x74030000 + 0x0380)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE1_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFF                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_01_AXI4_STRIN_VALUE0_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN0_MODE_23 (0x74030000 + 0x0384)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE3_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFF                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_23_AXI4_STRIN_VALUE2_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN0_MODE_45 (0x74030000 + 0x0388)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE5_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFF                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_45_AXI4_STRIN_VALUE4_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN0_MODE_67 (0x74030000 + 0x038C)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE7_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFF                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN0_MODE_67_AXI4_STRIN_VALUE6_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN1_MODE_01 (0x74030000 + 0x0390)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE1_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFF                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_01_AXI4_STRIN_VALUE0_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN1_MODE_23 (0x74030000 + 0x0394)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE3_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFF                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_23_AXI4_STRIN_VALUE2_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN1_MODE_45 (0x74030000 + 0x0398)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE5_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFF                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_45_AXI4_STRIN_VALUE4_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN1_MODE_67 (0x74030000 + 0x039C)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE7_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFF                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN1_MODE_67_AXI4_STRIN_VALUE6_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN2_MODE_01 (0x74030000 + 0x03A0)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE1_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFF                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_01_AXI4_STRIN_VALUE0_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN2_MODE_23 (0x74030000 + 0x03A4)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE3_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFF                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_23_AXI4_STRIN_VALUE2_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN2_MODE_45 (0x74030000 + 0x03A8)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE5_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFF                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_45_AXI4_STRIN_VALUE4_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN2_MODE_67 (0x74030000 + 0x03AC)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE7_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFF                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN2_MODE_67_AXI4_STRIN_VALUE6_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN3_MODE_01 (0x74030000 + 0x03B0)---

    AXI4_STRIN_VALUE0[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE1[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE1_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE1_MASK 0xFFFF0000                // AXI4_STRIN_VALUE1[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE1_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE0_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE0_MASK 0x0000FFFF                // AXI4_STRIN_VALUE0[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_01_AXI4_STRIN_VALUE0_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN3_MODE_23 (0x74030000 + 0x03B4)---

    AXI4_STRIN_VALUE2[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE3[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE3_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE3_MASK 0xFFFF0000                // AXI4_STRIN_VALUE3[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE3_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE2_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE2_MASK 0x0000FFFF                // AXI4_STRIN_VALUE2[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_23_AXI4_STRIN_VALUE2_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN3_MODE_45 (0x74030000 + 0x03B8)---

    AXI4_STRIN_VALUE4[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE5[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE5_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE5_MASK 0xFFFF0000                // AXI4_STRIN_VALUE5[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE5_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE4_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE4_MASK 0x0000FFFF                // AXI4_STRIN_VALUE4[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_45_AXI4_STRIN_VALUE4_SHFT 0

/* =====================================================================================

  ---AXI4_STRIN3_MODE_67 (0x74030000 + 0x03BC)---

    AXI4_STRIN_VALUE6[15..0]     - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE
    AXI4_STRIN_VALUE7[31..16]    - (RW) Each AXI4 Stream Interface Module can manage up to 8 different input flows, identified by their TID/TDEST combination. You can configure the number of different input flows by setting the G_AXI_STR0-3_IDDEST_N Core Constant.
                                     Each AXI4_STRINx_MODE register defines how these input flows are managed. Each register is composed of 8 vectors of 16 bits (one vector per TID/TDEST combination).
                                     When asserted, the TID/TDEST combination value is fixed and defined by FIX_TID_VALUE and
                                     Bit [0]:FIX_TDEST_VALUE.
                                     When deasserted, the Stream In Interface will capture any TID/TDEST combination, and will keep locked on this combination as long as the input flow is not completely forwarded to its destination, thus enabling almost any TID/TDEST combination to be handled.
                                     Bit [3:1]: reserved
                                     Bit [11:4]: FIX_TID_VALUE
                                     Bit [15:12]: FIX_TDEST_VALUE

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE7_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE7_MASK 0xFFFF0000                // AXI4_STRIN_VALUE7[31..16]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE7_SHFT 16
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE6_ADDR PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_ADDR
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE6_MASK 0x0000FFFF                // AXI4_STRIN_VALUE6[15..0]
#define PCIE_MAC_IREG_AXI4_STRIN3_MODE_67_AXI4_STRIN_VALUE6_SHFT 0

/* =====================================================================================

  ---PCIE_DUMMY_0 (0x74030000 + 0x03C0)---

    PCIE_DUMMY_0[31..0]          - (RW) Dummy register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DUMMY_0_PCIE_DUMMY_0_ADDR           PCIE_MAC_IREG_PCIE_DUMMY_0_ADDR
#define PCIE_MAC_IREG_PCIE_DUMMY_0_PCIE_DUMMY_0_MASK           0xFFFFFFFF                // PCIE_DUMMY_0[31..0]
#define PCIE_MAC_IREG_PCIE_DUMMY_0_PCIE_DUMMY_0_SHFT           0

/* =====================================================================================

  ---PCIE_DUMMY_1 (0x74030000 + 0x03C4)---

    PCIE_DUMMY_1[31..0]          - (RW) Dummy register.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DUMMY_1_PCIE_DUMMY_1_ADDR           PCIE_MAC_IREG_PCIE_DUMMY_1_ADDR
#define PCIE_MAC_IREG_PCIE_DUMMY_1_PCIE_DUMMY_1_MASK           0xFFFFFFFF                // PCIE_DUMMY_1[31..0]
#define PCIE_MAC_IREG_PCIE_DUMMY_1_PCIE_DUMMY_1_SHFT           0

/* =====================================================================================

  ---SW_TRIG_INTR_SET (0x74030000 + 0x03C8)---

    SW_TRIG_INTR_SET[31..0]      - (W1S) Write one set register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_SW_TRIG_INTR_SET_ADDR   PCIE_MAC_IREG_SW_TRIG_INTR_SET_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_SW_TRIG_INTR_SET_MASK   0xFFFFFFFF                // SW_TRIG_INTR_SET[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_SET_SW_TRIG_INTR_SET_SHFT   0

/* =====================================================================================

  ---SW_TRIG_INTR_CLR (0x74030000 + 0x03CC)---

    SW_TRIG_INTR_CLR[31..0]      - (W1C) Write one clear register "SW_TRIG_INTR" in  0x00BC

 =====================================================================================*/
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_SW_TRIG_INTR_CLR_ADDR   PCIE_MAC_IREG_SW_TRIG_INTR_CLR_ADDR
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_SW_TRIG_INTR_CLR_MASK   0xFFFFFFFF                // SW_TRIG_INTR_CLR[31..0]
#define PCIE_MAC_IREG_SW_TRIG_INTR_CLR_SW_TRIG_INTR_CLR_SHFT   0

/* =====================================================================================

  ---PCIE_ULTRA_SETTING (0x74030000 + 0x03D0)---

    RSVD[13..0]                  - (RW) Reserved
    PARAM_EN[14]                 - (RW) The use of AXI master user signals is defined as PCIe paramater
                                     awuser/aruser[0] = ECEC error
                                     awuser/aruser[1] = PCIe Controller Buffer Memory Error
                                     awuser/aruser[2] = Bridge Buffer Memory Error
                                     awuser/aruser[3] = AXI Application Data Error
                                     awuser/aruser[31:4] : PCIe Address Type, PCIe Attribute, PCIe Requester ID
    ULTRA_EN[15]                 - (RW) The use of AXI master user signals is defined as Ultra
                                     awuser/aruser[0] = Reserved
                                     awuser/aruser[1] = Reserved
                                     awuser/aruser[2] = Ultra
                                     awuser/aruser[3] = Pre Ultra
                                     awuser/aruser[31:4] : Reserved
    ULTRA_R_SEL[19..16]          - (RW) AXI Master Read Ultra will be asserted when
                                     b0000: read outstanding is available below 1/4
                                     b0001: read outstanding is available below 1/2
                                     b0010: read outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    PRE_ULTRA_R_SEL[23..20]      - (RW) AXI Master Read Pre Ultra will be asserted when
                                     b0000: read outstanding is available below 1/4
                                     b0001: read outstanding is available below 1/2
                                     b0010: read outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    ULTRA_W_SEL[27..24]          - (RW) AXI Master Write Ultra will be asserted when
                                     b0000: write outstanding is available below 1/4
                                     b0001: write outstanding is available below 1/2
                                     b0010: write outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved
    PRE_ULTRA_W_SEL[31..28]      - (RW) AXI Master Write Pre Ultra will be asserted when
                                     b0000: write outstanding is available below 1/4
                                     b0001: write outstanding is available below 1/2
                                     b0010: write outstanding is available below 3/4
                                     b0011: always
                                     otherwise: Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_W_SEL_ADDR  PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_W_SEL_MASK  0xF0000000                // PRE_ULTRA_W_SEL[31..28]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_W_SEL_SHFT  28
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_W_SEL_ADDR      PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_W_SEL_MASK      0x0F000000                // ULTRA_W_SEL[27..24]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_W_SEL_SHFT      24
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_R_SEL_ADDR  PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_R_SEL_MASK  0x00F00000                // PRE_ULTRA_R_SEL[23..20]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PRE_ULTRA_R_SEL_SHFT  20
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_R_SEL_ADDR      PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_R_SEL_MASK      0x000F0000                // ULTRA_R_SEL[19..16]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_R_SEL_SHFT      16
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_EN_ADDR         PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_EN_MASK         0x00008000                // ULTRA_EN[15]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ULTRA_EN_SHFT         15
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PARAM_EN_ADDR         PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PARAM_EN_MASK         0x00004000                // PARAM_EN[14]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_PARAM_EN_SHFT         14
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_RSVD_ADDR             PCIE_MAC_IREG_PCIE_ULTRA_SETTING_ADDR
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_RSVD_MASK             0x00003FFF                // RSVD[13..0]
#define PCIE_MAC_IREG_PCIE_ULTRA_SETTING_RSVD_SHFT             0

/* =====================================================================================

  ---PCIE_PERF_SETTING_1 (0x74030000 + 0x03D4)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_Block_TxBuf_Avail_cnt_MASK 0xFF000000                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_Block_TxBuf_Avail_cnt_SHFT 24
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_TxBuf_Avail_cnt_SHFT 16
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_rdcmd_cnt_MASK 0x0000FF00                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_rdcmd_cnt_SHFT 8
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_1_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_timer_MASK   0x000000FF                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_1_UnBlock_timer_SHFT   0

/* =====================================================================================

  ---PCIE_PERF_SETTING_2 (0x74030000 + 0x03D8)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_Block_TxBuf_Avail_cnt_MASK 0xFF000000                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_Block_TxBuf_Avail_cnt_SHFT 24
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_TxBuf_Avail_cnt_SHFT 16
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_rdcmd_cnt_MASK 0x0000FF00                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_rdcmd_cnt_SHFT 8
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_2_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_timer_MASK   0x000000FF                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_2_UnBlock_timer_SHFT   0

/* =====================================================================================

  ---PCIE_PERF_SETTING_3 (0x74030000 + 0x03DC)---

    UnBlock_timer[7..0]          - (RW) Unblock Real Block time
                                     AXI slave have to resumed to receive write command if the block time >=  UnBlock_timer *4ns
    UnBlock_rdcmd_cnt[15..8]     - (RW) Unblock Read Command Counts
                                     AXI slave have to resumed to receive write command if received read command count >= Read UnBlock_rdcmd_cnt
    UnBlock_TxBuf_Avail_cnt[23..16] - (RW) Unblock TX Buffer Available Counts
                                     AXI slave have to resumed to receive write command if Real txbuf available size >=  UnBlock_TxBuf_Avail_cnt * 32B (count : 1 - 63)
    Block_TxBuf_Avail_cnt[31..24] - (RW) Block TX Buffer Available Counts
                                     AXI Slave have to pause receiving write command if Real txbuf available size <  Block_TxBuf_Avail_cnt * 32B  (count : 1 - 63)

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_Block_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_Block_TxBuf_Avail_cnt_MASK 0xFF000000                // Block_TxBuf_Avail_cnt[31..24]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_Block_TxBuf_Avail_cnt_SHFT 24
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_TxBuf_Avail_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_TxBuf_Avail_cnt_MASK 0x00FF0000                // UnBlock_TxBuf_Avail_cnt[23..16]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_TxBuf_Avail_cnt_SHFT 16
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_rdcmd_cnt_ADDR PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_rdcmd_cnt_MASK 0x0000FF00                // UnBlock_rdcmd_cnt[15..8]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_rdcmd_cnt_SHFT 8
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_timer_ADDR   PCIE_MAC_IREG_PCIE_PERF_SETTING_3_ADDR
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_timer_MASK   0x000000FF                // UnBlock_timer[7..0]
#define PCIE_MAC_IREG_PCIE_PERF_SETTING_3_UnBlock_timer_SHFT   0

/* =====================================================================================

  ---AXI_ERROR_REPORT (0x74030000 + 0x03E0)---

    CFG_NO_SLVERR[0]             - (RW) This register enables you to modify the Slave Response on the AXI side.
                                     When set to 1, no SLVERR response is returned to the AXI or AXI4-Lite Slave interface when an Unsupported Request (UR) or a Configuration Request Retry Status (CRS) is returned in response to a PCIe Configuration Access.
    PKT_ERROR_COMMIT[1]          - (RW) When set to 1, no SLVERR response is returned to the AXI or AXI4-Lite Slave interface when an ECRC error, Poisoned TLP or Receive Buffer Memory error is detected in a MRD or MWR TLP.
    RESERVED2[31..2]             - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_PKT_ERROR_COMMIT_ADDR   PCIE_MAC_IREG_AXI_ERROR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_PKT_ERROR_COMMIT_MASK   0x00000002                // PKT_ERROR_COMMIT[1]
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_PKT_ERROR_COMMIT_SHFT   1
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_CFG_NO_SLVERR_ADDR      PCIE_MAC_IREG_AXI_ERROR_REPORT_ADDR
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_CFG_NO_SLVERR_MASK      0x00000001                // CFG_NO_SLVERR[0]
#define PCIE_MAC_IREG_AXI_ERROR_REPORT_CFG_NO_SLVERR_SHFT      0

/* =====================================================================================

  ---PCIE_IP_REVISION (0x74030000 + 0x03E4)---

    ip_revision[31..0]           - (RO) PCIe MAC IP Revision for IPM.
                                     Bit[7:0] : ECO
                                     Bit[15:8] : Change in Branch.
                                     Bit[27:16] : Minor
                                     Bit[31:28] : Major

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ip_revision_ADDR        PCIE_MAC_IREG_PCIE_IP_REVISION_ADDR
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ip_revision_MASK        0xFFFFFFFF                // ip_revision[31..0]
#define PCIE_MAC_IREG_PCIE_IP_REVISION_ip_revision_SHFT        0

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_0 (0x74030000 + 0x03F0)---

    PMSG_SUPPORT_RX[31..0]       - (RW) PCIe Message Reception Support: When the associated bit is 1b, the PCIe Message is forwarded to the AXI Application; otherwise it is treated as unsupported by the XpressRICH3-AXI:
                                     Bit [0]: Unlock Message
                                     Bit [1]: ATS Messages
                                     Bit [2]: Latency Tolerance Reporting
                                     Bit [3]: Optimized Buffer Flush/Fill
                                     Bit [4]: Vendor-Defined Type 0
                                     Bit [5]: Vendor-Defined Type 1
                                     Bit [31:6]: reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_PMSG_SUPPORT_RX_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_PMSG_SUPPORT_RX_MASK 0xFFFFFFFF                // PMSG_SUPPORT_RX[31..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_0_PMSG_SUPPORT_RX_SHFT 0

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_1 (0x74030000 + 0x03F4)---

    PMSG_DEST_ID[4..0]           - (RW) PCIe Message Reception Destination Interface: defines the ID of the AXI interface to which supported messages will be forwarded. Supported values are:
                                     5'd4 for AXI Master #0
                                     5'd5 for AXI Master #1
                                     5'd6 for AXI Master #2
                                     5'd7 for AXI Master #3
                                     5'd8 for AXI Stream Out #0
                                     5'd9 for AXI Stream Out #1
                                     5'd10 for AXI Stream Out #2
                                     5'd11 for AXI Stream Out #3
                                     5'd12 for internal register
    RSVD1[15..5]                 - (RO) Reserved
    LTR_DEST_ADDR[27..16]        - (RO) PCIe LTR Message Reception Destination Address.
                                     Defines the internal register address to which supported messages will be forwarded.
    RSVD2[31..28]                - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD2_ADDR     PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD2_MASK     0xF0000000                // RSVD2[31..28]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD2_SHFT     28
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_LTR_DEST_ADDR_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_LTR_DEST_ADDR_MASK 0x0FFF0000                // LTR_DEST_ADDR[27..16]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_LTR_DEST_ADDR_SHFT 16
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD1_ADDR     PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD1_MASK     0x0000FFE0                // RSVD1[15..5]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_RSVD1_SHFT     5
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_PMSG_DEST_ID_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_PMSG_DEST_ID_MASK 0x0000001F                // PMSG_DEST_ID[4..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_1_PMSG_DEST_ID_SHFT 0

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_2 (0x74030000 + 0x03F8)---

    PMSG_DEST_ADDR_LSB[31..0]    - (RW) PCIe Message Reception Destination LSB Address.
                                     Defines the AXI address to which supported messages will be forwarded.
                                     Note : if the destination is "internal register", the address must be 0x00000000_00000ce0

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_PMSG_DEST_ADDR_LSB_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_PMSG_DEST_ADDR_LSB_MASK 0xFFFFFFFF                // PMSG_DEST_ADDR_LSB[31..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_2_PMSG_DEST_ADDR_LSB_SHFT 0

/* =====================================================================================

  ---PMSG_RECEPTION_SETTINGS_3 (0x74030000 + 0x03FC)---

    PMSG_DEST_ADDR_MSB[31..0]    - (RW) PCIe Message Reception Destination MSB Address.
                                     Defines the AXI address to which supported messages will be forwarded.
                                     Note : if the destination is "internal register", the address must be 0x00000000_00000ce0

 =====================================================================================*/
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_PMSG_DEST_ADDR_MSB_ADDR PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_ADDR
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_PMSG_DEST_ADDR_MSB_MASK 0xFFFFFFFF                // PMSG_DEST_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_PMSG_RECEPTION_SETTINGS_3_PMSG_DEST_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---DMA0_SRCPARAM (0x74030000 + 0x0400)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA0_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA0_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA0_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA0_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA0_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA0_DESTPARAM (0x74030000 + 0x0404)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA0_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA0_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA0_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA0_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA0_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA0_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA0_SRCADDR_L (0x74030000 + 0x0408)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA0_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA0_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA0_SRCADDR_H (0x74030000 + 0x040C)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA0_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA0_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA0_DESTADDR_L (0x74030000 + 0x0410)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA0_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA0_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA0_DESTADDR_H (0x74030000 + 0x0414)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA0_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA0_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA0_LENGTH (0x74030000 + 0x0418)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA0_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA0_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA0_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA0_CONTROL (0x74030000 + 0x041C)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA0_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA0_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA0_STATUS (0x74030000 + 0x0420)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA0_STATUS_ADDR
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA0_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA0_PRC_LENGTH (0x74030000 + 0x0424)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA0_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA0_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA0_SHARE_ACCESS (0x74030000 + 0x0428)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA0_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA0_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA1_SRCPARAM (0x74030000 + 0x0440)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA1_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA1_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA1_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA1_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA1_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA1_DESTPARAM (0x74030000 + 0x0444)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA1_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA1_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA1_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA1_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA1_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA1_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA1_SRCADDR_L (0x74030000 + 0x0448)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA1_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA1_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA1_SRCADDR_H (0x74030000 + 0x044C)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA1_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA1_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA1_DESTADDR_L (0x74030000 + 0x0450)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA1_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA1_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA1_DESTADDR_H (0x74030000 + 0x0454)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA1_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA1_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA1_LENGTH (0x74030000 + 0x0458)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA1_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA1_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA1_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA1_CONTROL (0x74030000 + 0x045C)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA1_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA1_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA1_STATUS (0x74030000 + 0x0460)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA1_STATUS_ADDR
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA1_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA1_PRC_LENGTH (0x74030000 + 0x0464)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA1_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA1_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA1_SHARE_ACCESS (0x74030000 + 0x0468)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA1_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA1_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA2_SRCPARAM (0x74030000 + 0x0480)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA2_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA2_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA2_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA2_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA2_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA2_DESTPARAM (0x74030000 + 0x0484)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA2_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA2_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA2_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA2_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA2_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA2_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA2_SRCADDR_L (0x74030000 + 0x0488)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA2_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA2_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA2_SRCADDR_H (0x74030000 + 0x048C)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA2_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA2_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA2_DESTADDR_L (0x74030000 + 0x0490)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA2_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA2_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA2_DESTADDR_H (0x74030000 + 0x0494)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA2_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA2_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA2_LENGTH (0x74030000 + 0x0498)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA2_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA2_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA2_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA2_CONTROL (0x74030000 + 0x049C)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA2_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA2_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA2_STATUS (0x74030000 + 0x04A0)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA2_STATUS_ADDR
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA2_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA2_PRC_LENGTH (0x74030000 + 0x04A4)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA2_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA2_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA2_SHARE_ACCESS (0x74030000 + 0x04A8)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA2_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA2_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA3_SRCPARAM (0x74030000 + 0x04C0)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA3_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA3_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA3_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA3_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA3_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA3_DESTPARAM (0x74030000 + 0x04C4)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA3_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA3_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA3_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA3_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA3_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA3_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA3_SRCADDR_L (0x74030000 + 0x04C8)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA3_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA3_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA3_SRCADDR_H (0x74030000 + 0x04CC)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA3_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA3_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA3_DESTADDR_L (0x74030000 + 0x04D0)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA3_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA3_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA3_DESTADDR_H (0x74030000 + 0x04D4)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA3_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA3_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA3_LENGTH (0x74030000 + 0x04D8)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA3_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA3_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA3_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA3_CONTROL (0x74030000 + 0x04DC)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA3_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA3_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA3_STATUS (0x74030000 + 0x04E0)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA3_STATUS_ADDR
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA3_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA3_PRC_LENGTH (0x74030000 + 0x04E4)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA3_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA3_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA3_SHARE_ACCESS (0x74030000 + 0x04E8)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA3_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA3_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA4_SRCPARAM (0x74030000 + 0x0500)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA4_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA4_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA4_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA4_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA4_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA4_DESTPARAM (0x74030000 + 0x0504)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA4_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA4_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA4_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA4_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA4_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA4_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA4_SRCADDR_L (0x74030000 + 0x0508)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA4_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA4_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA4_SRCADDR_H (0x74030000 + 0x050C)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA4_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA4_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA4_DESTADDR_L (0x74030000 + 0x0510)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA4_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA4_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA4_DESTADDR_H (0x74030000 + 0x0514)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA4_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA4_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA4_LENGTH (0x74030000 + 0x0518)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA4_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA4_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA4_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA4_CONTROL (0x74030000 + 0x051C)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA4_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA4_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA4_STATUS (0x74030000 + 0x0520)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA4_STATUS_ADDR
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA4_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA4_PRC_LENGTH (0x74030000 + 0x0524)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA4_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA4_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA4_SHARE_ACCESS (0x74030000 + 0x0528)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA4_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA4_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA5_SRCPARAM (0x74030000 + 0x0540)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA5_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA5_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA5_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA5_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA5_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA5_DESTPARAM (0x74030000 + 0x0544)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA5_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA5_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA5_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA5_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA5_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA5_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA5_SRCADDR_L (0x74030000 + 0x0548)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA5_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA5_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA5_SRCADDR_H (0x74030000 + 0x054C)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA5_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA5_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA5_DESTADDR_L (0x74030000 + 0x0550)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA5_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA5_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA5_DESTADDR_H (0x74030000 + 0x0554)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA5_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA5_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA5_LENGTH (0x74030000 + 0x0558)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA5_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA5_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA5_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA5_CONTROL (0x74030000 + 0x055C)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA5_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA5_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA5_STATUS (0x74030000 + 0x0560)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA5_STATUS_ADDR
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA5_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA5_PRC_LENGTH (0x74030000 + 0x0564)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA5_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA5_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA5_SHARE_ACCESS (0x74030000 + 0x0568)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA5_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA5_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA6_SRCPARAM (0x74030000 + 0x0580)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA6_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA6_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA6_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA6_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA6_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA6_DESTPARAM (0x74030000 + 0x0584)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA6_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA6_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA6_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA6_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA6_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA6_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA6_SRCADDR_L (0x74030000 + 0x0588)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA6_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA6_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA6_SRCADDR_H (0x74030000 + 0x058C)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA6_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA6_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA6_DESTADDR_L (0x74030000 + 0x0590)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA6_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA6_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA6_DESTADDR_H (0x74030000 + 0x0594)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA6_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA6_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA6_LENGTH (0x74030000 + 0x0598)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA6_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA6_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA6_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA6_CONTROL (0x74030000 + 0x059C)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA6_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA6_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA6_STATUS (0x74030000 + 0x05A0)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA6_STATUS_ADDR
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA6_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA6_PRC_LENGTH (0x74030000 + 0x05A4)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA6_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA6_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA6_SHARE_ACCESS (0x74030000 + 0x05A8)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA6_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA6_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---DMA7_SRCPARAM (0x74030000 + 0x05C0)---

    SRC_ID[3..0]                 - (RW) DMA_SRCPARAM is used to configure the source of the DMA Transfer.
                                     Bit [3:0]: SRC_ID: defines the Source interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SRCPARAM_TRSF_PARAM_ADDR            PCIE_MAC_IREG_DMA7_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_SRCPARAM_TRSF_PARAM_MASK            0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA7_SRCPARAM_TRSF_PARAM_SHFT            16
#define PCIE_MAC_IREG_DMA7_SRCPARAM_SRC_ID_ADDR                PCIE_MAC_IREG_DMA7_SRCPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_SRCPARAM_SRC_ID_MASK                0x0000000F                // SRC_ID[3..0]
#define PCIE_MAC_IREG_DMA7_SRCPARAM_SRC_ID_SHFT                0

/* =====================================================================================

  ---DMA7_DESTPARAM (0x74030000 + 0x05C4)---

    DEST_ID[3..0]                - (RW) DMA_DESTPARAM is used to configure the destination of the DMA Transfer.
                                     Bit [3:0]: DEST_ID : defines the Destination interface ID of the DMA Transfer:
                                     0x0:PCIe Interface
                                     0x4-0x7:AXI Master Interfcae 0-3
                                     0x8-0xB:AXI Stream interface 0-3
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) Transfer parameter : provides the Transfer Parameters (see Section 8.2). Its content depends on the value of SRC_ID.
                                     PCIe Interface 0x0 :
                                      - Bit [11]: reserved
                                      - Bit [10:8]: Traffic Class
                                      - Bit [7]: ECRC Forward
                                      - Bit [6]: EP
                                      - Bit [5:4]: Attr
                                      - Bit [3]: reserved
                                      - Bit [2:0]: TLP Type:
                                           0x0: Memory
                                           0x1: Memory Locked
                                           0x2: IO
                                           0x4: Message
                                     AXI4-Master Interface 0x4 - 0x7 :
                                      - Bit [11:8]: AQOS
                                      - Bit [7:5]: APROT
                                      - Bit [4]: ALOCK
                                      - Bit [3:0]: ACACHE
                                     AXI4-Stream Interface 0x8 - 0xB :
                                      - Bit [11:8]: TDEST
                                      - Bit [7:0]: TID
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_DESTPARAM_TRSF_PARAM_ADDR           PCIE_MAC_IREG_DMA7_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_DESTPARAM_TRSF_PARAM_MASK           0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_DMA7_DESTPARAM_TRSF_PARAM_SHFT           16
#define PCIE_MAC_IREG_DMA7_DESTPARAM_DEST_ID_ADDR              PCIE_MAC_IREG_DMA7_DESTPARAM_ADDR
#define PCIE_MAC_IREG_DMA7_DESTPARAM_DEST_ID_MASK              0x0000000F                // DEST_ID[3..0]
#define PCIE_MAC_IREG_DMA7_DESTPARAM_DEST_ID_SHFT              0

/* =====================================================================================

  ---DMA7_SRCADDR_L (0x74030000 + 0x05C8)---

    DMA_SRCADDR_L[31..0]         - (RW) Source Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_DMA_SRCADDR_L_ADDR        PCIE_MAC_IREG_DMA7_SRCADDR_L_ADDR
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_DMA_SRCADDR_L_MASK        0xFFFFFFFF                // DMA_SRCADDR_L[31..0]
#define PCIE_MAC_IREG_DMA7_SRCADDR_L_DMA_SRCADDR_L_SHFT        0

/* =====================================================================================

  ---DMA7_SRCADDR_H (0x74030000 + 0x05CC)---

    DMA_SRCADDR_H[31..0]         - (RW) Source Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_DMA_SRCADDR_H_ADDR        PCIE_MAC_IREG_DMA7_SRCADDR_H_ADDR
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_DMA_SRCADDR_H_MASK        0xFFFFFFFF                // DMA_SRCADDR_H[31..0]
#define PCIE_MAC_IREG_DMA7_SRCADDR_H_DMA_SRCADDR_H_SHFT        0

/* =====================================================================================

  ---DMA7_DESTADDR_L (0x74030000 + 0x05D0)---

    DMA_DESTADDR_L[31..0]        - (RW) Destination Address [31:0]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_DMA_DESTADDR_L_ADDR      PCIE_MAC_IREG_DMA7_DESTADDR_L_ADDR
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_DMA_DESTADDR_L_MASK      0xFFFFFFFF                // DMA_DESTADDR_L[31..0]
#define PCIE_MAC_IREG_DMA7_DESTADDR_L_DMA_DESTADDR_L_SHFT      0

/* =====================================================================================

  ---DMA7_DESTADDR_H (0x74030000 + 0x05D4)---

    DMA_DESTADDR_H[31..0]        - (RW) Destination Address [63:32]:
                                     These registers provide the starting source and destination address of the DMA Transfer (if relevant). 
                                     If the actual source and destination address are less than 64-bits, MSB bits are ignored.
                                       - When SG mode is enabled for the source (see DMA_CONTROL and DMA_LENGTH registers), DMA_SRCADDR provides the address of the first Source descriptor.
                                       - When SG mode is enabled for the destination, DMA_DESTADDR provides the address of the first Destination descriptor.
                                     Note that when SG Type Field is equal to 0x3, DMA_DESTADDR is irrelevant as it is identical to DMA_SRCADDR.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_DMA_DESTADDR_H_ADDR      PCIE_MAC_IREG_DMA7_DESTADDR_H_ADDR
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_DMA_DESTADDR_H_MASK      0xFFFFFFFF                // DMA_DESTADDR_H[31..0]
#define PCIE_MAC_IREG_DMA7_DESTADDR_H_DMA_DESTADDR_H_SHFT      0

/* =====================================================================================

  ---DMA7_LENGTH (0x74030000 + 0x05D8)---

    DMA_Length[31..0]            - (RW) DMA Length: 
                                     DMA_LENGTH Register provides the amount of data in bytes (up to 4GB) that should be transferred from the Source to the Destination. 
                                     If Bit 1 of the SE_COND Field is cleared, this value is only indicative and will be used to compute Bit 0 of the STATUS Field of the DMA_STATUS register.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_LENGTH_DMA_Length_ADDR              PCIE_MAC_IREG_DMA7_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA7_LENGTH_DMA_Length_MASK              0xFFFFFFFF                // DMA_Length[31..0]
#define PCIE_MAC_IREG_DMA7_LENGTH_DMA_Length_SHFT              0

/* =====================================================================================

  ---DMA7_CONTROL (0x74030000 + 0x05DC)---

    DMA_CTRL[3..0]               - (RW) Bit [3:0]: CTRL: provides the basic controls of the DMA
                                     Bit [0]: Start/Abort  : When set to 1b, it launches the DMA transfer; appropriate registers should have previously been set. 
                                     This bit is automatically cleared by the DMA Engine at the end of the DMA transfer. If the transfer is not ended and a user sets it to 0, the transfer is aborted. 
                                     Bit [1]: Pause/Resume: optional bit to enable a DMA transfer to be paused (to temporarily give more bandwidth to a transfer with higher priority). 
                                     Bit [2]: reserved  
                                     Bit [3]: enables SG mode. When this register field is not hardwired by Core Constants, it is read/write and its default value after reset is 0b
    DMA_SE_COND[7..4]            - (RW) SE_COND: defines the Start and End conditions of the DMA.  
                                     Bit 4: reserved.
                                     Bit 5: Stop if DMA_LENGTH is reached.  
                                     Bit 6: If the source of the DMA is an AXI-Stream Interface, stop the DMA if the source of the transfer reports an EOP condition (TLAST received).
                                     If the DMA destination is an AXI-Stream Interface, generate an EOP at the end of the DMA (TLAST generation).
                                     Note: If this bit is equal to 0, the Core will generate a TLAST every PCIe maxpayload bytes to prevent possible AXI interconnect arbitration issues.
                                     Bit 7: Abort on error condition (otherwise erroneous packet or descriptor is considered as processed, but the error is logged in source and/or destination error fields).
                                     Note that if bits [7:5] SE_COND Field are 0, a DMA transfer can only stop on a user abort or if SG mode is enabled and an End Of Chain is received.
    DMA_IRQ[11..8]               - (RW) IRQ: defines when an interrupt should be issued.
                                     Bit 8: an IRQ is issued on a DMA end. 
                                     Bit 9: an IRQ is issued if an error occurs.
                                     Bit 10: an IRQ is issued if the source of the transfer reports an EOP condition. 
                                     Bit 11: reserved
                                     Note that if IRQ is set to 0, no interrupt will be issued.
    DMA_IRQ_ID[13..12]           - (RW) IRQ_ID: defines on which interface DMA transfer events should be reported.
                                     Bit 12: interrupt is issued to the Local Processor (on AXI domain). 
                                     Bit 13: interrupt is issued to the Host Processor (on PCIe domain). 
                                     Note that both these bits cannot be set to 1 at the same time; to generate an interruption on both sides, you must enable interrupts
                                     on the AXI side, and use LOCAL_INTERRUPT_IN0 to generate interrupts on the PCIe side (see Chapter 12).
                                     If a DMA transfer event occurs, it is reported to ISTATUS_HOST and/or ISTATUS_LOCAL registers (see the ISTATUS register), depending on the IRQ_ID content.
    RESERVED14[14]               - (RO) Reserved bits
    DMA_SG_PERF[15]              - (RW) SG_PERF :
                                     Set to 1 to enhance the SG DMA performance. Cascade two short packets in the middle of a transfer to a maximum payload size packet.
    DMA_DESC_TC[18..16]          - (RW) DESC_TC :
                                     The traffic class in TLP to transfer the DMA channel Descriptor.
    RESERVED19[22..19]           - (RO) Reserved bits
    DMA_DESC_UPDT[23]            - (RW) DESC_UPDT :
                                     set to 1 by the application to indicate to the DMA Engine that a Descriptor has been updated. 
                                     It is only relevant when SG mode is enabled and the DESC_RDY field was set to 0 (see DESC_RDY). 
                                     This bit is automatically cleared by the DMA Engine.
    DMA_SG_TYPE[25..24]          - (RW) SG_TYPE:  defines the Scatter-Gather type for the DMA (only relevant if bit 3 of CTRL Field is set). 
                                     0x0: independent SG for both Source and Destination 
                                     0x1: Source address is set according to Descriptor, Destination address is incremented 
                                     0x2: Destination address is set according to Descriptor, Source address is incremented 
                                     0x3: Source and Destination addresses are set according to Descriptor
    DMA_SG_ID[28..26]            - (RW) SG_ID:  define on which interface the descriptors should be read.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3
    DMA_SG2_ID[31..29]           - (RW) SG2_ID: as for SG_ID.
                                     0x0: PCIe Interface 
                                     0x3: AXI4-Master Descriptor Interface 
                                     0x4 -0x7: AXI4-Master Interface Number 0-3 
                                     Note that if SG_TYPE is set to 0, SG_ID is connected to the Source and SG2_ID is connected to the Destination. 
                                     Otherwise, SG_ID is connected to the Source and/or Destination, and SG2_ID is irrelevant.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG2_ID_ADDR             PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG2_ID_MASK             0xE0000000                // DMA_SG2_ID[31..29]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG2_ID_SHFT             29
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_ID_ADDR              PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_ID_MASK              0x1C000000                // DMA_SG_ID[28..26]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_ID_SHFT              26
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_TYPE_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_TYPE_MASK            0x03000000                // DMA_SG_TYPE[25..24]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_TYPE_SHFT            24
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_UPDT_ADDR          PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_UPDT_MASK          0x00800000                // DMA_DESC_UPDT[23]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_UPDT_SHFT          23
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_TC_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_TC_MASK            0x00070000                // DMA_DESC_TC[18..16]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_DESC_TC_SHFT            16
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_PERF_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_PERF_MASK            0x00008000                // DMA_SG_PERF[15]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SG_PERF_SHFT            15
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ID_ADDR             PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ID_MASK             0x00003000                // DMA_IRQ_ID[13..12]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ID_SHFT             12
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_ADDR                PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_MASK                0x00000F00                // DMA_IRQ[11..8]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_IRQ_SHFT                8
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SE_COND_ADDR            PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SE_COND_MASK            0x000000F0                // DMA_SE_COND[7..4]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_SE_COND_SHFT            4
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_CTRL_ADDR               PCIE_MAC_IREG_DMA7_CONTROL_ADDR
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_CTRL_MASK               0x0000000F                // DMA_CTRL[3..0]
#define PCIE_MAC_IREG_DMA7_CONTROL_DMA_CTRL_SHFT               0

/* =====================================================================================

  ---DMA7_STATUS (0x74030000 + 0x05E0)---

    DMA_STATUS[7..0]             - (RO) Bit [7:0]: STATUS: 
                                     Bit 0: DMA Complete with DMA_LENGTH reached 
                                     Bit 1: DMA Complete with an EOP condition reported by the source of the transfer 
                                     Bit 2: DMA Complete with EOC received on last descriptor (if relevant)  
                                     Bit 3: DMA Complete with Error 
                                     Bit 4: DMA Complete with more than 4GBytes of data transferred  
                                     Bit 5: reserved  
                                     Bit 6: DMA successfully stopped by user  
                                     Bit 7: DMA incorrectly ended (buffer or descriptor not released). 
                                     Note that if DMA ends because of an error, the Error Status field will be something other than 0x0. 
                                     This field is automatically cleared when Bit 0 of Control Field is set to 1b.
    DMA_SRC_ERROR[15..8]         - (RO) Bit [8]: Completion Timeout
                                     Bit [9]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [10]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [11]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error; Data error reported by the AXI Application if on AXI domain.
                                     Bits [12:15]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    DMA_DEST_ERROR[23..16]       - (RO) Bit [16]: Completion Timeout
                                     Bit [17]: CA received if on PCIe domain, DECERR received if on AXI domain
                                     Bit [18]: UR or EP received if on PCIe domain, SLVERR response received if on AXI domain
                                     Bit [19]: ECRC received if on PCIe domain, PCIe Controller or Bridge Memory Error;  Data error reported by the AXI Application if on AXI domain.
                                     Bits [23:16]: reserved
                                     These Fields are automatically cleared when Bit 0 of the Controlfield is set to 1b.
    RESERVED24[27..24]           - (RO) Reserved bits
    DMA_BUSY[28]                 - (RO) DMA state machine is not idle
    RESERVED29[29]               - (RO) Reserved bits
    DMA_EODESC_EVENT[30]         - (RO) End of Descriptor Event
    DMA_REPORT[31]               - (RO) DMA state machine is report state.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_REPORT_ADDR              PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_REPORT_MASK              0x80000000                // DMA_REPORT[31]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_REPORT_SHFT              31
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_EODESC_EVENT_ADDR        PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_EODESC_EVENT_MASK        0x40000000                // DMA_EODESC_EVENT[30]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_EODESC_EVENT_SHFT        30
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_BUSY_ADDR                PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_BUSY_MASK                0x10000000                // DMA_BUSY[28]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_BUSY_SHFT                28
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_DEST_ERROR_ADDR          PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_DEST_ERROR_MASK          0x00FF0000                // DMA_DEST_ERROR[23..16]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_DEST_ERROR_SHFT          16
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_SRC_ERROR_ADDR           PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_SRC_ERROR_MASK           0x0000FF00                // DMA_SRC_ERROR[15..8]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_SRC_ERROR_SHFT           8
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_STATUS_ADDR              PCIE_MAC_IREG_DMA7_STATUS_ADDR
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_STATUS_MASK              0x000000FF                // DMA_STATUS[7..0]
#define PCIE_MAC_IREG_DMA7_STATUS_DMA_STATUS_SHFT              0

/* =====================================================================================

  ---DMA7_PRC_LENGTH (0x74030000 + 0x05E4)---

    DMA_PRC_LENGTH[31..0]        - (RO) DMA_PRC_LENGTH: 
                                     this 32-bit register provides the amount of data in bytes actually transferred from the Source to the Destination. 
                                     It is only relevant if Bit 4 of the STATUS Field is cleared.

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_DMA_PRC_LENGTH_ADDR      PCIE_MAC_IREG_DMA7_PRC_LENGTH_ADDR
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_DMA_PRC_LENGTH_MASK      0xFFFFFFFF                // DMA_PRC_LENGTH[31..0]
#define PCIE_MAC_IREG_DMA7_PRC_LENGTH_DMA_PRC_LENGTH_SHFT      0

/* =====================================================================================

  ---DMA7_SHARE_ACCESS (0x74030000 + 0x05E8)---

    DMA_ACC_LOCK[0]              - (RW) DMA Access Locked: 
                                     When set to 1, write access to the DMA Engine registers is restricted to the Physical or Virtual Function identified by Bits [10:4]. 
                                     Otherwise all functions are allowed write access.
    DMA_ACC_GRANT[1]             - (RO) DMA Access Granted: 
                                     Returns 1 when read by the Physical or Virtual Functions identified by Bits [10:4] or when DMA Access Locked is set to 0. Otherwise, it returns 0.
    RESERVED2[3..2]              - (RO) Reserved bits
    DMA_VF_NUM[10..4]            - (RO) Virtual function number (1 - 127): 
                                     If 0, then a physical function is targeted. These bits are only available if virtual functions are implemented.
    DMA_PF_NUM[15..11]           - (RO) Physical function number (0 - 7). 
                                     These bits are only available if multiple physical functions are implemented.
    RESERVED16[31..16]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_PF_NUM_ADDR        PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_PF_NUM_MASK        0x0000F800                // DMA_PF_NUM[15..11]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_PF_NUM_SHFT        11
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_VF_NUM_ADDR        PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_VF_NUM_MASK        0x000007F0                // DMA_VF_NUM[10..4]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_VF_NUM_SHFT        4
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_GRANT_ADDR     PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_GRANT_MASK     0x00000002                // DMA_ACC_GRANT[1]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_GRANT_SHFT     1
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_LOCK_ADDR      PCIE_MAC_IREG_DMA7_SHARE_ACCESS_ADDR
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_LOCK_MASK      0x00000001                // DMA_ACC_LOCK[0]
#define PCIE_MAC_IREG_DMA7_SHARE_ACCESS_DMA_ACC_LOCK_SHFT      0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0600)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_SRC_ADDR_MSB (0x74030000 + 0x0604)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB (0x74030000 + 0x0608)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB (0x74030000 + 0x060C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_PARAM (0x74030000 + 0x0610)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_MASK_LSB (0x74030000 + 0x0618)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T0_TRSL_MASK_MSB (0x74030000 + 0x061C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0620)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_SRC_ADDR_MSB (0x74030000 + 0x0624)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB (0x74030000 + 0x0628)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB (0x74030000 + 0x062C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_PARAM (0x74030000 + 0x0630)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_MASK_LSB (0x74030000 + 0x0638)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T1_TRSL_MASK_MSB (0x74030000 + 0x063C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0640)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_SRC_ADDR_MSB (0x74030000 + 0x0644)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB (0x74030000 + 0x0648)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB (0x74030000 + 0x064C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_PARAM (0x74030000 + 0x0650)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_MASK_LSB (0x74030000 + 0x0658)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T2_TRSL_MASK_MSB (0x74030000 + 0x065C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0660)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_SRC_ADDR_MSB (0x74030000 + 0x0664)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB (0x74030000 + 0x0668)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB (0x74030000 + 0x066C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_PARAM (0x74030000 + 0x0670)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_MASK_LSB (0x74030000 + 0x0678)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T3_TRSL_MASK_MSB (0x74030000 + 0x067C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0680)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_SRC_ADDR_MSB (0x74030000 + 0x0684)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB (0x74030000 + 0x0688)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB (0x74030000 + 0x068C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_PARAM (0x74030000 + 0x0690)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_MASK_LSB (0x74030000 + 0x0698)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T4_TRSL_MASK_MSB (0x74030000 + 0x069C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x06A0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_SRC_ADDR_MSB (0x74030000 + 0x06A4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB (0x74030000 + 0x06A8)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB (0x74030000 + 0x06AC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_PARAM (0x74030000 + 0x06B0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_MASK_LSB (0x74030000 + 0x06B8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T5_TRSL_MASK_MSB (0x74030000 + 0x06BC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x06C0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_SRC_ADDR_MSB (0x74030000 + 0x06C4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB (0x74030000 + 0x06C8)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB (0x74030000 + 0x06CC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_PARAM (0x74030000 + 0x06D0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_MASK_LSB (0x74030000 + 0x06D8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T6_TRSL_MASK_MSB (0x74030000 + 0x06DC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x06E0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_SRC_ADDR_MSB (0x74030000 + 0x06E4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB (0x74030000 + 0x06E8)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB (0x74030000 + 0x06EC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_PARAM (0x74030000 + 0x06F0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_MASK_LSB (0x74030000 + 0x06F8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN0_T7_TRSL_MASK_MSB (0x74030000 + 0x06FC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0700)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_SRC_ADDR_MSB (0x74030000 + 0x0704)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB (0x74030000 + 0x0708)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB (0x74030000 + 0x070C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_PARAM (0x74030000 + 0x0710)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_MASK_LSB (0x74030000 + 0x0718)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T0_TRSL_MASK_MSB (0x74030000 + 0x071C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0720)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_SRC_ADDR_MSB (0x74030000 + 0x0724)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB (0x74030000 + 0x0728)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB (0x74030000 + 0x072C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_PARAM (0x74030000 + 0x0730)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_MASK_LSB (0x74030000 + 0x0738)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T1_TRSL_MASK_MSB (0x74030000 + 0x073C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0740)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_SRC_ADDR_MSB (0x74030000 + 0x0744)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB (0x74030000 + 0x0748)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB (0x74030000 + 0x074C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_PARAM (0x74030000 + 0x0750)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_MASK_LSB (0x74030000 + 0x0758)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T2_TRSL_MASK_MSB (0x74030000 + 0x075C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0760)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_SRC_ADDR_MSB (0x74030000 + 0x0764)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB (0x74030000 + 0x0768)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB (0x74030000 + 0x076C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_PARAM (0x74030000 + 0x0770)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_MASK_LSB (0x74030000 + 0x0778)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T3_TRSL_MASK_MSB (0x74030000 + 0x077C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0780)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_SRC_ADDR_MSB (0x74030000 + 0x0784)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB (0x74030000 + 0x0788)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB (0x74030000 + 0x078C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_PARAM (0x74030000 + 0x0660)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_MASK_LSB (0x74030000 + 0x0668)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T4_TRSL_MASK_MSB (0x74030000 + 0x066C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x07A0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_SRC_ADDR_MSB (0x74030000 + 0x07A4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB (0x74030000 + 0x07A8)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB (0x74030000 + 0x07AC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_PARAM (0x74030000 + 0x07B0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_MASK_LSB (0x74030000 + 0x07B8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T5_TRSL_MASK_MSB (0x74030000 + 0x07BC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x07C0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_SRC_ADDR_MSB (0x74030000 + 0x07C4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB (0x74030000 + 0x07C8)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB (0x74030000 + 0x07CC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_PARAM (0x74030000 + 0x07D0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_MASK_LSB (0x74030000 + 0x07D8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T6_TRSL_MASK_MSB (0x74030000 + 0x07DC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x07E0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_SRC_ADDR_MSB (0x74030000 + 0x07E4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB (0x74030000 + 0x07E8)---

    SRC_BAR[3..0]                - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source BAR.
                                     Valid Value : 
                                     0 : BAR01
                                     2 : BAR23
                                     4 : BAR45
    SRC_FUNC[8..4]               - (RW) For Custom BAR setting.
                                     IF Define Custom BAR in HW Configuration setting, Address Translate Table would compare source Function
                                     Valid Value : 
                                     0 : Function 0
                                     1 : Function 1
                                     2 : Function 2
                                     3 : Function 3
                                     4 : Function 4
                                     5 : Function 5
                                     6 : Function 6
                                     7 : Function 7
    RESERVED9[11..9]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_FUNC_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_FUNC_MASK 0x000001F0                // SRC_FUNC[8..4]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_FUNC_SHFT 4
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_BAR_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_BAR_MASK 0x0000000F                // SRC_BAR[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_LSB_SRC_BAR_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB (0x74030000 + 0x07EC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_PARAM (0x74030000 + 0x07F0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSL_ID_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSL_ID_MASK 0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_PARAM_TRSL_ID_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_MASK_LSB (0x74030000 + 0x07F8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_PCIE_WIN1_T7_TRSL_MASK_MSB (0x74030000 + 0x07FC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_PCIE_WIN1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0800)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_SRC_ADDR_MSB (0x74030000 + 0x0804)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_ADDR_LSB (0x74030000 + 0x0808)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_ADDR_MSB (0x74030000 + 0x080C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_PARAM (0x74030000 + 0x0810)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_MASK_LSB (0x74030000 + 0x0818)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T0_TRSL_MASK_MSB (0x74030000 + 0x081C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0820)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_SRC_ADDR_MSB (0x74030000 + 0x0824)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_ADDR_LSB (0x74030000 + 0x0828)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_ADDR_MSB (0x74030000 + 0x082C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_PARAM (0x74030000 + 0x0830)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_MASK_LSB (0x74030000 + 0x0838)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T1_TRSL_MASK_MSB (0x74030000 + 0x083C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0840)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_SRC_ADDR_MSB (0x74030000 + 0x0844)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_ADDR_LSB (0x74030000 + 0x0848)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_ADDR_MSB (0x74030000 + 0x084C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_PARAM (0x74030000 + 0x0850)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_MASK_LSB (0x74030000 + 0x0858)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T2_TRSL_MASK_MSB (0x74030000 + 0x085C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0860)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_SRC_ADDR_MSB (0x74030000 + 0x0864)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_ADDR_LSB (0x74030000 + 0x0868)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_ADDR_MSB (0x74030000 + 0x086C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_PARAM (0x74030000 + 0x0870)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_MASK_LSB (0x74030000 + 0x0878)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T3_TRSL_MASK_MSB (0x74030000 + 0x087C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0880)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_SRC_ADDR_MSB (0x74030000 + 0x0884)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_ADDR_LSB (0x74030000 + 0x0888)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_ADDR_MSB (0x74030000 + 0x088C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_PARAM (0x74030000 + 0x0890)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_MASK_LSB (0x74030000 + 0x0898)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T4_TRSL_MASK_MSB (0x74030000 + 0x089C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x08A0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_SRC_ADDR_MSB (0x74030000 + 0x08A4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_ADDR_LSB (0x74030000 + 0x08A8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_ADDR_MSB (0x74030000 + 0x08AC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_PARAM (0x74030000 + 0x08B0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_MASK_LSB (0x74030000 + 0x08B8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T5_TRSL_MASK_MSB (0x74030000 + 0x08BC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x08C0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_SRC_ADDR_MSB (0x74030000 + 0x08C4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_ADDR_LSB (0x74030000 + 0x08C8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_ADDR_MSB (0x74030000 + 0x08CC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_PARAM (0x74030000 + 0x08D0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_MASK_LSB (0x74030000 + 0x08D8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T6_TRSL_MASK_MSB (0x74030000 + 0x08DC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x08E0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_SRC_ADDR_MSB (0x74030000 + 0x08E4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_ADDR_LSB (0x74030000 + 0x08E8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_ADDR_MSB (0x74030000 + 0x08EC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_PARAM (0x74030000 + 0x08F0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_MASK_LSB (0x74030000 + 0x08F8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV0_T7_TRSL_MASK_MSB (0x74030000 + 0x08FC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV0_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0900)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_SRC_ADDR_MSB (0x74030000 + 0x0904)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_ADDR_LSB (0x74030000 + 0x0908)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_ADDR_MSB (0x74030000 + 0x090C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_PARAM (0x74030000 + 0x0910)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_MASK_LSB (0x74030000 + 0x0918)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T0_TRSL_MASK_MSB (0x74030000 + 0x091C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0920)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_SRC_ADDR_MSB (0x74030000 + 0x0924)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_ADDR_LSB (0x74030000 + 0x0928)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_ADDR_MSB (0x74030000 + 0x092C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_PARAM (0x74030000 + 0x0930)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_MASK_LSB (0x74030000 + 0x0938)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T1_TRSL_MASK_MSB (0x74030000 + 0x093C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0940)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_SRC_ADDR_MSB (0x74030000 + 0x0944)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_ADDR_LSB (0x74030000 + 0x0948)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_ADDR_MSB (0x74030000 + 0x094C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_PARAM (0x74030000 + 0x0950)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_MASK_LSB (0x74030000 + 0x0958)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T2_TRSL_MASK_MSB (0x74030000 + 0x095C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0960)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_SRC_ADDR_MSB (0x74030000 + 0x0964)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_ADDR_LSB (0x74030000 + 0x0968)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_ADDR_MSB (0x74030000 + 0x096C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_PARAM (0x74030000 + 0x0970)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_MASK_LSB (0x74030000 + 0x0978)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T3_TRSL_MASK_MSB (0x74030000 + 0x097C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0980)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_SRC_ADDR_MSB (0x74030000 + 0x0984)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_ADDR_LSB (0x74030000 + 0x0988)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_ADDR_MSB (0x74030000 + 0x098C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_PARAM (0x74030000 + 0x0990)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_MASK_LSB (0x74030000 + 0x0998)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T4_TRSL_MASK_MSB (0x74030000 + 0x099C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x09A0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_SRC_ADDR_MSB (0x74030000 + 0x09A4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_ADDR_LSB (0x74030000 + 0x09A8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_ADDR_MSB (0x74030000 + 0x09AC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_PARAM (0x74030000 + 0x09B0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_MASK_LSB (0x74030000 + 0x09B8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T5_TRSL_MASK_MSB (0x74030000 + 0x09BC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x09C0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_SRC_ADDR_MSB (0x74030000 + 0x09C4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_ADDR_LSB (0x74030000 + 0x09C8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_ADDR_MSB (0x74030000 + 0x09CC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_PARAM (0x74030000 + 0x09D0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_MASK_LSB (0x74030000 + 0x09D8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T6_TRSL_MASK_MSB (0x74030000 + 0x09DC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x09E0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_SRC_ADDR_MSB (0x74030000 + 0x09E4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_ADDR_LSB (0x74030000 + 0x09E8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_ADDR_MSB (0x74030000 + 0x09EC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_PARAM (0x74030000 + 0x09F0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_MASK_LSB (0x74030000 + 0x09F8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV1_T7_TRSL_MASK_MSB (0x74030000 + 0x09FC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV1_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0A00)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_SRC_ADDR_MSB (0x74030000 + 0x0A04)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_ADDR_LSB (0x74030000 + 0x0A08)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_ADDR_MSB (0x74030000 + 0x0A0C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_PARAM (0x74030000 + 0x0A10)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_MASK_LSB (0x74030000 + 0x0A18)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T0_TRSL_MASK_MSB (0x74030000 + 0x0A1C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0A20)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_SRC_ADDR_MSB (0x74030000 + 0x0A24)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_ADDR_LSB (0x74030000 + 0x0A28)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_ADDR_MSB (0x74030000 + 0x0A2C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_PARAM (0x74030000 + 0x0A30)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_MASK_LSB (0x74030000 + 0x0A38)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T1_TRSL_MASK_MSB (0x74030000 + 0x0A3C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0A40)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_SRC_ADDR_MSB (0x74030000 + 0x0A44)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_ADDR_LSB (0x74030000 + 0x0A48)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_ADDR_MSB (0x74030000 + 0x0A4C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_PARAM (0x74030000 + 0x0A50)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_MASK_LSB (0x74030000 + 0x0A58)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T2_TRSL_MASK_MSB (0x74030000 + 0x0A5C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0A60)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_SRC_ADDR_MSB (0x74030000 + 0x0A64)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_ADDR_LSB (0x74030000 + 0x0A68)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_ADDR_MSB (0x74030000 + 0x0A6C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_PARAM (0x74030000 + 0x0A70)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_MASK_LSB (0x74030000 + 0x0A78)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T3_TRSL_MASK_MSB (0x74030000 + 0x0A7C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0A80)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_SRC_ADDR_MSB (0x74030000 + 0x0A84)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_ADDR_LSB (0x74030000 + 0x0A88)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_ADDR_MSB (0x74030000 + 0x0A8C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_PARAM (0x74030000 + 0x0A90)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_MASK_LSB (0x74030000 + 0x0A98)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T4_TRSL_MASK_MSB (0x74030000 + 0x0A9C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0AA0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_SRC_ADDR_MSB (0x74030000 + 0x0AA4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_ADDR_LSB (0x74030000 + 0x0AA8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_ADDR_MSB (0x74030000 + 0x0AAC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_PARAM (0x74030000 + 0x0AB0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_MASK_LSB (0x74030000 + 0x0AB8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T5_TRSL_MASK_MSB (0x74030000 + 0x0ABC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0AC0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_SRC_ADDR_MSB (0x74030000 + 0x0AC4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_ADDR_LSB (0x74030000 + 0x0AC8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_ADDR_MSB (0x74030000 + 0x0ACC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_PARAM (0x74030000 + 0x0AD0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_MASK_LSB (0x74030000 + 0x0AD8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T6_TRSL_MASK_MSB (0x74030000 + 0x0ADC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0AE0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_SRC_ADDR_MSB (0x74030000 + 0x0AE4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_ADDR_LSB (0x74030000 + 0x0AE8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_ADDR_MSB (0x74030000 + 0x0AEC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_PARAM (0x74030000 + 0x0AF0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_MASK_LSB (0x74030000 + 0x0AF8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV2_T7_TRSL_MASK_MSB (0x74030000 + 0x0AFC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV2_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0B00)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_SRC_ADDR_MSB (0x74030000 + 0x0B04)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_ADDR_LSB (0x74030000 + 0x0B08)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_ADDR_MSB (0x74030000 + 0x0B0C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_PARAM (0x74030000 + 0x0B10)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_MASK_LSB (0x74030000 + 0x0B18)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T0_TRSL_MASK_MSB (0x74030000 + 0x0B1C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T0_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0B20)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_SRC_ADDR_MSB (0x74030000 + 0x0B24)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_ADDR_LSB (0x74030000 + 0x0B28)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_ADDR_MSB (0x74030000 + 0x0B2C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_PARAM (0x74030000 + 0x0B30)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_MASK_LSB (0x74030000 + 0x0B38)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T1_TRSL_MASK_MSB (0x74030000 + 0x0B3C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T1_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0B40)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_SRC_ADDR_MSB (0x74030000 + 0x0B44)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_ADDR_LSB (0x74030000 + 0x0B48)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_ADDR_MSB (0x74030000 + 0x0B4C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_PARAM (0x74030000 + 0x0B50)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_MASK_LSB (0x74030000 + 0x0B58)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T2_TRSL_MASK_MSB (0x74030000 + 0x0B5C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T2_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0B60)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_SRC_ADDR_MSB (0x74030000 + 0x0B64)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_ADDR_LSB (0x74030000 + 0x0B68)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_ADDR_MSB (0x74030000 + 0x0B6C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_PARAM (0x74030000 + 0x0B70)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_MASK_LSB (0x74030000 + 0x0B78)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T3_TRSL_MASK_MSB (0x74030000 + 0x0B7C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T3_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0B80)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_SRC_ADDR_MSB (0x74030000 + 0x0B84)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_ADDR_LSB (0x74030000 + 0x0B88)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_ADDR_MSB (0x74030000 + 0x0B8C)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_PARAM (0x74030000 + 0x0B90)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_MASK_LSB (0x74030000 + 0x0B98)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T4_TRSL_MASK_MSB (0x74030000 + 0x0B9C)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T4_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0BA0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_SRC_ADDR_MSB (0x74030000 + 0x0BA4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_ADDR_LSB (0x74030000 + 0x0BA8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_ADDR_MSB (0x74030000 + 0x0BAC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_PARAM (0x74030000 + 0x0BB0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_MASK_LSB (0x74030000 + 0x0BB8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T5_TRSL_MASK_MSB (0x74030000 + 0x0BBC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T5_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0BC0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_SRC_ADDR_MSB (0x74030000 + 0x0BC4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_ADDR_LSB (0x74030000 + 0x0BC8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_ADDR_MSB (0x74030000 + 0x0BCC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_PARAM (0x74030000 + 0x0BD0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_MASK_LSB (0x74030000 + 0x0BD8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T6_TRSL_MASK_MSB (0x74030000 + 0x0BDC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T6_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB (0x74030000 + 0x0BE0)---

    ATR_IMPL[0]                  - (RW) Address Translate Register Implemented
                                     ATR_IMPL Field is 1 bit long. When set to 1, it indicates that the Translation Address Table is implemented.
    ATR_SIZE[6..1]               - (RW) Address Translate Space Size
                                     ATR_SIZE is 6 bits long and defines the Address Translation Space Size. This space size in bytes is equal to 2^(ATR_SIZE +1). Allowed values for this field are from 11 (2^12 = 4 KBytes) to 63 (2^64 = 16 ExaBytes) only.
    RESERVED7[11..7]             - (RO) Reserved bits
    SRC_ADDR_LSB[31..12]         - (RW) LSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_MASK 0xFFFFF000                // SRC_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_SRC_ADDR_LSB_SHFT 12
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_MASK 0x0000007E                // ATR_SIZE[6..1]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_SIZE_SHFT 1
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_MASK 0x00000001                // ATR_IMPL[0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_ATR_PARAM_SRC_ADDR_LSB_ATR_IMPL_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_SRC_ADDR_MSB (0x74030000 + 0x0BE4)---

    SRC_ADDR_MSB[31..0]          - (RW) MSB of SRC_ADDR
                                     Define the starting address of the address translation space.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_MASK 0xFFFFFFFF                // SRC_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_SRC_ADDR_MSB_SRC_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_ADDR_LSB (0x74030000 + 0x0BE8)---

    RESERVED0[11..0]             - (RO) Reserved bits
    TRSL_ADDR_LSB[31..12]        - (RW) LSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_MASK 0xFFFFF000                // TRSL_ADDR_LSB[31..12]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_LSB_TRSL_ADDR_LSB_SHFT 12

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_ADDR_MSB (0x74030000 + 0x0BEC)---

    TRSL_ADDR_MSB[31..0]         - (RW) MSB of TRSL_ADDR
                                     Define the starting translated address of the address translation space. SRC_ADDR and TRSL_ADDR are aligned on the Address Translation Space Size.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_MASK 0xFFFFFFFF                // TRSL_ADDR_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_ADDR_MSB_TRSL_ADDR_MSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_PARAM (0x74030000 + 0x0BF0)---

    TRSL_ID[3..0]                - (RW) TRSL_ID
                                     TRSL_ID is 4 bits long and defines the Translated ID of the request. The Completer ID Field of a read or write request to an address that targets the specified translation space will be converted to a TRSL_ID value.
    RESERVED4[15..4]             - (RO) Reserved bits
    TRSF_PARAM[27..16]           - (RW) TRSF_PARAM
                                     TRSF_PARAM is 12 bits long and provides the Translated Parameter of the request. The Transfer Parameter field of a read or write request to an address that targets this address translation space will be converted to the TRSF_PARAMETER value.
    RESERVED28[31..28]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSF_PARAM_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSF_PARAM_MASK 0x0FFF0000                // TRSF_PARAM[27..16]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSF_PARAM_SHFT 16
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSL_ID_ADDR  PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSL_ID_MASK  0x0000000F                // TRSL_ID[3..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_PARAM_TRSL_ID_SHFT  0

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_MASK_LSB (0x74030000 + 0x0BF8)---

    TRSL_MASK_LSB[31..0]         - (RO) LSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_MASK 0xFFFFFFFF                // TRSL_MASK_LSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_LSB_TRSL_MASK_LSB_SHFT 0

/* =====================================================================================

  ---ATR_AXI_SLV3_T7_TRSL_MASK_MSB (0x74030000 + 0x0BFC)---

    TRSL_MASK_MSB[31..0]         - (RO) MSB of TRSL_MASK
                                     Define the translation table mask address. It is equal to (0 - Table Size), where the table size is equal to 2^(ATR_SIZE +1).
                                     For example, if the table size is fixed to 256 KBytes, TRSL_MASK is equal to (0 - 256KBytes) = 0XFFFFFFFFFFFC0000.

 =====================================================================================*/
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_ADDR PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_ADDR
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_MASK 0xFFFFFFFF                // TRSL_MASK_MSB[31..0]
#define PCIE_MAC_IREG_ATR_AXI_SLV3_T7_TRSL_MASK_MSB_TRSL_MASK_MSB_SHFT 0

/* =====================================================================================

  ---IMSI_LO_ADDR_F0 (0x74030000 + 0x0C00)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F0_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F0_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F0 (0x74030000 + 0x0C04)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F0_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F0_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F0 (0x74030000 + 0x0C08)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F0_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F0_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F0_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F0_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F0 (0x74030000 + 0x0C0C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F0_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F0_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F0_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F0_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F1 (0x74030000 + 0x0C10)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F1_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F1_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F1 (0x74030000 + 0x0C14)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F1_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F1_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F1 (0x74030000 + 0x0C18)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F1_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F1_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F1_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F1_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F1 (0x74030000 + 0x0C1C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F1_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F1_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F1_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F1_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F2 (0x74030000 + 0x0C20)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F2_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F2_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F2 (0x74030000 + 0x0C24)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F2_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F2_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F2 (0x74030000 + 0x0C28)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F2_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F2_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F2_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F2_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F2 (0x74030000 + 0x0C2C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F2_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F2_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F2_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F2_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F3 (0x74030000 + 0x0C30)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F3_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F3_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F3 (0x74030000 + 0x0C34)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F3_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F3_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F3 (0x74030000 + 0x0C38)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F3_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F3_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F3_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F3_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F3 (0x74030000 + 0x0C3C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F3_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F3_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F3_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F3_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F4 (0x74030000 + 0x0C40)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F4_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F4_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F4 (0x74030000 + 0x0C44)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F4_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F4_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F4 (0x74030000 + 0x0C48)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F4_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F4_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F4_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F4_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F4 (0x74030000 + 0x0C4C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F4_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F4_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F4_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F4_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F5 (0x74030000 + 0x0C50)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F5_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F5_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F5 (0x74030000 + 0x0C54)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F5_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F5_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F5 (0x74030000 + 0x0C58)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F5_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F5_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F5_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F5_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F5 (0x74030000 + 0x0C5C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F5_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F5_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F5_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F5_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F6 (0x74030000 + 0x0C60)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F6_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F6_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F6 (0x74030000 + 0x0C64)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F6_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F6_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F6 (0x74030000 + 0x0C68)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F6_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F6_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F6_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F6_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F6 (0x74030000 + 0x0C6C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F6_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F6_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F6_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F6_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_LO_ADDR_F7 (0x74030000 + 0x0C70)---

    IMSI_LO_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture Low Address bit. The address need align DW address.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_IMSI_LO_ADDR_ADDR        PCIE_MAC_IREG_IMSI_LO_ADDR_F7_ADDR
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_IMSI_LO_ADDR_MASK        0xFFFFFFFF                // IMSI_LO_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_LO_ADDR_F7_IMSI_LO_ADDR_SHFT        0

/* =====================================================================================

  ---ISTATUS_MSI_F7 (0x74030000 + 0x0C74)---

    ISTATUS_MSI[31..0]           - (W1C) For RC only.
                                     MSI Message Status.
                                     Bits 31-0 are asserted when an MSI with message number 31-0 is received by the Rootport.
                                     The local processor must monitor and clear these bits: writing 1 clears a bit, 0 has no effect. 
                                     Note that MSI messages with numbers greater than 31 are ignored and discarded.

 =====================================================================================*/
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ISTATUS_MSI_ADDR          PCIE_MAC_IREG_ISTATUS_MSI_F7_ADDR
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ISTATUS_MSI_MASK          0xFFFFFFFF                // ISTATUS_MSI[31..0]
#define PCIE_MAC_IREG_ISTATUS_MSI_F7_ISTATUS_MSI_SHFT          0

/* =====================================================================================

  ---IMASK_MSI_F7 (0x74030000 + 0x0C78)---

    IMASK_MSI[31..0]             - (WO) For RC only.
                                     MSI Message Status Enable.
                                     Write 1 to the register bit would set MSI Message Status Enable bit.
                                     If MSI Message Status enable bit is 1 and corresponding MSI Message Status bit is also1, PCIe controller will generate MSI message reception status in 0x184.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMASK_MSI_F7_IMASK_MSI_ADDR              PCIE_MAC_IREG_IMASK_MSI_F7_ADDR
#define PCIE_MAC_IREG_IMASK_MSI_F7_IMASK_MSI_MASK              0xFFFFFFFF                // IMASK_MSI[31..0]
#define PCIE_MAC_IREG_IMASK_MSI_F7_IMASK_MSI_SHFT              0

/* =====================================================================================

  ---CLR_IMASK_MSI_F7 (0x74030000 + 0x0C7C)---

    CLR_IMASK_MSI[31..0]         - (WO) For RC only.
                                     Write 1 to the register bit would clear MSI Message Status Enable bit.

 =====================================================================================*/
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F7_CLR_IMASK_MSI_ADDR      PCIE_MAC_IREG_CLR_IMASK_MSI_F7_ADDR
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F7_CLR_IMASK_MSI_MASK      0xFFFFFFFF                // CLR_IMASK_MSI[31..0]
#define PCIE_MAC_IREG_CLR_IMASK_MSI_F7_CLR_IMASK_MSI_SHFT      0

/* =====================================================================================

  ---IMSI_HI_ADDR_F0 (0x74030000 + 0x0C80)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F0_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F0_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F1 (0x74030000 + 0x0C84)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F1_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F1_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F2 (0x74030000 + 0x0C88)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F2_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F2_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F3 (0x74030000 + 0x0C8C)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F3_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F3_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F4 (0x74030000 + 0x0C90)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F4_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F4_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F5 (0x74030000 + 0x0C94)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F5_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F5_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F6 (0x74030000 + 0x0C98)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F6_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F6_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---IMSI_HI_ADDR_F7 (0x74030000 + 0x0C9C)---

    IMSI_HI_ADDR[31..0]          - (RW) For RC only.
                                     MSI Capture High Address bit.
                                     Specifies the address on which incoming MSI messages are received when the PCIe is Rootport. 
                                     The Rootport captures all memory write operations at this address and treats them as MSI.
                                     The 32bit can be programmed by software.

 =====================================================================================*/
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_IMSI_HI_ADDR_ADDR        PCIE_MAC_IREG_IMSI_HI_ADDR_F7_ADDR
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_IMSI_HI_ADDR_MASK        0xFFFFFFFF                // IMSI_HI_ADDR[31..0]
#define PCIE_MAC_IREG_IMSI_HI_ADDR_F7_IMSI_HI_ADDR_SHFT        0

/* =====================================================================================

  ---PCIE_VC_CAP (0x74030000 + 0x0CA0)---

    VC_NUM[2..0]                 - (RO) Indicates the number of (extended) Virtual Channels in addition to the default VC supported by the device. This field is valid for all Functions.
                                     The minimum value of this field is 000b (for devices that only support the default VC). The maximum value is 7.
    RSVD1[3]                     - (RW) Reserved
    VC_LP_NUM[6..4]              - (RW) Indicates the number of (extended) Virtual Channels in addition to the default VC belonging to the low-priority VC (LPVC) group that has the lowest priority with respect to other VC resources in a strict-priority VC Arbitration. 
                                     This field is valid for all Functions.
                                     The minimum value of this field is 000b and the maximum value is Extended VC Count.
    RSVD2[23..7]                 - (RW) Reserved
    TC_EN[31..24]                - (RO) Indicates which TC is enabled.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CAP_TC_EN_ADDR                   PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_TC_EN_MASK                   0xFF000000                // TC_EN[31..24]
#define PCIE_MAC_IREG_PCIE_VC_CAP_TC_EN_SHFT                   24
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD2_ADDR                   PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD2_MASK                   0x00FFFF80                // RSVD2[23..7]
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD2_SHFT                   7
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_LP_NUM_ADDR               PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_LP_NUM_MASK               0x00000070                // VC_LP_NUM[6..4]
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_LP_NUM_SHFT               4
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD1_ADDR                   PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD1_MASK                   0x00000008                // RSVD1[3]
#define PCIE_MAC_IREG_PCIE_VC_CAP_RSVD1_SHFT                   3
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_NUM_ADDR                  PCIE_MAC_IREG_PCIE_VC_CAP_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_NUM_MASK                  0x00000007                // VC_NUM[2..0]
#define PCIE_MAC_IREG_PCIE_VC_CAP_VC_NUM_SHFT                  0

/* =====================================================================================

  ---PCIE_VC_CAP2 (0x74030000 + 0x0CA4)---

    TC_VC_MAP[23..0]             - (RO) This field indicates the TCs that are mapped to the VC resource. 
                                     Bit[2:0] : TC0 map to which VC resource.
                                     Bit[5:3] : TC1 map to which VC resource.
                                     .
                                     Bit[23:21] : TC7 map to which VC resource.
    VC_EN[31..24]                - (RO) Indicates which VC is enabled.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC_CAP2_VC_EN_ADDR                  PCIE_MAC_IREG_PCIE_VC_CAP2_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP2_VC_EN_MASK                  0xFF000000                // VC_EN[31..24]
#define PCIE_MAC_IREG_PCIE_VC_CAP2_VC_EN_SHFT                  24
#define PCIE_MAC_IREG_PCIE_VC_CAP2_TC_VC_MAP_ADDR              PCIE_MAC_IREG_PCIE_VC_CAP2_ADDR
#define PCIE_MAC_IREG_PCIE_VC_CAP2_TC_VC_MAP_MASK              0x00FFFFFF                // TC_VC_MAP[23..0]
#define PCIE_MAC_IREG_PCIE_VC_CAP2_TC_VC_MAP_SHFT              0

/* =====================================================================================

  ---PCIE_VC1_CRED_L (0x74030000 + 0x0CA8)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC1_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC1_CRED_H (0x74030000 + 0x0CAC)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC1_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC1_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_VC2_CRED_L (0x74030000 + 0x0CB0)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC2_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC2_CRED_H (0x74030000 + 0x0CB4)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC2_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC2_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_VC3_CRED_L (0x74030000 + 0x0CB8)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC3_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC3_CRED_H (0x74030000 + 0x0CBC)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC3_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC3_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_VC4_CRED_L (0x74030000 + 0x0CC0)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC4_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC4_CRED_H (0x74030000 + 0x0CC4)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC4_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC4_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_VC5_CRED_L (0x74030000 + 0x0CC8)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC5_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC5_CRED_H (0x74030000 + 0x0CCC)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC5_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC5_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_VC6_CRED_L (0x74030000 + 0x0CD0)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC6_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC6_CRED_H (0x74030000 + 0x0CD4)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC6_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC6_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_VC7_CRED_L (0x74030000 + 0x0CD8)---

    PH_credits[7..0]             - (RW) Posted Header Credits.
                                     PH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    PD_credits[19..8]            - (RW) Posted Data Credits.
                                     PD Credit value at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    NPH_credits[27..20]          - (RW) Non-Posted Header Credits.
                                     NPH Credit value at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    NPD_credits_L[31..28]        - (RW) Non-Posted Data Credits for lower 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPD_credits_L_ADDR       PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPD_credits_L_MASK       0xF0000000                // NPD_credits_L[31..28]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPD_credits_L_SHFT       28
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPH_credits_ADDR         PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPH_credits_MASK         0x0FF00000                // NPH_credits[27..20]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_NPH_credits_SHFT         20
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PD_credits_ADDR          PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PD_credits_MASK          0x000FFF00                // PD_credits[19..8]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PD_credits_SHFT          8
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PH_credits_ADDR          PCIE_MAC_IREG_PCIE_VC7_CRED_L_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PH_credits_MASK          0x000000FF                // PH_credits[7..0]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_L_PH_credits_SHFT          0

/* =====================================================================================

  ---PCIE_VC7_CRED_H (0x74030000 + 0x0CDC)---

    NPD_credits_H[3..0]          - (RW) Non-Posted Data Credits for upper 4 bit
                                     NPD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    CPLH_credits[11..4]          - (RW) Completion Header Credits.
                                     CplH Credit at InitFC.
                                     Unit : header number (header length may be 3DW ~ 5DW)
                                     All zero means infinite.
    CPLD_credits[23..12]         - (RW) Completion Data Credits.
                                     CplD Credit at InitFC.
                                     Unit : 4DW
                                     All zero means infinite.
    Post_scale[25..24]           - (RW) Posted credit scale
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    Non_Post_scale[27..26]       - (RW) Non-Posted credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    CPL_scale[29..28]            - (RW) Completion credit scale 
                                     (00: x1, 01: x4, 10: x16, 11: reserved)
    RSVD1[31..30]                - (RW) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_RSVD1_ADDR               PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_RSVD1_MASK               0xC0000000                // RSVD1[31..30]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_RSVD1_SHFT               30
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPL_scale_ADDR           PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPL_scale_MASK           0x30000000                // CPL_scale[29..28]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPL_scale_SHFT           28
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Non_Post_scale_ADDR      PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Non_Post_scale_MASK      0x0C000000                // Non_Post_scale[27..26]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Non_Post_scale_SHFT      26
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Post_scale_ADDR          PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Post_scale_MASK          0x03000000                // Post_scale[25..24]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_Post_scale_SHFT          24
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLD_credits_ADDR        PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLD_credits_MASK        0x00FFF000                // CPLD_credits[23..12]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLD_credits_SHFT        12
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLH_credits_ADDR        PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLH_credits_MASK        0x00000FF0                // CPLH_credits[11..4]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_CPLH_credits_SHFT        4
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_NPD_credits_H_ADDR       PCIE_MAC_IREG_PCIE_VC7_CRED_H_ADDR
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_NPD_credits_H_MASK       0x0000000F                // NPD_credits_H[3..0]
#define PCIE_MAC_IREG_PCIE_VC7_CRED_H_NPD_credits_H_SHFT       0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_0 (0x74030000 + 0x0CE0)---

    PCIE_RECEIVED_MESSAGE_0[31..0] - (RO) DW0 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_PCIE_RECEIVED_MESSAGE_0_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_PCIE_RECEIVED_MESSAGE_0_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_0[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_0_PCIE_RECEIVED_MESSAGE_0_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_1 (0x74030000 + 0x0CE4)---

    PCIE_RECEIVED_MESSAGE_1[31..0] - (RO) DW1 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_PCIE_RECEIVED_MESSAGE_1_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_PCIE_RECEIVED_MESSAGE_1_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_1[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_1_PCIE_RECEIVED_MESSAGE_1_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_2 (0x74030000 + 0x0CE8)---

    PCIE_RECEIVED_MESSAGE_2[31..0] - (RO) DW2 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_PCIE_RECEIVED_MESSAGE_2_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_PCIE_RECEIVED_MESSAGE_2_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_2[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_2_PCIE_RECEIVED_MESSAGE_2_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_3 (0x74030000 + 0x0CEC)---

    PCIE_RECEIVED_MESSAGE_3[31..0] - (RO) DW3 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_PCIE_RECEIVED_MESSAGE_3_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_PCIE_RECEIVED_MESSAGE_3_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_3[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_3_PCIE_RECEIVED_MESSAGE_3_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_4 (0x74030000 + 0x0CF0)---

    PCIE_RECEIVED_MESSAGE_4[31..0] - (RO) DW4 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_PCIE_RECEIVED_MESSAGE_4_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_PCIE_RECEIVED_MESSAGE_4_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_4[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_4_PCIE_RECEIVED_MESSAGE_4_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_5 (0x74030000 + 0x0CF4)---

    PCIE_RECEIVED_MESSAGE_5[31..0] - (RO) DW5 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_PCIE_RECEIVED_MESSAGE_5_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_PCIE_RECEIVED_MESSAGE_5_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_5[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_5_PCIE_RECEIVED_MESSAGE_5_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_6 (0x74030000 + 0x0CF8)---

    PCIE_RECEIVED_MESSAGE_6[31..0] - (RO) DW6 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_PCIE_RECEIVED_MESSAGE_6_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_PCIE_RECEIVED_MESSAGE_6_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_6[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_6_PCIE_RECEIVED_MESSAGE_6_SHFT 0

/* =====================================================================================

  ---PCIE_RECEIVED_MESSAGE_7 (0x74030000 + 0x0CFC)---

    PCIE_RECEIVED_MESSAGE_7[31..0] - (RO) DW7 of PCIe received Message TLP

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_PCIE_RECEIVED_MESSAGE_7_ADDR PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_ADDR
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_PCIE_RECEIVED_MESSAGE_7_MASK 0xFFFFFFFF                // PCIE_RECEIVED_MESSAGE_7[31..0]
#define PCIE_MAC_IREG_PCIE_RECEIVED_MESSAGE_7_PCIE_RECEIVED_MESSAGE_7_SHFT 0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_0 (0x74030000 + 0x0D00)---

    debug_dummy_0[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_debug_dummy_0_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_debug_dummy_0_MASK    0xFFFFFFFF                // debug_dummy_0[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_0_debug_dummy_0_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_1 (0x74030000 + 0x0D04)---

    debug_dummy_1[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_debug_dummy_1_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_debug_dummy_1_MASK    0xFFFFFFFF                // debug_dummy_1[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_1_debug_dummy_1_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_2 (0x74030000 + 0x0D08)---

    debug_dummy_2[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_debug_dummy_2_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_debug_dummy_2_MASK    0xFFFFFFFF                // debug_dummy_2[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_2_debug_dummy_2_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_3 (0x74030000 + 0x0D0C)---

    debug_dummy_3[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_debug_dummy_3_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_debug_dummy_3_MASK    0xFFFFFFFF                // debug_dummy_3[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_3_debug_dummy_3_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_4 (0x74030000 + 0x0D10)---

    debug_dummy_4[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_debug_dummy_4_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_debug_dummy_4_MASK    0xFFFFFFFF                // debug_dummy_4[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_4_debug_dummy_4_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_5 (0x74030000 + 0x0D14)---

    debug_dummy_5[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_debug_dummy_5_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_debug_dummy_5_MASK    0xFFFFFFFF                // debug_dummy_5[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_5_debug_dummy_5_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_6 (0x74030000 + 0x0D18)---

    debug_dummy_6[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_debug_dummy_6_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_debug_dummy_6_MASK    0xFFFFFFFF                // debug_dummy_6[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_6_debug_dummy_6_SHFT    0

/* =====================================================================================

  ---PCIE_DEBUG_DUMMY_7 (0x74030000 + 0x0D1C)---

    debug_dummy_7[31..0]         - (RW) Dummy Register for SA debug purpose.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_debug_dummy_7_ADDR    PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_ADDR
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_debug_dummy_7_MASK    0xFFFFFFFF                // debug_dummy_7[31..0]
#define PCIE_MAC_IREG_PCIE_DEBUG_DUMMY_7_debug_dummy_7_SHFT    0

/* =====================================================================================

  ---AXI_SLV_PERF_RD_STATUS_0 (0x74030000 + 0x0D20)---

    PCIE_OUTSTANDING_RD_CNT[6..0] - (RO) PCIE outstanding read command counts
    RSVD[31..7]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_RSVD_ADDR       PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_RSVD_MASK       0xFFFFFF80                // RSVD[31..7]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_RSVD_SHFT       7
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_RD_CNT_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_RD_CNT_MASK 0x0000007F                // PCIE_OUTSTANDING_RD_CNT[6..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_0_PCIE_OUTSTANDING_RD_CNT_SHFT 0

/* =====================================================================================

  ---AXI_SLV_PERF_RD_STATUS_1 (0x74030000 + 0x0D24)---

    CPLD_AVG_LATENCY[9..0]       - (W1C) Average Completion latency cycle
    RESERVED10[31..10]           - (RO) Reserved bits

 =====================================================================================*/
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_CPLD_AVG_LATENCY_ADDR PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_ADDR
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_CPLD_AVG_LATENCY_MASK 0x000003FF                // CPLD_AVG_LATENCY[9..0]
#define PCIE_MAC_IREG_AXI_SLV_PERF_RD_STATUS_1_CPLD_AVG_LATENCY_SHFT 0

/* =====================================================================================

  ---RSVD_D28 (0x74030000 + 0x0D28)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_RSVD_D28_RSVD_ADDR                       PCIE_MAC_IREG_RSVD_D28_ADDR
#define PCIE_MAC_IREG_RSVD_D28_RSVD_MASK                       0xFFFFFFFF                // RSVD[31..0]
#define PCIE_MAC_IREG_RSVD_D28_RSVD_SHFT                       0

/* =====================================================================================

  ---RSVD_D2C (0x74030000 + 0x0D2C)---

    RSVD[31..0]                  - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_RSVD_D2C_RSVD_ADDR                       PCIE_MAC_IREG_RSVD_D2C_ADDR
#define PCIE_MAC_IREG_RSVD_D2C_RSVD_MASK                       0xFFFFFFFF                // RSVD[31..0]
#define PCIE_MAC_IREG_RSVD_D2C_RSVD_SHFT                       0

/* =====================================================================================

  ---PCIE_TX_CREDIT_0 (0x74030000 + 0x0D30)---

    P_READY[0]                   - (RO) Posted Ready
                                     Asserted when there are enough credits to transmit at least one posted TLP with maximum payload size.
    PH_CRED[3..1]                - (RO) Posted Header Credits
                                     Indicate the number of PH credits.
                                     When 7 or more credits are available or when a component has received infinite credits at initialization, this vector is saturated at 7h.
    PD_CRED[15..4]               - (RO) Posted Data Credits
                                     Indicate the number of PD credits.
                                     When a component has received infinite credits, this vector is saturated at FFFh.
    CPL_READY[16]                - (RO) Completion Ready
                                     Asserted when there are enough credits to transmit at least one completion TLP with maximum payload size.
    CPLH_CRED[19..17]            - (RO) Completion Header Credits
                                     Indicate the number of CPLH credits.
                                     When 7 or more credits are available or when a component has received infinite credits at initialization, this vector is saturated at 7h.
    CPLD_CRED[31..20]            - (RO) Completion Data Credits
                                     Indicate the number of CPLD credits.
                                     When a component has received infinite credits, this vector is saturated at FFFh.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLD_CRED_ADDR          PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLD_CRED_MASK          0xFFF00000                // CPLD_CRED[31..20]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLD_CRED_SHFT          20
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLH_CRED_ADDR          PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLH_CRED_MASK          0x000E0000                // CPLH_CRED[19..17]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPLH_CRED_SHFT          17
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPL_READY_ADDR          PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPL_READY_MASK          0x00010000                // CPL_READY[16]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_CPL_READY_SHFT          16
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PD_CRED_ADDR            PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PD_CRED_MASK            0x0000FFF0                // PD_CRED[15..4]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PD_CRED_SHFT            4
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PH_CRED_ADDR            PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PH_CRED_MASK            0x0000000E                // PH_CRED[3..1]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_PH_CRED_SHFT            1
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_P_READY_ADDR            PCIE_MAC_IREG_PCIE_TX_CREDIT_0_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_P_READY_MASK            0x00000001                // P_READY[0]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_0_P_READY_SHFT            0

/* =====================================================================================

  ---PCIE_TX_CREDIT_1 (0x74030000 + 0x0D34)---

    NP_READY[0]                  - (RO) Non-Posted Ready
                                     Asserted when there are enough credits to transmit at least one non-posted TLP of maximum payload size.
    NPH_CRED[3..1]               - (RO) Non-Posted Header Credits
                                     Indicate the number of NPPH credits.
                                     When 7 or more credits are available or when a component has received infinite credits at initialization, this vector is saturated at 7h.
    NPD_CRED[6..4]               - (RO) Non-Posted Data Credits
                                     Indicate the number of NPPD credits.
                                     When a component has received infinite credits, this vector is saturated at 7h.
    RSVD1[31..7]                 - (RO) Reserved

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_RSVD1_ADDR              PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_RSVD1_MASK              0xFFFFFF80                // RSVD1[31..7]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_RSVD1_SHFT              7
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPD_CRED_ADDR           PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPD_CRED_MASK           0x00000070                // NPD_CRED[6..4]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPD_CRED_SHFT           4
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPH_CRED_ADDR           PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPH_CRED_MASK           0x0000000E                // NPH_CRED[3..1]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NPH_CRED_SHFT           1
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NP_READY_ADDR           PCIE_MAC_IREG_PCIE_TX_CREDIT_1_ADDR
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NP_READY_MASK           0x00000001                // NP_READY[0]
#define PCIE_MAC_IREG_PCIE_TX_CREDIT_1_NP_READY_SHFT           0

/* =====================================================================================

  ---PCIE_DLLP_HEADER_LOG_0 (0x74030000 + 0x0D38)---

    PCIE_DLLP_HEADER_LOG[31..0]  - (RO) LOG Error DLLP Header
                                     When an error DLLP received, log DLLP header here.

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_PCIE_DLLP_HEADER_LOG_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_PCIE_DLLP_HEADER_LOG_MASK 0xFFFFFFFF                // PCIE_DLLP_HEADER_LOG[31..0]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_0_PCIE_DLLP_HEADER_LOG_SHFT 0

/* =====================================================================================

  ---PCIE_DLLP_HEADER_LOG_1 (0x74030000 + 0x0D3C)---

    PCIE_DLLP_HEADER_LOG_1[7..0] - (W1C) LOG Error DLLP Header
                                     bit [3:0] asserted if DLLP is error
                                     bit [7:4] asserted if DLLP is unknown type
    PCIE_TXNAK_COUNT[15..8]      - (W1C) DUT Send NAK Counts
                                     Count when DUT sent NAK
    PCIE_REPLAYTIMOUT_COUNT[23..16] - (W1C) PCIe Replay Timeout Count
                                     Count when replay timeout happened
    PCIE_RXNAK_COUNT[31..24]     - (W1C) DUT Receive NAK Counts
                                     Count when DUT received NAK

 =====================================================================================*/
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_RXNAK_COUNT_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_RXNAK_COUNT_MASK 0xFF000000                // PCIE_RXNAK_COUNT[31..24]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_RXNAK_COUNT_SHFT 24
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_REPLAYTIMOUT_COUNT_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_REPLAYTIMOUT_COUNT_MASK 0x00FF0000                // PCIE_REPLAYTIMOUT_COUNT[23..16]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_REPLAYTIMOUT_COUNT_SHFT 16
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_TXNAK_COUNT_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_TXNAK_COUNT_MASK 0x0000FF00                // PCIE_TXNAK_COUNT[15..8]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_TXNAK_COUNT_SHFT 8
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_DLLP_HEADER_LOG_1_ADDR PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_ADDR
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_DLLP_HEADER_LOG_1_MASK 0x000000FF                // PCIE_DLLP_HEADER_LOG_1[7..0]
#define PCIE_MAC_IREG_PCIE_DLLP_HEADER_LOG_1_PCIE_DLLP_HEADER_LOG_1_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE0 (0x74030000 + 0x0D40)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE0_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE1 (0x74030000 + 0x0D44)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE1_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE2 (0x74030000 + 0x0D48)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE2_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE3 (0x74030000 + 0x0D4C)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE3_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE4 (0x74030000 + 0x0D50)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE4_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE5 (0x74030000 + 0x0D54)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE5_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE6 (0x74030000 + 0x0D58)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE6_p8b10b_error_count_SHFT 0

/* =====================================================================================

  ---PHY_ERR_DEBUG_LANE7 (0x74030000 + 0x0D5C)---

    p8b10b_error_count[6..0]     - (W1C) 8b10b_error_count
    p8b10b_error_count_ovf[7]    - (W1C) 8b10b_error_count_ovf
    p128b130b_error_count[14..8] - (W1C) 128b130b_error_count
    p128b130b_error_count_ovf[15] - (W1C) 128b130b_error_count_ovf
    mlfskp_error_count[22..16]   - (W1C) mlfskp_error_count
    mlfskp_error_count_ovf[23]   - (W1C) mlfskp_error_count_ovf
    skppraity_error_count[30..24] - (W1C) skppraity_error_count
    skpparity_error_count_ovf[31] - (W1C) skpparity_error_count_ovf

 =====================================================================================*/
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skpparity_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skpparity_error_count_ovf_MASK 0x80000000                // skpparity_error_count_ovf[31]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skpparity_error_count_ovf_SHFT 31
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skppraity_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skppraity_error_count_MASK 0x7F000000                // skppraity_error_count[30..24]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_skppraity_error_count_SHFT 24
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_error_count_ovf_MASK 0x00800000                // mlfskp_error_count_ovf[23]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_error_count_ovf_SHFT 23
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_error_count_MASK 0x007F0000                // mlfskp_error_count[22..16]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_mlfskp_error_count_SHFT 16
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_error_count_ovf_MASK 0x00008000                // p128b130b_error_count_ovf[15]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_error_count_ovf_SHFT 15
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_error_count_MASK 0x00007F00                // p128b130b_error_count[14..8]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p128b130b_error_count_SHFT 8
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_error_count_ovf_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_error_count_ovf_MASK 0x00000080                // p8b10b_error_count_ovf[7]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_error_count_ovf_SHFT 7
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_error_count_ADDR PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_ADDR
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_error_count_MASK 0x0000007F                // p8b10b_error_count[6..0]
#define PCIE_MAC_IREG_PHY_ERR_DEBUG_LANE7_p8b10b_error_count_SHFT 0

#ifdef __cplusplus
}
#endif

#endif // __PCIE_MAC_IREG_REGS_H__
